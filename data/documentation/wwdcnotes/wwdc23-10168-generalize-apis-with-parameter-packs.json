{"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Generalize APIs with parameter packs","role":"sampleCode","roleHeading":"WWDC23"},"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10168","type":"reference","isActive":true,"overridingTitle":"Watch Video (18 min)"},"kind":"sampleDownload"},"sections":[],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10168-Generalize-APIs-with-parameter-packs"},"abstract":[{"text":"Swift parameter packs are a powerful tool to expand what is possible in your generic code while also enabling you to simplify common generic patterns. We’ll show you how to abstract over types as well as the number of arguments in generic code and simplify common generic patterns to avoid overloads.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"This is an advanced talk. Deep understanding of Swift Generics and Variadics is required."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Feature introduced in Swift 5.9, Xcode 15."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"What Parameter Packs Solves","type":"heading","anchor":"What-Parameter-Packs-Solves","level":2},{"inlineContent":[{"text":"You can use variadics to pass a variable number of arguments to a function, but all arguments must be of the same type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Problem 1: you can’t pass a variable number of arguments of different types without using type erasure.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Problem 2: let’s say you want the return value of said function to be a tuple with the number of elements depending on the number of arguments that was passed in. You can’t do that either."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"What we lack with the generics system and variadic parameters is the ability to both preserve type information and vary the number of arguments. The only way to do this today is with overloading, which forces you to choose an upper bound of the number of arguments you support."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"tl;dr: remember "},{"code":"zip3(…)","type":"codeVoice"},{"type":"text","text":", "},{"code":"zip4(…)","type":"codeVoice"},{"type":"text","text":", "},{"code":"zip5(…)","type":"codeVoice"},{"type":"text","text":", "},{"code":"zip6(…)","type":"codeVoice"},{"type":"text","text":"…? Parameter packs solve that."}],"type":"paragraph"},{"text":"How to Read Parameter Packs (Introducing The New Syntax)","anchor":"How-to-Read-Parameter-Packs-Introducing-The-New-Syntax","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A type pack is a list of types. A value pack is a list of values."}],"type":"paragraph"},{"type":"codeListing","code":["func query<each Payload> \/\/ Example of a type parameter pack"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Naming convention: use the singular form after the keyword "},{"type":"codeVoice","code":"each"},{"type":"text","text":", e.g. "},{"type":"codeVoice","code":"each Payload"},{"type":"text","text":", instead of "},{"type":"codeVoice","code":"each Payloads"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"For the remaining of this section, I’ll paraphrase the presenter and their code examples, because the session video was spot on. If you have the chance, watch the session video from 06","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"45 to 08:27 to visualize the animated code examples, it’s worth it."}],"type":"paragraph"}]},{"inlineContent":[{"text":"Generic code that uses parameter packs can operate on each Payload individually using repetition patterns. A repetition pattern is expressed using the ‘repeat’ keyword, followed by a type called the pattern type. The pattern will contain one or more references to pack elements. ‘repeat’ indicates that the pattern type will be repeated for every element in the given argument pack. ‘each’ acts as a placeholder that is replaced with individual pack elements at every iteration:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["repeat Request<each Payload>"],"syntax":"swift"},{"inlineContent":[{"text":"Let’s see how this replacement works with a concrete type pack containing Bool, Int, and String. The pattern will be repeated three times and the placeholder ‘each Payload’ is replaced with the concrete type in the pack during each repetition:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["","Request<each Payload>, Request<each Payload>, Request<each Payload>","","        Bool                   Int                    String"],"syntax":"swift"},{"inlineContent":[{"text":"The result is a comma-separated list of types: Request of Bool, Request of Int, and Request of String:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Request<Bool>, Request<Int>, Request<String>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because repetition patterns produce comma-separated lists of types, they can only be used in positions that naturally accept comma-separated lists. This includes types wrapped in parentheses, which are either a tuple type or a single type:"}],"type":"paragraph"},{"type":"codeListing","code":["(repeat Request<each Payload>)","(Request<Bool>, Request<Int>, Request<String>)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Repetition patterns can be used in generic argument lists:"}],"type":"paragraph"},{"type":"codeListing","code":["Generic<repeat Request<each Payload>>","Generic<Request<Bool>, Request<Int>, Request<String>>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"They can also be used in function parameter lists:"}],"type":"paragraph"},{"type":"codeListing","code":["(_ item: repeat Request<each Payload>) -> Bool"],"syntax":"swift"},{"inlineContent":[{"text":"Basically, when using this with function parameter, it’s the equivalent of variadic parameters, but with type information preserved.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Thus, this mess:"}],"type":"paragraph"},{"type":"codeListing","code":["func query<Payload>(","  _ item: Request<Payload>",") -> Payload","","func query<Payload1, Payload2>(","  _ item1: Request<Payload1>,","  _ item2: Request<Payload2>",") -> (Payload1, Payload2)","","func query<Payload1, Payload2, Payload3>(","  _ item1: Request<Payload1>,","  _ item2: Request<Payload2>,","  _ item3: Request<Payload3>",") -> (Payload1, Payload2, Payload3)","","func query<Payload1, Payload2, Payload3, Payload4>(","  _ item1: Request<Payload1>,","  _ item2: Request<Payload2>,","  _ item3: Request<Payload3>,","  _ item4: Request<Payload4>",") -> (Payload1, Payload2, Payload3, Payload4)"],"syntax":"swift"},{"inlineContent":[{"text":"Becomes this one-liner, for any number of arguments:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func query<each Payload>(_ item: repeat Request<each Payload>) -> (repeat each Payload)"],"syntax":"swift"},{"inlineContent":[{"text":"Note that the number of elements returned in the return value will match the number of elements passed in the argument pack.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can make your generic ","type":"text"},{"type":"codeVoice","code":"Payload"},{"text":" conform to protocols like usual, e.g.:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func query<each Payload: Equatable>(_ item: repeat Request<each Payload>) -> (repeat each Payload)","","\/\/ Or","","func query<each Payload>(_ item: repeat Request<each Payload>) -> (repeat each Payload) where repeat each Payload: Equatable"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Implementing a function with a minimum of 1 argument:"}],"type":"paragraph"},{"syntax":"swift","code":["func query<FirstPayload, each Payload>(","  _ first: Request<FirstPayload>, _ item: repeat Request<each Payload>",") -> (FirstPayload, repeat each Payload)","  where FirstPayload: Equatable, repeat each Payload: Equatable"],"type":"codeListing"},{"level":2,"text":"Using Parameter Packs","anchor":"Using-Parameter-Packs","type":"heading"},{"inlineContent":[{"text":"Use this syntax to iterate over the elements of a pack:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Request<Payload> {","  func evaluate() -> Payload","}","","func query<each Payload>(_ item: repeat Request<each Payload>) -> (repeat each Payload) {","  return (repeat (each item).evaluate())","}"],"type":"codeListing"},{"inlineContent":[{"text":"The parenthesis around the ","type":"text"},{"code":"repeat (each item).evaluate()","type":"codeVoice"},{"text":" make the return value return a tuple. Note that it’s clever enough so that, if the parameter pack only has one element, it will return a single value instead of a tuple.","type":"text"}],"type":"paragraph"},{"level":1,"text":"Related Sessions","anchor":"Related-Sessions","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110352\/"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110353\/","type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Written By","anchor":"Written-By","type":"heading"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"rogerluan"}]}]},{"size":4,"content":[{"type":"heading","level":3,"text":"Roger Oba","anchor":"Roger-Oba"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/rogerluan","type":"reference","overridingTitle":"Contributed Notes","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/rogerluan","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/rogerluan_","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/www.roger.ml","type":"reference","isActive":true}]}]}],"numberOfColumns":5,"type":"row"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}],"type":"paragraph"},{"level":2,"text":"Related Sessions","anchor":"Related-Sessions","type":"heading"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110353-Design-protocol-interfaces-in-Swift"],"type":"links"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10168-generalize-apis-with-parameter-packs"]}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10164-Whats-new-in-Swift":{"kind":"article","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","title":"What’s new in Swift","url":"\/documentation\/wwdcnotes\/wwdc23-10164-whats-new-in-swift","abstract":[{"text":"Join us for an update on Swift. We’ll show you how APIs are becoming more extensible and expressive with features like parameter packs and macros. We’ll also take you through improvements to interoperability and share how we’re expanding Swift’s performance and safety benefits everywhere from Foundation to large-scale distributed programs on the server.","type":"text"}]},"https://www.roger.ml":{"type":"link","url":"https:\/\/www.roger.ml","titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","identifier":"https:\/\/www.roger.ml"},"rogerluan":{"variants":[{"url":"\/images\/rogerluan.jpeg","traits":["1x","light"]}],"type":"image","identifier":"rogerluan","alt":"Profile image of Roger Oba"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","identifier":"WWDCNotes.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/rogerluan":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/rogerluan","type":"topic","title":"Roger Oba (7 notes)","kind":"article","abstract":[{"text":"Core contributor @fastlane 🚀","type":"text"}],"images":[{"type":"card","identifier":"rogerluan.jpeg"},{"type":"icon","identifier":"rogerluan.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/rogerluan"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes"},"https://developer.apple.com/wwdc23/10168":{"checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc23\/10168","identifier":"https:\/\/developer.apple.com\/wwdc23\/10168"},"https://x.com/rogerluan_":{"type":"link","url":"https:\/\/x.com\/rogerluan_","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"title":"X\/Twitter","identifier":"https:\/\/x.com\/rogerluan_"},"WWDC23-Icon.png":{"variants":[{"url":"\/images\/WWDC23-Icon.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC23-Icon.png","alt":null},"https://wwdcnotes.com/notes/wwdc22/110353/":{"type":"link","url":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110353\/","titleInlineContent":[{"type":"text","text":"Design protocol interfaces in Swift - WWDC22"}],"title":"Design protocol interfaces in Swift - WWDC22","identifier":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110353\/"},"WWDC23.jpeg":{"variants":[{"url":"\/images\/WWDC23.jpeg","traits":["1x","light"]}],"type":"image","identifier":"WWDC23.jpeg","alt":null},"https://github.com/rogerluan":{"type":"link","url":"https:\/\/github.com\/rogerluan","titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","identifier":"https:\/\/github.com\/rogerluan"},"https://wwdcnotes.com/notes/wwdc22/110352/":{"type":"link","url":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110352\/","titleInlineContent":[{"type":"text","text":"Embrace Swift Generics - WWDC22"}],"title":"Embrace Swift Generics - WWDC22","identifier":"https:\/\/wwdcnotes.com\/notes\/wwdc22\/110352\/"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"rogerluan.jpeg":{"variants":[{"url":"\/images\/rogerluan.jpeg","traits":["1x","light"]}],"type":"image","identifier":"rogerluan.jpeg","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110352-Embrace-Swift-generics":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","role":"sampleCode","kind":"article","abstract":[{"type":"text","text":"Generics are a fundamental tool for writing abstract code in Swift. Learn how you can identify opportunities for abstraction as your code evolves, evaluate strategies for writing one piece of code with many behaviors, and discover language features in Swift 5.7 that can help you make generic code easier to write and understand."}],"type":"topic","title":"Embrace Swift generics","url":"\/documentation\/wwdcnotes\/wwdc22-110352-embrace-swift-generics"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","title":"WWDC23","abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"type":"topic","images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc23"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110353-Design-protocol-interfaces-in-Swift":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-110353-design-protocol-interfaces-in-swift","title":"Design protocol interfaces in Swift","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110353-Design-protocol-interfaces-in-Swift","abstract":[{"type":"text","text":"Learn how you can use Swift 5.7 to design advanced abstractions using protocols. We’ll show you how to use existential types, explore how you can separate implementation from interface with opaque result types, and share the same-type requirements that can help you identify and guarantee relationships between concrete types."}],"role":"sampleCode"}}}