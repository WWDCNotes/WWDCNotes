{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10097-Whats-new-in-SF-Symbols","interfaceLanguage":"swift"},"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","isActive":true,"overridingTitle":"Watch Video (20 min)","identifier":"https:\/\/developer.apple.com\/wwdc21\/10097"}},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"abstract":[{"text":"Explore the latest updates to SF Symbols, Apple’s iconography library. Designed to integrate seamlessly with San Francisco — the system font for Apple platforms — SF Symbols can help you create beautiful and consistent iconography for your app while supporting accessibility features like Dynamic Type and Bold Text. Discover the latest additions to the SF Symbols library, localization enhancements, and how you can more easily customize the color of a symbol to integrate it within your app’s own color palette. We’ll also show you how you can design and annotate custom symbols to support Monochrome, Hierarchical, Palette, and Multicolor rendering modes.","type":"text"}],"metadata":{"title":"What’s new in SF Symbols","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC21"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Symbol variants","anchor":"Symbol-variants","level":2},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC21-10097-variants"}]},{"type":"paragraph","inlineContent":[{"text":"A symbol is defined as a representation of a symbolic value that is used for the purpose of communication. A symbol with the same representation can come in many different forms:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"outlined - default in case of no context"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"filled - default for example in tab bars","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"slash - convey the functions of removing or displaying an item as inactive or unavailable"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"enclosing variants - which are symbols contained inside a shape like a circle, square, or rectangle"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What to use where:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A filled symbol in swipe actions and iOS tab bars give a consistent appearance and level of emphasis, giving better control in areas that indicate selection when defined with an accent color","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A symbol inside a circle with a filled variant provides better legibility at small sizes"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"An outlined, or default variant, of a symbol is great for Toolbars, Navigation Bars, Lists and other places in the UI where symbols are presented alongside text or where symbols need to display a uniform appearance.","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"New symbols","anchor":"New-symbols","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"600 new symbols:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"new Apple products (AirPods, homePods, ..)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"video game controllers symbols","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"health-related","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"and more","type":"text"}],"type":"paragraph"}]}]}]}]},{"type":"heading","text":"Localization","anchor":"Localization","level":2},{"type":"paragraph","inlineContent":[{"text":"All localized symbols and script variants adapt automatically based on the user’s device language, including right-to-left writing systems.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"new symbols for Arabic, Hebrew, and Devanagari"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"included new variants for Thai, Chinese, Japanese, and Korean"}],"type":"paragraph"}]}]},{"type":"heading","text":"Anatomy of a symbol","anchor":"Anatomy-of-a-symbol","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Symbols hierarchy"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Every symbol groups its enclosed vectors of a path like layers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"With annotations\/layers, we can quickly identify a primary, secondary, and even tertiary layer of a symbol structure"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some symbols have all the (three) hierarchy levels.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Shapes that don’t touch or have a gap between the first and second element of a symbol are considered secondary","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shapes that do touch and are encapsulated inside one another, become tertiary"}]}]}]}]}]},{"type":"heading","text":"Rendering modes","anchor":"Rendering-modes","level":2},{"type":"paragraph","inlineContent":[{"identifier":"WWDC21-10097-rendering","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Four rendering modes:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Hierarchical (NEW)"}],"type":"paragraph"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"uses a single color with varying opacities that add visual hierarchy to a symbol","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"creating depth and emphasis while allowing a single hue to drive the overall aesthetic"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"when multiple symbols that share common shapes are presented alongside one another, this rendering mode emphasizes the differences between them, intending to make the symbols more legible and recognizable."}],"type":"paragraph"}]}]},{"start":2,"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Palette (NEW)"}],"type":"paragraph"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"lets us define one color and opacity per hierarchy level"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"if a three-layers symbol only has two colors applied, the tertiary layer will use the same style as the secondary one"}]}]}]},{"start":3,"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Multicolor"}],"type":"paragraph"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"rendering mode that represents the intrinsic or native color of a symbol"}]}]},{"content":[{"inlineContent":[{"text":"many symbols feature this intrinsic color palette which is what’s rendered by default","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"when customized, each color can be assigned an arbitrary one"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A symbol can be:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fully colored"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"partially colored, which means that part of a symbol will have the Multicolor feature, while the other will rely on an accent color","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"monochrome if it doesn’t contain any Multicolor information","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"start":4,"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Monochrome","type":"text"}],"type":"paragraph"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"most unified and consistent rendering mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"color and opacity is applied consistently in the whole symbol, no hierarchies"}],"type":"paragraph"}]}]},{"type":"heading","text":"Written By","anchor":"Written-By","level":2},{"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"anchor":"Federico-Zanetello","type":"heading","level":3,"text":"Federico Zanetello"},{"inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"type":"heading","text":"Related Sessions","anchor":"Related-Sessions","level":2},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10157-Whats-new-in-SF-Symbols-4","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10196-Build-interfaces-with-style","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10250-Create-custom-symbols","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10288-Explore-the-SF-Symbols-3-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10349-SF-Symbols-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10207-SF-Symbols-2"],"style":"list"},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10097-whats-new-in-sf-symbols"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"WWDC21-10097-rendering":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC21-10097-rendering.png","traits":["1x","light"]}],"identifier":"WWDC21-10097-rendering"},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/zntfdr.dev","title":"Blog","identifier":"https:\/\/zntfdr.dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10250-Create-custom-symbols":{"abstract":[{"text":"Discover how you can create custom iconography with the latest rendering modes in SF Symbols 3. We’ll help you learn how to draw, edit, and annotate symbols, as well as explore more advanced techniques to improve the design process.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10250-create-custom-symbols","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10250-Create-custom-symbols","type":"topic","title":"Create custom symbols"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"title":"Federico Zanetello (332 notes)","type":"topic","kind":"article","role":"sampleCode","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","url":"\/documentation\/wwdcnotes\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10196-Build-interfaces-with-style":{"abstract":[{"type":"text","text":"Discover how you can iterate upon your interfaces even more quickly when building your apps. Learn how you can modernize your UI with the latest button styles and table view cell content configurations, both of which give you greater control directly inside of Interface Builder. We’ll show you how you can preview common customizations with accessibility overrides — such as dynamic type size and increased contrast — all without leaving the canvas. We’ll also take you through hierarchical symbols to easily add a splash of color to reinvigorate your app. Whether you’re just starting out or have been developing apps for years, learn best practices for creating great interfaces with tips and tricks sprinkled along the way."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10196-build-interfaces-with-style","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10196-Build-interfaces-with-style","kind":"article","type":"topic","title":"Build interfaces with style"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}]},"WWDC21-10097-variants":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC21-10097-variants.png","traits":["1x","light"]}],"identifier":"WWDC21-10097-variants"},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","title":"GitHub","identifier":"https:\/\/github.com\/zntfdr","type":"link"},"https://developer.apple.com/wwdc21/10097":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10097","url":"https:\/\/developer.apple.com\/wwdc21\/10097","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10018-Whats-new-in-SwiftUI":{"abstract":[{"text":"There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more.","type":"text"}],"title":"What’s new in SwiftUI","type":"topic","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc21-10018-whats-new-in-swiftui"},"zntfdr":{"alt":"Profile image of Federico Zanetello","type":"image","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"url":"\/documentation\/wwdcnotes\/wwdc21","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"kind":"article","role":"collectionGroup","title":"WWDC21","abstract":[{"text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"MusicKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"DocC","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit 2","type":"codeVoice"},{"text":", and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10288-Explore-the-SF-Symbols-3-app":{"abstract":[{"type":"text","text":"Tour the latest updates to the SF Symbols app — our interactive library for iconography. Learn how you can use the library to design accessible and inclusive apps that look incredible: We’ll take you through changes to the app and symbols search, explore previewing and custom symbol management, and help you integrate symbols into your interface designs. It’s recommended you watch “What’s new in SF Symbols” from WWDC21 before watching this video."}],"type":"topic","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10288-explore-the-sf-symbols-3-app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10288-Explore-the-SF-Symbols-3-app","title":"Explore the SF Symbols 3 app"},"zntfdr.jpeg":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10349-SF-Symbols-in-SwiftUI":{"abstract":[{"type":"text","text":"Discover how you can incorporate SF Symbols into your SwiftUI app. We’ll explore basic techniques for presenting symbols, customizing their size, and showing different variants. We’ll also take you through the latest updates to symbol colorization and help you pick the right tool for your app’s needs."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10349-sf-symbols-in-swiftui","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10349-SF-Symbols-in-SwiftUI","role":"sampleCode","title":"SF Symbols in SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10207-SF-Symbols-2":{"url":"\/documentation\/wwdcnotes\/wwdc20-10207-sf-symbols-2","kind":"article","abstract":[{"type":"text","text":"SF Symbols make it easy to adopt high-quality, Apple-designed symbols created to look great with San Francisco, the system font for all Apple platforms. Discover how you can use SF Symbols in AppKit, UIKit, and SwiftUI. Learn how to work with SF Symbols in common design tools and how to use them in code. And we’ll walk you through the latest updates, including additions to the repertoire, alignment improvements, changes with right-to-left localization, and multicolor symbols."}],"title":"SF Symbols 2","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10207-SF-Symbols-2","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10157-Whats-new-in-SF-Symbols-4":{"role":"sampleCode","title":"What’s new in SF Symbols 4","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10157-Whats-new-in-SF-Symbols-4","kind":"article","abstract":[{"text":"Explore the latest updates to SF Symbols, Apple’s extensive library of iconography designed to integrate seamlessly with San Francisco, the system font for all Apple platforms. Discover the latest additions to the SF Symbols library and new categories in the app. Learn about the new Automatic behavior, which chooses the rendering mode that best highlights what’s unique about the symbol’s characteristics. See how to use the new Variable Color feature to make a symbol more dynamic. We’ll also learn about a more efficient way of annotating symbols with the new unified approach.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10157-whats-new-in-sf-symbols-4"},"WWDC21.jpeg":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC21.jpeg","traits":["1x","light"]}],"identifier":"WWDC21.jpeg"},"WWDC21-Icon.png":{"alt":null,"identifier":"WWDC21-Icon.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"title":"WWDC Notes","type":"topic","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes"},"WWDCNotes.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png"}}}