{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10229-Discover-compilation-workflows-in-Metal","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"üò± ‚ÄúNo Overview Available!‚Äù","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Be the hero to change that by watching the video and providing notes! It‚Äôs super easy:","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10127-Optimize-GPU-renderers-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10157-Discover-Metal-debugging-profiling-and-asset-creation-tools","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10013-Get-to-know-Metal-function-pointers","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10615-Build-GPU-binaries-with-Metal"]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"The Metal shading language is a powerful C++ based language that allows apps to render stunning effects while maintaining a flexible shader development pipeline. Discover how to more easily build and extend your render pipelines using Dynamic Libraries and Function Pointers. We‚Äôll also show you how to accelerate your shader compilation at runtime with Binary Function Archives, Function Linking, and Function Stitching."}],"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC21","role":"sampleCode","title":"Discover compilation workflows in Metal"},"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"overridingTitle":"Watch Video (24 min)","identifier":"https:\/\/developer.apple.com\/wwdc21\/10229"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"kind":"article","variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10229-discover-compilation-workflows-in-metal"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"WWDC21.jpeg":{"identifier":"WWDC21.jpeg","variants":[{"url":"\/images\/WWDCNotes\/WWDC21.jpeg","traits":["1x","light"]}],"type":"image","alt":null},"WWDC21-Icon.png":{"identifier":"WWDC21-Icon.png","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC21-Icon.png","traits":["1x","light"]}],"type":"image"},"https://developer.apple.com/wwdc21/10229":{"checksum":null,"url":"https:\/\/developer.apple.com\/wwdc21\/10229","type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10229"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3":{"type":"topic","abstract":[{"type":"text","text":"Discover how you can reduce in-app stutters, first launch times, and new level load times when you generate your GPU binaries entirely at project build time with offline compilation. We‚Äôll also show you how to improve total compile time and binary size for larger GPU programs using the ‚ÄúOptimize for size‚Äù compiler option."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10102-target-and-optimize-gpu-binaries-with-metal-3","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3","title":"Target and optimize GPU binaries with Metal 3","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10127-Optimize-GPU-renderers-with-Metal":{"abstract":[{"type":"text","text":"Discover how to optimize your GPU renderer using the latest Metal features and best practices. We‚Äôll show you how to use function specialization and parallel shader compilation to maintain responsive authoring workflows and the fastest rendering speeds, and help you tune your compute shaders for optimal performance."}],"kind":"article","type":"topic","title":"Optimize GPU renderers with Metal","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10127-Optimize-GPU-renderers-with-Metal","url":"\/documentation\/wwdcnotes\/wwdc23-10127-optimize-gpu-renderers-with-metal","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10615-Build-GPU-binaries-with-Metal":{"type":"topic","title":"Build GPU binaries with Metal","kind":"article","abstract":[{"text":"Power up your shader pipeline with enhancements to the Metal shader compilation model ‚Äî all leading to a dramatic reduction in Pipeline State Object (PSO) loading time, especially upon first launch. Learn about explicit PSO caching and sharing of GPU binaries using Metal binary archives and dynamic libraries. And we‚Äôll detail the toolchain to create libraries and improve your shader compilation workflow.","type":"text"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10615-Build-GPU-binaries-with-Metal","url":"\/documentation\/wwdcnotes\/wwdc20-10615-build-gpu-binaries-with-metal"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10157-Discover-Metal-debugging-profiling-and-asset-creation-tools":{"type":"topic","abstract":[{"type":"text","text":"Explore how Xcode can help you take your Metal debugging, profiling and asset creation workflows to the next level. Discover the latest tools for ray tracing and GPU profiling, and learn about Metal Debugger workflows. We‚Äôll also show you how to use the Texture Converter tool, which supports all modern GPU texture formats and can easily integrate into your multi-platform asset creation pipelines."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10157-discover-metal-debugging-profiling-and-asset-creation-tools","title":"Discover Metal debugging, profiling, and asset creation tools","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10157-Discover-Metal-debugging-profiling-and-asset-creation-tools","role":"sampleCode"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"role":"collection","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC Notes","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders":{"abstract":[{"type":"text","text":"Discover how the Metal shader converter streamlines the process of bringing your HLSL shaders to Metal as we continue our three-part series on bringing your game to Mac. Find out how to build a fast, end-to-end shader pipeline from DXIL that supports all shader stages and allows you to leverage the advanced features of Apple GPUs. We‚Äôll also show you how to reduce app launch time and stutters by generating GPU binaries with the offline compiler."}],"type":"topic","kind":"article","title":"Bring your game to Mac, Part 2: Compile your shaders","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders","url":"\/documentation\/wwdcnotes\/wwdc23-10124-bring-your-game-to-mac-part-2-compile-your-shaders","role":"sampleCode"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Learn More‚Ä¶","titleInlineContent":[{"text":"Learn More‚Ä¶","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10013-Get-to-know-Metal-function-pointers":{"kind":"article","type":"topic","title":"Get to know Metal function pointers","url":"\/documentation\/wwdcnotes\/wwdc20-10013-get-to-know-metal-function-pointers","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10013-Get-to-know-Metal-function-pointers","abstract":[{"type":"text","text":"Metal is a low-level, low-overhead hardware-accelerated graphics framework and shader application programming interface for producing stunning visual effects in applications. Discover how to make your shaders written in Metal Shading Language more programmable and extensible by using function pointers. Learn how to take advantage of this new feature for dynamic flow control in Metal shaders. Discover how to use function pointers to specify custom intersection functions in your ray tracing application. We‚Äôll explain how function pointers allow several compilations models so you can balance GPU pipeline size against runtime performance."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"kind":"article","title":"WWDC21","url":"\/documentation\/wwdcnotes\/wwdc21","type":"topic","images":[{"identifier":"WWDC21-Icon.png","type":"icon"},{"identifier":"WWDC21.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"DocC"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit 2"},{"type":"text","text":", and more."}]}}}