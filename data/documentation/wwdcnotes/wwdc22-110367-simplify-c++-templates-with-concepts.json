{"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Speaker: Alex Lorenz, Developer Tools Engineer","type":"text"}]},{"type":"heading","text":"C++ Templates","anchor":"C++-Templates","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to C++20, C++ programmers did not have a good way to specify template requirements when writing generic C++ code."}]},{"type":"paragraph","inlineContent":[{"text":"For example","type":"text"}]},{"type":"codeListing","code":["template<class T>","bool isOdd(T x) {","   return (x % 2) == 1;","}"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While this looks good, the requirements for what types are allowed into ‘isOdd’ are not specified explicitly. So…"}]},{"type":"codeListing","code":["\/\/ Passing a double into a function that implies that 'T' specialization is an integer type","assert(isOdd(1.1));"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"text":"… causes a compiler error (“Invalid operands to binary expression (","type":"text"},{"code":"double","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"int","type":"codeVoice"},{"text":")”) in the ","type":"text"},{"inlineContent":[{"code":"isOdd","type":"codeVoice"}],"type":"strong"},{"text":" function, which can be very hard to track down ","type":"text"},{"inlineContent":[{"text":"why","type":"text"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"heading","text":"Using concepts","anchor":"Using-concepts","level":2},{"type":"paragraph","inlineContent":[{"text":"This is where ","type":"text"},{"inlineContent":[{"type":"text","text":"C++20 concepts"}],"type":"strong"},{"text":" comes in. You can use concepts to validate template requirements in your generic C++ code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"C++20 allows us to replace the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" specifier in the template definition with a ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"concept"}]},{"text":" to restrict the set of types that this template can be used with.","type":"text"}]},{"type":"codeListing","code":["#include <concepts>","template<std::integral T>","bool isOdd(T x) {","   return (x % 2) == 1;","}"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"text":"The compiler will not even try to specialize this function template when T does not satisfy this concept and give us useful information as to why and where the ","type":"text"},{"inlineContent":[{"type":"text","text":"actual"}],"type":"emphasis"},{"text":" error occurred.","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Concepts are used to define the "},{"inlineContent":[{"type":"text","text":"intent"}],"type":"strong"},{"type":"text","text":" of your template code."}]}]},{"content":[{"inlineContent":[{"text":"The standard library provides a set of ","type":"text"},{"inlineContent":[{"text":"core concepts","type":"text"}],"type":"strong"},{"text":" which are accessed through the ","type":"text"},{"code":"concepts","type":"codeVoice"},{"text":" header file and validated during compile time.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Built-in Concept Examples","anchor":"Built-in-Concept-Examples","level":3},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Concept","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Description"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"std::floating_point<double>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Is ‘double’ a floating point?","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"std::convertible_to<long, int>"}]}],[{"type":"paragraph","inlineContent":[{"text":"Can ‘long’ be converted to ‘int’","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"std::move_constructible<std::vector<int>>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"satisfied by types that can be constructed directly from another value of the same type"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"std::equality_comparable","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does the types have a valid ‘==’ operator that works with a value of the same type."}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other type examples :-"}]},{"items":[{"content":[{"inlineContent":[{"text":"Can a type be moved or copied?","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Check if a type is a callable object.","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"The requires keyword","anchor":"The-requires-keyword","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of replacing "},{"type":"codeVoice","code":"class"},{"type":"text","text":" with a concept, you can use the "},{"type":"codeVoice","code":"requires"},{"type":"text","text":" keyword to restrict multiple concepts"}]},{"type":"codeListing","code":["template<class T>","requires std::equality_comparable<T> && std::default_constructible<T>","bool isDefaultValue(const T &value) {","   return value == T();","}"],"syntax":"cpp"},{"type":"heading","text":"Create concepts","anchor":"Create-concepts","level":2},{"type":"paragraph","inlineContent":[{"text":"You can create your own concepts. These run at compile time, and are completely discarded after the validation occurs.","type":"text"}]},{"type":"codeListing","code":["template<class T>","Color computePixelColor(const T &shape, float x, float y) {","   float dist = shape.getDistanceFrom(x, y);","   if (dist <= 0.0) {","      return Color::white();","   }","   return Color::transparent();","}"],"syntax":"cpp"},{"type":"heading","text":"Create a ‘shape’ concept to validate the shape.","anchor":"Create-a-shape-concept-to-validate-the-shape","level":3},{"type":"paragraph","inlineContent":[{"text":"We create a concept that validates that the shape type has a ","type":"text"},{"code":"getDistanceFrom","type":"codeVoice"},{"text":" function which takes two float parameters.","type":"text"}]},{"type":"codeListing","code":["template<class T>","concept Shape = requires(const T &shape) {","  shape.getDistanceFrom(0.0f, 0.0f)","}"],"syntax":"cpp"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The argument list in the ","type":"text"},{"code":"requires","type":"codeVoice"},{"text":" expression can declare values of any time. You can then use these values within the ","type":"text"},{"code":"requires","type":"codeVoice"},{"text":" body.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The body contains a set of requirements that must pass in order for the concept to be satisfied. ","type":"text"},{"inlineContent":[{"type":"text","text":"This is only needed at compile time to validate, and is discarded after validation."}],"type":"strong"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can further extend this concept to check that the function returns the expected type."}]},{"type":"codeListing","code":["template<class T>","concept Shape = requires(const T &shape) {","  { shape.getDistanceFrom(0.0f, 0.0f) } -> std::same_as<float>;","}"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"text":"So, this shape concept now validates :-","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"shape"},{"text":" has a ","type":"text"},{"type":"codeVoice","code":"getDistanceFrom"},{"text":" function, which takes two float values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"getDistanceFrom"},{"type":"text","text":" function returns a value which is the same as a float."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Now, I can create functions that only accept valid ‘Shape’ types","type":"text"}]},{"type":"codeListing","code":["template<Shape T>","Color computePixelColor(const T &shape, float x, float y) { … }"],"syntax":"cpp"},{"type":"heading","text":"Multiple variants of a function template","anchor":"Multiple-variants-of-a-function-template","level":3},{"type":"paragraph","inlineContent":[{"text":"You can create multiple variants of function template using different concepts","type":"text"}]},{"type":"codeListing","code":["template<class T>","concept GradientShape = Shape<T> && requires(const T &shape) {","  { shape,getGradientColor(0,0f, 0,0f) } -> std::same_as<Color>;","}","","template<GradientShape T>","Color computePixelColor(const T &shape, float x, float y) { … }"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thus, calling "},{"code":"computePixelColor","type":"codeVoice"},{"type":"text","text":" with a "},{"code":"GradientShape","type":"codeVoice"},{"type":"text","text":" object will call the correct function."}]},{"items":[{"content":[{"inlineContent":[{"text":"The compiler will choose the ","type":"text"},{"inlineContent":[{"text":"most specific","type":"text"}],"type":"strong"},{"text":" template function available, so even though a ","type":"text"},{"type":"codeVoice","code":"GradientShape"},{"text":" works with both variants it will choose the most specific overload.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Creating concepts","anchor":"Creating-concepts","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create concepts by identifying requirements in generic code"}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"requires","type":"codeVoice"},{"text":" expression(s) to validate behviour of types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use concepts to provide overloaded variants for generic functions"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Additional C++20 improvements in Xcode 14","anchor":"Additional-C++20-improvements-in-Xcode-14","level":2},{"type":"heading","text":"Compile time evaluation (constexpr)","anchor":"Compile-time-evaluation-constexpr","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Reduce the cost of initialization for variables","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Verify constants at compile time","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mark your functions\/declaractions "},{"type":"codeVoice","code":"constexpr"},{"type":"text","text":" if you want them to be run at compile time."}]},{"type":"codeListing","code":["constexpr Color Color::fromHexCode(std::string_view hexcode) { … }","constexpr const std::array<Color, 3> colorPalette = {","   Color::fromHexCode(\"#FF5733\"),","   Color::fromHexCode(\"#5640FE\"),","   Color::fromHexCode(\"#55FFCC\")","};"],"syntax":"cpp"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This way, the "},{"type":"codeVoice","code":"colorPalette"},{"type":"text","text":" is guaranteed to be initialized with the contant values at compile time, significantly reducing startup time."}]},{"type":"heading","text":"New Supported C++20 Features","anchor":"New-Supported-C++20-Features","level":3},{"items":[{"content":[{"inlineContent":[{"text":"std::bind_front","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Concepts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Template Constraints"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Safe Mixed-Type"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Integral Comparisons"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"constexpr std::sort","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"constexpr std::tuple","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"std::to_underlying","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"constexpr std::pair","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"constexpr std::reverse","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"constexpr std::swap","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"constexpr Default Constructor for std::atomic"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"using enum"}]}]},{"content":[{"inlineContent":[{"text":"Iterator Concepts","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Core Concepts Library","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Atomic Synchronization Library","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Contains Method For Associative Containers"}]}]}],"type":"unorderedList"},{"type":"heading","text":"You should switch to C++20 today if you haven’t already done so","anchor":"You-should-switch-to-C++20-today-if-you-havent-already-done-so","level":3},{"items":[{"content":[{"inlineContent":[{"text":"You can use the “C++ Language Dialect” setting in your Xcode project to upgrade to C++20","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"C++20 does not require a minimum deployment target","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Written By","anchor":"Written-By","level":2},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"dagronf","type":"image"}]}]},{"size":4,"content":[{"anchor":"Darren-Ford","text":"Darren Ford","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/dagronf","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/dagronf","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.linkedin.com\/in\/darren-ford-dev","isActive":true,"type":"reference"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"type":"heading","text":"Related Sessions","anchor":"Related-Sessions","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110362-Link-fast-Improve-build-and-launch-times"],"type":"links"},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"abstract":[{"text":"Discover how C++20 features can take your C++ code to the next level. We’ll introduce concepts and explore how you can use it to find errors faster in your generic C++ code. We’ll also discuss the latest enhancements to the constexpr feature and show how you can leverage it to improve your app’s performance by evaluating code at compile time.","type":"text"}],"sections":[],"sampleCodeDownload":{"action":{"type":"reference","overridingTitle":"Watch Video (27 min)","identifier":"https:\/\/developer.apple.com\/wwdc22\/110367","isActive":true},"kind":"sampleDownload"},"kind":"article","metadata":{"title":"Simplify C++ templates with concepts","role":"sampleCode","roleHeading":"WWDC22","modules":[{"name":"WWDC Notes"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110367-Simplify-C++-templates-with-concepts"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc22-110367-simplify-c++-templates-with-concepts"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"WWDCNotes.png":{"alt":null,"identifier":"WWDCNotes.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"dagronf.jpeg":{"alt":null,"identifier":"dagronf.jpeg","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/dagronf.jpeg"}]},"dagronf":{"alt":"Profile image of Darren Ford","identifier":"dagronf","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/dagronf.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/dagronf":{"type":"topic","abstract":[{"text":"No Bio on GitHub","type":"text"}],"title":"Darren Ford (6 notes)","kind":"article","url":"\/documentation\/wwdcnotes\/dagronf","images":[{"identifier":"dagronf.jpeg","type":"card"},{"identifier":"dagronf.jpeg","type":"icon"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/dagronf"},"https://github.com/dagronf":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/dagronf","title":"GitHub","identifier":"https:\/\/github.com\/dagronf","type":"link"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110362-Link-fast-Improve-build-and-launch-times":{"url":"\/documentation\/wwdcnotes\/wwdc22-110362-link-fast-improve-build-and-launch-times","kind":"article","title":"Link fast: Improve build and launch times","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110362-Link-fast-Improve-build-and-launch-times","type":"topic","abstract":[{"type":"text","text":"Discover how to improve your app’s build and runtime linking performance. We’ll take you behind the scenes to learn more about linking, your options, and the latest updates that improve the link performance of your app."}]},"https://www.linkedin.com/in/darren-ford-dev":{"titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/www.linkedin.com\/in\/darren-ford-dev","title":"Blog","identifier":"https:\/\/www.linkedin.com\/in\/darren-ford-dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","title":"WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","images":[{"type":"icon","identifier":"WWDC22-Icon.png"},{"type":"card","identifier":"WWDC22.jpeg"}],"role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"WeatherKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"ScreenCaptureKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"Swift Regex","type":"codeVoice"},{"type":"text","text":", and more."}]},"WWDC22-Icon.png":{"alt":null,"identifier":"WWDC22-Icon.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC22-Icon.png"}]},"https://developer.apple.com/wwdc22/110367":{"url":"https:\/\/developer.apple.com\/wwdc22\/110367","identifier":"https:\/\/developer.apple.com\/wwdc22\/110367","type":"download","checksum":null},"WWDC22.jpeg":{"alt":null,"identifier":"WWDC22.jpeg","variants":[{"url":"\/images\/WWDC22.jpeg","traits":["1x","light"]}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes"}}}