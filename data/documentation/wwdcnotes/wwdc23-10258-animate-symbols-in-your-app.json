{"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10258-Animate-symbols-in-your-app"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"sampleCode","title":"Animate symbols in your app","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC23"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"primaryContentSections":[{"content":[{"text":"Animate symbols in your app","type":"heading","anchor":"Animate-symbols-in-your-app","level":1},{"type":"paragraph","inlineContent":[{"text":"Bring delight to your app with animated symbols. Explore the new Symbols framework, which features a unified API to create and configure symbol effects. Learn how SwiftUI, AppKit, and UIKit make it easy to animate symbols in user interfaces. Discover tips and tricks to seamlessly integrate the new animations alongside other app content. To get the most from this session, we recommend first watching “What’s new in SF Symbols 5.”.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"SF Symbols are an iconic part of Apple interfaces.."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"They look gorgeous in menus, toolbars, sidebars, and more. And because people are familiar with symbols, they make your app more intuitive to use. In iOS 17 and macOS Sonoma, we’re enhancing symbols with animation, bringing more life into your apps than ever before.."}]},{"type":"paragraph","inlineContent":[{"text":"I recommend checking out the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10197","type":"reference","isActive":true},{"text":" session to dive deeper into the animations themselves, including best practices for designing interfaces with them.","type":"text"}]},{"text":"Symbol Effects","type":"heading","anchor":"Symbol-Effects","level":2},{"type":"paragraph","inlineContent":[{"text":"In the API, these animations are called “symbol effects,” and the new Symbols framework is home to all of them. It’s included for free when you use SwiftUI, AppKit, or UIKit to build your app. A really cool feature of the Symbols framework is that each effect has a simple dot-separated name. So to create a bounce effect, you can simply write “.bounce” in your code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These dot-separated names also extend to the way you configure effects. For example, you can specify that the symbol should bounce upwards or downwards, but most of the time, you won’t need to specify anything. The frameworks will automatically use the most appropriate direction. Some effects feature many configuration options. For example, Variable Color has three different settings. By chaining options together, you can configure very specific effects with ease."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The effect names are real Swift code. There’s no strings attached. Xcode will autocomplete each part of the name, and if an effect is configured incorrectly, you’ll get an error at compile time. The best way to explore all the new animations is the SF Symbols app. In the new animation tab, you can learn about all the available configuration options for each effect. You can even copy a dot-separated effect name to be used directly in your code. With all of the effect types and configuration options, there’s a massive variety of animations available. But all of these effects actually encompass a small set of behaviors."}]},{"type":"paragraph","inlineContent":[{"text":"Bounce, for example, plays a one-off animation on the symbol. This is considered discrete behavior. Adding a Scale effect, on the other hand, changes the symbol’s scale level and keeps it there indefinitely. Scale is said to support indefinite behavior. Unlike discrete effects, indefinite effects only end when explicitly removed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Appear and Disappear support transition behavior. They can transition the symbol in and out of view.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, Replace is a content transition. It animates from one symbol to another."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So that’s the four different behaviors: discrete, indefinite, transition, and content transition. In the Symbols framework, each behavior corresponds to a protocol. Effects declare their supported behaviors by conforming to these protocols."},{"text":" ","type":"text"},{"text":"Here is a breakdown of all available effects, as well as their supported behaviors. I’ll cover this in more detail in this session. Just know that an effect’s behavior determines which UI framework APIs can work with them. And speaking of UI framework APIs, let’s talk about how to add all of these cool effects in your SwiftUI, UIKit, and AppKit apps.","type":"text"}]},{"text":"Symbol effects in SwiftUI","type":"heading","anchor":"Symbol-effects-in-SwiftUI","level":3},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"In SwiftUI, there is a new view modifier, symbolEffect.","type":"text"}]}]},{"syntax":"javascript","type":"codeListing","code":["","\/\/ Symbol effects in SwiftUI","Image(systemName: \"wifi.router\")","    .symbolEffect(.variableColor.iterative.reversing)","    .symbolEffect(.scale.up)",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Simply add the modifier and pass in the desired effect. Here, I pass in variableColor, and now the symbol is playing the default variable color animation."},{"type":"text","text":" "},{"type":"text","text":"It’s easy to do this in AppKit and UIKit too. Just use the new addSymbolEffect method on an image view to add a variable color effect. I can configure the variable color effect using the dot syntax. Here, I change the effect to variableColor.iterative.reversing, resulting in a different variable color animation. It’s a great way to show that my app is connecting to the network. It’s even possible to combine different effects. Here, I add a scale.up effect. Now the symbol is animating variable color while also scaled up."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These APIs provide a simple way to add indefinite effects to symbol images. Recall that indefinite effects change some aspect of a symbol indefinitely, until the effect is removed."}]},{"type":"paragraph","inlineContent":[{"text":"So using the symbolEffect modifier, I can apply a variable color effect, which continuously plays an animation.","type":"text"}]},{"text":"Symbol effects in AppKit and UIKit","type":"heading","anchor":"Symbol-effects-in-AppKit-and-UIKit","level":3},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"In AppKit and UIKit, use addSymbolEffect and pass in .disappear or .appear.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The takeaway here is that indefinite effects don’t change the layout at all. They only alter the rendering of the symbol within the image view."},{"type":"text","text":" "},{"type":"text","text":"So that covers the first behavior. How do I jump to the parallel universe, where the surrounding layout changes? This is where the transition behavior comes in. Transition effects can be used with SwiftUI’s built-in transition modifier, which animates a view’s insertion or removal from the view hierarchy."},{"type":"text","text":" "},{"type":"text","text":"Let’s convert the previous code to use the transition behavior. Instead of conditionally applying a Disappear effect, I’ll instead conditionally add the symbol to the view hierarchy."}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"You can also use a unique transition effect called Automatic. This effect will automatically perform the most appropriate transition animation for this symbol.until the effect is removed.","type":"text"}],"type":"paragraph"}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"So using the symbolEffect modifier, I can apply a variable color effect, which continuously plays an animation.","type":"text"}],"type":"paragraph"}]},{"syntax":"javascript","type":"codeListing","code":["","\/\/ Symbol effects in AppKit and UIKit","let imageView: NSImageView = ...","","imageView.addSymbolEffect(.variableColor.iterative.reversing)","imageView.addSymbolEffect(.scale.up)",""]},{"text":"Indefinite symbol effects in SwiftUI","type":"heading","anchor":"Indefinite-symbol-effects-in-SwiftUI","level":3},{"type":"paragraph","inlineContent":[{"text":"But I also need a way to control when the effect is active. I wouldn’t want this animation to keep playing after my app successfully connects to the network.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This can be done by adding the boolean isActive parameter. Here, I apply the effect only when connecting to the internet. Once the app finishes connecting, the symbol animation seamlessly ends.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In AppKit and UIKit, use the removeSymbolEffect method to end indefinite effects. What about discrete effects, which perform one-off animations? I mentioned Bounce as an example of this earlier. Your app may trigger Bounce effects in response to certain events."}]},{"syntax":"javascript","type":"codeListing","code":["","\/\/ SwiftUI","struct ContentView: View {","    @State var isConnectingToInternet: Bool = true","    ","    var body: some View {","        Image(systemName: \"wifi.router\")","            .symbolEffect(","                .variableColor.iterative.reversing,","                isActive: isConnectingToInternet","            )","    }","}","","\/\/ UIKit","let imageView: NSImageView = ...","","imageView.addSymbolEffect(.variableColor.iterative.reversing)","","\/\/ Later, remove the effect","imageView.removeSymbolEffect(ofType: .variableColor)",""]},{"text":"Discrete Effects","type":"heading","anchor":"Discrete-Effects","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"What about Discrete effects, which perform one-off animations? I mentioned Bounce as an example of this earlier. Your app may trigger Bounce effects in response to certain events."}]},{"type":"paragraph","inlineContent":[{"text":"In SwiftUI, I can use the same symbolEffect modifier to add discrete effects. However, I must also provide SwiftUI a value. Whenever the value changes, SwiftUI triggers the discrete effect.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a button that, when pressed, bounces the symbol. The button’s handler simply needs to increment bounceValue. SwiftUI will see the change in bounceValue and trigger the bounce. I can do this in AppKit and UIKit by adding a Bounce effect to the image view. Because Bounce only supports discrete behavior, then adding the effect performs a single bounce. There’s no need to remove the effect afterwards."}]},{"syntax":"javascript","type":"codeListing","code":[""," \/\/ Discrete symbol effects in SwiftUI",""," struct ContentView: View {","    @State var bounceValue: Int = 0","    ","    var body: some View {","        VStack {","            Image(systemName: \"antenna.radiowaves.left.and.right\")","                .symbolEffect(","                    .bounce,","                    options: .repeat(2),","                    value: bounceValue","                )","            ","            Button(\"Animate\") {","                bounceValue += 1","            }","        }","    }","}","","","\/\/ Discrete symbol effects in AppKit and UIKit","let imageView: NSImageView = ...","","\/\/ Bounce","imageView.addSymbolEffect(.bounce, options: .repeat(2))",""]},{"type":"paragraph","inlineContent":[{"text":"Now, let’s say I don’t want the symbol to bounce just once. How about bouncing twice? SwiftUI, AppKit, and UIKit support an options parameter, where I can specify a preferred repeat count. Now, the symbol bounces twice when the effect is triggered. Bounce isn’t the only effect which can have discrete behavior. Two of the effects I covered earlier, Pulse and Variable Color, support not only indefinite behavior, but also discrete behavior. In other words, they can play one-off animations, just like Bounce. That means I can take the earlier Bounce example and change it to variableColor. Variable Color switches to use its discrete behavior, since it’s applied in a non-repeating fashion.","type":"text"}]},{"text":"Content transition effects","type":"heading","anchor":"Content-transition-effects","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, let’s talk about content transition effects."}]},{"type":"paragraph","inlineContent":[{"text":"The Replace effect, which animates between two different symbol images, is the main example of this. Here, I have an image that switches between a pause symbol and a play symbol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI has a new contentTransition type called symbolEffect, which can be used with Replace. So if I put the Image in a Button that toggles which symbol is displayed, the change is now animated. In AppKit and UIKit, you can use the new setSymbolImage method to change the image using a symbol content transition."}]},{"syntax":"javascript","type":"codeListing","code":["\/\/ Content transition symbol effects in SwiftUI","    struct ContentView: View {","        @State var isPaused: Bool = false","    ","        var body: some View {","            Button {","               isPaused.toggle()","            } label: {","               Image(systemName: isPaused ? \"pause.fill\" : \"play.fill\")","                   .contentTransition(.symbolEffect(.replace.offUp))","            }","        }","    }"]},{"type":"paragraph","inlineContent":[{"text":"Finally, we have Appear and Disappear, which can show and hide symbols with unique animations. These effects are uniquely classified as transition effects. But before we get into that, we need to talk about parallel universes. Don’t worry, though. It’s not as complicated as it seems. In one universe, the image disappears, but the image view is still in the hierarchy. In other words, there’s no change to the layout. The square and circle remain the same distance to each other. In the parallel universe, the image view is truly added and removed from the hierarchy. As a result, the layout of surrounding views may change.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The great news is that Appear and Disappear support both behaviors.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first behavior is possible because Appear and Disappear are indefinite effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You know how to use indefinite effects already. In SwiftUI, use the .symbolEffect modifier and pass in .disappear. As the value of isMoonHidden updates, the Disappear effect is applied."}]},{"type":"paragraph","inlineContent":[{"text":"In AppKit and UIKit, use addSymbolEffect and pass in .disappear or .appear.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The takeaway here is that indefinite effects don’t change the layout at all. They only alter the rendering of the symbol within the image view.","type":"text"},{"text":" ","type":"text"},{"text":"So that covers the first behavior. How do I jump to the parallel universe, where the surrounding layout changes? This is where the transition behavior comes in. Transition effects can be used with SwiftUI’s built-in transition modifier, which animates a view’s insertion or removal from the view hierarchy.","type":"text"}]},{"syntax":"javascript","type":"codeListing","code":["    \/\/ Content transition symbol effects in AppKit and UIKit","        let imageView: UIImageView = ...","        imageView.image = UIImage(systemName: \"play.fill\")","","    \/\/ Change the image with a Replace effect","        let pauseImage = UIImage(systemName: \"pause.fill\")!","        imageView.setSymbolImage(pauseImage, contentTransition: .replace.offUp)",""]},{"text":"variable value.","type":"heading","anchor":"variable-value","level":2},{"type":"paragraph","inlineContent":[{"text":"iOS 16 and macOS Ventura introduced variable value as another dimension for symbols, representing concepts like volume levels and signal strengths.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In iOS 17 and macOS Sonoma, we are making it super easy to crossfade between arbitrary variable values."}]},{"type":"paragraph","inlineContent":[{"text":"In SwiftUI, you don’t need to do anything at all. Here, I have a Wi-Fi symbol whose variable value is based on some state– in this case, the current signal strength. As the signal strength changes, the Wi-Fi symbol automatically updates, while also animating across variable values. In AppKit and UIKit, use the automatic symbol content transition. It detects if the new symbol image just has a different variable value, and, if so, crossfades to the new value.","type":"text"}]},{"syntax":"javascript","type":"codeListing","code":["","    \/\/ Variable value animations in SwiftUI","        struct ContentView: View {","            @State var signalLevel: Double = 0.5","    ","            var body: some View {","               Image(systemName: \"wifi\", variableValue: signalLevel)","            }","        }","","    \/\/ Variable value animations in AppKit and UIKit","        ","        let imageView: UIImageView = ...","        imageView.image = UIImage(systemName: \"wifi\", variableValue: 1.0)","","    \/\/ Animate to a different Wi-Fi level","        let currentSignalImage = UIImage(","            systemName: \"wifi\",","            variableValue: signalLevel","        )!","        imageView.setSymbolImage(currentSignalImage, contentTransition: .automatic)",""]},{"type":"paragraph","inlineContent":[{"text":"Thanks so much. There’s a lot of ways to animate symbols, so use the SF Symbols app to discover what’s possible. Explore the Symbols framework, and try the new symbol effect APIs in SwiftUI, AppKit, and UIKit. And finally, adopt the animations to make your app’s interface more delightful than ever.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Check out the other symbols sessions, too, for Human Interface guidelines on symbol animation, as well as updating custom symbols to support all the effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10257","type":"reference","isActive":true}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks."}]},{"text":"Written By","type":"heading","anchor":"Written-By","level":2},{"numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"srujanc"}]}],"size":1},{"content":[{"level":3,"type":"heading","anchor":"Srujan-Chitla","text":"Srujan Chitla"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/srujanc","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/srujanc"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/"}]}],"size":4}],"type":"row"},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"text":"Related Sessions","type":"heading","anchor":"Related-Sessions","level":2},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10054-Whats-new-in-AppKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10055-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10197-Whats-new-in-SF-Symbols-5","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10257-Create-animated-symbols"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10258-animate-symbols-in-your-app"]}],"abstract":[{"text":"Bring delight to your app with animated symbols. Explore the new Symbols framework, which features a unified API to create and configure symbol effects. Learn how SwiftUI, AppKit, and UIKit make it easy to animate symbols in user interfaces. Discover tips and tricks to seamlessly integrate the new animations alongside other app content. To get the most from this session, we recommend first watching “What’s new in SF Symbols 5.”","type":"text"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video (17 min)","type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc23\/10258","isActive":true}},"references":{"https://github.com/srujanc":{"url":"https:\/\/github.com\/srujanc","identifier":"https:\/\/github.com\/srujanc","type":"link","title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}]},"WWDC23-Icon.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC23-Icon.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC23-Icon.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10257-Create-animated-symbols":{"kind":"article","type":"topic","title":"Create animated symbols","url":"\/documentation\/wwdcnotes\/wwdc23-10257-create-animated-symbols","abstract":[{"text":"Discover animation presets and learn how to use them with SF Symbols and custom symbols. We’ll show you how to experiment with different options and configurations to find the perfect animation for your app. Learn how to update custom symbols for animation using annotation features, find out how to modify your custom symbols with symbol components, and explore the redesigned export process to help keep symbols looking great on all platforms.","type":"text"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10257-Create-animated-symbols"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"kind":"article","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"title":"WWDC23","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23","role":"collectionGroup","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10197-Whats-new-in-SF-Symbols-5":{"title":"What’s new in SF Symbols 5","abstract":[{"type":"text","text":"Explore the latest updates to SF Symbols, Apple’s library of iconography designed to integrate seamlessly with San Francisco, the system font for Apple platforms. Learn about symbol animations: a collection of expressive, configurable animations that can make your interface feel more lively and improve user feedback. See how to draw for animation when creating your own custom symbols, and discover the latest additions to the SF Symbols library. To get the most out of this session, we recommend first watching “What’s new in SF Symbols 4” from WWDC22."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10197-Whats-new-in-SF-Symbols-5","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10197-whats-new-in-sf-symbols-5","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10054-Whats-new-in-AppKit":{"title":"What’s new in AppKit","type":"topic","abstract":[{"text":"Discover the latest advances in Mac app development. We’ll share improvements to controls and menus and explore the tools that can help you break free from your (view) bounds. Learn how to add motion to your user interface, take advantage of improvements to text input, and integrate your existing code with Swift and SwiftUI.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10054-Whats-new-in-AppKit","url":"\/documentation\/wwdcnotes\/wwdc23-10054-whats-new-in-appkit","role":"sampleCode"},"https://":{"identifier":"https:\/\/","titleInlineContent":[{"type":"text","text":"Blog"}],"type":"link","url":"https:\/\/","title":"Blog"},"doc://WWDCNotes/documentation/WWDCNotes/srujanc":{"type":"topic","title":"Srujan Chitla (5 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/srujanc","abstract":[{"type":"text","text":"Sr Software Engineer at IQVIA"}],"role":"sampleCode","images":[{"type":"card","identifier":"srujanc.jpeg"},{"type":"icon","identifier":"srujanc.jpeg"}],"kind":"article","url":"\/documentation\/wwdcnotes\/srujanc"},"https://developer.apple.com/videos/play/wwdc2023/10197":{"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10197","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10197","type":"link","title":"“What’s new in SF Symbols 5”","titleInlineContent":[{"text":"“What’s new in SF Symbols 5”","type":"text"}]},"srujanc.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/srujanc.jpeg","traits":["1x","light"]}],"type":"image","identifier":"srujanc.jpeg","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10055-Whats-new-in-UIKit":{"kind":"article","abstract":[{"text":"Explore enhancements and updates to UIKit and learn how to build better iOS, iPadOS, and Mac Catalyst apps. We’ll show you the latest features and improvements in UIKit and share API refinements, performance improvements, and much more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10055-whats-new-in-uikit","title":"What’s new in UIKit","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10055-Whats-new-in-UIKit"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","role":"collection","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"srujanc":{"alt":"Profile image of Srujan Chitla","identifier":"srujanc","variants":[{"url":"\/images\/WWDCNotes\/srujanc.jpeg","traits":["1x","light"]}],"type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10257":{"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10257","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10257","type":"link","title":"Create animated symbols","titleInlineContent":[{"text":"Create animated symbols","type":"text"}]},"https://developer.apple.com/wwdc23/10258":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc23\/10258","url":"https:\/\/developer.apple.com\/wwdc23\/10258","checksum":null},"WWDC23.jpeg":{"alt":null,"identifier":"WWDC23.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23.jpeg"}],"type":"image"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","identifier":"WWDCNotes.png","alt":null},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10148-Whats-new-in-SwiftUI":{"type":"topic","title":"What’s new in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI","abstract":[{"text":"Learn how you can use SwiftUI to build great apps for all Apple platforms. Explore the latest updates to SwiftUI and discover new scene types for visionOS. Simplify your data models with the latest data flow options and learn about the Inspector view. We’ll also take you through enhanced animation APIs, powerful ScrollView improvements, and a host of refinements to help you make tidier tables, improve focus and keyboard input, and so much more.","type":"text"}],"role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10148-whats-new-in-swiftui"}}}