{"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"sampleCode","title":"Building Better Apps with Value Types in Swift","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC15"},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-414-Building-Better-Apps-with-Value-Types-in-Swift","interfaceLanguage":"swift"},"sections":[],"kind":"article","sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc15\/414","type":"reference","isActive":true,"overridingTitle":"Watch Video (39 min)"},"kind":"sampleDownload"},"abstract":[{"text":"Swift supports rich first-class value types in the form of powerful structs, which provide new ways to architect your apps. Learn about the differences between reference and value types, how value types help you elegantly solve common problems around mutability and thread safety, and discover how Swift’s unique capabilities might change the way you think about abstraction.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Roadmap","type":"heading","anchor":"Roadmap","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Reference semantics"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Immutability","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Value semantics","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value types in practice"}]}]},{"content":[{"inlineContent":[{"text":"Mixing value types and reference types","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"1. Reference semantics","type":"heading","anchor":"1-Reference-semantics","level":2},{"type":"paragraph","inlineContent":[{"text":"In Swift, we get reference semantics with classes.","type":"text"}]},{"text":"A Temperature Class","type":"heading","anchor":"A-Temperature-Class","level":3},{"syntax":"swift","type":"codeListing","code":["class Temperature {","  var celsius: Double = 0","  var fahrenheit: Double {","    get { return celsius * 9 \/ 5 + 32 }","    set { celsius = (newValue - 32) * 5 \/ 9 }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Let’s set the thermostat of our home:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let home = House()","let temp = Temperature()","temp.fahrenheit = 75","home.thermostat.temperature = temp"]},{"type":"paragraph","inlineContent":[{"text":"Now let’s bake something for dinner. We need to heat up the oven:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["temp.fahrenheit = 425","home.oven.temperature = temp","home.oven.bake()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why is it so hot in the house? Because we unintentionally shared the same temperature object, and now both the thermostat and oven are set to 425 degrees. Here’s the object graph:"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-unintended_sharing","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To prevent sharing, we need copies:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ...","temp.fahrenheit = 75","home.thermostat.temperature = temp.copy()","","temp.fahrenheit = 425","home.oven.temperature = temp.copy()"]},{"type":"paragraph","inlineContent":[{"text":"Technically, we don’t need this last copy, but we might still do it so we don’t run into the same issue next time. This is called ","type":"text"},{"inlineContent":[{"text":"defensive copying","type":"text"}],"type":"emphasis"},{"text":", and we end up having to do this for our ","type":"text"},{"code":"Oven","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Thermostat","type":"codeVoice"},{"text":", and any other object that might require a new temperature.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class Oven {","  private var _temperature: Temperature = Temperature(celsius: 0)","","  var temperature: Temperature {","    get { return _temperature }","    set { _temperature = newValue.copy() }","  }","}"]},{"text":"Copying in Cocoa[Touch] and Objective-C","type":"heading","anchor":"Copying-in-CocoaTouch-and-Objective-C","level":3},{"type":"paragraph","inlineContent":[{"text":"Cocoa[Touch] requires copying throughout.","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"NSCopying"},{"text":" codifies copying an object","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"},{"type":"text","text":", "},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":", "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":", "},{"code":"NSURLRequest","type":"codeVoice"},{"type":"text","text":", etc. all require copying"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Defensive copying pervades Cocoa[Touch] and Objective-C","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"NSDictionary","type":"codeVoice"},{"text":" calls ","type":"text"},{"code":"-copy","type":"codeVoice"},{"text":" on its keys so that any future changes don’t affect the hash","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"copy"},{"text":" attribute provides defensive copying on assignment","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"All of this results in a performance loss, and bugs can still show up any time there’s missed copies.","type":"text"}]},{"text":"2. Immutability","type":"heading","anchor":"2-Immutability","level":2},{"text":"Eliminating Mutation","type":"heading","anchor":"Eliminating-Mutation","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional programming languages have reference semantics with immutability. This eliminates many problems caused by reference semantics with mutation, such as unintended side effects."}]},{"type":"paragraph","inlineContent":[{"text":"However, there are several problems with immutable reference semantics:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"They can lead to awkward interfaces because we live and think in a mutable world"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They don’t map efficiently to the machine model"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Eventually, we have to map to machine code which has stateful CPU, stateful caches, stateful memory and storage, etc.","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"text":"An immutable Temperature class","type":"heading","anchor":"An-immutable-Temperature-class","level":3},{"syntax":"swift","type":"codeListing","code":["class Temperature {","  \/\/ Celsius is now always the point of reference, and it's immutable.","  let celsius: Double = 0","","  var fahrenheit: Double {","    return celsius * 9 \/ 5 + 32","  }","","  \/\/ Convenience initializers.","  init(celsius: Double) { self.celsius = celsius }","  init(fahrenheit: Double) { self.celsius = (fahrenheit - 32) * 5 \/ 9 }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This leads to awkward interfaces. Before, if we wanted to increase our temperature by 10 degrees Fahrenheit, it was simple:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ With mutability","home.oven.temperature.fahrenheit += 10.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Without mutability, we have to get the temperature and then create a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"new"}]},{"type":"text","text":" temperature object:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Without mutability","let temp = home.oven.temperature","home.oven.temperature = Temperature(fahrenheit: temp.fahrenheit + 10.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is more awkward and less performant because we need to allocate another object on the heap."}]},{"type":"paragraph","inlineContent":[{"text":"Most importantly, this solution is still not truly immutable. We’re still mutating the ","type":"text"},{"type":"codeVoice","code":"Oven"},{"text":" when we set a new temperature. A truly immutable system would create a new temperature, a new oven, and a new home…which is still awkward.","type":"text"}]},{"text":"Sieve of Eratosthenes","type":"heading","anchor":"Sieve-of-Eratosthenes","level":3},{"type":"paragraph","inlineContent":[{"text":"Getting a little more mathematical–the Sieve of Eratosthenes is an ancient algorithm for computing prime numbers. This algorithm lends itself very well to mutation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the mutable implementation of the algorithm in Swift:"}]},{"syntax":"swift","type":"codeListing","code":["func primes(n: Int) -> [Int] {","  var numbers = [Int](2..<n)","","  for i in 0..<n - 2 {","    guard let prime = numbers[i] where prime > 0 else { continue }","    for multiple in stride(from: 2 * prime - 2, to: n - 2, by: prime) {","      numbers[multiple] = 0","    }","  }","","  return numbers.filter { $0 > 0 }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The algorithm basically creates an array of numbers from 2 to "},{"type":"codeVoice","code":"n"},{"type":"text","text":". The outer loop walks through the array. The inner loop, going right, sets all multiples of that number to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". The algorithm then returns only non-zero values from the array, which is all the prime numbers."}]},{"text":"Functional Sieve of Eratosthenes","type":"heading","anchor":"Functional-Sieve-of-Eratosthenes","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can also express this algorithm in a world without mutation. Here is the implementation in Haskell, a purely functional language:"}]},{"syntax":null,"type":"codeListing","code":["primes = sieve [2..]","sieve [] = []","sieve (p : xs) = p : sieve [x | x <- xs, x 'mod' p > 0]"]},{"type":"paragraph","inlineContent":[{"text":"We can do exactly the same thing in Swift:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func sieve(numbers: [Int]) -> [Int] {","  guard !numbers.isEmpty else { return [] }","  let p = numbers[0]","  return [p] + sieve(numbers[1..<numbers.count]).filter { $0 % p > 0 }","}"]},{"type":"paragraph","inlineContent":[{"text":"This immutable algorithm is very similar to the mutable one. Assuming the array isn’t empty, we take out the first number (","type":"text"},{"type":"codeVoice","code":"2"},{"text":"), which is always prime. We then perform a filter operation and copy over all array elements that are ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" divisible by that number. Then we recurse, and we build up the prime numbers on the left-hand diagonal. These are concatenated together to get the result.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-immutable_sieve"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Unfortunately, this algorithm is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" similar in performance"}]},{"text":". The problem is the ","type":"text"},{"type":"codeVoice","code":"filter"},{"text":" operation. In the original mutating algorithm, we only walked over multiples of the prime number, which get more and more sparse as the multiple increases. Moreover, we only have to do addition to get to the next element. Overall, the mutating version does less work per element.","type":"text"}]},{"text":"Immutability in Cocoa[Touch]","type":"heading","anchor":"Immutability-in-CocoaTouch","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Cocoa[Touch] has a number of immutable classes:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"NSDate"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSURL"},{"type":"text","text":", "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSNumber"},{"type":"text","text":", etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improved safety (no need to use copy)"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are also downsides to immutability. In Objective-C, if we wanted to start at our home directory and successively add path components, we would have to create a new "},{"type":"codeVoice","code":"NSURL"},{"type":"text","text":" object on each loop iteration:"}]},{"syntax":"objectivec","type":"codeListing","code":["NSURL *url = [[NSURL alloc] initWithString: NSHomeDirectory()];","NSString *component;","while ((component = getNextSubdir())) {","  \/\/ Create new object on heap, copy over all string data, discard old object...","  url = [url URLByAppendingPathComponent: component];","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s a better way to do this–we could just add the components to an array and create a single new "},{"type":"codeVoice","code":"NSURL"},{"type":"text","text":" instance at the end. However, if we want to be truly immutable, we have to create a new array on each iteration of the loop…which is still "},{"type":"codeVoice","code":"O(n^2)"},{"type":"text","text":":"}]},{"syntax":"objectivec","type":"codeListing","code":["NSArray<NSString *> *array = [NSArray arrayWithObject: NSHomeDirectory()];","NSString *component;","while ((component = getNextSubdir())) {","  \/\/ Create new array, copy over elements, discard old array...","  array = [array arrayByAddingObject: component];","}","url = [NSURL fileURLWithPathComponents: array];"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"correct"}],"type":"strong"},{"type":"text","text":" way to do this in Cocoa is to use mutation–we need to store all our components into an "},{"type":"codeVoice","code":"NSMutableArray"},{"type":"text","text":" and then create the "},{"type":"codeVoice","code":"NSURL"},{"type":"text","text":" at the end, which is "},{"type":"codeVoice","code":"O(n)"},{"type":"text","text":":"}]},{"syntax":"objectivec","type":"codeListing","code":["NSMutableArray<NSString *> *array = [NSMutableArray array];","[array addObject: NSHomeDirectory()];","NSString *component;","while ((component = getNextSubdir())) {","  [array addObject: component];  \/\/ Mutate array object.","}","url = [NSURL fileURLWithPathComponents: array];"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Immutability is a good thing:","type":"text"}]},{"type":"text","text":" it makes the reference semantics world easier to reason about, but we still can’t go entirely immutable."}]},{"text":"3. Value Semantics","type":"heading","anchor":"3-Value-Semantics","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a different approach. We like mutation because it’s easy to use when done correctly, but the problem is data sharing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Value types solve this problem. Mutating one variable of some value type will never affect a different variable:"}]},{"syntax":"swift","type":"codeListing","code":["var a: Int = 17","var b = a","assert(a == b)","b += 25","print(\"a = \\(a), b = \\(b)\")  \/\/ Prints \"a = 17, b = 42\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’re used to this with fundamental types like numbers and perhaps "},{"type":"codeVoice","code":"CGPoint"},{"type":"text","text":"–we would never expect that a change to "},{"type":"codeVoice","code":"b"},{"type":"text","text":" would affect "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can take this same principle and extend it to more complex types."}]},{"text":"Value types compose","type":"heading","anchor":"Value-types-compose","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All of Swift’s “fundamental” types are value types"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", "},{"code":"String","type":"codeVoice"},{"type":"text","text":", …"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"All of Swift’s collections are value types","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Array","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":", …","type":"text"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"In Swift, any tuple, struct, or enum that contains only value types is also a value type. It’s very easy to build rich abstractions entirely in the world of value types.","type":"text"}]},{"text":"Value types are distinguished by value","type":"heading","anchor":"Value-types-are-distinguished-by-value","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Equality is established by the value of a variable, not its identity or how we arrived at the value."}]},{"type":"paragraph","inlineContent":[{"text":"This makes perfect sense for fundamental types like Integers…","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var a: Int = 5","var b: Int = 2 + 3","assert(a == b)  \/\/ True"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…so we can extend it to less fundamental types like collections:"}]},{"syntax":"swift","type":"codeListing","code":["var a: [Int] = [1, 2, 3]","var b: [Int] = [3, 2, 1].sort(<)","assert(a == b)  \/\/ True"]},{"text":"Value types should implement `Equatable`","type":"heading","anchor":"Value-types-should-implement-Equatable","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can’t understand our code unless we have reflexive, symmetric, and transitive notions of equality."}]},{"syntax":"swift","type":"codeListing","code":["protocol Equatable {","  \/\/\/ Reflexive: `x == x` is `true`","  \/\/\/ Symmetric: If `x == y` then `y == x`","  \/\/\/ Transitive: If `x == y` and `y == z`, then `x == z`","  func ==(lhs: Self, rhs: Self) -> Bool","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, it’s very easy to conform to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":". After declaring conformance, we just have to implement the equality operator for our properties. Generally speaking, when we compose value types out of other value types, we can rely on the underlying "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operators defined for each property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, we define equality for "},{"type":"codeVoice","code":"CGPoint"},{"type":"text","text":" by using equality for "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", another value type:"}]},{"syntax":"swift","type":"codeListing","code":["extension CGPoint: Equatable {}","","func ==(lhs: CGPoint, rhs: CGPoint) -> Bool {","  return lhs.x == rhs.x && lhs.y == rhs.y","}"]},{"text":"Value semantics version of `Temperature`","type":"heading","anchor":"Value-semantics-version-of-Temperature","level":3},{"type":"paragraph","inlineContent":[{"text":"Let’s make ","type":"text"},{"code":"Temperature","type":"codeVoice"},{"text":" a struct now.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Temperature: Equatable {","  var celsius: Double = 0","  var fahrenheit: Double {","    get { return celsius * 9 \/ 5 + 32 }","    set { celsius = (newValue - 32) * 5 \/ 9 }","  }","}","","func ==(lhs: Temperature, rhs: Temperature) -> Bool {","  return lhs.celsius == rhs.celsius","}"]},{"type":"paragraph","inlineContent":[{"text":"Unfortunately, we run into an error when using this new ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let temp = Temperature()","temp.fahrenheit = 75  \/\/ ERROR: cannot assign to property: 'temp' is a 'let' constant"]},{"type":"paragraph","inlineContent":[{"text":"All we have to do is change ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"var","type":"codeVoice"},{"text":", and our code works perfectly fine because both ","type":"text"},{"code":"thermostat","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"oven","type":"codeVoice"},{"text":" have their own instances of ","type":"text"},{"code":"Temperature","type":"codeVoice"},{"text":" values. There is no more sharing, and the values are also inlined into the ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" so we get better memory usage and performance:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-value_temperature"}]},{"text":"Mutation when we want it, but not when we don’t","type":"heading","anchor":"Mutation-when-we-want-it-but-not-when-we-dont","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Value semantics work well in Swift because we already have keywords to indicate mutability."}]},{"type":"paragraph","inlineContent":[{"code":"let","type":"codeVoice"},{"type":"text","text":" means the value will "},{"type":"strong","inlineContent":[{"text":"never","type":"text"}]},{"type":"text","text":" change, which is a very strong statement!"}]},{"syntax":"swift","type":"codeListing","code":["let numbers = [1, 2, 3, 4, 5]"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"var"},{"text":" means we can update the value without affecting any other values in our code (no data sharing).","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var strings = [String]()","for x in numbers {","  strings.append(String(x))","}"]},{"type":"paragraph","inlineContent":[{"text":"This gives us ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"controlled"}]},{"text":" mutability with strong guarantees throughout our code.","type":"text"}]},{"text":"Freedom from race conditions","type":"heading","anchor":"Freedom-from-race-conditions","level":3},{"type":"paragraph","inlineContent":[{"text":"Passing value types across thread boundaries means we don’t have to worry about race conditions on those types.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In an array with reference semantics, the code below would cause a race condition because the same array would be shared by both threads. In an array with value semantics, we get ","type":"text"},{"inlineContent":[{"text":"logical","type":"text"}],"type":"emphasis"},{"text":" copies each time, so each thread gets its own array.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var numbers = [1, 2, 3, 4, 5]","scheduler.processNumbersAsynchronously(numbers)","","for i in 0..<numbers.count {","  numbers[i] = numbers[i] * 1","}","","scheduler.processNumbersAsynchronously(numbers)"]},{"text":"What about all those copies?","type":"heading","anchor":"What-about-all-those-copies","level":4},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Copies are cheap (","type":"text"},{"code":"O(1)","type":"codeVoice"},{"text":") with value semantics.","type":"text"}]},{"type":"text","text":" Let’s build this from the ground-up:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Copying a low-level, fundamental type is constant time ("},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", …)"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Just requires copying a few bytes, which happens inside the processor."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Copying a struct, enum, or tuple of value types is also constant time (","type":"text"},{"code":"CGPoint","type":"codeVoice"},{"text":", …)","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Fixed number of fields, so it’s not ","type":"text"},{"type":"codeVoice","code":"O(n)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Copying each “building block” is constant time, so copying the whole object is also constant time.","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Extensible data structures use copy-on-write"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Copying involves a fixed number of reference counting operations.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Copying only happens at the point of mutation. This is “sharing behind the scenes”, but not logical sharing. These are treated as distinct values ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"when they need to be"}]},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"code":"Set","type":"codeVoice"},{"type":"text","text":", "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":", etc."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"text":"Recap: Value semantics are simple and efficient","type":"heading","anchor":"Recap-Value-semantics-are-simple-and-efficient","level":3},{"items":[{"content":[{"inlineContent":[{"text":"Different variables are logically distinct","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutability when we want it"}]}]},{"content":[{"inlineContent":[{"text":"Copies are cheap","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"4. Value types in practice","type":"heading","anchor":"4-Value-types-in-practice","level":2},{"type":"paragraph","inlineContent":[{"text":"We’re going to build a diagram made out of some simple value types like circles and polygons.","type":"text"}]},{"text":"Circle","type":"heading","anchor":"Circle","level":3},{"syntax":"swift","type":"codeListing","code":["struct Circle: Equatable {","  var center: CGPoint","  var radius: Double","}","","func ==(lhs: Circle, rhs: Circle) {","  return lhs.center == rhs.center && lhs.radius == rhs.radius","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-circle_struct"}]},{"text":"Polygon","type":"heading","anchor":"Polygon","level":3},{"syntax":"swift","type":"codeListing","code":["struct Polygon: Equatable {","  var corners = [CGPoint]()","}","","func ==(lhs: Polygon, rhs: Polygon) {","  return lhs.corners == rhs.corners","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-polygon_struct"}]},{"text":"Diagrams need to contain either shape","type":"heading","anchor":"Diagrams-need-to-contain-either-shape","level":3},{"type":"paragraph","inlineContent":[{"text":"We can just make both ","type":"text"},{"code":"Circle","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Polygon","type":"codeVoice"},{"text":" conform to a new protocol, ","type":"text"},{"code":"Drawable","type":"codeVoice"},{"text":". For more information, see ","type":"text"},{"identifier":"..\/408","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-diagram_protocol","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s the protocol and conforming implementations:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["protocol Drawable {","  func draw()","}","","extension Polygon: Drawable {","  func draw() {","    let ctx = UIGraphicsGetCurrentContext()","    CGContextMoveToPoint(ctx, corners.last!.x, corners.last!.y)","    for point in corners {","      CGContextAddLineToPoint(ctx, point.x, point.y)","    }","    CGContextClosePath(ctx)","    CGContextStrokePath(ctx)","  }","}","","extension Circle: Drawable {","  func draw() {","    let arc = CGPathCreateMutable()","    CGPathAddArc(arc, nil, center.x, center.y, radius, 0, 2 * π, true)","    CGContextAddPath(ctx, arc)","    CGContextStrokePath(ctx)","  }","}"]},{"text":"Creating `Diagram`","type":"heading","anchor":"Creating-Diagram","level":3},{"syntax":"swift","type":"codeListing","code":["struct Diagram {","  var items = [Drawable]()","","  mutating func addItem(item: Drawable) {","    items.append(item)","  }","","  func draw() {","    for item in items {","      item.draw()","    }","  }","}"]},{"text":"Using the diagram","type":"heading","anchor":"Using-the-diagram","level":3},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-copied_on_assignment","type":"image"}]},{"text":"Making `Diagram` `Equatable`","type":"heading","anchor":"Making-Diagram-Equatable","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The straightforward implementation would be to just use equality for each item in the "},{"code":"items","type":"codeVoice"},{"type":"text","text":" array, but this causes an error:"}]},{"syntax":"swift","type":"codeListing","code":["extension Diagram: Equatable {}","","func ==(lhs: Diagram, rhs: Diagram) {","  \/\/ ERROR: binary operator '==' cannot be applied to two [Drawable] operands","  return lhs.items == rhs.items","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Protocol-Oriented Programming in Swift"}],"identifier":"..\/408","overridingTitle":"Protocol-Oriented Programming in Swift"},{"type":"text","text":"."}]},{"text":"Making `Diagram` `Drawable`","type":"heading","anchor":"Making-Diagram-Drawable","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Diagram"},{"type":"text","text":" already has a "},{"type":"codeVoice","code":"draw()"},{"type":"text","text":" function, so all we have to do is declare conformance:"}]},{"syntax":"swift","type":"codeListing","code":["struct Diagram: Drawable { ... }"]},{"type":"paragraph","inlineContent":[{"text":"We can actually add a new instance of ","type":"text"},{"type":"codeVoice","code":"Diagram"},{"text":" to the first ","type":"text"},{"type":"codeVoice","code":"Diagram"},{"text":", and it’s all contained inside the ","type":"text"},{"type":"codeVoice","code":"items"},{"text":" array:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-diagram_drawable1"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can even add the diagram to its own "},{"type":"codeVoice","code":"items"},{"type":"text","text":" array:"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-diagram_drawable2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why doesn’t this cause infinite recursion? Let’s look at the implementation of "},{"code":"Diagram.draw","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["func draw() {","  for item in items {","    item.draw()","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"Diagram"},{"text":" used reference semantics, we ","type":"text"},{"type":"strong","inlineContent":[{"text":"would","type":"text"}]},{"text":" get infinite recursion. Calling ","type":"text"},{"type":"codeVoice","code":"draw"},{"text":" would iterate through ","type":"text"},{"type":"codeVoice","code":"items"},{"text":", and eventually it would call its own ","type":"text"},{"type":"codeVoice","code":"draw"},{"text":" again…and again.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, we’re using value semantics. We get an entirely new copy of "},{"type":"codeVoice","code":"Diagram"},{"type":"text","text":" that is "},{"type":"strong","inlineContent":[{"type":"text","text":"not equal"}]},{"type":"text","text":" to the original "},{"type":"codeVoice","code":"Diagram"},{"type":"text","text":" because it doesn’t have itself in its "},{"type":"codeVoice","code":"items"},{"type":"text","text":" array:"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-diagram_copy","type":"image"}]},{"text":"5. Mixing value types and reference types","type":"heading","anchor":"5-Mixing-value-types-and-reference-types","level":2},{"text":"Reference types often contain value types","type":"heading","anchor":"Reference-types-often-contain-value-types","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Value types are generally used for “primitive” data of objects:"}]},{"syntax":"swift","type":"codeListing","code":["class Button: Control {","  var label: String","  var enabled: Bool","  \/\/ ...","}"]},{"text":"A value type can contain a reference","type":"heading","anchor":"A-value-type-can-contain-a-reference","level":3},{"type":"paragraph","inlineContent":[{"text":"Copies of the value type will share the reference:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ButtonWrapper {","  var button: Button","}"]},{"type":"paragraph","inlineContent":[{"text":"Maintaining value semantics requires special considerations:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How do we cope with mutation of the referenced object?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"How does the reference identity affect equality?","type":"text"}]}]}],"type":"unorderedList"},{"text":"Immutable references are okay!","type":"heading","anchor":"Immutable-references-are-okay","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" struct that wraps a reference type, "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["struct Image: Drawable {","  var topLeft: CGPoint","  var image: UIImage","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, let’s create 2 images which point to the same "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" object:"}]},{"syntax":"swift","type":"codeListing","code":["var image = Image(","  topLeft: CGPoint(x: 0, y: 0),","  image: UIImage(imageNamed: \"San Francisco\")!",")","var image2 = image"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-image_copy"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"This is not going to cause issues (like with "},{"type":"codeVoice","code":"Temperature"},{"type":"text","text":") because "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" is immutable"}],"type":"strong"},{"text":". We don’t have to worry about ","type":"text"},{"code":"image2","type":"codeVoice"},{"text":" mutating the image it shares with ","type":"text"},{"code":"image","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Immutable references and `Equatable`","type":"heading","anchor":"Immutable-references-and-Equatable","level":3},{"type":"paragraph","inlineContent":[{"text":"Let’s implement ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" for our struct. Notice the ","type":"text"},{"code":"===","type":"codeVoice"},{"text":" operator that checks if both ","type":"text"},{"code":"image","type":"codeVoice"},{"text":" properties point to the same ","type":"text"},{"code":"UIImage","type":"codeVoice"},{"text":" in memory:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Image: Equatable {}","func ==(lhs: Image, rhs: Image) -> Bool {","  return lhs.topLeft == rhs.topLeft && lhs.image === rhs.image","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would work in the example we have, but what if we create 2 separate "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":"s using the same underlying bitmap?"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-double_image"}]},{"type":"paragraph","inlineContent":[{"text":"These should also be considered equal. However, even though both ","type":"text"},{"code":"UIImage","type":"codeVoice"},{"text":"s were created with the same bitmap, they would have different references, and our ","type":"text"},{"code":"===","type":"codeVoice"},{"text":" operator would consider these images unequal.","type":"text"}]},{"text":"Reference identity is not enough","type":"heading","anchor":"Reference-identity-is-not-enough","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, we should use the "},{"type":"codeVoice","code":"isEqual"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"NSObject"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["func ==(lhs: Image, rhs: Image) -> Bool {","  return lhs.topLeft == rhs.topLeft && lhs.image.isEqual(rhs.image)","}"]},{"text":"References to mutable objects","type":"heading","anchor":"References-to-mutable-objects","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"This "},{"code":"BezierPath","type":"codeVoice"},{"type":"text","text":" value type is made up entirely of a reference to a mutable type, "},{"code":"UIBezierPath","type":"codeVoice"},{"type":"text","text":". If we have 2 "},{"code":"BezierPath","type":"codeVoice"},{"type":"text","text":"s pointing to the same reference, calling "},{"code":"addLineToPoint","type":"codeVoice"},{"type":"text","text":" is going to cause problems for both objects."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-reference_mutable_object"}]},{"syntax":"swift","type":"codeListing","code":["struct BezierPath: Drawable {","  var path = UIBezierPath()","","  var isEmpty: Bool {","    return path.empty","  }","","  \/\/ Potential problems","  func addLineToPoint(point: CGPoint) {","    path.addLineToPoint(point)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also notice that there is no "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword because "},{"code":"path","type":"codeVoice"},{"type":"text","text":" is a reference type. This is a bad situation because we’re not maintaining value semantics even though we’re using value types."}]},{"text":"Copy-on-write","type":"heading","anchor":"Copy-on-write","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Unrestricted mutation of referenced objects breaks value semantics","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Separate non-mutating operations from mutating ones"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Non-mutating operations are always safe","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Mutating operations must first copy","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"text":"Copy-on-write in action","type":"heading","anchor":"Copy-on-write-in-action","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to separate accessors for reading and writing so we maintain value semantics."}]},{"syntax":"swift","type":"codeListing","code":["struct BezierPath: Drawable {","  private var _path = UIBezierPath()","","  var pathForReading: UIBezierPath {","    return _path","  }","","  var pathForWriting: UIBezierPath {","    mutating get {","      _path = _path.copy() as! UIBezierPath","      return _path","    }","  }","","  var isEmpty: Bool {","    return pathForReading.empty","  }","","  mutating func addLineToPoint(point: CGPoint) {","    pathForWriting.addLineToPoint(point)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now, if we use ","type":"text"},{"type":"codeVoice","code":"BezierPath"},{"text":", we share references as long as there’s no mutation…","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var path = BezierPath()","var path2 = path","if path.empty { print(\"Path is empty\") }"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-bezier_shared_read","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and when we mutate, we first create a copy so "},{"type":"codeVoice","code":"path2"},{"type":"text","text":" is not affected:"}]},{"syntax":"swift","type":"codeListing","code":["path.addLineToPoint(CGPoint(x: 10, y: 20))"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC15-414-bezier_shared_write","type":"image"}]},{"text":"Forming a path from a `Polygon`","type":"heading","anchor":"Forming-a-path-from-a-Polygon","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Immutable algorithm:"}]},{"syntax":"swift","type":"codeListing","code":["extension Polygon {","  var path: BezierPath {","    var result = BezierPath()","    result.moveToPoint(corners.last!)","    for point in corners {","      \/\/ Copies `BezierPath` in every iteration of the loop!","      result.addLineToPoint(point)","    }","    return result","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Because of the copies, we may see a performance hit. A better implementation ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"carefully"}]},{"text":" uses mutation:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Polygon {","  var path: BezierPath {","    var result = UIBezierPath()  \/\/ Reference type","    result.moveToPoint(corners.last!)","    for point in corners {","      result.addLineToPoint(point)  \/\/ Mutate in every iteration","    }","    return BezierPath(path: result) \/\/ Create value type at end","  }","}"]},{"text":"Uniquely referenced Swift objects","type":"heading","anchor":"Uniquely-referenced-Swift-objects","level":3},{"type":"paragraph","inlineContent":[{"text":"Swift can tell us if objects are uniquely referenced, so we can avoid making copies if we don’t need to. The Swift Standard Library uses this feature extensively.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct MyWrapper {","  var _object: SomeSwiftObject","  var objectForWriting: SomeSwiftObject {","    mutating get {","      if !isUniquelyReferencedNonObjc(&_object) {","        _object = _object.copy()","      }","      return _object","    }","  }","}"]},{"text":"Recap: Mixing value types and reference types","type":"heading","anchor":"Recap-Mixing-value-types-and-reference-types","level":3},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Maintaining value semantics requires special considerations"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Copy-on-write enables efficient value semantics when wrapping Swift reference types","type":"text"}]}]}],"type":"unorderedList"},{"text":"Implementing undo with value types","type":"heading","anchor":"Implementing-undo-with-value-types","level":3},{"type":"paragraph","inlineContent":[{"text":"We’re going to create a diagram and an array of diagrams. With every mutation, we add our ","type":"text"},{"code":"doc","type":"codeVoice"},{"text":" to our diagram array.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var doc = Diagram()","var undoStack = [Diagram]()","undoStack.append(doc)","","doc.addItem(Polygon())","undoStack.append(doc)","","doc.addItem(Circle())","undoStack.append(doc)"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-undo_stack"}]},{"type":"paragraph","inlineContent":[{"text":"Now, our ","type":"text"},{"code":"undo_stack","type":"codeVoice"},{"text":" has 3 distinct instances of ","type":"text"},{"code":"Diagram","type":"codeVoice"},{"text":". These aren’t references to the same ","type":"text"},{"code":"Diagram","type":"codeVoice"},{"text":" because we’re using value semantics.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In an app, this could enable a history feature that gives us a list of all our states. We can easily go back and forth just by indexing into the ","type":"text"},{"code":"undo_stack","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC15-414-history_feature"}]},{"type":"paragraph","inlineContent":[{"text":"In fact, Adobe Photoshop uses value semantics to implement their history feature. Every action results in a new ","type":"text"},{"type":"codeVoice","code":"doc"},{"text":" instance, and this is efficient because of copy-on-write.","type":"text"}]},{"text":"Summary","type":"heading","anchor":"Summary","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Reference semantics and unexpected mutation can lead to bugs"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value semantics solve these problems by giving you the expressiveness of mutability and the safety of immutability"}]}]}],"type":"unorderedList"},{"text":"Written By","type":"heading","anchor":"Written-By","level":2},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"skhillon","type":"image"}]}]},{"size":4,"content":[{"level":3,"anchor":"Sarthak-Khillon","text":"Sarthak Khillon","type":"heading"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","overridingTitle":"Contributed Notes","isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/skhillon","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/SarthakKhillon","isActive":true,"type":"reference"}]}]}],"numberOfColumns":5,"type":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"text":"Related Sessions","type":"heading","anchor":"Related-Sessions","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-419-Protocol-and-Value-Oriented-Programming-in-UIKit-Apps"],"type":"links"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15"]]},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc15-414-building-better-apps-with-value-types-in-swift"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"../408":{"url":"..\/408","type":"link","identifier":"..\/408","title":"Protocol-Oriented Programming in Swift","titleInlineContent":[{"text":"Protocol-Oriented Programming in Swift","type":"text"}]},"WWDC15-414-diagram_copy":{"type":"image","identifier":"WWDC15-414-diagram_copy","alt":null,"variants":[{"url":"\/images\/WWDC15-414-diagram_copy.png","traits":["1x","light"]}]},"https://github.com/skhillon":{"url":"https:\/\/github.com\/skhillon","type":"link","identifier":"https:\/\/github.com\/skhillon","title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}]},"WWDC15-414-copied_on_assignment":{"type":"image","identifier":"WWDC15-414-copied_on_assignment","alt":null,"variants":[{"url":"\/images\/WWDC15-414-copied_on_assignment.png","traits":["1x","light"]}]},"https://developer.apple.com/wwdc15/414":{"url":"https:\/\/developer.apple.com\/wwdc15\/414","type":"download","identifier":"https:\/\/developer.apple.com\/wwdc15\/414","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC16-419-Protocol-and-Value-Oriented-Programming-in-UIKit-Apps":{"kind":"article","type":"topic","abstract":[{"text":"Building on last year’s Protocol-Oriented Programming and Building Better Apps with Value Types sessions, this year’s session will highlight tips and tricks for building better Swift apps. See how you can incorporate these design approaches into a real MVC-based Cocoa Touch app, especially in the view and controller layers, where you might not have thought of using these techniques before.","type":"text"}],"role":"sampleCode","title":"Protocol and Value Oriented Programming in UIKit Apps","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-419-Protocol-and-Value-Oriented-Programming-in-UIKit-Apps","url":"\/documentation\/wwdcnotes\/wwdc16-419-protocol-and-value-oriented-programming-in-uikit-apps"},"WWDC15-Icon.png":{"type":"image","identifier":"WWDC15-Icon.png","alt":null,"variants":[{"url":"\/images\/WWDC15-Icon.png","traits":["1x","light"]}]},"WWDC15-414-history_feature":{"type":"image","identifier":"WWDC15-414-history_feature","alt":null,"variants":[{"url":"\/images\/WWDC15-414-history_feature.png","traits":["1x","light"]}]},"WWDC15-414-polygon_struct":{"type":"image","identifier":"WWDC15-414-polygon_struct","alt":null,"variants":[{"url":"\/images\/WWDC15-414-polygon_struct.png","traits":["1x","light"]}]},"skhillon.jpeg":{"type":"image","identifier":"skhillon.jpeg","alt":null,"variants":[{"url":"\/images\/skhillon.jpeg","traits":["1x","light"]}]},"WWDC15-414-immutable_sieve":{"type":"image","identifier":"WWDC15-414-immutable_sieve","alt":null,"variants":[{"url":"\/images\/WWDC15-414-immutable_sieve.png","traits":["1x","light"]}]},"WWDC15-414-bezier_shared_write":{"type":"image","identifier":"WWDC15-414-bezier_shared_write","alt":null,"variants":[{"url":"\/images\/WWDC15-414-bezier_shared_write.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15","role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc15","images":[{"type":"icon","identifier":"WWDC15-Icon.png"},{"type":"card","identifier":"WWDC15.jpeg"}],"title":"WWDC15","abstract":[{"type":"text","text":"Xcode 7, Swift 2.0, iOS 9, macOS 10.11 (El Capitan), watchOS 2."}]},"doc://WWDCNotes/documentation/WWDCNotes/skhillon":{"images":[{"identifier":"skhillon.jpeg","type":"card"},{"identifier":"skhillon.jpeg","type":"icon"}],"abstract":[{"text":"No Bio on GitHub","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/skhillon","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","kind":"article","role":"sampleCode","title":"Sarthak Khillon (19 notes)"},"WWDC15-414-bezier_shared_read":{"type":"image","identifier":"WWDC15-414-bezier_shared_read","alt":null,"variants":[{"url":"\/images\/WWDC15-414-bezier_shared_read.png","traits":["1x","light"]}]},"WWDC15-414-circle_struct":{"type":"image","identifier":"WWDC15-414-circle_struct","alt":null,"variants":[{"url":"\/images\/WWDC15-414-circle_struct.png","traits":["1x","light"]}]},"WWDC15-414-value_temperature":{"type":"image","identifier":"WWDC15-414-value_temperature","alt":null,"variants":[{"url":"\/images\/WWDC15-414-value_temperature.png","traits":["1x","light"]}]},"WWDC15-414-diagram_drawable2":{"type":"image","identifier":"WWDC15-414-diagram_drawable2","alt":null,"variants":[{"url":"\/images\/WWDC15-414-diagram_drawable2.png","traits":["1x","light"]}]},"https://x.com/SarthakKhillon":{"url":"https:\/\/x.com\/SarthakKhillon","type":"link","identifier":"https:\/\/x.com\/SarthakKhillon","title":"X\/Twitter","titleInlineContent":[{"text":"X\/Twitter","type":"text"}]},"WWDC15-414-reference_mutable_object":{"type":"image","identifier":"WWDC15-414-reference_mutable_object","alt":null,"variants":[{"url":"\/images\/WWDC15-414-reference_mutable_object.png","traits":["1x","light"]}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"skhillon":{"type":"image","identifier":"skhillon","alt":"Profile image of Sarthak Khillon","variants":[{"url":"\/images\/skhillon.jpeg","traits":["1x","light"]}]},"WWDCNotes.png":{"type":"image","identifier":"WWDCNotes.png","alt":null,"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}]},"WWDC15-414-double_image":{"type":"image","identifier":"WWDC15-414-double_image","alt":null,"variants":[{"url":"\/images\/WWDC15-414-double_image.png","traits":["1x","light"]}]},"WWDC15.jpeg":{"type":"image","identifier":"WWDC15.jpeg","alt":null,"variants":[{"url":"\/images\/WWDC15.jpeg","traits":["1x","light"]}]},"WWDC15-414-image_copy":{"type":"image","identifier":"WWDC15-414-image_copy","alt":null,"variants":[{"url":"\/images\/WWDC15-414-image_copy.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","title":"WWDC Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","type":"topic","url":"\/documentation\/wwdcnotes"},"WWDC15-414-diagram_protocol":{"type":"image","identifier":"WWDC15-414-diagram_protocol","alt":null,"variants":[{"url":"\/images\/WWDC15-414-diagram_protocol.png","traits":["1x","light"]}]},"WWDC15-414-unintended_sharing":{"type":"image","identifier":"WWDC15-414-unintended_sharing","alt":null,"variants":[{"url":"\/images\/WWDC15-414-unintended_sharing.png","traits":["1x","light"]}]},"WWDC15-414-diagram_drawable1":{"type":"image","identifier":"WWDC15-414-diagram_drawable1","alt":null,"variants":[{"url":"\/images\/WWDC15-414-diagram_drawable1.png","traits":["1x","light"]}]},"WWDC15-414-undo_stack":{"type":"image","identifier":"WWDC15-414-undo_stack","alt":null,"variants":[{"url":"\/images\/WWDC15-414-undo_stack.png","traits":["1x","light"]}]},"https://www.linkedin.com/in/sarthakkhillon/":{"url":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","type":"link","identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}]}}}