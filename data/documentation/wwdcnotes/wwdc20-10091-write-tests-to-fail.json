{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10091-Write-tests-to-fail"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"metadata":{"roleHeading":"WWDC20","title":"Write tests to fail","modules":[{"name":"WWDC Notes"}],"role":"sampleCode"},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Your main focus while writing Tests is to fail"}],"type":"paragraph"}]}]},{"text":"The test template follows this pattern","anchor":"The-test-template-follows-this-pattern","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Set up","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test: actions"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Test: assertions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Tear down"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"Set-Up","text":"Set Up"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is where you explicitly state the required assumptions and set the right environment for your app to run in"}]}]},{"content":[{"inlineContent":[{"text":"You can use ","type":"text"},{"code":"setUpWithError() throws","type":"codeVoice"},{"text":" that allows you to throw an error during your set up, you may need this in a case for example where your previous tests have modifier the state of your app, example:","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["class RecipesTests: XCTestCase {","\tlet app = FrutaApp()","","\toverride func setUpWithError() throws {","    \tcontinueAfterFailure = false","    \tapp.launchArguments.append(\"-recipes-tests\")","    \tapp.launch()","\t}","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"continueAfterFailure = false"},{"type":"text","text":" causes your testing process to stop immediately instead of test failing for no obvious reasons"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"launchArguments"},{"type":"text","text":" can be used to pass flags to bypass certain parts of your app, for example, here we’re bypassing the first tap "},{"type":"codeVoice","code":".menu"},{"type":"text","text":" and jumping to the last one "},{"type":"codeVoice","code":".recipes"},{"text":":","type":"text"}]}]}]},{"type":"codeListing","code":["@State private var selection: Tab = CommandLine.arguments.contains(\"-recipes-tests\") ? .recipes : .menu"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Test-actions","text":"Test: actions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Tests names should reflect what the test is doing","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Minimize the number of actions a test is doing as much as possible"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use enum cases to extract typed "},{"code":"String","type":"codeVoice"},{"type":"text","text":"s from your tests, this makes it easier to update them later, and reduces the not-so-obvious errors coming from misspelling strings"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Factor out common code into separate functions to reduce repetitive bits and allow for more time to focus on hardening these paths to reduce errors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Try to model your app domain and design a test language around those models, for example, here we’re creating a ","type":"text"},{"code":"FrutaApp","type":"codeVoice"},{"text":" object that can retrieve an array of ","type":"text"},{"code":"SmoothieList","type":"codeVoice"},{"text":":","type":"text"}]}]}]},{"type":"codeListing","code":["public class FrutaApp : XCUIApplication {","  public func smoothieList() throws -> SmoothieList {  }","} ","","public class SmoothieList : FrutaUIElement {","  public func selectRecipe(smoothie: SmoothieType) throws -> Recipe {  }","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This helps in increasing the readability of your code and organizes the hierarchy of objects"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Consider creating shared frameworks or shared Swift Packages when your test codebase becomes large, and especially when sharing code between multiple applications","type":"text"}]}]}]},{"type":"heading","level":2,"anchor":"Test-assertions","text":"Test: assertions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Try to make use of optional descriptions in different "},{"type":"codeVoice","code":"XCTAssert*"},{"type":"text","text":" functions as much as possible, this gives more context for failure messages when viewed from the test results bundle"}]}]}]},{"type":"codeListing","code":["XCTAssertEqual(","\tcount, ","\texpectedCount, ","\t\"\\(SmoothieType.berryBlue.rawValue) smoothie is expected to have \\(expectedCount) ingredients: \\(expectedIngredients), however, there were \\(count) found.\"",")"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"Leave out too specific details such as date, timestamps and file paths from your assertion messages"}],"type":"paragraph"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When testing asynchronous logic, avoid using "},{"type":"codeVoice","code":"sleep()"},{"type":"text","text":", you should otherwise use built in "},{"type":"codeVoice","code":"wait"},{"type":"text","text":" functions such as "},{"type":"codeVoice","code":"waitForExistence"},{"type":"text","text":" , this allows you to thrown a custom error and lets you view the time async operations took to finish in the tests results"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unwrap your optionals gracefully, force unwrapping causes crashes and halts your tests, examples of techniques that can be used to unwrap optionals:"}]}]}]},{"type":"codeListing","code":["if let favs = favorites {  }","guard let favs = favorites else { \/* throw an error *\/ }","let favs = favorites ?? []","let favs = try XCTUnwrap(favorites, \"favorites is nil, so there is nothing to count”)"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike crashing, failing a test gracefully on unwrap allows your teardown method to be called"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"User ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" in your shared code functions this allows sharing basic testing logic between different test cases, you can also throw custom errors to give more clear error messages:","type":"text"}]}]}]},{"type":"codeListing","code":["public func verify(ingredients: [String]) throws {","\t...","\tthrow RecipeError.ingredientDoesNotExist(ingredient)","}","","public enum RecipeError : Error, CustomStringConvertible {","\tcase ingredientDoesNotExist(String)","","\tpublic var description : String {","    \tswitch self {","    \tcase .ingredientDoesNotExist(let ingredient):","        \treturn \"\\(ingredient) does not exist in the Ingredients View.)\"","    \t}","\t}","}"],"syntax":"swift"},{"type":"codeListing","code":["![][image-1]","","> New in Xcode 12, you can see the back trace for thrown errors, which allows you to see directly from which inner\/shared code an error was thrown "],"syntax":null},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"XCTContext.runActivity()"},{"type":"text","text":" to provide custom entries in your results bundle that helps identifying the current context, you can add "},{"type":"codeVoice","code":"XCTAttachment"},{"type":"text","text":" as well and it will show along the given context:"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["public func verify(ingredients: [String]) throws {","\ttry XCTContext.runActivity(named: \"Verifying \\(ingredients) exists in the Recipe screen.\")","\t{ verifyingRecipe in","    \tfor ingredient in ingredients {","        \tif !element.switches[ingredient].waitForExistence(timeout: 5) {","            \tlet attachment = XCTAttachment(string: element.debugDescription)","            \tverifyingRecipe.add(attachment)","            \t throw RecipeError.ingredientDoesNotExist(ingredient)","        \t}","    \t}","\t}","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10091-context_result_bundle"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"XCTSkip()"},{"type":"text","text":", "},{"type":"codeVoice","code":"XCTSkipIf()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"XCTSkipUnless()"},{"type":"text","text":" when you want to skip certain test cases when it’s not a suitable time for them to run, or they’re not relevant to a certain platform"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This is particularly useful for when a test is failing due to flawed code that is due fixing in the near future, or for when the test is written before the code itself","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Skipping the test will still make it appear in the results bundle, reminding you that you still have to go back and fill that missing code or fix it at sometime","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"Tear-Down","text":"Tear Down"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"tearDownWithError() throws","type":"codeVoice"},{"text":" and take advantage of the provided error management","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Collect additional logging that’s relevant to your tests, including some analysis of the failures","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Remember to reset the environment from the changes that were done during the set up","type":"text"}]}]}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"inlineContent":[{"identifier":"ATahhan","type":"image"}],"type":"paragraph"}],"size":1},{"content":[{"level":3,"type":"heading","text":"Ammar AlTahhan","anchor":"Ammar-AlTahhan"},{"type":"paragraph","inlineContent":[{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/ATahhan","overridingTitle":"Contributed Notes","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/ATahhan","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/","isActive":true}]}],"size":4}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10164-XCTSkip-your-tests","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10221-Get-your-test-results-faster","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10687-Triage-test-failures-with-XCTIssue"],"style":"list"},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"sections":[],"kind":"article","sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc20\/10091","isActive":true,"overridingTitle":"Watch Video (17 min)","type":"reference"},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc20-10091-write-tests-to-fail"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Plan for failure: Design great tests to help you find and diagnose even the toughest bugs. Learn how to improve your automated tests with XCTest to find hidden issues in even the best code. We’ll explain how to prepare your tests for failure to make triaging issues easier, letting you solve interface issues and deliver fixes quickly.","type":"text"}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud":{"title":"Author fast and reliable tests for Xcode Cloud","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud","kind":"article","type":"topic","abstract":[{"text":"Discover how you can create effective testing plans for Xcode Cloud, Apple’s continuous integration and continuous delivery service. We’ll show you how testing can be an essential tool to consistently verify your code works correctly. Learn how you can author fast, reliable, and efficient tests for Xcode Cloud, avoid irrelevant failures, and verify your code changes quickly.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-110361-author-fast-and-reliable-tests-for-xcode-cloud","role":"sampleCode"},"https://developer.apple.com/wwdc20/10091":{"url":"https:\/\/developer.apple.com\/wwdc20\/10091","identifier":"https:\/\/developer.apple.com\/wwdc20\/10091","checksum":null,"type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests":{"abstract":[{"type":"text","text":"Learn how to anticipate potential interruptions to your app’s interface and build smart tests to identify them. UI interruptions often appear indeterminately, typically during onboarding or first launch, which can make them hard to track down. Learn how to understand interruptions, write stronger tests with UI interruption handlers, and manage expected alerts."}],"title":"Handle interruptions and alerts in UI tests","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests","type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10220-handle-interruptions-and-alerts-in-ui-tests","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10221-Get-your-test-results-faster":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10221-Get-your-test-results-faster","url":"\/documentation\/wwdcnotes\/wwdc20-10221-get-your-test-results-faster","kind":"article","title":"Get your test results faster","type":"topic","abstract":[{"text":"Improve your testing suite to speed up your feedback loop and get fixes in faster. Learn more about the latest improvements to testing in Xcode, including how to leverage test plans, Xcodebuild updates, and APIs to eliminate never-ending and badly-behaved tests. We’ll explore Test Timeouts and Execution Time Allowances in XCTest, examine device parallelization, and detail recommended practices for balancing performance with clear fault localization.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10164-XCTSkip-your-tests":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10164-XCTSkip-your-tests","url":"\/documentation\/wwdcnotes\/wwdc20-10164-xctskip-your-tests","kind":"article","title":"XCTSkip your tests","type":"topic","abstract":[{"text":"Get the test results that matter — and skip the ones that don’t. Discover how you can implement XCTSkip to conditionally avoid tests at runtime. We’ll take you through how to return this new test result and better document tests beyond pass and fail within your test bundle.","type":"text"}]},"WWDC20.jpeg":{"variants":[{"url":"\/images\/WWDC20.jpeg","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"WWDC20.jpeg"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"https://github.com/ATahhan":{"url":"https:\/\/github.com\/ATahhan","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","identifier":"https:\/\/github.com\/ATahhan"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10142-Build-scalable-enterprise-app-suites":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc20-10142-build-scalable-enterprise-app-suites","title":"Build scalable enterprise app suites","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","abstract":[{"type":"text","text":"Learn how to build focused enterprise apps that work well together. In this session, we’ll introduce you to Apple Retail’s suite of enterprise apps, which help employees interact with customers, track operations, manage stores, and stay connected. Discover how Apple Retail created a unified set of apps by adopting Swift Packages and testing for app scalability. And explore how managing apps in production with configurations can help tailor app suites to different regions and locations."}],"role":"sampleCode"},"WWDC20-Icon.png":{"variants":[{"url":"\/images\/WWDC20-Icon.png","traits":["1x","light"]}],"identifier":"WWDC20-Icon.png","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10687-Triage-test-failures-with-XCTIssue":{"kind":"article","abstract":[{"type":"text","text":"Put your test failures to work: Learn how to triage and diagnose uncaught issues in your app using the latest testing APIs in Xcode. We’ll show you how to help ease your testing workflow and put failures into context to help you deliver the best quality product."}],"url":"\/documentation\/wwdcnotes\/wwdc20-10687-triage-test-failures-with-xctissue","title":"Triage test failures with XCTIssue","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10687-Triage-test-failures-with-XCTIssue","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"url":"\/documentation\/wwdcnotes\/wwdc20","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","title":"WWDC20","type":"topic","abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WidgetKit"},{"type":"text","text":", "},{"code":"StoreKit Testing","type":"codeVoice"},{"type":"text","text":", and more."}],"images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"type":"card","identifier":"WWDC20.jpeg"}],"role":"collectionGroup"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes/ATahhan":{"type":"topic","title":"Ammar AlTahhan (12 notes)","abstract":[{"type":"text","text":"Software Engineer"}],"role":"sampleCode","images":[{"type":"card","identifier":"ATahhan.jpeg"},{"type":"icon","identifier":"ATahhan.jpeg"}],"url":"\/documentation\/wwdcnotes\/atahhan","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/ATahhan","kind":"article"},"https://":{"identifier":"https:\/\/","titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","url":"https:\/\/","type":"link"},"ATahhan":{"variants":[{"url":"\/images\/ATahhan.jpeg","traits":["1x","light"]}],"type":"image","alt":"Profile image of Ammar AlTahhan","identifier":"ATahhan"},"ATahhan.jpeg":{"variants":[{"url":"\/images\/ATahhan.jpeg","traits":["1x","light"]}],"identifier":"ATahhan.jpeg","alt":null,"type":"image"},"WWDC20-10091-context_result_bundle":{"variants":[{"url":"\/images\/WWDC20-10091-context_result_bundle.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"WWDC20-10091-context_result_bundle"}}}