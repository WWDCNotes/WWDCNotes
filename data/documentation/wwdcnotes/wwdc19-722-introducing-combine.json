{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-722-Introducing-Combine"},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","text":"What’s Combine?","level":2,"anchor":"Whats-Combine"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A unified, declarative API for processing values over time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Combine was designed for composition.","type":"text"}]}]}]},{"type":"heading","text":"Key Concepts","level":2,"anchor":"Key-Concepts"},{"type":"heading","text":"`Publisher`","level":3,"anchor":"Publisher"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"it’s a protocol","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declarative part of Combine."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Describes how values\/errors are produced.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sends (sequences of) values over time."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Two generic types: "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Error"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Completion via ","type":"text"},{"type":"codeVoice","code":".finished"},{"text":" or ","type":"text"},{"type":"codeVoice","code":".failure"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Publishers are not necessary who produced the value\/error."}]}]}]},{"type":"heading","text":"`Subscriber`","level":3,"anchor":"Subscriber"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"it’s a protocol"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Publisher","type":"codeVoice"},{"text":" counterpart","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Receives values from publishers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Two generic types: ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Error","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Can cancel a subscription","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Subscription"},{"text":": A subscription is how a ","type":"text"},{"type":"codeVoice","code":"Subscriber"},{"text":" controls the flow of data from a Publisher to the ","type":"text"},{"type":"codeVoice","code":"Subscriber"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Operators","level":3,"anchor":"Operators"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"In-between "},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Subscriber"},{"type":"text","text":"s, they transform\/filter the published value into something desired by the subscriber"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Operators forward errors, only change values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They also manage scheduling\/time, thread\/queue movement, and more"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine provides a lot of operators:"},{"type":"text","text":"\n"},{"code":"catch","type":"codeVoice"},{"type":"text","text":", "},{"code":"dropFirst","type":"codeVoice"},{"type":"text","text":", "},{"code":"allSatisfy","type":"codeVoice"},{"type":"text","text":", "},{"code":"breakpoint","type":"codeVoice"},{"type":"text","text":", "},{"code":"setFailureType","type":"codeVoice"},{"type":"text","text":", "},{"code":"prepend","type":"codeVoice"},{"type":"text","text":", "},{"code":"replaceError","type":"codeVoice"},{"type":"text","text":", "},{"code":"append","type":"codeVoice"},{"type":"text","text":", "},{"code":"map","type":"codeVoice"},{"type":"text","text":", "},{"code":"filter","type":"codeVoice"},{"type":"text","text":", "},{"code":"count","type":"codeVoice"},{"type":"text","text":", "},{"code":"abortOnError","type":"codeVoice"},{"type":"text","text":", "},{"code":"breakpointOnError","type":"codeVoice"},{"type":"text","text":", "},{"code":"ignoreOutput","type":"codeVoice"},{"type":"text","text":", "},{"code":"first","type":"codeVoice"},{"type":"text","text":", "},{"code":"min","type":"codeVoice"},{"type":"text","text":", "},{"code":"last","type":"codeVoice"},{"type":"text","text":", "},{"code":"output","type":"codeVoice"},{"type":"text","text":", "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":", "},{"code":"replaceEmpty","type":"codeVoice"},{"type":"text","text":", "},{"code":"compactMap","type":"codeVoice"},{"type":"text","text":", "},{"code":"zip","type":"codeVoice"},{"type":"text","text":", "},{"code":"flatMap","type":"codeVoice"},{"type":"text","text":", "},{"code":"removeDuplicates","type":"codeVoice"},{"type":"text","text":", "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":", "},{"code":"combineLatest","type":"codeVoice"},{"type":"text","text":", "},{"code":"collect","type":"codeVoice"},{"type":"text","text":", "},{"code":"retry","type":"codeVoice"},{"type":"text","text":", "},{"code":"contains","type":"codeVoice"},{"type":"text","text":", "},{"code":"switchToLatest","type":"codeVoice"},{"type":"text","text":", "},{"code":"replaceNil","type":"codeVoice"},{"type":"text","text":", "},{"code":"scan","type":"codeVoice"},{"type":"text","text":", and more!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The idea is that operators are composable:"},{"type":"text","text":"\n"},{"type":"text","text":"instead of having a few operators that do a lot, Combine provides many operators that do a little, then it’s up to us to choose which operators to use based on our needs."}]},{"type":"paragraph","inlineContent":[{"text":"If a operator returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", it’s like stopping the event\/value to proceed further. We can use most of the functional operators we’re used with arrays: prefix, compactMap, filter…","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"zip"},{"type":"text","text":" converts multiple inputs (from different publishers) into a single tuple. It requires all the inputs (from all upstreams) to be delivered before sending the data downstream. Therefore it acts as a when\/and operation."}]},{"type":"paragraph","inlineContent":[{"code":"combineLatest","type":"codeVoice"},{"type":"text","text":" is like "},{"code":"zip","type":"codeVoice"},{"type":"text","text":", but it keeps the latest value of each upstream. Whenever a new value comes in, a new event is sent downstream with all old values except the new one."}]},{"type":"paragraph","inlineContent":[{"text":"Note that both zip and CombineLatest can transform the values into something else (no need to forward necessarily the tuple)","type":"text"}]},{"type":"heading","text":"Future vs Publisher","level":3,"anchor":"Future-vs-Publisher"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If we need to represent a single value asynchronously, we have a future."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If we need to represent many values asynchronously, that’s a Publisher."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Future is a real type in combine","type":"text"}]}]}]},{"type":"heading","text":"Written By","level":2,"anchor":"Written-By"},{"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"type":"heading","text":"Federico Zanetello","anchor":"Federico-Zanetello","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}]}],"size":4}],"numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"type":"heading","text":"Related Sessions","level":2,"anchor":"Related-Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-210-Whats-New-in-AppKit-for-macOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-721-Combine-in-Practice"],"style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Combine is a unified declarative framework for processing values over time. Learn how it can simplify asynchronous code like networking, key value observing, notifications and callbacks."}],"metadata":{"roleHeading":"WWDC19","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Introducing Combine"},"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc19\/722","isActive":true,"overridingTitle":"Watch Video (18 min)","type":"reference"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc19-722-introducing-combine"]}],"references":{"zntfdr":{"identifier":"zntfdr","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"alt":"Profile image of Federico Zanetello","type":"image"},"WWDC19-Icon.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC19-Icon.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"WWDC19-Icon.png"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","title":"GitHub","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-721-Combine-in-Practice":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc19-721-combine-in-practice","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Expand your knowledge of Combine, Apple’s new unified, declarative framework for processing values over time. Learn about how to correctly handle errors, schedule work and integrate Combine into your app today."}],"title":"Combine in Practice","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-721-Combine-in-Practice"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"https://zntfdr.dev":{"title":"Blog","type":"link","url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"type":"text","text":"Blog"}]},"WWDC19.jpeg":{"identifier":"WWDC19.jpeg","variants":[{"url":"\/images\/WWDCNotes\/WWDC19.jpeg","traits":["1x","light"]}],"type":"image","alt":null},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://developer.apple.com/wwdc19/722":{"type":"download","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc19\/722","identifier":"https:\/\/developer.apple.com\/wwdc19\/722"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-226-Data-Flow-Through-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","abstract":[{"text":"SwiftUI was built from the ground up to let you write beautiful and correct user interfaces free of inconsistencies. Learn how to connect your data as dependencies while keeping the UI fully predictable and error free. Familiarize yourself with SwiftUI’s powerful data flow tools and understand what the best tool is for each situation.","type":"text"}],"title":"Data Flow Through SwiftUI","type":"topic","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-226-data-flow-through-swiftui"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"url":"\/documentation\/wwdcnotes\/zntfdr","type":"topic","title":"Federico Zanetello (332 notes)","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"kind":"article","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","title":"WWDC Notes","type":"topic","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes","role":"collection"},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-210-Whats-New-in-AppKit-for-macOS":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-210-Whats-New-in-AppKit-for-macOS","abstract":[{"text":"Learn about the latest APIs in AppKit and associated frameworks. Get an overview of the enhancements coming in macOS Catalina to help you save time, take advantage of the latest hardware, and add polish to your application.","type":"text"}],"title":"What’s New in AppKit for macOS","type":"topic","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-210-whats-new-in-appkit-for-macos"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19":{"kind":"article","title":"WWDC19","type":"topic","images":[{"identifier":"WWDC19-Icon.png","type":"icon"},{"identifier":"WWDC19.jpeg","type":"card"}],"abstract":[{"text":"Xcode 11, Swift 5.1, iOS 13, macOS 10.15 (Catalina), tvOS 13, watchOS 6.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"Combine","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Core Haptics","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Create ML","type":"codeVoice"},{"text":", and more.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19","url":"\/documentation\/wwdcnotes\/wwdc19","role":"collectionGroup"}}}