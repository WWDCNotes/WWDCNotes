{"metadata":{"role":"sampleCode","roleHeading":"WWDC22","title":"Debug Swift debugging with LLDB","modules":[{"name":"WWDC Notes"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc22-110370-debug-swift-debugging-with-lldb"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","primaryContentSections":[{"content":[{"anchor":"What-does-LLDB-need-in-order-to-show-source-code","type":"heading","level":2,"text":"What does LLDB need in order to show source code?"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When the compiler compiles a function in a ","type":"text"},{"text":".swift","type":"text"},{"text":" file, it generates machine code (store in ","type":"text"},{"text":".o","type":"text"},{"text":" object files)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"on debug builds, ","type":"text"},{"text":".o","type":"text"},{"text":" files come with a ","type":"text"},{"code":"__debug_info","type":"codeVoice"},{"text":" segment, which contains addresses in the executable that can be mapped to a source file and line number, and vice versa","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"for archiving and distribution, debug info can be linked into ","type":"text"},{"text":".dSYM","type":"text"},{"text":" bundles","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the debug info linker is called "},{"type":"codeVoice","code":"dsymutil"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"image-and-path-remap","type":"heading","level":2,"text":"`image` and path remap"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"image list nameOfFramework"},{"type":"text","text":" to check whether LLDB has found the debug dSYM of a third party framework embedded in our app"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"image lookup 0xMemoryAddressHere"},{"type":"text","text":" to get more info about the current address"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"to remap source ","type":"text"},{"text":".dSYM","type":"text"},{"text":" paths, use ","type":"text"},{"type":"codeVoice","code":"settings set target.source-map old\/path new\/path"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"tip: instead of doing this at each session, create a lldb init file that is run at the beginning of each session (point to this file in your scheme)","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"text":"alternatively, each ","type":"text"},{"text":".dSYM","type":"text"},{"text":" bundle comes with a ","type":"text"},{"text":"UUID.plist","type":"text"},{"text":" where we can set a ","type":"text"},{"code":"DBGSourcePathRemapping","type":"codeVoice"},{"text":" dictionary","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Source-path-canonicalization","type":"heading","level":2,"text":"Source path canonicalization"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We can instruct the compiler to canonicalize source paths before putting them into the debug info","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This is done using the ","type":"text"},{"code":"-debug-prefix-map","type":"codeVoice"},{"text":" option","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This way the machine-specific path prefix can be replaced by a unique, canonical placeholder name that can then be remapped to the local path in LLDB"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"shell","code":["\/\/ Clang:","-fdebug-prefix-map $PWD=\/BUILDROOT","","\/\/ Swift:","-debug-prefix-map $PWD=\/BUILDROOT"]},{"anchor":"popexpr-vs-v-frame","type":"heading","level":3,"text":"po,p,expr vs v, frame"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"LLDB is both a debugger and a compiler"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"based on whether our LLDB command sides in the debugger or compiler side of LLDB, they might or or not fail"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(debugger side) "},{"type":"codeVoice","code":"v"},{"type":"text","text":" and "},{"type":"codeVoice","code":"frame"},{"type":"text","text":" get their type information from LLDB Debug Info (which in turn gets types from Swift reflection metadata_"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(compiler side) "},{"type":"codeVoice","code":"p"},{"type":"text","text":", "},{"type":"codeVoice","code":"po"},{"type":"text","text":", "},{"type":"codeVoice","code":"expr"},{"type":"text","text":" get type information from Modules"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Modules are how the compiler organizes type declarations","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"How do we start diagnosing an issue that is happening on the compiler side?"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"new in Xcode 14, we have "},{"type":"codeVoice","code":"swift-healthcheck"},{"type":"text","text":" LLDB command"}]}]},{"content":[{"inlineContent":[{"text":"it helps understanding if and why a module import failed","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"it saves a ","type":"text"},{"text":".log","type":"text"},{"text":" of the Swift expression evaluator configuration","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"How-LLDBs-compiler-finds-Swift-modules","type":"heading","level":2,"text":"How LLDB’s compiler finds Swift modules?"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"It’s the build system’s job to package up the modules so LLDB can find them","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Modules from system frameworks stay in the SDK (anyone can find them via ","type":"text"},{"type":"codeVoice","code":"$ xcrun --show-sdk-path"},{"text":"), LLDB will find a matching SDK to read them from as it’s attaching to your program","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"when debugging straight from the ","type":"text"},{"text":".o","type":"text"},{"text":" object files, LLDB will find all non-SDK modules where they were at build time","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"dsymutil","type":"codeVoice"},{"text":" can package a debug info archive (","type":"text"},{"text":".dSYM","type":"text"},{"text":" bundle) for every dynamic library, framework or dylib, and executable","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"each .dSYM bundle can contain binary Swift modules, which may contain bridging headers ","type":"text"},{"text":".h","type":"text"},{"text":", textual Swift interface files ","type":"text"},{"text":".swiftinterface","type":"text"},{"text":", and most importantly, debug info.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"for static archives, a Swift module needs to be registered with the linker (","type":"text"},{"type":"codeVoice","code":"ld ... -add-ast-path \/path\/to\/My.swiftmodule"},{"text":")","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"for dynamic libraries and executables, the build system will do this automatically for you. But for static archives, this is needed because static archives are not produced by the linker"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Xcode’s build system should do this for you, but you need to be aware if you have your own build system","type":"text"}]}]}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You can check your build log to verify that that everything is linked, or use ","type":"text"},{"code":"dsymutil","type":"codeVoice"},{"text":" to dump the symbol table of your executable and grep for “swiftmodule”:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"shell","code":["dsymutil -s MyApp | grep .swiftmodule"]},{"inlineContent":[{"text":"In Linux the swift driver supports a ","type":"text"},{"code":"-modulewrap","type":"codeVoice"},{"text":" flag that converts binary Swift module files into objects that you can link into your binary together with the rest of the debug info. LLDB will find it there","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"shell","code":["swiftc -modulewrap My.swiftmodule -o My.swiftmodule.o"]},{"anchor":"Avoiding-serialized-search-paths-in-Swift-modules","type":"heading","level":2,"text":"Avoiding serialized search paths in Swift modules"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift compiler will serialize Clang header search paths and other related options into the binary "},{"type":"text","text":".swiftmodule"},{"type":"text","text":" files"}]}]},{"content":[{"inlineContent":[{"text":"This is great, because it makes importing their Clang module dependencies just work during the build","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"But when building on a different machine, these local paths can be detrimental","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before shipping a binary "},{"type":"text","text":".swiftmodule"},{"type":"text","text":" to another machine, set the "},{"code":"-no-serialize-debugging-options","type":"codeVoice"},{"type":"text","text":" compiler flag"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In Xcode this is controlled via the ","type":"text"},{"type":"codeVoice","code":"SWIFT_SERIALIZE_DEBUGGING_OPTIONS"},{"text":" setting","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"you can then reintroduce these search paths in LLDB with one of the following settings:"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"shell","code":["settings set target.swift-extra-clang-flags …","settings set target.swift-framework-search-paths …","settings set target.swift-module-search-paths …"]},{"anchor":"Written-By","type":"heading","level":2,"text":"Written By"},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}]},{"size":4,"content":[{"level":3,"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","type":"reference","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/zntfdr","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/zntfdr.dev","type":"reference","isActive":true}]}]}]},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}],"type":"paragraph"},{"anchor":"Related-Sessions","type":"heading","level":2,"text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10209-Discover-breakpoint-improvements","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10211-Symbolication-Beyond-the-basics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-429-LLDB-Beyond-po","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-412-Advanced-Debugging-with-Xcode-and-LLDB"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"sections":[],"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc22\/110370","overridingTitle":"Watch Video (20 min)","isActive":true},"kind":"sampleDownload"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110370-Debug-Swift-debugging-with-LLDB"},"abstract":[{"type":"text","text":"Learn how you can set up complex Swift projects for debugging. We’ll take you on a deep dive into the internals of LLDB and debug info. We’ll also share best practices for complex scenarios such as debugging code built on build servers or code from custom build systems."}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10209-Discover-breakpoint-improvements":{"kind":"article","title":"Discover breakpoint improvements","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10209-Discover-breakpoint-improvements","type":"topic","role":"sampleCode","abstract":[{"text":"Breakpoints can help you debug issues by allowing you to pause and inspect problems in the middle of a process. Discover the latest improvements to breakpoints in Xcode including column and unresolved breakpoints. We’ll also go over best practices for general breakpoints and LLDB tips and tricks.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10209-discover-breakpoint-improvements"},"https://github.com/zntfdr":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"identifier":"https:\/\/github.com\/zntfdr","title":"GitHub","type":"link","url":"https:\/\/github.com\/zntfdr"},"https://zntfdr.dev":{"identifier":"https:\/\/zntfdr.dev","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/zntfdr.dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-412-Advanced-Debugging-with-Xcode-and-LLDB":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-412-Advanced-Debugging-with-Xcode-and-LLDB","type":"topic","abstract":[{"type":"text","text":"Discover advanced techniques, and tips and tricks for enhancing your Xcode debugging workflows. Learn how to take advantage of LLDB and custom breakpoints for more powerful debugging. Get the most out of Xcode’s view debugging tools to solve UI issues in your app more efficiently."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc18-412-advanced-debugging-with-xcode-and-lldb","kind":"article","title":"Advanced Debugging with Xcode and LLDB"},"WWDC22-Icon.png":{"identifier":"WWDC22-Icon.png","variants":[{"url":"\/images\/WWDCNotes\/WWDC22-Icon.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10211-Symbolication-Beyond-the-basics":{"kind":"article","title":"Symbolication: Beyond the basics","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10211-Symbolication-Beyond-the-basics","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Discover how you can achieve maximum performance and insightful debugging with your app. Symbolication is at the center of tools such as Instruments and LLDB to help bridge the layers between your application’s runtime and your source code. Learn how this process works and the steps you can take to gain the most insight into your app."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10211-symbolication-beyond-the-basics"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22","role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"WeatherKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"ScreenCaptureKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"Swift Regex","type":"codeVoice"},{"type":"text","text":", and more."}],"type":"topic","title":"WWDC22","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","images":[{"type":"icon","identifier":"WWDC22-Icon.png"},{"type":"card","identifier":"WWDC22.jpeg"}]},"WWDC22.jpeg":{"identifier":"WWDC22.jpeg","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"kind":"article","url":"\/documentation\/wwdcnotes\/zntfdr","role":"sampleCode","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"type":"topic","title":"Federico Zanetello (332 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","kind":"symbol","images":[{"type":"icon","identifier":"WWDCNotes.png"}]},"https://developer.apple.com/wwdc22/110370":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/110370","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc22\/110370","type":"download"},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-429-LLDB-Beyond-po":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-429-LLDB-Beyond-po","type":"topic","abstract":[{"type":"text","text":"LLDB is a powerful tool for exploring and debugging your app at runtime. Discover the various ways to display values in your app, how to format custom data types, and how to extend LLDB using your own Python 3 scripts."}],"role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc19-429-lldb-beyond-po","title":"LLDB: Beyond “po”"},"zntfdr":{"identifier":"zntfdr","alt":"Profile image of Federico Zanetello","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"type":"image"}}}