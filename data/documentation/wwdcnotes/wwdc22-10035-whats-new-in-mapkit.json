{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10035-Whats-new-in-MapKit","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC22","role":"sampleCode","title":"What’s new in MapKit"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc22-10035-whats-new-in-mapkit"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Originally launched with U.S. support, the all-new map and Look Around coverage has been expanding since and now includes Canada, many European countries, Japan, and more."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-maps1","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Last year, Apple Maps introduced the 3D City Experiences, featuring turn lanes, crosswalks, bike lanes, and handcrafted 3D landmarks like the Ferry Building."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-ferryBuilding","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The additional detail of the map allows to provide context and precision and a high level of realism."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-london","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-goldenGate"}]},{"level":1,"anchor":"New-MapKit-features","text":"New MapKit features.","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The Map Configuration API.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improvements to the overlay APIs"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"New blend modes support"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"brand-new Selectable Map Features API."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Integrating the immersive Look Around experience","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Map-Configuration-API","text":"Map Configuration API.","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To adopt the all-new map is easy and we just need to recompile our app with the new SDK; it will be automatically opted in to the all-new Apple map, including the 3D City Experience, where available."}]},{"type":"paragraph","inlineContent":[{"text":"In iOS 15, the way to configure the map is through various properties on MKMapView. In iOS 16, however, those properties are being softly deprecated.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-DeprecatedAPI"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"and a new Map Configuration API is being introduced as a replacement."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Configuring your map view","class MKMapView {","    ...","    var preferredConfiguration: MKMapConfiguration","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MKMapConfiguration"},{"type":"text","text":" is the central class of the new Map Configuration API. "},{"type":"codeVoice","code":"MKMapConfiguration"},{"type":"text","text":" is an abstract base class with three concrete subclasses."}]},{"syntax":"swift","type":"codeListing","code":["class MKMapConfiguration {","}","","class MKImageryMapConfiguration : MKMapConfiguration {","}","","class MKHybridMapConfiguration : MKMapConfiguration {","}","","class MKStandardMapConfiguration : MKMapConfiguration {","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The imagery map configuration is used to present satellite-style imagery."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The hybrid map configuration is used to present an imagery-based map with added map features such as road labels and points of interest."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The standard map configuration is used to present a fully graphics-based map."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-mapsImagery"}]},{"level":3,"anchor":"The-elevation-style-property","text":"The elevation style property.","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The base map configuration class supports an ","type":"text"},{"type":"codeVoice","code":"elevationStyle"},{"text":" property, which can be either flat or realistic. A flat elevation style means that the ground appears flat. Roads, including bridges and overpasses, also appear flat.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Flat is the default elevation style. A realistic elevation style means that the ground terrain reproduces the real-world elevation such as hills and mountains. Roads are depicted with realistic elevation details."}]},{"syntax":"swift","type":"codeListing","code":["class MKMapConfiguration {","    var elevationStyle: ElevationStyle","}","","extension MKMapConfiguration {","    enum ElevationStyle {","        case flat ","        case realistic","    }","}"]},{"level":3,"anchor":"The-map-configuration-subclasses","text":"The map configuration subclasses.","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The imagery map configuration only shows satellite imagery with no additional map features, so it doesn’t have any other properties."}]},{"syntax":"swift","type":"codeListing","code":["class MKImageryMapConfiguration : MKMapConfiguration {","    ","}"]},{"type":"paragraph","inlineContent":[{"text":"The hybrid map configuration has additional properties to control filtering of point of interest categories and whether to show traffic or not.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKHybridMapConfiguration : MKMapConfiguration {","    var point0fInterestFilter: MKPointOfInterestFilter?","    var showsTraffic: Bool","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The standard map configuration supports an "},{"code":"emphasisStyle","type":"codeVoice"},{"type":"text","text":" property which can be either default or muted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"class MKStandardMapConfiguration : MKMapConfiguration {"},{"type":"text","text":" "},{"type":"text","text":"var emphasisStyle: EmphasisStyle"},{"type":"text","text":" "},{"type":"text","text":"}"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As the name implies, this is the default emphasis style unless otherwise stated. The muted emphasis style softens the contrasts of the map details."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-standardMapConfig","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The standard map configuration also has additional properties to control filtering of point of interest categories and whether to show traffic or not.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKStandardMapConfiguration : MKMapConfiguration {","    var emphasisStyle: EmphasisStyle ","    var pointOfInterestFilter: MKPoint0fInterestFilter?","    var showsTraffic: Bool","}"]},{"level":2,"anchor":"Map-type-mapping","text":"Map type mapping","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a table that shows the correspondence between the new map configuration classes and the "},{"type":"codeVoice","code":"MKMapType"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-mapTypeMapping"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The all-new map with the 3D City Experience requires compatible hardware. On iOS, the new map support requires A12-based iPhones and iPads or later. On macOS, the new map support requires any M1-based computer or later."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-deviceSupport"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In areas where the 3D City Experience is not available, the map will automatically fall back to present the all-new map with a flat elevation. On all other devices, the all-new map will be presented with a flat elevation."}]},{"type":"paragraph","inlineContent":[{"text":"On M1 Macs, Xcode allows you to simulate both experiences simply by changing the OS version.","type":"text"}]},{"level":2,"anchor":"3D-City-Experience","text":"3D City Experience","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"San Francisco Bay Area"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Los Angeles","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New York"}]}]},{"content":[{"inlineContent":[{"text":"London","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Washington, DC"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"San Diego"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Philadelphia"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Toronto"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Montreal"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Vancouver"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":1,"anchor":"Overlays","text":"Overlays","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"MapKit has supported overlays with several styling options for years. In iOS 16, there are some additions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Overlays can be rendered at two different levels: above roads and above labels. You can specify the rendering level at insertion time using one of MapKit’s many overlay insertion functions."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Overlay levels","class MKMapView {","    func addOverlay(_: MKOverlay, level: MKOverlayLevel)","    \/\/ ...","}","","public enum MKOverlayLevel {","    case aboveLabels ","    case aboveRoads","}"]},{"type":"paragraph","inlineContent":[{"text":"Above labels renders the overlay above everything, including labels. Since labels provide important context information, only use above labels in those rare cases where we don’t want the data to interact with the map at all. Consider using the muted map emphasis or the blend modes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Above roads means the overlay will be shown on top of the terrain, including roads, land cover, or bodies of water. It will, however, be shown below labels and, to some degree, trees and buildings. See the screenshot on the right below.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Above roads will be the new default mode in iOS 16."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-aboveLevels"}]},{"level":1,"anchor":"Transparent-buildings","text":"Transparent buildings","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a new feature in iOS 16 called transparent buildings."}]},{"type":"paragraph","inlineContent":[{"text":"Regardless of whether the overlay level is above roads or above labels, it will always be rendered on top of buildings when viewed top-down with no pitch.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-aboveLevels2","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Ground objects such as trees and buildings are now automatically rendered with transparency when appearing above overlays, so as not to fully obscure them. The alpha value varies with the map’s pitch angle. Reverting to showing the map top-down with a 0º pitch angle, colliding ground objects effectively disappear from view, leaving the overlays fully visible.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Transparent buildings also work for semi-transparent overlays. The alpha value of the overlay will be added to combine with the alpha value of the transparent buildings."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-aboveLevels3","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"There’s one more change to overlays. When adding an overlay to a map with realistic terrain,","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-aboveLevels4","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"MapKit will automatically transition the map to a flat representation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-aboveLevels5"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The map will automatically go back to realistic when removing the last overlay. One notable exception to this rule are overlays sourced through MapKit’s directions API. Those overlays automatically follow the terrain."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-aboveLevels6","type":"image"}]},{"level":2,"anchor":"Adding-Polygon-Overlays","text":"Adding Polygon Overlays","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Using the sample app, which helps users rent scooters to tour San Francisco.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The app offers a number of features, as shown by the rows in this table view. “Operating Area” allows the user to see where they can take our scooters. “Ride” takes the user on a tour across the Golden Gate Bridge. “Explore” gives the user an interactive map of downtown San Francisco, which they can use to explore attractions near the waterfront. “Highlights” offers a closer look at must-see places. We will implement or upgrade these features throughout this session.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We are going to use the Operating Area feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-sampleApp1","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"let’s add a polygon overlay to visualize the operating area. When the view is loaded, we’ll first set the region and the camera boundary."}]},{"syntax":"swift","type":"codeListing","code":["import MapKit","","\/\/ This class displays elevated route line overlay loaded from MapKit server on a map view.","","class PolygonOverlayViewController: UIViewController, MKMapViewDelegate {","","    @IBOutlet var mapView: MKMapView!","    ","    private let dataSource: OverlayDataSource","","    required init? (coder: NSCoder) {","        dataSource = OverlavDataSource()","        super.init (coder: coder)","    }","        ","    override func viewDidLoad() {","        super.viewDidLoad ()","        mapView.region = .overlay","        ","        mapView.cameraBoundary = MKMapView.CameraBoundary(coordinateRegion: .overlayCameraBoundary)","        ","        mapView.addOverlays(dataSource.overlays, level: .aboveRoads)","    }","","    \/\/ MARK: - MKMapViewDelegate","    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {","        let renderer: MKOverlayPathRenderer","        ","        if let multiPolygon = overlay as? MKMultiPolygon {","            renderer = MKMultiPolygonRenderer(multiPolygon: multiPolygon)","            renderer.fillColor = UIColor(red: 1, green: 0.59, blue: 0.7, alpha: 1.0)","            renderer.strokeColor = UIColor(red: 0.63, green: 0.27, blue: 0.63, alpha: 1.0)","            renderer.linewidth = 3.0","        else {","            renderer = MKOverlayPathRenderer(overlay: overlay)","        return renderer","        }","    }","    \/\/...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The polygon overlay is opaque when viewed straight down. As we zoom in and pitch, the buildings begin to show, with the transparency increasing as we pitch further. This effect is only available when using the overlay level AboveRoads."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-sampleApp2"}]},{"type":"paragraph","inlineContent":[{"text":"To want to leverage transparent buildings and trees, choose the correct overlay level.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s go back to the code and make the overlay semi-transparent with alpha to 0.8."}]},{"type":"paragraph","inlineContent":[{"text":"Now we have a transparent overlay and we can see roads and buildings even when not pitched.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-sampleApp3","type":"image"}]},{"level":2,"anchor":"Integrate-realistic-terrain-and-show-adding-an-elevated-route-line","text":"Integrate realistic terrain and show adding an elevated route line","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will integrate realistic terrain and add an elevated route line. This will complete our “Ride” feature of the app, a tour across the Golden Gate Bridge."}]},{"type":"paragraph","inlineContent":[{"text":"Start by configuring the map view. We can change the elevation style in code, or we can just open the Interface Builder inspector on the right-hand side.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are the available map view configuration settings. Let’s select “elevation: realistic”."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-sampleApp4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, let’s work on the route."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this feature, we want to show a route when the user toggles the Show Route switch. We will also animate the camera to focus on the route."}]},{"type":"paragraph","inlineContent":[{"text":"Since we want to show a route across the Golden Gate Bridge, we’ll use the Presidio Park entry as the start point and the Battery Spencer as the end point.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["imроrt UIKit","import MapKit","","","\/\/This class displays elevated route line overlay loaded from MapKit server on a map view.","","class Polyline0verlayViewController: UIViewController, MKMapViewDelegate {","    @IBOutlet private var mapView: MKMapView!","    ","    let presidioEntry = CLLocationCoordinate2D(latitude: 37.79190, longitude: -122.44776)","    let batterySpencer = CLLocationCoordinate2D(latitude: 37.82798, longitude: -122.48201)","","    \/\/..."]},{"type":"paragraph","inlineContent":[{"text":"When the map view is loaded, we’ll create annotations to mark the start and destination points.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["","override func viewDidLoad() {","    super.viewDidLoad()","    configureCamera()","    \/\/ Create annotations","    addAnnotationsAtStartAndEnd()"]},{"type":"paragraph","inlineContent":[{"text":"Set coordinates and title, append it to the annotation array, then add them to the map view.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func addAnnotationsAtStartAndEnd() {","    \/\/ Create annotations for start location and destination.","    var annotations = [MKAnnotation]()","    ","    let startAnnotation = MKPointAnnotation()","    startAnnotation.coordinate = presidioEntry","    startAnnotation.title = \"Presidio Gate\"","    annotations.append(startAnnotation)","    ","    let endAnnotation = MKPointAnnotation( )","    endAnnotation.coordinate = batterySpencer","    endAnnotation.title = \"Battery Spencer\"","    annotations.append(endAnnotation)","    ","    \/\/ Add annotations to map view. ","    mapView.addAnnotations (annotations)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While normal overlays will flatten the map, the polyline returned by MapKit’s Directions API will preserve the realistic terrain."}]},{"type":"paragraph","inlineContent":[{"text":"In this action function, once the switch is turned on, it will create place marks with the coordinates defined above.","type":"text"},{"text":" ","type":"text"},{"text":"Then create a direction request, with source and destination. Finally, we request the directions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the fetch operation succeeds, we add the route polyline as an overlay."}]},{"syntax":"swift","type":"codeListing","code":["@IBAction func routeSwitchToggled(_ sender: UISwitch) {","    if sender.isOn {","","        \/\/ Create MKPlaceMark for start position and destination","        let origin = MKPlacemark(coordinate: presidioEntry)","        let destination = MKPlacemark(coordinate: batterySpencer)","    ","        \/\/ Create MDirections request with locations defined above.","        let request = MKDirections.Request()","        request. source = MKMapItem(placemark: origin)","        request.destination = MKMapItem(placemark: destination)","    ","        Task {","    ","            \/\/ Make direction request.","            let direction = MDirections(request: request)","            do {","                guard let response = try await direction.calculate() else { return }","    ","                \/\/ Add route polyline","                for route in response.routes {","                    self.mapView.addOverlay(route.polyline, level: .aboveRoads)","                }","        ","                \/\/ Animate map camera for a closer look at elevated route polyline ","                animateCamera()","        ","            } catch {","            \/\/ ...","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The annotations are automatically upgraded to the new gradient look.. Once we toggle show route, the camera will pitch. Then, you can get a better view of them.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The route line follows the elevated terrain. It also follows the road across the bridge. Also, the route subtly shows through the bridge pillars.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-sampleApp5"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we can see the route show through the trees that stand in front of it."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-sampleApp6"}]},{"type":"paragraph","inlineContent":[{"text":"Here a part of the route goes through a tunnel, so we get transparency for it. ElevationRealisticStyle and the elevated route line feature are supported on A12-based iOS devices. The same app on an older iOS device, will automatically get a 2D route on a 2D map…","type":"text"}]},{"level":1,"anchor":"Blend-modes","text":"Blend modes","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This new API gives you more control over the look and feel of overlays. During a blend operation, two graphical layers are combined following a set of equations specified by the blend mode."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this scenario, we want to highlight the area of the Presidio National Park in San Francisco in the center of this map. First, we create an overlay covering the entire map area, with a cutout in the shape of the Presidio."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-blendModes","type":"image"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-blendModes2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We are not using any blend modes yet. This is just a plain overlay, in the shape of a big square doughnut. Next, we assign a hue blend mode to the overlay, with a gray fill. This desaturates the map outside of the Presidio."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-blendModes3"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we are going to duplicate that overlay and assign it a hard light blend mode, with a dark gray fill."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This has the effect of darkening the area around the Presidio. This already looks nice, but lets add another overlay. This time, we’ll add an overlay in the shape of the Presidio and assign a saturation blend mode, with a yellow fill. But the colors are way too bright. We’ll apply a color burn blend mode with a gray fill."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-blendModes4","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"We added a property to MKOverlayRenderer, called blendMode. All we need to do is set the desired CoreGraphics blend mode on the overlay renderer.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKOverlayRenderer {","    ","    var blendMode: CGBlendMode","}","","class MKMapView {","    func insertOverlay(_ overlay: MKOverlay, at index: Int, level: MKOverlayLevel) ","    func insertOverlay(_ overlay: MKOverlay, above sibling: MKOverlay) ","    func insertOverlay(_ overlay: MKOverlay, below sibling: MKOverlay)","    \/\/...","}"]},{"type":"paragraph","inlineContent":[{"text":"Blend modes are order dependent. The overlay at the bottom of the stack is blended with the map, the second-to-last overlay is then blended with the result of the previous blend operation, and so on.","type":"text"},{"text":"\n","type":"text"},{"text":"In MapKit, the order of overlays is determined at insertion time. we can use either absolute or relative positioning using one of MKMapView’s many overlay insertion functions.","type":"text"}]},{"level":2,"anchor":"Blend-modes","text":"Blend modes:","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiply"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Screen"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Overlay"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Darken"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lighten","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ColorDodge"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ColorBurn"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"LinearBurn","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoftLight"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HardLight"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Difference","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exclusion"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Hue"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Saturation","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Color"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Luminosity"}]}]}],"type":"unorderedList"},{"level":1,"anchor":"Selectable-Map-Features","text":"Selectable Map Features","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Using MapKit we leverage annotations to show the location of cities, points of interest, or physical objects. Unless using POI filtering, we are placing those annotations on a map which already contains a number of similar annotations provided by Apple. Up until now, users could only interact with the annotations we provided.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In iOS 16, using the new Selectable Map Features API, we’ll have the option to let our users select features on the map."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-selectableMapFeatures","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Selectable map features include points of interest, such as stores, restaurants, and landmarks; territories, such as cities and states; and physical features, such as mountain ranges and lakes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-selectableMapFeatures2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To adopt Selectable Map Features in your app:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, configure which feature types should be selectable. There are three main feature types, and it might not make sense for all of them to be interactive. For points-of-interest features, we can also use existing filter API to further restrict which points-of-interest categories can appear and therefore be selectable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, implement the "},{"type":"codeVoice","code":"MKMapView"},{"type":"text","text":" delegate callbacks to handle selection events. We might want to control how selected features appear, or might want to show some additional UI in response to the selection events."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Third, to request and display additional place information in the application’s user interface. To give users more context about the place they selected, we’ll need to request additional information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll start with configuring which map features should be selectable using the new "},{"type":"codeVoice","code":"selectableMapFeatures"},{"type":"text","text":" property."}]},{"syntax":"swift","type":"codeListing","code":["class MKMapView {","    var selectableMapFeatures: MKMapFeatureOptions","}","","struct MKMapFeature0ptions: OptionSet {","    static var points0fInterest ","    static var territories ","    static var physicalFeatures","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can choose any combination of points of interest, territories, and physical features. Once we have configured the selectable map features and the user taps one of those features, we’ll start receiving some new delegate callbacks allowing to customize the selection behavior."}]},{"syntax":"swift","type":"codeListing","code":["protocol MKMapViewDelegate {","    optional func mapView(_: MKMapView, didSelect annotation: MKAnnotation) ","    optional func mapView(_: MKMapView, didDeselect annotation: MKAnnotation) ","    ","    \/\/ existing","    optional func mapView(_: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView?","}"]},{"type":"paragraph","inlineContent":[{"text":"The first callback is the new didSelect annotation. This callback is a great opportunity to request additional data about the map item using the new request API.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The second callback is the existing viewFor annotation. This is where we can customize the view which will be shown for the selected state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While this is existing API, there is a new type of annotation class called "},{"type":"codeVoice","code":"MapFeatureAnnotation"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["class MKMapFeatureAnnotation: MKAnnotation {","    var featureType: FeatureType ","    var point0fInterestCategory: MKPoint0fInterestCategory?","    var iconStyle: MKIconStyle?","}"]},{"type":"paragraph","inlineContent":[{"text":"This class will be passed to “view for annotation” when the user selects a map feature. ","type":"text"},{"type":"codeVoice","code":"MapFeatureAnnotation"},{"text":" has a number of properties. We can inspect the ","type":"text"},{"type":"codeVoice","code":"FeatureType"},{"text":" property to determine whether the map feature is a point of interest, a territory, or a physical feature. If the map feature is a point of interest, the ","type":"text"},{"type":"codeVoice","code":"pointOfInterestCategory"},{"text":" property will let us know what its category is, and the ","type":"text"},{"type":"codeVoice","code":"iconStyle"},{"text":" property will let us obtain additional information about the icon, such as its background color and the icon image itself.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKIconStyle {","    var backgroundColor: UIColor ","    var image: UIImage","}"]},{"type":"paragraph","inlineContent":[{"text":"How to customize the annotation view using the viewFor annotation callback. To achieve the same selection style as the Maps app, return nil.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {","    return nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To customize the selection style, we can return an annotationView, the same way we would for our own annotations."}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {","    ","    if let feature = annotation as MKMapFeatureAnnotation? {","        var annotationView: MKMarkerAnnotationView =","        \/\/ dequeue or create","        annotationView.image = feature.iconStyle?.image","        annotationView.color = \/\/ application tint color","        return annotationView","    }","    \/\/ else","    return nil","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"markerAnnotationView","type":"codeVoice"},{"text":" is a great option. It will give us the same balloon-style shape as the Maps app, a gradient treatment, and it allows to choose our own color or icon. To go fully custom, we can provide any annotation view subclass that we create.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView?","{","    return MyUnicornAnnotationView()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use the feature annotation to retrieve visual information about the selected feature. By passing the feature annotation on to our new "},{"type":"codeVoice","code":"MKMapItemRequest"},{"type":"text","text":" API, we can also retrieve a map item for the selected feature."}]},{"syntax":"swift","type":"codeListing","code":["class MKMapItemRequest : NSObject {","","    init(featureAnnotation: MKMapFeatureAnnotation) {}","    ","    func getMapItem(completionHandler: @escaping (MKMapItem?, Error?) -> Void) {}","    var mapItem: MKMapItem { get async throws }","}"]},{"type":"paragraph","inlineContent":[{"text":"This map item contains additional metadata about the place, such as an address, a name, a phone number, and a URL.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The map item also provides a function to punch out to the Maps app if the users want to see additional metadata which isn’t available through MapKit."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Existing API","","open class MKMapItem : NSObject {","    open var placemark: MKPlacemark { get }","    open var name: String?","    open var phoneNumber: String?","    open var url: URL?","    ","    \/\/ ...","    ","    func openInMaps (launchOptions: [String : Any]? = nil, ","        from scene: UIScene?) async -> Bool {}"]},{"level":1,"anchor":"The-explore-feature-of-the-sample-app","text":"The explore feature of the sample app","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The users should be able to explore some interesting places near the waterfront. If they tap on POIs, annotations should show up. We will perform a camera animation to the tapped location, and show an info card from the bottom."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, let’s filter points of interest on the map and remove the categories which are irrelevant to the tour."},{"type":"text","text":" "},{"type":"text","text":"Aside from applying the filter in code, we can also apply it in Interface Builder inspector. Let’s select the map view, and go to inspector on the right-hand side and do an exclusion filter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"lets select the categories that we don’t want, for example: airport, car rental, hospital, and laundry."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-exploreMapFeatures","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s very simple to enable Selectable Map Features. All we need to do is to specify an option set of desired selectable features."},{"type":"text","text":"\n"},{"type":"text","text":"In the scope of this sample app, we’ll just use points of interest, but we also can support selectable physical features and territories."}]},{"syntax":"swift","type":"codeListing","code":["override func viewDidLoad() {","    super.viewDidLoad()","    ","    mapView.region = .annotation","    ","    mapView.cameraBoundary = MKMapView.CameraBoundary(coordinateRegion: .annotationCameraBoundary)","    ","    \/\/ Enable selectable map","    mapView.selectableMapFeatures = [.pointsOfInterest]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use the existing delegate method mapView viewForAnnotation to create a view for the feature annotation."},{"type":"text","text":" "},{"type":"text","text":"Here, we’ll just return nil… To use the default gradient annotation offered by MapKit."}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {","    return nil","}"]},{"type":"paragraph","inlineContent":[{"text":"If an annotation is on Selected state, we will be informed through the new delegate method mapView didSelectAnnotation.","type":"text"},{"text":"\n","type":"text"},{"text":"We use this function to perform a camera animation and zoom in on the selected feature.","type":"text"},{"text":" ","type":"text"},{"text":"First, we cast the annotation to featureAnnotation, then create a map item request with it.","type":"text"},{"text":" ","type":"text"},{"text":"This is a new API to fetch additional place informations with feature annotations.","type":"text"},{"text":" ","type":"text"},{"text":"We issue the request. Once the fetch operation succeeds, we will animate to the map item. When the camera animation has completed, we will get details from the feature item and show them on an info card.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_ mapView: MKMapView, didSelect annotation: MKAnnotation) {","    guard let featureAnnotation = annotation as? MKMapFeatureAnnotation else { return }","    let featureRequest = MKMapItemRequest(mapFeatureAnnotation: featureAnnotation)","","    Task {","    ","        \/\/ Issue request.","        do {","            guard let featureItem = try await featureRequest.mapItem else { return }","        ","            UIView.animate(withDuration: 4) {","            ","                \/\/ Update map camera","                self.animateCamera(featureItem)","            ","            } completion: { _ in","                \/\/ Concatenate info string from map item - name, category, url and address","                self.showInfoCardView(featureItem)","            }","        } catch {","    ","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The gradient annotations show up. The camera animates to the tab location. Then the info card shows up.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-exploreMapFeatures2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s customize our annotation for the selection state."},{"type":"text","text":"\n"},{"type":"text","text":"Instead of nil, let’s create a "},{"type":"codeVoice","code":"MarkerAnnotationView"},{"type":"text","text":". We’ll cast the annotation to "},{"type":"codeVoice","code":"featureAnnotation"},{"type":"text","text":" first, so we can use specific data from it to customize the view. Let’s tint the annotation with a purple-ish color so it’s in line with our corporate identity."},{"type":"text","text":" "},{"type":"text","text":"We can also customize the annotation glyph. "},{"type":"codeVoice","code":"SelectedGlyphImage"},{"type":"text","text":" is for annotations on Selected state. GlyphImage is smaller. It is the glyph for annotations on Unselected state. Assigning them the same glyph is recommended for a smooth transition from the Unselected to Selected state."},{"type":"text","text":"\n"},{"type":"text","text":"Let’s use the icon style image we got from the featureAnnotation."},{"type":"text","text":"\n"},{"type":"codeVoice","code":"MKIconStyle"},{"type":"text","text":" is a new class in iOS16. It has the iconography and color info of the selected POI."}]},{"syntax":"swift","type":"codeListing","code":["func mapView(_: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {","    ","    if let featureAnnotation = annotation as? MKMapFeatureAnnotation {","        ","        let customView = MKMarkerAnnotationView(annotation: featureAnnotation, reuseIdentifier: nil)","        ","        customView.markerTintColor = UIColor(red: 0.63, green: 0.27, blue: 0.63, alpha: 1.0)","        ","        customView.selectedGlyphImage = featureAnnotation.iconStyle?.image","        customView.glyphImage = featureAnnotation.iconStyle?.image","        ","        return customView","    }","    ","    let annotationView = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: nil)","    return annotationView","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we have an annotation that matches our corporate colors, but still uses Apple iconography."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-exploreMapFeatures3","type":"image"}]},{"level":1,"anchor":"Look-Around","text":"Look Around!","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The Maps app introduced Look Around in iOS 13","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-lookAround"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Look Around is available in many places around the world, including these cities, and entire countries."}]},{"level":2,"anchor":"Cities","text":"Cities:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Atlanta, GA \/ Boston, MA \/ Chicago, IL \/ Denver, CO \/ Detroit, MI \/ Dublin, Ireland \/ Edinburgh, Scotland \/ Fukuoka, Japan \/ Hiroshima, Japan \/ Houston, TX \/ Kanazawa, Japan \/ Las Vegas, NV \/ London, United Kingdom \/ Los Angeles, CA \/ Miami, FL \/ Nagoya, Japan \/ New York, NY \/ Oahu, HI \/ Osaka, Japan \/ Philadelphia, PA \/ Phoenix, AZ \/ Portland, OR \/ Sagamihara, Japan \/ San Diego, CA \/ San Francisco Bay Area \/ Santa Cruz, CA \/ Seattle, WA \/ Sendai, Japan \/ Takamatsu, Japan \/ Tokyo, Japan \/ Washington, DC \/ Yokohama, Japan"}]},{"level":2,"anchor":"Countries-and-territories","text":"Countries and territories:","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Andorra \/ Australia \/ Canada \/ Gibraltar \/ Italy \/ Portugal \/ San Marino \/ Spain","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With iOS 16, Look Around is coming to MapKit, and adopting it only requires three steps."}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Check for data availability."},{"type":"text","text":"\n"},{"type":"text","text":"Check whether data is available for the desired location. Even if Look Around is available in the target region, not every location can be seen from a street, and therefore, Look Around imagery might not always be available."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pass data to the Look Around UI."},{"type":"text","text":" "},{"type":"text","text":"Once we’ve determined whether Look Around data is available, we’ll need to pass that data on to either the Look Around View Controller or the Look Around Snapshotter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Conditionally show Look Around UI."},{"type":"text","text":"\n"},{"type":"text","text":"And finally, if Look Around data is available, we’ll want to update your app UI to show the Look Around preview."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We create a "},{"type":"codeVoice","code":"LookAroundSceneRequest"},{"type":"text","text":", which is a new class introduced in iOS 16. we can initialize a new instance with either a coordinate or a map item."},{"type":"text","text":"\n"},{"type":"text","text":"we’ll retrieve its scene property. This is an optional async property. If data is available, we will get back a scene instance. If data is not available, we will get back a nil instead. And if there was a problem with the request, an error will be thrown."}]},{"syntax":"swift","type":"codeListing","code":["class MKLookAroundSceneRequest {","    init (coordinate: CLLocationCoordinate2D)","    init (mapItem: MKMapItem)","    var scene: MKLookAroundScene? { get async throws }","}"]},{"type":"paragraph","inlineContent":[{"text":"The Look Around Scene is an opaque object with no properties. It acts as a token that ensures the availability of Look Around imagery for a requested location.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKLookAroundScene {","","}"]},{"type":"paragraph","inlineContent":[{"text":"To show an interactive preview of the Look Around scene, we pass the scene on to a new Look Around View Controller instance as an init parameter or assign it to the read write scene property of an existing instance.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MKLookAroundViewController : UIViewController {","    init (scene: MKLookAroundScene)","    var scene: MKLookAroundScene?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, we can also pass the scene on to a new Look Around View Snapshotter instance as an init parameter and subsequently retrieve its snapshot async property."}]},{"syntax":"swift","type":"codeListing","code":["class MKLookAroundSnapshotter {","    init (scene: MKLookAroundScene, options: MKLookAroundSnapshotter.Options) ","    var snapshot: MKLookAroundSnapshotter.Snapshot { get async throws }"]},{"type":"paragraph","inlineContent":[{"text":"The Look Around view controller is designed to embed a smaller static preview of a Look Around image, which the user can tap on to enter a full-screen Look Around interactive session.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-lookAround2","type":"image"}]},{"level":1,"anchor":"Highlights-feature-of-the-sample-app","text":"Highlights feature of the sample app","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The last sample app feature, Highlights. Users can get a realistic view of must-see places.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We already have a couple of San Francisco landmark names in the segment control bar on top of the screen. When users tap on one of them, we want to perform a camera animation to the tapped location. We also want to show a Look around preview at bottom left, which users can expand to full screen. Let’s do it! First we need to add a container view for the Look Around preview.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-highlights"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s go to the size inspector. Let’s give it a position and size.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-highlights2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to hide this preview at the beginning, so let’s open the attributes inspector and check Hidden."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we need to create a Look Around view controller…"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC22-10035-highlights3","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And embed it to the container view."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-highlights4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Same as any other segue, we need to give it an identifier."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-highlights5"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s call it "},{"type":"codeVoice","code":"presentLookAroundEmbedded"},{"type":"text","text":". And import it to code so we can update its visibility later."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s name it “preview.” Here, we already have a LookAroundViewController declared. We just need to grab the instance in the prepare function."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-highlights6"}]},{"type":"paragraph","inlineContent":[{"text":"Make sure the segue identifier is matched.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","    \/\/ Grab lookAroundViewController instance.","    if segue.identifier == \"presentLookAroundEmbedded\" {","        if let lookAroundViewController = segue.destination as? MKLookAroundViewController {","            self.lookAroundViewController = lookAroundViewController","            }","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in the segment control function, we’ll create a local search with the landmark name."},{"type":"text","text":" "},{"type":"text","text":"If the request succeeds, we will get a map item which will be used in the following camera animation and Look Around scene retrieval."},{"type":"text","text":"\n"},{"type":"text","text":"For camera animation, we first need to create a camera with the new API. MapCamera looking at map item. Let’s use map view frame size for the view size, and set allow pitch to true. This will give us a pitch view to landmarks and a top-down view to other places. Assign the new camera. That’s it."}]},{"syntax":"swift","type":"codeListing","code":["@IBAction func landmark(_ sender: UISegmentedControl) {","    cleanUpPreview()","    ","    let request = MKLocalSearch.Request()","    if sender.selectedSegmentIndex == 0 {","        request.naturalLanguageQuery = \"Ferry Building\"","    } else if sender. selectedSegmentIndex == 1 {","        request.naturalLanquageQuery = \"Coit Tower\"","    } else if sender.selectedSegmentIndex == 2 {","        request.naturalLanguageQuery = \"Dragon Gate\"","    }","","    let search = MKLocalSearch (request: request)","    search.start { response, error in","        guard let response = response else { return }","    ","        if let item = response.mapItems.first {","        ","            UIView.animate(withDuration: 6) {","        ","            \/\/ Camera animation","            let camera = MKMapCamera(lookingAt: item, forViewsize: self.mapView.frame.size, allowPitch: true)","            self.mapView.camera = camera","            ) completion: { _ in","        ","                \/\/ Prepare LookAround preview.","                self.configureLookAroundScene(item)","                }","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the camera animation is completed, we’ll show its Look Around preview."},{"type":"text","text":"\n"},{"type":"text","text":"First, we need to determine if the Look Around data is available for this map item. To do that, we need to use the new LookAroundSceneRequest class. Let’s create our request and pass in the map item. Then perform the request."},{"type":"text","text":"\n"},{"type":"text","text":"If get scene request succeeds, then we assign the scene to our LookAroundViewController."}]},{"syntax":"swift","type":"codeListing","code":["func configureLookAroundScene(_ item: MKMapItem) {","    guard let lookAroundViewController = self.lookAroundViewController else { return }","    let lookAroundRequest = MKLookAroundSceneRequest(mapItem: item)","","    Task {","        \/\/ Create LookAround scene request.","        do {","            \/\/ Issue request.","            guard let lookAroundScene = try await lookAroundRequest.scene else { return }","            lookAroundViewController.scene = lookAroundScene","            ","            \/\/ Show lookAround preview.","            self.preview.isHidden = false","        } catch {","        ","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is no error but we get nil for the scene, it means Look Around data is not available at the request location."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC22-10035-last"}]},{"level":1,"anchor":"Check-out-also","text":"Check out also","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc22\/10006","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/tech-talks\/110356","isActive":true}]},{"level":2,"anchor":"Written-By","text":"Written By","type":"heading"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"multitudes","type":"image"}]}]},{"size":4,"content":[{"anchor":"laurent-b","type":"heading","level":3,"text":"laurent b"},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/multitudes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/laurentbrusa.hashnode.dev\/","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/wrmultitudes","isActive":true,"type":"reference"}]}]}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}]},{"level":2,"anchor":"Related-Sessions","text":"Related Sessions","type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10006-Meet-Apple-Maps-Server-APIs"],"type":"links","style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"sampleCodeDownload":{"action":{"isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc22\/10035","overridingTitle":"Watch Video (41 min)","type":"reference"},"kind":"sampleDownload"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"kind":"article","sections":[],"abstract":[{"text":"Come along with us as MapKit enters a new dimension. We’ll show you how you can upgrade your app to use the latest map and support the highly-detailed 3D City Experience. Learn how you can visualize data using overlays while ensuring they integrate smoothly into the 3D map. We’ll also cover how to create interactive and immersive experiences with Selectable Map Features and Look Around APIs.","type":"text"}],"references":{"WWDC22-10035-lookAround2":{"identifier":"WWDC22-10035-lookAround2","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-lookAround2.jpg"}],"alt":"Look Around","type":"image"},"WWDC22-10035-aboveLevels5":{"identifier":"WWDC22-10035-aboveLevels5","alt":"Above Levels","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels5.jpg"}],"type":"image"},"WWDC22-10035-sampleApp1":{"type":"image","alt":"Sample App Levels","identifier":"WWDC22-10035-sampleApp1","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp1.jpg"}]},"WWDC22-10035-highlights5":{"identifier":"WWDC22-10035-highlights5","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights5.jpg"}],"alt":"highlights","type":"image"},"WWDC22-10035-london":{"identifier":"WWDC22-10035-london","alt":"London St Paul","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-london.jpg"}],"type":"image"},"WWDC22-10035-highlights6":{"type":"image","alt":"highlights","identifier":"WWDC22-10035-highlights6","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights6.jpg"}]},"WWDC22-10035-sampleApp3":{"identifier":"WWDC22-10035-sampleApp3","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp3.jpg"}],"alt":"Sample App","type":"image"},"WWDC22-10035-mapsImagery":{"identifier":"WWDC22-10035-mapsImagery","alt":"Maps Imagery","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-mapsImagery.jpg"}],"type":"image"},"https://developer.apple.com/wwdc22/10006":{"type":"link","title":"Meet Apple Map Server APIs - WWDC22","identifier":"https:\/\/developer.apple.com\/wwdc22\/10006","titleInlineContent":[{"type":"text","text":"Meet Apple Map Server APIs - WWDC22"}],"url":"https:\/\/developer.apple.com\/wwdc22\/10006"},"https://x.com/wrmultitudes":{"identifier":"https:\/\/x.com\/wrmultitudes","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"title":"X\/Twitter","url":"https:\/\/x.com\/wrmultitudes","type":"link"},"WWDC22-10035-sampleApp6":{"identifier":"WWDC22-10035-sampleApp6","alt":"Sample App Levels","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp6.jpg"}],"type":"image"},"WWDC22-10035-exploreMapFeatures2":{"type":"image","alt":"Explore Map Features","identifier":"WWDC22-10035-exploreMapFeatures2","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-exploreMapFeatures2.jpg"}]},"WWDC22-10035-DeprecatedAPI":{"identifier":"WWDC22-10035-DeprecatedAPI","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-DeprecatedAPI.jpg"}],"alt":"Deprecated API","type":"image"},"WWDC22-10035-standardMapConfig":{"identifier":"WWDC22-10035-standardMapConfig","alt":"Standard Map Config","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-standardMapConfig.jpg"}],"type":"image"},"WWDC22.jpeg":{"type":"image","alt":null,"identifier":"WWDC22.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22.jpeg"}]},"WWDC22-10035-sampleApp4":{"identifier":"WWDC22-10035-sampleApp4","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp4.jpg"}],"alt":"Sample App Levels","type":"image"},"WWDC22-10035-lookAround":{"identifier":"WWDC22-10035-lookAround","alt":"Look Around","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-lookAround.jpg"}],"type":"image"},"WWDC22-10035-mapTypeMapping":{"type":"image","alt":"Map type mapping","identifier":"WWDC22-10035-mapTypeMapping","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-mapTypeMapping.jpg"}]},"WWDC22-10035-ferryBuilding":{"identifier":"WWDC22-10035-ferryBuilding","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-ferryBuilding.jpg"}],"alt":"Ferry Building","type":"image"},"WWDC22-Icon.png":{"identifier":"WWDC22-Icon.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-Icon.png"}],"type":"image"},"WWDC22-10035-sampleApp2":{"type":"image","alt":"Sample App Levels","identifier":"WWDC22-10035-sampleApp2","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp2.jpg"}]},"WWDC22-10035-exploreMapFeatures":{"identifier":"WWDC22-10035-exploreMapFeatures","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-exploreMapFeatures.jpg"}],"alt":"Explore Map Features","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","abstract":[{"type":"text","text":"student at 42Berlin 🐬 | C & C++ | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️"}],"images":[{"identifier":"multitudes.jpeg","type":"card"},{"identifier":"multitudes.jpeg","type":"icon"}],"kind":"article","url":"\/documentation\/wwdcnotes\/multitudes","role":"sampleCode","title":"laurent b (33 notes)"},"WWDC22-10035-aboveLevels6":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels6.jpg"}],"type":"image","alt":"Above Levels","identifier":"WWDC22-10035-aboveLevels6"},"WWDC22-10035-sampleApp5":{"type":"image","alt":"Sample App Levels","identifier":"WWDC22-10035-sampleApp5","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-sampleApp5.jpg"}]},"https://github.com/multitudes":{"identifier":"https:\/\/github.com\/multitudes","titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","url":"https:\/\/github.com\/multitudes","type":"link"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"type":"image","alt":null,"identifier":"WWDCNotes.png"},"WWDC22-10035-selectableMapFeatures":{"type":"image","alt":"Selectable Map Features","identifier":"WWDC22-10035-selectableMapFeatures","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-selectableMapFeatures.jpg"}]},"WWDC22-10035-aboveLevels3":{"identifier":"WWDC22-10035-aboveLevels3","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels3.jpg"}],"alt":"Above Levels","type":"image"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}]},"WWDC22-10035-last":{"type":"image","alt":"look around preview","identifier":"WWDC22-10035-last","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-last.jpg"}]},"WWDC22-10035-highlights4":{"identifier":"WWDC22-10035-highlights4","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights4.jpg"}],"alt":"highlights","type":"image"},"WWDC22-10035-goldenGate":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-goldenGate.jpg"}],"type":"image","alt":"Golden Gate","identifier":"WWDC22-10035-goldenGate"},"WWDC22-10035-maps1":{"type":"image","alt":"maps","identifier":"WWDC22-10035-maps1","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-maps1.jpg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"title":"WWDC22","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","type":"topic","images":[{"identifier":"WWDC22-Icon.png","type":"icon"},{"identifier":"WWDC22.jpeg","type":"card"}],"role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WeatherKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"ScreenCaptureKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"Swift Regex"},{"type":"text","text":", and more."}],"url":"\/documentation\/wwdcnotes\/wwdc22"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10006-Meet-Apple-Maps-Server-APIs":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10006-Meet-Apple-Maps-Server-APIs","abstract":[{"type":"text","text":"Simplify your app’s mapping architecture by implementing the Apple Maps stack across MapKit, MapKit JS, and Apple Maps Server APIs. Learn how these APIs can reduce network calls and increase power efficiency, which can help improve the overall performance of your app. We’ll show you how to use geocoding and estimated time of arrival APIs to build functionality for a simple store locator, and explore the API authentication flow."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10006-meet-apple-maps-server-apis","role":"sampleCode","title":"Meet Apple Maps Server APIs"},"WWDC22-10035-selectableMapFeatures2":{"identifier":"WWDC22-10035-selectableMapFeatures2","alt":"Selectable Map Features","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-selectableMapFeatures2.jpg"}],"type":"image"},"WWDC22-10035-highlights2":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights2.jpg"}],"identifier":"WWDC22-10035-highlights2","alt":"highlights","type":"image"},"https://laurentbrusa.hashnode.dev/":{"titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/laurentbrusa.hashnode.dev\/","type":"link","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","title":"Blog"},"WWDC22-10035-blendModes4":{"identifier":"WWDC22-10035-blendModes4","alt":"Blend modes","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-blendModes4.jpg"}],"type":"image"},"WWDC22-10035-blendModes":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-blendModes.jpg"}],"identifier":"WWDC22-10035-blendModes","alt":"Blend modes","type":"image"},"multitudes.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/multitudes.jpeg"}],"alt":null,"type":"image","identifier":"multitudes.jpeg"},"WWDC22-10035-blendModes3":{"identifier":"WWDC22-10035-blendModes3","alt":"Blend modes","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-blendModes3.jpg"}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol","title":"WWDC Notes"},"https://developer.apple.com/videos/play/tech-talks/110356":{"titleInlineContent":[{"text":"Whats new for enterprise developer (Tech Talk) -  WWDC22","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/tech-talks\/110356","type":"link","identifier":"https:\/\/developer.apple.com\/videos\/play\/tech-talks\/110356","title":"Whats new for enterprise developer (Tech Talk) -  WWDC22"},"https://developer.apple.com/wwdc22/10035":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/10035","type":"download","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc22\/10035"},"WWDC22-10035-deviceSupport":{"type":"image","alt":"Device Support","identifier":"WWDC22-10035-deviceSupport","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-deviceSupport.jpg"}]},"WWDC22-10035-blendModes2":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-blendModes2.jpg"}],"identifier":"WWDC22-10035-blendModes2","alt":"Blend modes","type":"image"},"WWDC22-10035-exploreMapFeatures3":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-exploreMapFeatures3.jpg"}],"alt":"Explore Map Features","type":"image","identifier":"WWDC22-10035-exploreMapFeatures3"},"WWDC22-10035-highlights":{"type":"image","alt":"highlights","identifier":"WWDC22-10035-highlights","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights.jpg"}]},"WWDC22-10035-aboveLevels4":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels4.jpg"}],"identifier":"WWDC22-10035-aboveLevels4","alt":"Above Levels","type":"image"},"WWDC22-10035-aboveLevels2":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels2.jpg"}],"alt":"Above Levels","type":"image","identifier":"WWDC22-10035-aboveLevels2"},"WWDC22-10035-highlights3":{"type":"image","alt":"highlights","identifier":"WWDC22-10035-highlights3","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-highlights3.jpg"}]},"WWDC22-10035-aboveLevels":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-10035-aboveLevels.jpg"}],"identifier":"WWDC22-10035-aboveLevels","alt":"Above Levels","type":"image"},"multitudes":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/multitudes.jpeg"}],"alt":"Profile image of laurent b","type":"image","identifier":"multitudes"}}}