{"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10170","overridingTitle":"Watch Video (24 min)","isActive":true,"type":"reference"}},"kind":"article","metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Beyond the basics of structured concurrency","roleHeading":"WWDC23","role":"sampleCode"},"abstract":[{"text":"It’s all about the task tree: Find out how structured concurrency can help your apps manage automatic task cancellation, task priority propagation, and useful task-local value patterns. Learn how to manage resources in your app with useful patterns and the latest task group APIs. We’ll show you how you can leverage the power of the task tree and task-local values to gain insight into distributed systems.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10170-beyond-the-basics-of-structured-concurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Task-hierarchy","text":"Task hierarchy","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"unlocks automatic task cancellation, priority propagation, and useful task-local value behaviors."}],"type":"paragraph"}]}]},{"anchor":"Concurrency-in-Swift","text":"Concurrency in Swift","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Helps us to reason about concurrent code using well-defined points where execution branches off and runs concurrently.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Automatically implements advanced behaviours."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Concurrent execution is triggered when you use an "},{"type":"codeVoice","code":"async let"},{"type":"text","text":", a task group, create a task or detached task."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Results rejoin the current execution at a suspension point, indicated by an ","type":"text"},{"type":"codeVoice","code":"await"}]}]},{"content":[{"inlineContent":[{"text":"Structured tasks are created using ","type":"text"},{"code":"async let","type":"codeVoice"},{"text":" and task groups.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unstructured tasks are created using "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Task.detached"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structured tasks live to the end of the scope where they are declared and are automatically cancelled when they go out."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example of making soup in a kitchen with Unstructured and structured concurrency","type":"text"}]}]}]},{"anchor":"Unstructured-concurrency","text":"Unstructured concurrency","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Here we are creating unstructured Tasks to add concurrency to the functions, and awaiting their values when necessary.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func makeSoup(order: Order) async throws -> Soup {","    let boilingPot = Task { try await stove.boilBroth() }","    let choppedIngredients = Task { try await chopIngredients(order.ingredients) }","    let meat = Task { await marinate(meat: .chicken) }","    let soup = await Soup(meat: meat.value, ingredients: choppedIngredients.value)","    return await stove.cook(pot: boilingPot.value, soup: soup, duration: .minutes(10))","}"]},{"anchor":"Structured-concurrency","text":"Structured concurrency","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Since we have a known number of child tasks to create, we can use the convenient "},{"type":"codeVoice","code":"async let"},{"type":"text","text":" syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"These tasks form a structured relationship with their parent task.","type":"text"}]}]}]},{"syntax":"swift","type":"codeListing","code":["func makeSoup(order: Order) async throws -> Soup {","    async let pot = stove.boilBroth()","    async let choppedIngredients = chopIngredients(order.ingredients)","    async let meat = marinate(meat: .chicken)","    let soup = try await Soup(meat: meat, ingredients: choppedIngredients)","    return try await stove.cook(pot: pot, soup: soup, duration: .minutes(10))","}",""]},{"anchor":"Task-cancellation","text":"Task cancellation","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"used to signal that the app no longer needs the result of a task and the task should stop and either return a partial result or throw an error."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structured tasks are cancelled implicitly when they go out of scope."}]}]},{"content":[{"inlineContent":[{"text":"call ","type":"text"},{"code":"cancelAll","type":"codeVoice"},{"text":" on task groups to cancel all active children and any future child tasks.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unstructured tasks are cancelled explicitly with the "},{"type":"codeVoice","code":"cancel"},{"type":"text","text":" function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cancelling the parent task results in the cancellation of all child tasks."}]}]},{"content":[{"inlineContent":[{"text":"Cancellation is cooperative, so child tasks aren’t immediately stopped.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["func makeSoup(order: Order) async throws -> Soup {","    async let pot = stove.boilBroth()","","    guard !Task.isCancelled else {","        throw SoupCancellationError()","    }","","    async let choppedIngredients = chopIngredients(order.ingredients)","    async let meat = marinate(meat: .chicken)","    let soup = try await Soup(meat: meat, ingredients: choppedIngredients)","    return try await stove.cook(pot: pot, soup: soup, duration: .minutes(10))","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If throwing a cancellation error instead of returning a partial result, we can call ","type":"text"},{"type":"codeVoice","code":"Task.checkCancellation"},{"text":", which throws a ","type":"text"},{"type":"codeVoice","code":"CancellationError"},{"text":" if the task was cancelled.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Cancellation checking is synchronous, so any function, asynchronous or synchronous, that should react to cancellation should check the task cancellation status before continuing.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Polling"}]},{"text":" for cancellation with ","type":"text"},{"type":"codeVoice","code":"isCancelled"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"checkCancellation"},{"text":" is useful when the task is running.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"withTaskCancellationHandler","type":"codeVoice"},{"text":" is useful at times when you may need to respond to cancellation while the task is suspended and no code is running.","type":"text"}]}]}]},{"anchor":"Cancellation-and-async-sequences","text":"Cancellation and async sequences","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"the asynchronous for-loop gets a new order before it is cancelled.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["actor Cook {","    func handleShift<Orders>(orders: Orders) async throws","       where Orders: AsyncSequence,","             Orders.Element == Order {","","        for try await order in orders {","            let soup = try await makeSoup(order)","            \/\/ ...","        }","    }","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"the cancellation may take place while the task is suspended, waiting on the next order.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"use the cancellation handler to detect the cancellation event and break out of the asynchronous for-loop.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"These orders are produced from an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"AsyncSequences are driven by an "},{"type":"codeVoice","code":"AsyncIterator"},{"type":"text","text":", which defines an asynchronous "},{"type":"codeVoice","code":"next"},{"type":"text","text":" function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Like with synchronous iterators, the "},{"type":"codeVoice","code":"next"},{"type":"text","text":" function returns the next element in the sequence, or nil to indicate that we are at the end of the sequence."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Many AsyncSequences are implemented with a state machine, which we use to stop the running sequence.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["public func next() async -> Order? {","    return await withTaskCancellationHandler {","        let result = await kitchen.generateOrder()","        guard state.isRunning else {","            return nil","        }","        return result","    } onCancel: {","        state.cancel()","    }","}"]},{"anchor":"AsyncSequence-state-machine","text":"AsyncSequence state machine","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"While actors are great for protecting encapsulated state they can’t really protect the protect the state machine."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"to modify and read individual properties on the state machine actors aren’t quite the right tool.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"can’t guarantee the order that operations run on an actor, so we can’t ensure that our cancellation will run first."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"use "},{"type":"codeVoice","code":"atomics"},{"type":"text","text":" from the Swift Atomics package, a dispatch queue or locks instead."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"These mechanisms allow us to:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"synchronize the shared state","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"avoiding race conditions, while allowing us to cancel the running state machine without introducing an unstructured task in the cancellation handler."}]}]}],"type":"unorderedList"}]}]},{"syntax":"swift","type":"codeListing","code":["private final class OrderState: Sendable {","    let protectedIsRunning = ManagedAtomic<Bool>(true)","    var isRunning: Bool {","        get { protectedIsRunning.load(ordering: .acquiring) }","        set { protectedIsRunning.store(newValue, ordering: .relaxed) }","    }","    func cancel() { isRunning = false }","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Therefore "},{"type":"strong","inlineContent":[{"type":"text","text":"Task cancellation"}]},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Propagate through the task tree."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Seamlessly integrates with throwing errors."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Event-driven cancellation handlers or explicit polling."}],"type":"paragraph"}]}]}]}]},{"anchor":"Task-priority","text":"Task priority","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Priority is your way to communicate to the system how urgent a given task is.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Certain tasks, like responding to a button press, need to run immediately or the app will appear frozen.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Meanwhile, other tasks, like prefetching content from a server, can run in the background without anyone noticing.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"priority inversion"}],"type":"emphasis"},{"type":"text","text":" happens when a high-priority task is waiting on the result of a lower-priority task."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, child tasks inherit their priority from their parent."}]}]},{"content":[{"inlineContent":[{"text":"If the parent is running in a task at medium priority, all child tasks will also run at medium priority.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Structured-priority-escalation","text":"Structured priority escalation","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lower priority tasks escalate priority when awaited on by a higher priority task."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Escalation propagates through the task tree."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Priority remains escalated until the task completes."}]}]},{"content":[{"inlineContent":[{"text":"It’s not possible to undo a priority escalation.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Task-group-patterns","text":"Task group patterns","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A powerful tool used for limiting and managing concurrency.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example to see the pattern more clearly:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["    withTaskGroup(of: Something.self) { group in","    for _ in 0..<maxConcurrentTasks {","        group.addTask { }","    }","    while let <partial result> = await group.next() {","        if !shouldStop { ","            group.addTask { }","        }","    }","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The initial loop creates up to the maximum number of concurrent tasks, ensuring that we don’t create too many.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Once the maximum number of tasks is running, we wait for one to finish."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"After it finishes and we haven’t hit a stopping condition, we create a new task to keep making progress."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This limits the number of concurrent tasks in the group since we won’t start new work until earlier tasks finish."}]}]}]},{"anchor":"Discarding-task-groups","text":"Discarding task groups","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"withDiscardingTaskGroup"},{"type":"text","text":" API is New Swift 5.9"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Discarding task groups don’t hold onto the results of completed child tasks."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Resources used by tasks are freed immediately after the task finishes."}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["\twithDiscardingTaskGroup { group in","\t\tgroup.addTask()","\t}","\t","\twithThrowingDiscardingTaskGroup { group in ","\t\tgroup.addTask()","\t}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"We can change the run method to make use of a discarding task group.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Discarding task groups automatically clean up their children, so there is no need to explicitly cancel the group and clean up.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The discarding task group also has automatic sibling cancellation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If any of the child tasks throw an error, all remaining tasks are automatically cancelled.","type":"text"}]}]}]},{"syntax":"swift","type":"codeListing","code":["func run() async throws {","    try await withThrowingDiscardingTaskGroup { group in","        for cook in staff.keys {","            group.addTask { try await cook.handleShift() }","        }","","        group.addTask { \/\/ keep the restaurant going until closing time","            try await Task.sleep(for: shiftDuration)","            throw TimeToCloseError()","        }","    }","}"]},{"anchor":"TaskGroups","text":"TaskGroups","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DiscardingTaskGroup"},{"type":"text","text":" releases resources immediately on task completion ."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the completion of one task to signal the creation of the next in a TaskGroup.","type":"text"}]}]}]},{"anchor":"Task-local-values","text":"Task-local values","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"A task-local value is a piece of data associated with a given task, or more precisely, a task hierarchy.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"It’s like a global variable, but the value bound to the task-local value is only available from the current task hierarchy.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Task-local values are declared as static properties with the ","type":"text"},{"code":"TaskLocal","type":"codeVoice"},{"text":" property wrapper.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s a good practice to make the task local optional."}]}]}]},{"syntax":"swift","type":"codeListing","code":["  @TaskLocal static var orderID: Int?","  @TaskLocal static var cook: String?"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Any task that doesn’t have the value set will need to return a default value, which is easily represented by a nil optional.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An unbound task local contains its default value."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/TaskLocal Values","actor Kitchen {","    @TaskLocal static var orderID: Int?","    @TaskLocal static var cook: String?","    func logStatus() {","        print(\"Current cook: \\(Kitchen.cook ?? \"none\")\")","    }","}","","let kitchen = Kitchen()","await kitchen.logStatus()","await Kitchen.$cook.withValue(\"Sakura\") {","    await kitchen.logStatus()","}","await kitchen.logStatus()"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Task-local values can’t be assigned to explicitly, but must be bound for a specific scope.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The binding lasts for the duration of the scope, and reverts back to the original value at the end of the scope.","type":"text"}]}]}]},{"anchor":"Swift-log","text":"Swift log","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Logging by hand is repetitive and verbose, which leads to subtle bugs and typos. To prevent that we use SwiftLog."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"SwiftLog is a logging API package with multiple backing implementations.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows us to drop in a logging back end that suites your needs without making changes to your server."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"MetadataProvider ","type":"text"},{"code":"Logger.MetadataProvider","type":"codeVoice"},{"text":" is a new API in SwiftLog 1.5 that:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Automatically includes information in Logger.Metadata","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Good contextual information makes good logs."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"uses a dictionary-like structure, mapping a name to the value being logged."}]}]},{"content":[{"inlineContent":[{"text":"Multiple libraries may define their own metadata provider to look for library-specific information.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"defines a "},{"type":"codeVoice","code":"multiplex"},{"type":"text","text":" function, which takes multiple metadata providers and combines them into a single object."}],"type":"paragraph"}]}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/MetaDataProvider in action","let orderMetadataProvider = Logger.MetadataProvider {","    var metadata: Logger.Metadata = [:]","    if let orderID = Kitchen.orderID {","        metadata[\"orderID\"] = \"\\(orderID)\"","    }","    return metadata","}","","let chefMetadataProvider = Logger.MetadataProvider {","    var metadata: Logger.Metadata = [:]","    if let chef = Kitchen.chef {","        metadata[\"chef\"] = \"\\(chef)\"","    }","    return metadata","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Once we have a metadata provider, we initialize the logging system with that provider, and we’re ready to start logging.","type":"text"}]}]}]},{"syntax":"swift","type":"codeListing","code":["let metadataProvider = Logger.MetadataProvider.multiplex([orderMetadataProvider,","                                                          chefMetadataProvider])","","LoggingSystem.bootstrap(StreamLogHandler.standardOutput, metadataProvider: metadataProvider)","","let logger = Logger(label: \"KitchenService\")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logs automatically include information specified in the metadata provider, so we don’t need to worry about including it in the log message."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/Logging and metadata provider","func makeSoup(order: Order) async throws -> Soup {","    logger.info(\"Preparing soup order\")","    async let pot = stove.boilBroth()","    async let choppedIngredients = chopIngredients(order.ingredients)","    async let meat = marinate(meat: .chicken)","    let soup = try await Soup(meat: meat, ingredients: choppedIngredients)","    return try await stove.cook(pot: pot, soup: soup, duration: .minutes(10))","}"]},{"type":"paragraph","inlineContent":[{"text":"Task-local values:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Attach metadata to the current task"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Inherited y child as well as Task { }","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Low-level building block for context"}],"type":"paragraph"}]}]},{"anchor":"Task-traces","text":"Task traces","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To trace and profile a concurrent distributed system","type":"text"}]},{"anchor":"Swift-Distributed-Tracing","text":"Swift Distributed Tracing","level":4,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Open source package for server ecosystem.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provides an extensible instrumentation API."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows us to leverage the benefits of the task tree across multiple systems to gain insight into performance characteristics and task relationships.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Similar to swift Log and Swift Metrics.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Swift Distributed Tracing package has an implementation of the ","type":"text"},{"code":"OpenTelemetry","type":"codeVoice"},{"text":" protocol, so existing tracing solutions, like Zipkin and Jaeger, will work out of the box.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"fills in the opaque ","type":"text"},{"type":"codeVoice","code":"waiting for response"},{"text":" in Xcode Instruments with detailed information about what is happening in the server.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a little different from tracing processes locally."}]}]},{"content":[{"inlineContent":[{"text":"Instead of getting a trace per-function, we instrument our code with spans using the ","type":"text"},{"type":"codeVoice","code":"withSpan"},{"text":" API.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/Profile server-side execution","func makeSoup(order: Order) async throws -> Soup {","    try await withSpan(\"makeSoup(\\(order.id)\") { span in","        async let pot = stove.boilWater()","        async let choppedIngredients = chopIngredients(order.ingredients)","        async let meat = marinate(meat: .chicken)","        let soup = try await Soup(meat: meat, ingredients: choppedIngredients)","        return try await stove.cook(pot: pot, soup: soup, duration: .minutes(10))","    }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Spans allow us to assign names to regions of code that are reported in the tracing system."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Spans don’t need to cover an entire function.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"They can provide more insight on specific pieces of a given function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"withSpan"},{"text":" annotates our tasks with additional trace IDs and other metadata, allowing the tracing system to merge the task trees into a single trace.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The tracing system has enough information to provide you with insight into the task hierarchy, along with information about the runtime performance characteristics of a task.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The span name is presented in the tracing UI.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll want to keep them short and descriptive so that you can easily find information about a specific span without clutter."}]}]},{"content":[{"inlineContent":[{"text":"We can attach additional metadata with the use of span attributes","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["func makeSoup(order: Order) async throws -> Soup {","    try await withSpan(#function) { span in","        span.attributes[\"kitchen.order.id\"] = order.id","        async let pot = stove.boilWater()","        async let choppedIngredients = chopIngredients(order.ingredients)","        async let meat = marinate(meat: .chicken)","        let soup = try await Soup(meat: meat, ingredients: choppedIngredients)","        return try await stove.cook(pot: pot, soup: soup, duration: .minutes(10))","    }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Here we’ve replaced the span name with the ","type":"text"},{"code":"#function","type":"codeVoice"},{"text":" directive to automatically fill the span name with the function name","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"used the span attribute to attach the current order ID to the span information reported to the tracer."}],"type":"paragraph"}]}]},{"anchor":"Trace-attributes","text":"Trace attributes","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Tracing systems usually present the attributes while inspecting a given span.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Most spans come with HTTP status codes, request and response sizes, start and end times, and other metadata making it easy to track information passing through the system.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If a task fails and throws an error, that information is also presented in the span and reported in the tracing system.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Since spans contain both timing information and the relationships of tasks in the tree, it’s a helpful way to track down errors caused by timing races and identify how they impact other tasks."}],"type":"paragraph"}]}]},{"anchor":"The-distributed-of-distributed-tracing-Visualize-traces-even-across-multiple-servicesnodes","text":"The distributed of distributed tracing (Visualize traces even across multiple services\/nodes)","level":3,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Distributed tracing is most powerful when all parts of the system embrace traces, including the HTTP clients, servers, and other RPC systems."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Swift Distributed Tracing"},{"type":"text","text":" leverages task-local values, built on the task trees, to automatically propagate all of the information necessary to produce reliable cross-node traces."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structured tasks:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"unlock the secrets of concurrent systems."}]}]},{"content":[{"inlineContent":[{"text":"provide tools to automatically cancel operations.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"automatically propagate priority information.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"facilitate tracing complex distributed workloads.","type":"text"}]}]}]}]}]},{"anchor":"Written-By","text":"Written By","level":2,"type":"heading"},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"RamitSharma991","type":"image"}]}]},{"size":4,"content":[{"level":3,"text":"Ramit Sharma","anchor":"Ramit-Sharma","type":"heading"},{"inlineContent":[{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","overridingTitle":"Contributed Notes"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/RamitSharma991"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/x.com\/iosDev_ramit"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"anchor":"Related-Sessions","text":"Related Sessions","level":2,"type":"heading"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"]},{"type":"small","inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"references":{"https://x.com/iosDev_ramit":{"title":"X\/Twitter","type":"link","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"url":"https:\/\/x.com\/iosDev_ramit","identifier":"https:\/\/x.com\/iosDev_ramit"},"https://developer.apple.com/wwdc23/10170":{"checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc23\/10170","identifier":"https:\/\/developer.apple.com\/wwdc23\/10170"},"RamitSharma991.jpeg":{"variants":[{"url":"\/images\/RamitSharma991.jpeg","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"RamitSharma991.jpeg"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"WWDCNotes.png"},"https://":{"title":"Blog","type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/","identifier":"https:\/\/"},"doc://WWDCNotes/documentation/WWDCNotes/RamitSharma991":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/ramitsharma991","type":"topic","images":[{"type":"card","identifier":"RamitSharma991.jpeg"},{"type":"icon","identifier":"RamitSharma991.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","title":"Ramit Sharma (15 notes)","abstract":[{"type":"text","text":"Indie iOS Dev. Swift, SwiftUI, Obj-C, UX and related."}],"kind":"article"},"RamitSharma991":{"variants":[{"url":"\/images\/RamitSharma991.jpeg","traits":["1x","light"]}],"alt":"Profile image of Ramit Sharma","type":"image","identifier":"RamitSharma991"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10164-Whats-new-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc23-10164-whats-new-in-swift","type":"topic","abstract":[{"type":"text","text":"Join us for an update on Swift. We’ll show you how APIs are becoming more extensible and expressive with features like parameter packs and macros. We’ll also take you through improvements to interoperability and share how we’re expanding Swift’s performance and safety benefits everywhere from Foundation to large-scale distributed programs on the server."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","title":"What’s new in Swift","role":"sampleCode","kind":"article"},"WWDC23-Icon.png":{"variants":[{"url":"\/images\/WWDC23-Icon.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"WWDC23-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","role":"sampleCode","kind":"article","title":"Explore structured concurrency in Swift","type":"topic","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}]},"WWDC23.jpeg":{"variants":[{"url":"\/images\/WWDC23.jpeg","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"WWDC23.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","type":"topic","kind":"symbol"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","type":"link","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"title":"Swift concurrency: Behind the scenes","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","kind":"article","abstract":[{"type":"text","text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps."}]},"https://github.com/RamitSharma991":{"title":"GitHub","type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/RamitSharma991","identifier":"https:\/\/github.com\/RamitSharma991"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"text":", ","type":"text"},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"role":"collectionGroup","kind":"article","type":"topic","title":"WWDC23","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"title":"Visualize and optimize Swift concurrency","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","kind":"article","abstract":[{"type":"text","text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app."}]}}}