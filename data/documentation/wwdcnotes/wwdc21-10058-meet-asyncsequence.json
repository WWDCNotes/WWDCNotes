{"abstract":[{"text":"Iterating over a sequence of values over time is now as easy as writing a “for” loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We’ll also show you how to adapt existing code to provide asynchronous sequences of your own.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"sampleCode","roleHeading":"WWDC21","modules":[{"name":"WWDC Notes"}],"title":"Meet AsyncSequence"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10058-meet-asyncsequence"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Map, filter, reduce, dropFirst all work in async sequences, for example:","type":"text"}]},{"type":"codeListing","code":["\/\/\/ This tool prints lines as we receive the `all_month.csv` file, ","\/\/\/ we don't need to wait for the complete file to download first.","@main","struct QuakesTool {","  static func main() async throws {","    let endpointURL = URL(string: \"https:\/\/earthquake.usgs.gov\/earthquakes\/feed\/v1.0\/summary\/all_month.csv\")!","","    \/\/ Skip the header line and iterate each one to extract the magnitude, time, latitude and longitude","    for try await event in endpointURL.lines.dropFirst() {","      let values = event.split(separator: \",\")","      let time = values[0]","      let latitude = values[1]","      let longitude = values[2]","      let magnitude = values[4]","      print(\"Magnitude \\(magnitude) on \\(time) at \\(latitude) \\(longitude)\")","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Async\/await key points:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Async functions let you write concurrent code without the need for callbacks, by using the ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" keyword","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"calling an async function will suspend the current flow, which is then resumed whenever a value or error is produced"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"What-is-AsyncSequence","text":"What is AsyncSequence"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AsyncSequence will suspend on each element and resume when the underlying iterator produces a value or throws"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"just like other sequences, except async - each element is delivered asynchronously","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"may throw"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"AsyncSequences either completes with success or stops when an error is thrown - depending if failure is an option","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"An async iterator also consumes its underlying collection.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generally speaking, asynchronous sequences are a description of how to produce values over time:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"an async sequence may be zero or more values and then signify completion with returning a nil from its iterator, just like sequences"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"When an error occurs, the async sequence is at a terminal state - after an error happens, they’ll return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" for any subsequent calls to ","type":"text"},{"type":"codeVoice","code":"next"},{"text":" on their iterator","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Things like ","type":"text"},{"code":"break","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"continue","type":"codeVoice"},{"text":" work in async sequences too.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can cancel an iteration by holding on to its ","type":"text"},{"type":"codeVoice","code":"Task.Handle"},{"text":" when you wrap it in ","type":"text"},{"type":"codeVoice","code":"async"},{"text":":","type":"text"}]},{"type":"codeListing","code":["let handle = async {","  for await thing in list {","    \/\/ ...","  }","}","","handle.cancel()"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Compiler-transformation","text":"Compiler transformation"},{"type":"paragraph","inlineContent":[{"text":"Take the following code:","type":"text"}]},{"type":"codeListing","code":["for quake in quakes {","  if quake.magnitude > 3 {","    displaySignificantEarthquake(quake)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler will transform it into:"}]},{"type":"codeListing","code":["var iterator = quakes.makeIterator()","while let quake = iterator.next() {","  if quake.magnitude > 3 {","    displaySignificantEarthquake(quake)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"if "},{"code":"quakes","type":"codeVoice"},{"type":"text","text":" was an asyncSequence, it’d turn into:"}]},{"type":"codeListing","code":["var iterator = quakes.makeAsyncIterator()","while let quake = await iterator.next() {","  if quake.magnitude > 3 {","    displaySignificantEarthquake(quake)","  }","}"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"API-highlight","text":"API highlight"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Read bytes asynchronously from a "},{"type":"codeVoice","code":"FileHandle"},{"type":"text","text":":"}]},{"type":"codeListing","code":["\/\/ bytes: AsyncBytes","for try await line in FileHandle.standardInput.bytes.lines {","  ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Read lines asynchronously from a "},{"type":"codeVoice","code":"URL"},{"type":"text","text":":"}]},{"type":"codeListing","code":["\/\/ lines: AsyncLineSequence<AsyncBytes>","let url = URL(fileURLWithPath: \"\/tmp\/somefile.txt\")","for try await line in url.lines {","  ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Read bytes asynchronously from a "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":":"}]},{"type":"codeListing","code":["\/\/ you can use:","\/\/ func bytes(from: URL) async throws -> (AsyncBytes, URLResponse)","\/\/ func bytes(for: URLRequest) async throws -> (AsyncBytes, URLResponse)","","let (bytes, response) = try await URLSession.shared.bytes(from: url)","","guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 \/* OK *\/","else { throw MyNetworkingError.invalidServerResponse }","","for try await byte in bytes {","  ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Await notifications asynchronously:","type":"text"}]},{"type":"codeListing","code":["let center = NotificationCenter.default","let notification = await center.notifications(named: .NSPersistentStoreRemoteChange).first {","  $0.userInfo[NSStoreUUIDKey] == storeUUID","}"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"How-to-create-async-sequences","text":"How to create async sequences"},{"type":"paragraph","inlineContent":[{"text":"Pretty much anything that does not need a response back and is just informing of a new value that occurs can be a prime candidate for making an async sequence.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Definition:"}]},{"type":"codeListing","code":["public struct AsyncStream<Element>: AsyncSequence {","  public init(","    elementType: Element.Type = Element.self,","    maxBufferedElements limit: Int = .max,","    _ build: (Continuation) -> Void","  )","}","","\/\/ If we need to handle errors:","public struct AsynchrowingStream<Element>: AsyncSequence {","  public init(","    elementType: Element.Type = Element.self,","    maxBufferedElements limit: Int = .max,","    _ build: (Continuation) -> Void","  )","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","code":["class QuakeMonitor {","  var quakeHandler: (Quake) -> Void ","  func startMonitoring()","  func stopMonitoring()","}","","let quakes = AsyncStream(Quake.self) { continuation in","  let monitor = QuakeMonitor()","  monitor.quakeHandler = { quake in","    continuation.yield(quake)","  }","  continuation.onTermination = { @Sendable _ in","    monitor.stopMonitoring()","  }","  monitor.startMonitoring()","}","","let significantQuakes = quakes.filter { quake in","  quake.magnitude > 3","}","","for await quake in significantQuakes {","  ...","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"when constructing an async stream, an element type (","type":"text"},{"type":"codeVoice","code":"Quake"},{"text":") and construction closure is specified","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The closure has a ","type":"text"},{"code":"continuation","type":"codeVoice"},{"text":" that can yield values more than once, finish, or handle termination","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"donnywals"}]}],"size":1},{"content":[{"type":"heading","anchor":"Donny-Wals","level":3,"text":"Donny Wals"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/donnywals","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/donnywals","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.donnywals.com","isActive":true,"type":"reference"}]}],"size":4}]},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}]},{"size":4,"content":[{"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello","level":3},{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10020-Compose-advanced-models-with-Create-ML-Components","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110355-Meet-Swift-Async-Algorithms","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110379-Create-a-more-responsive-media-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift"],"style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"sections":[],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc21\/10058","isActive":true,"type":"reference","overridingTitle":"Watch Video (14 min)"},"kind":"sampleDownload"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence"},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10109-Whats-new-in-Foundation":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation","role":"sampleCode","abstract":[{"text":"Discover how the latest updates to Foundation can help you improve your app’s localization and internationalization support. Find out about the new AttributedString, designed specifically for Swift, and learn how you can use Markdown to apply style to your localized strings. Explore the grammar agreement engine, which automatically fixes up localized strings so they match grammatical gender and pluralization. And we’ll take you through improvements to date and number formatting that simplify complex requirements while also improving performance.","type":"text"}],"kind":"article","title":"What’s new in Foundation","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10109-whats-new-in-foundation"},"WWDC21.jpeg":{"type":"image","variants":[{"url":"\/images\/WWDC21.jpeg","traits":["1x","light"]}],"alt":null,"identifier":"WWDC21.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"title":"Meet async\/await in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","type":"topic","abstract":[{"text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions.","type":"text"}],"kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10095-Use-asyncawait-with-URLSession":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10095-use-asyncawait-with-urlsession","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","kind":"article","abstract":[{"type":"text","text":"Discover how you can adopt Swift concurrency in URLSession using async\/await and AsyncSequence, and how you can apply Swift concurrency concepts to improve your networking code."}],"title":"Use async\/await with URLSession"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10020-Compose-advanced-models-with-Create-ML-Components":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10020-compose-advanced-models-with-create-ml-components","abstract":[{"type":"text","text":"Take your custom machine learning models to the next level with Create ML Components. We’ll show you how to work with temporal data like video or audio and compose models that can count repetitive human actions or provide advanced sound classification. We’ll also share best practices on using incremental fitting to speed up model training with new data."}],"role":"sampleCode","title":"Compose advanced models with Create ML Components","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10020-Compose-advanced-models-with-Create-ML-Components"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110355-Meet-Swift-Async-Algorithms":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110355-Meet-Swift-Async-Algorithms","url":"\/documentation\/wwdcnotes\/wwdc22-110355-meet-swift-async-algorithms","abstract":[{"type":"text","text":"Discover the latest open source Swift package from Apple: Swift Async Algorithms. We’ll explore algorithms from this package that you can use with AsyncSequence, including zip, merge, and throttle. Follow along with us as we use these algorithms to build a great messaging app. We’ll also share best practices for combining multiple AsyncSequences and using the Swift Clock type to work with values over time."}],"type":"topic","title":"Meet Swift Async Algorithms"},"WWDCNotes.png":{"alt":null,"identifier":"WWDCNotes.png","type":"image","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"role":"collectionGroup","images":[{"identifier":"WWDC21-Icon.png","type":"icon"},{"identifier":"WWDC21.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","title":"WWDC21","url":"\/documentation\/wwdcnotes\/wwdc21","type":"topic","abstract":[{"text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"MusicKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"DocC","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit 2","type":"codeVoice"},{"text":", and more.","type":"text"}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"title":"Federico Zanetello (332 notes)","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"kind":"article","title":"Explore structured concurrency in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}],"type":"topic","role":"sampleCode"},"donnywals":{"alt":"Profile image of Donny Wals","identifier":"donnywals","variants":[{"traits":["1x","light"],"url":"\/images\/donnywals.jpeg"}],"type":"image"},"zntfdr":{"alt":"Profile image of Federico Zanetello","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","identifier":"zntfdr"},"donnywals.jpeg":{"type":"image","alt":null,"identifier":"donnywals.jpeg","variants":[{"url":"\/images\/donnywals.jpeg","traits":["1x","light"]}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://zntfdr.dev":{"title":"Blog","type":"link","identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/zntfdr.dev"},"https://github.com/donnywals":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/donnywals","identifier":"https:\/\/github.com\/donnywals","title":"GitHub","type":"link"},"https://github.com/zntfdr":{"title":"GitHub","url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"text":"GitHub","type":"text"}],"type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110379-Create-a-more-responsive-media-app":{"url":"\/documentation\/wwdcnotes\/wwdc22-110379-create-a-more-responsive-media-app","kind":"article","title":"Create a more responsive media app","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110379-Create-a-more-responsive-media-app","type":"topic","abstract":[{"type":"text","text":"Discover how you can use AVFoundation to keep people focused on your media app’s content — not your loading spinner. We’ll show you how to support a responsive and fluid interface in your app, all while you create rich audiovisual compositions, load audiovisual assets, and prepare media thumbnails. Find out how you can perform these tasks on your app’s main thread while I\/O processes in parallel, learn how to get top-notch playback performance when loading data from custom storage, and more."}]},"doc://WWDCNotes/documentation/WWDCNotes/donnywals":{"url":"\/documentation\/wwdcnotes\/donnywals","kind":"article","role":"sampleCode","type":"topic","title":"Donny Wals (3 notes)","abstract":[{"type":"text","text":"No Bio on GitHub"}],"images":[{"identifier":"donnywals.jpeg","type":"card"},{"identifier":"donnywals.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/donnywals"},"https://www.donnywals.com":{"titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/www.donnywals.com","identifier":"https:\/\/www.donnywals.com","title":"Blog","type":"link"},"WWDC21-Icon.png":{"type":"image","variants":[{"url":"\/images\/WWDC21-Icon.png","traits":["1x","light"]}],"alt":null,"identifier":"WWDC21-Icon.png"},"zntfdr.jpeg":{"variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg","alt":null,"type":"image"},"https://developer.apple.com/wwdc21/10058":{"url":"https:\/\/developer.apple.com\/wwdc21\/10058","checksum":null,"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10058"}}}