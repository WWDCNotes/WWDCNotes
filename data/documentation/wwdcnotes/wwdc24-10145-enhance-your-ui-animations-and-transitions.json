{"sections":[],"abstract":[{"type":"text","text":"Explore how to adopt the zoom transition in navigation and presentations to increase the sense of continuity in your app, and learn how to animate UIKit views with SwiftUI animations to make it easier to build animations that feel continuous."}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc24-10145-enhance-your-ui-animations-and-transitions"],"traits":[{"interfaceLanguage":"swift"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10145","type":"reference","overridingTitle":"Watch Video","isActive":true}},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10145-Enhance-your-UI-animations-and-transitions"},"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Enhance your UI animations and transitions","roleHeading":"WWDC24","role":"sampleCode"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Key-takeaways","text":"Key takeaways","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"New fluied zoom transitions are available"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"These zoom transitions are continuously interactive","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI Animation type now available in UIKit and AppKit"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Presenter","text":"Presenter","type":"heading"},{"inlineContent":[{"type":"text","text":"Russell Ladd, UI Frameworks"}],"type":"paragraph"},{"level":2,"anchor":"Zoom-transitions","text":"Zoom transitions","type":"heading"},{"inlineContent":[{"text":"In iOS 18, there is a new zoom transition.","type":"text"},{"text":" ","type":"text"},{"text":"With this new transition the cell you tap morphs into the incoming view.","type":"text"},{"text":" ","type":"text"},{"text":"The transition is continuously interactive — you can grab and drag the transitioning view around during the transition.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In parts of your app where you transition from a large cell, the zoom transition can increase the sense of continuity by keeping the same elements on screen across the transition.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"SwiftUI-Example","text":"SwiftUI Example","type":"heading"},{"inlineContent":[{"type":"text","text":"Basic transition:"}],"type":"paragraph"},{"code":["NavigationLink {","    BraceletEditor(bracelet)","} label: {","    BraceletPreview(bracelet)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"New zoom transition:","type":"text"}],"type":"paragraph"},{"code":["NavigationLink {","    BraceletEditor(bracelet)","        .navigationTransitionStyle(","            .zoom(","                sourceID: bracelet.id,","                in: braceletList","            )","        )","} label: {","    BraceletPreview(bracelet)","}",".matchedTransitionSource(","    id: bracelet.id,","    in: braceletList",")"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"UIKit-Example","text":"UIKit Example","type":"heading"},{"inlineContent":[{"text":"Basic transition:","type":"text"}],"type":"paragraph"},{"code":["func showEditor(for bracelet: Bracelet) {","    let braceletEditor = BraceletEditor(bracelet)","    navigationController?.push(braceletEditor, animated: true)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"New zoom transition:"}],"type":"paragraph"},{"code":["func showEditor(for bracelet: Bracelet) {","    let braceletEditor = BraceletEditor(bracelet)","    braceletEditor.preferredTransition = .zoom { _ in","        cell(for: bracelet)","    }","    navigationController?.push(braceletEditor, animated: true)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"These APIs work with the "},{"type":"codeVoice","code":"fullScreenCover"},{"type":"text","text":" and sheet presentation APIs in both SwiftUI and UIKit."}],"type":"paragraph"},{"level":3,"anchor":"UIKit-ViewController-lifecycle","text":"UIKit ViewController lifecycle","type":"heading"},{"inlineContent":[{"text":"In UIKit these new fluid transitions work with ViewController lifecycle and appearance callbacks a bit differently than before.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s consider that we start a push of a view and then start a pop in the middle of the push (by tapping the back button or with a back swipe). In this case the push is not cancelled, instead the view goes straight to the "},{"type":"codeVoice","code":"Appeared"},{"type":"text","text":" state, and then in the same turn of the run loop, the pop transition starts, moving to the "},{"type":"codeVoice","code":"Disappeared"},{"type":"text","text":" state, and from here you can treat it as a normal pop transition."}],"type":"paragraph"},{"level":3,"anchor":"UIKit-tips-on-transition-handling","text":"UIKit tips on transition handling","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Be ready for a new transition to start anytime. Don’t try to “handle” being in transition differently from not being in a transition."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Minimize transition state. Keep temporary transition state to a minimum.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed, reset all transitions state by viewDidAppear and viewDidDisappear. These are guaranteed to be called at the end of the transition."}]}]}],"type":"unorderedList"},{"level":2,"anchor":"SwiftUI-Animation","text":"SwiftUI Animation","type":"heading"},{"inlineContent":[{"type":"text","text":"In iOS 18 you can use a SwiftUI Animation type to animate UIKit and AppKit Views. This lets you use the full suite of SwiftUI Animation types, including SwiftUI CustomAnimations, to animate UIKit views."}],"type":"paragraph"},{"inlineContent":[{"text":"UIKit Example:","type":"text"}],"type":"paragraph"},{"code":["UIView.animate(springDuration: 0.5) {","    bead.center = endOfBracelet","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"SwiftUI Example:"}],"type":"paragraph"},{"code":["withAnimation(.spring(duration: 0.5)) {","    beads.append(Bead())","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Using SwiftUI Animation type in UIKit:","type":"text"}],"type":"paragraph"},{"code":["UIView.animate(.spring(duration: 0.5)) {","    bead.center = endOfBracelet","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If your code works with CALayers, there are a couple of implications to consider when using this new API: UIKit generates a CAAnimation, while SwiftUI does not.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Animating-representables","text":"Animating representables","type":"heading"},{"inlineContent":[{"type":"text","text":"In iOS 18 you can animate UIKit and AppKit views in the context of representable types, like "},{"type":"codeVoice","code":"UIViewRepresentable"},{"type":"text","text":". To do this you should:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"add "},{"type":"codeVoice","code":".animated()"},{"type":"text","text":" modifier to the binding"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"add the new "},{"type":"codeVoice","code":".animate"},{"type":"text","text":" method to the context"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"It grabs whatever SwiftUI animation is present on the Transaction, and bridges it to the "},{"code":"UIView.animate","type":"codeVoice"},{"type":"text","text":" method."}],"type":"paragraph"},{"code":["struct BeadBoxWrapper: UIViewRepresentable {","    @Binding var isOpen: Bool","","    func updateUIView(_ box: BeadBox, context: Context) {","        contex.animate {","            box.lid.center.y = isOpen ? -100 : 100","        }","    }","}","","@State private var isBeadBoxOpen = false","var body: some View {","    BeadBoxWrapper($isBeadBoxOpen.animated())","        .onTapGesture {","            isBeadBoxOpen.toggle()","        }","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the current transaction isn’t animated, the animation and completion are called immediately inline, so this code works whether the update is animated or not."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A single animation running across SwiftUI Views and UIViews runs perfectly in sync.","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"Gesture-driven-animations","text":"Gesture-driven animations","type":"heading"},{"inlineContent":[{"text":"You can also run the same API in response to continuous gestures.","type":"text"},{"text":" ","type":"text"},{"text":"Here is a UIKit code that handles dragging an object in response to a pan gesture:","type":"text"}],"type":"paragraph"},{"code":["switch gesture.state {","case .changed:","    bead.center = gesture.translation","case .ended:","    \/\/ Get velocity from gesture","    \/\/ Convert to unit velocity","    UIView.animate(...) {","        bead.center = endOfBracelet","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this case you have to compute the gesture’s velocity and convert it to the unit’s velocity. But SwiftUI can handle it by itself and now we can pass SwiftUI animations to the new "},{"type":"codeVoice","code":"UIView.animate"},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["switch gesture.state {","case .changed:","    UIView.animate(.interactiveSpring) {","        bead.center = gesture.translation","    }","case .ended:","    UIView.animate(.spring) {","        bead.center = endOfBracelet","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"Written-By","text":"Written By","type":"heading"},{"numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"nikolaikhud","type":"image"}]}],"size":1},{"content":[{"anchor":"Nikolai-Khudiakov","level":3,"type":"heading","text":"Nikolai Khudiakov"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/nikolaikhud","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/nikolaikhud","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/","isActive":true,"type":"reference"}]}],"size":4}],"type":"row"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}],"type":"paragraph"},{"level":2,"anchor":"Related-Sessions","text":"Related Sessions","type":"heading"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10158-Animate-with-springs"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"references":{"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection"},"nikolaikhud":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/nikolaikhud.jpeg"}],"identifier":"nikolaikhud","alt":"Profile image of Nikolai Khudiakov"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10158-Animate-with-springs":{"role":"sampleCode","type":"topic","title":"Animate with springs","abstract":[{"text":"Discover how you can bring life to your app with animation! We’ll show you how to create amazing animations when you take advantage of springs and help you learn how to use them in your app.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10158-animate-with-springs","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10158-Animate-with-springs"},"doc://WWDCNotes/documentation/WWDCNotes/nikolaikhud":{"kind":"article","images":[{"type":"card","identifier":"nikolaikhud.jpeg"},{"type":"icon","identifier":"nikolaikhud.jpeg"}],"role":"sampleCode","title":"Nikolai Khudiakov (1 note)","url":"\/documentation\/wwdcnotes\/nikolaikhud","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/nikolaikhud","abstract":[{"text":"No Bio on GitHub","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"kind":"article","title":"WWDC24","role":"collectionGroup","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"type":"codeVoice","code":"FinanceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"type":"topic","images":[{"type":"icon","identifier":"WWDC24-Icon.png"},{"type":"card","identifier":"WWDC24.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc24"},"https://github.com/nikolaikhud":{"type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/nikolaikhud","url":"https:\/\/github.com\/nikolaikhud","title":"GitHub"},"https://":{"type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/","url":"https:\/\/","title":"Blog"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10156-Explore-SwiftUI-animation":{"title":"Explore SwiftUI animation","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","role":"sampleCode","abstract":[{"type":"text","text":"Explore SwiftUI’s powerful animation capabilities and find out how these features work together to produce impressive visual effects. Learn how SwiftUI refreshes the rendering of a view, determines what to animate, interpolates values over time, and propagates context for the current transaction."}],"url":"\/documentation\/wwdcnotes\/wwdc23-10156-explore-swiftui-animation","kind":"article","type":"topic"},"nikolaikhud.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/nikolaikhud.jpeg"}],"identifier":"nikolaikhud.jpeg","alt":null},"WWDCNotes.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null},"WWDC24.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24.jpeg"}],"identifier":"WWDC24.jpeg","alt":null},"https://developer.apple.com/wwdc24/10145":{"type":"download","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10145","url":"https:\/\/developer.apple.com\/wwdc24\/10145"},"WWDC24-Icon.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24-Icon.png"}],"identifier":"WWDC24-Icon.png","alt":null}}}