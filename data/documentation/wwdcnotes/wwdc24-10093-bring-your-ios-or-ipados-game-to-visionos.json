{"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Focus: how to bring your Metal game into a hybrid environment on visionOS."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Intro: compare Wylde Flowers iPad to Wylde Flowers visionOS."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Two main modes for Metal on visionOS:."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"run your game as a compatible app in a window. App behaves very similarly to how it would on an iPad. Runs alongside other apps in Shared Space.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"use CompositorServices to run your game as a fully immersive app where the game’s camera is controlled by the player’s head. See “Render Metal with passthrough in visionOS”."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"“In between” is focus of this video. Start with a compatible app and progressively add features to increase immersion, leverage Vision Pro capabilities.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sample for case study: "},{"identifier":"https:\/\/developer.apple.com\/documentation\/metal\/metal_sample_code_library\/rendering_a_scene_with_deferred_lighting_in_swift","type":"reference","isActive":true}]},{"type":"paragraph","inlineContent":[{"text":"Start: compile  app with the iOS SDK and run it on visionOS as a compatible app. Runs in a window.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Go to build settings, select iOS target, add Apple Vision as supported destination.Let’s add Apple Vision as a supported destination, to compile the app with the visionOS SDK. Might have minor compile errors.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Recommended: move to a LowLevelTexture to get the most control.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you want to render to a CAMetalLayer, you can create a View that contains it. Can create a CADisplayLink to get a callback every frame.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Can use LowLevelTextures in a similar way. Create a LowLevelTexture, then  create a TextureResource from the LowLevelTexture, and use it anywhere in a RealityKit scene. Use CommandQueue to draw to the LowLevelTexture, through an MTLTexture. For more details about LowLevelTexture, see the video “Build a spatial drawing app with RealityKit”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After converting to native visionOS, can add visionOS specific features."}]},{"type":"paragraph","inlineContent":[{"text":"Example: add frame around the game view, add background in an ImmersiveSpace.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Cut The Rope 3” has a dynamic frame around its window. Frame rendered with RealityKit, game rendered with Metal. Code sample."}]},{"type":"paragraph","inlineContent":[{"text":"Add immersive background behind game. Example: Void-X.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Can create background with an ImmersiveSpace in SwiftUI. Can put iOS game in a WindowGroup. Can have shared @State between the window and ImmersiveSpace, by using a SwiftUI @State object.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example: add stereoscopy to Deferred Lighting sample.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Explanation of stereoscopy and parallax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want objects to come out of the bounds of the rectangle, can render them with RealityKit and APIs such as the new portal-crossing API. See the “Discover RealityKit APIs for iOS, macOS and visionOS” for example of portal-crossing."}]},{"type":"paragraph","inlineContent":[{"text":"“Build compelling spatial photo and video experiences” has details about creating stereoscopic content.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Caution: don’t render beyond infinity. Eyes should either converge or be parallel. Very uncomfortable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Recommended: add slider to the settings of your game, for the player to adjust the intensity of the stereoscopy to their comfort. Implement by changing distance between the two virtual cameras. See game loop of Deferred Lighting sample."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optimization: use Vertex Amplification to render both eyes with the same draw calls. Article about Vertex Amplification on the developer documentation website."}]},{"type":"paragraph","inlineContent":[{"text":"Example: adapting code of the Deferred Lighting Sample.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example: Deferred Lighting sample with head tracking. The camera moves as viewer’s head moves.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use ImmersiveSpace and ARKit. Get head position from ARKit every frame, pass to your renderer. Code sample shown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Windows and ImmersiveSpaces have their own coordinate spaces on visionOS. The head transform from ARKit is in the coordinate space of the ImmersiveSpace. To use in window,  convert the position to the window’s coordinate space. Code sample shown. Can invert this matrix and convert the head position to the window space.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For best results, predict the head position (because of render delay). ARKit will do the head prediction if you give it an estimated render time for your app. Sample uses 33 milliseconds for the estimated presentationTime, which corresponds to 3 frames at 90fps.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make game look like it is rendered through a physical window, need to build asymmetric projection matrix. A fixed projection matrix will not match the shape of the window. Camera frustum must go through the window. Code sample shown."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stereoscopy increases immersion of your game but doubles the render cost. Offset some of this by using Variable Rasterization Rates (VRR)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use VRR to lower resolution at periphery and increase resolution at center. Sample code. Sample video showing changes in AdaptiveResolutionComponent. More details on VRR."}]},{"type":"paragraph","inlineContent":[{"text":"Sample: ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/RealityKit\/rendering-a-windowed-game-in-stereo","type":"reference","isActive":true}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","columns":[{"size":1,"content":[{"inlineContent":[{"identifier":"halmueller","type":"image"}],"type":"paragraph"}]},{"size":4,"content":[{"type":"heading","text":"Hal Mueller","anchor":"Hal-Mueller","level":3},{"inlineContent":[{"isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/halmueller","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/halmueller","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/","type":"reference"}],"type":"paragraph"}]}],"numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10094-Explore-game-input-in-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10092-Render-Metal-with-passthrough-in-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10103-Discover-RealityKit-APIs-for-iOS-macOS-and-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10166-Build-compelling-spatial-photo-and-video-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10080-Build-spatial-experiences-with-RealityKit"],"style":"list"},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video","isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc24\/10093"}},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10093-bring-your-ios-or-ipados-game-to-visionos"]}],"metadata":{"roleHeading":"WWDC24","role":"sampleCode","title":"Bring your iOS or iPadOS game to visionOS","modules":[{"name":"WWDC Notes"}]},"abstract":[{"type":"text","text":"Discover how to transform your iOS or iPadOS game into a uniquely visionOS experience. Increase the immersion (and fun factor!) with a 3D frame or an immersive background. And invite players further into your world by adding depth to the window with stereoscopy or head tracking."}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10093-Bring-your-iOS-or-iPadOS-game-to-visionOS"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"references":{"https://developer.apple.com/documentation/metal/metal_sample_code_library/rendering_a_scene_with_deferred_lighting_in_swift":{"titleInlineContent":[{"type":"text","text":"Metal Deferred Lighting sample"}],"url":"https:\/\/developer.apple.com\/documentation\/metal\/metal_sample_code_library\/rendering_a_scene_with_deferred_lighting_in_swift","identifier":"https:\/\/developer.apple.com\/documentation\/metal\/metal_sample_code_library\/rendering_a_scene_with_deferred_lighting_in_swift","title":"Metal Deferred Lighting sample","type":"link"},"halmueller":{"alt":"Profile image of Hal Mueller","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/halmueller.jpeg"}],"type":"image","identifier":"halmueller"},"halmueller.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/halmueller.jpeg","traits":["1x","light"]}],"identifier":"halmueller.jpeg","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10080-Build-spatial-experiences-with-RealityKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10080-Build-spatial-experiences-with-RealityKit","title":"Build spatial experiences with RealityKit","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10080-build-spatial-experiences-with-realitykit","type":"topic","kind":"article","abstract":[{"type":"text","text":"Discover how RealityKit can bring your apps into a new dimension. Get started with RealityKit entities, components, and systems, and learn how you can add 3D models and effects to your app on visionOS. We’ll also take you through the RealityView API and demonstrate how to add 3D objects to windows, volumes, and spaces to make your apps more immersive. And we’ll explore combining RealityKit with spatial input, animation, and spatial audio."}]},"WWDC24.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC24.jpeg"}],"alt":null,"identifier":"WWDC24.jpeg","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"type":"topic","title":"WWDC Notes"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://developer.apple.com/wwdc24/10093":{"url":"https:\/\/developer.apple.com\/wwdc24\/10093","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10093","type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"kind":"article","type":"topic","abstract":[{"text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: Swift Testing, ","type":"text"},{"type":"codeVoice","code":"FinanceKit"},{"text":", ","type":"text"},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"role":"collectionGroup","title":"WWDC24","url":"\/documentation\/wwdcnotes\/wwdc24","images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"},"https://github.com/halmueller":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/halmueller","identifier":"https:\/\/github.com\/halmueller","title":"GitHub","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/halmueller":{"abstract":[{"text":"Software developer, application architect, teacher, geodata hacker. Mostly Swift, Objective-C, Python. SwiftUI, UIKit, AppKit.","type":"text"}],"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/halmueller","url":"\/documentation\/wwdcnotes\/halmueller","title":"Hal Mueller (7 notes)","type":"topic","images":[{"identifier":"halmueller.jpeg","type":"card"},{"identifier":"halmueller.jpeg","type":"icon"}]},"https://developer.apple.com/documentation/RealityKit/rendering-a-windowed-game-in-stereo":{"url":"https:\/\/developer.apple.com\/documentation\/RealityKit\/rendering-a-windowed-game-in-stereo","title":"Rendering a windowed game in stereo ","identifier":"https:\/\/developer.apple.com\/documentation\/RealityKit\/rendering-a-windowed-game-in-stereo","titleInlineContent":[{"type":"text","text":"Rendering a windowed game in stereo"},{"type":"text","text":" "}],"type":"link"},"WWDC24-Icon.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC24-Icon.png"}],"type":"image","identifier":"WWDC24-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10103-Discover-RealityKit-APIs-for-iOS-macOS-and-visionOS":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10103-Discover-RealityKit-APIs-for-iOS-macOS-and-visionOS","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10103-discover-realitykit-apis-for-ios-macos-and-visionos","kind":"article","role":"sampleCode","title":"Discover RealityKit APIs for iOS, macOS and visionOS","abstract":[{"type":"text","text":"Learn how new cross-platform APIs in RealityKit can help you build immersive apps for iOS, macOS, and visionOS. Check out the new hover effects, lights and shadows, and portal crossing features, and view them in action through real examples."}]},"https://":{"type":"link","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"identifier":"https:\/\/","url":"https:\/\/"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10094-Explore-game-input-in-visionOS":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10094-Explore-game-input-in-visionOS","kind":"article","abstract":[{"type":"text","text":"Discover how to design and implement great input for your game in visionOS. Learn how system gestures let you provide frictionless ways for players to interact with your games. And explore best practices for supporting custom gestures and game controllers."}],"title":"Explore game input in visionOS","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10094-explore-game-input-in-visionos","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10092-Render-Metal-with-passthrough-in-visionOS":{"role":"sampleCode","title":"Render Metal with passthrough in visionOS","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10092-Render-Metal-with-passthrough-in-visionOS","url":"\/documentation\/wwdcnotes\/wwdc24-10092-render-metal-with-passthrough-in-visionos","abstract":[{"type":"text","text":"Get ready to extend your Metal experiences for visionOS. Learn best practices for integrating your rendered content with people’s physical environments with passthrough. Find out how to position rendered content to match the physical world, reduce latency with trackable anchor prediction, and more."}],"type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit":{"title":"Build a spatial drawing app with RealityKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","type":"topic","abstract":[{"type":"text","text":"Harness the power of RealityKit through the process of building a spatial drawing app. As you create an eye-catching spatial experience that integrates RealityKit with ARKit and SwiftUI, you’ll explore how resources work in RealityKit and how to use features like low-level mesh and texture APIs to achieve fast updates of the users’ brush strokes."}],"kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10104-build-a-spatial-drawing-app-with-realitykit"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10166-Build-compelling-spatial-photo-and-video-experiences":{"kind":"article","role":"sampleCode","type":"topic","title":"Build compelling spatial photo and video experiences","abstract":[{"type":"text","text":"Learn how to adopt spatial photos and videos in your apps. Explore the different types of stereoscopic media and find out how to capture spatial videos in your iOS app on iPhone 15 Pro. Discover the various ways to detect and present spatial media, including the new QuickLook Preview Application API in visionOS. And take a deep dive into the metadata and stereo concepts that make a photo or video spatial."}],"url":"\/documentation\/wwdcnotes\/wwdc24-10166-build-compelling-spatial-photo-and-video-experiences","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10166-Build-compelling-spatial-photo-and-video-experiences"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"alt":null,"identifier":"WWDCNotes.png","type":"image"}}}