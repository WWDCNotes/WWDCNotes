{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"metadata":{"role":"sampleCode","modules":[{"name":"WWDC Notes"}],"title":"Bring your game to Mac, Part 2: Compile your shaders","roleHeading":"WWDC23"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"üò± ‚ÄúNo Overview Available!‚Äù"}]},{"inlineContent":[{"type":"text","text":"Be the hero to change that by watching the video and providing notes! It‚Äôs super easy:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10101-Go-bindless-with-Metal-3","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10229-Discover-compilation-workflows-in-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10615-Build-GPU-binaries-with-Metal"],"type":"links"},{"inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"sections":[],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10124-bring-your-game-to-mac-part-2-compile-your-shaders"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders"},"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10124","overridingTitle":"Watch Video (18 min)","type":"reference","isActive":true}},"abstract":[{"type":"text","text":"Discover how the Metal shader converter streamlines the process of bringing your HLSL shaders to Metal as we continue our three-part series on bringing your game to Mac. Find out how to build a fast, end-to-end shader pipeline from DXIL that supports all shader stages and allows you to leverage the advanced features of Apple GPUs. We‚Äôll also show you how to reduce app launch time and stutters by generating GPU binaries with the offline compiler."}],"kind":"article","references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10101-Go-bindless-with-Metal-3":{"abstract":[{"text":"Learn how you can unleash powerful rendering techniques like ray tracing when you go bindless with Metal 3. We‚Äôll show you how to make your app‚Äôs bindless journey a joy by simplifying argument buffers, allocating acceleration structures from heaps, and benefitting from the improvements to the Metal‚Äôs validation layer and Debugger Tools. We‚Äôll also explore how you can command more CPU and GPU performance with long-term resource structures.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10101-Go-bindless-with-Metal-3","title":"Go bindless with Metal 3","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-10101-go-bindless-with-metal-3"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10123-bring-your-game-to-mac-part-1-make-a-game-plan","title":"Bring your game to Mac, Part 1: Make a game plan","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan","abstract":[{"text":"Bring modern, high-end games to Mac and iPad with the powerful features of Metal and Apple silicon. Discover the game porting toolkit and learn how it can help you evaluate your existing Windows game for graphics feature compatibility and performance. We‚Äôll share best practices and technical resources for handling audio, input, and advanced display features.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3":{"role":"sampleCode","abstract":[{"type":"text","text":"Discover how you can reduce in-app stutters, first launch times, and new level load times when you generate your GPU binaries entirely at project build time with offline compilation. We‚Äôll also show you how to improve total compile time and binary size for larger GPU programs using the ‚ÄúOptimize for size‚Äù compiler option."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10102-Target-and-optimize-GPU-binaries-with-Metal-3","kind":"article","type":"topic","title":"Target and optimize GPU binaries with Metal 3","url":"\/documentation\/wwdcnotes\/wwdc22-10102-target-and-optimize-gpu-binaries-with-metal-3"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal":{"title":"Bring your game to Mac, Part 3: Render with Metal","kind":"article","type":"topic","role":"sampleCode","abstract":[{"text":"Discover how you can support Metal in your rendering code as we close out our three-part series on bringing your game to Mac. Once you‚Äôve evaluated your existing Windows binary with the game porting toolkit and brought your HLSL shaders over to Metal, learn how you can optimally implement the features that high-end, modern games require. We‚Äôll show you how to manage GPU resource bindings, residency, and synchronization. Find out how to optimize GPU commands submission, render rich visuals with MetalFX Upscaling, and more.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10125-bring-your-game-to-mac-part-3-render-with-metal","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"https://developer.apple.com/wwdc23/10124":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc23\/10124","url":"https:\/\/developer.apple.com\/wwdc23\/10124","type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"kind":"article","title":"WWDC23","role":"collectionGroup","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"type":"topic","images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc23"},"WWDC23-Icon.png":{"identifier":"WWDC23-Icon.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-Icon.png"}]},"WWDC23.jpeg":{"identifier":"WWDC23.jpeg","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10615-Build-GPU-binaries-with-Metal":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10615-Build-GPU-binaries-with-Metal","abstract":[{"type":"text","text":"Power up your shader pipeline with enhancements to the Metal shader compilation model ‚Äî all leading to a dramatic reduction in Pipeline State Object (PSO) loading time, especially upon first launch. Learn about explicit PSO caching and sharing of GPU binaries using Metal binary archives and dynamic libraries. And we‚Äôll detail the toolchain to create libraries and improve your shader compilation workflow."}],"type":"topic","title":"Build GPU binaries with Metal","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10615-build-gpu-binaries-with-metal","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","titleInlineContent":[{"text":"Learn More‚Ä¶","type":"text"}],"title":"Learn More‚Ä¶"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10229-Discover-compilation-workflows-in-Metal":{"url":"\/documentation\/wwdcnotes\/wwdc21-10229-discover-compilation-workflows-in-metal","kind":"article","role":"sampleCode","title":"Discover compilation workflows in Metal","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10229-Discover-compilation-workflows-in-Metal","abstract":[{"type":"text","text":"The Metal shading language is a powerful C++ based language that allows apps to render stunning effects while maintaining a flexible shader development pipeline. Discover how to more easily build and extend your render pipelines using Dynamic Libraries and Function Pointers. We‚Äôll also show you how to accelerate your shader compilation at runtime with Binary Function Archives, Function Linking, and Function Stitching."}],"type":"topic"}}}