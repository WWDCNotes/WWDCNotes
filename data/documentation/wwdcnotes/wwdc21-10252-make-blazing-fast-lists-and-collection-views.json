{"metadata":{"role":"sampleCode","title":"Make blazing fast lists and collection views","roleHeading":"WWDC21","modules":[{"name":"WWDC Notes"}]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10252-make-blazing-fast-lists-and-collection-views"]}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc21\/10252","type":"reference","overridingTitle":"Watch Video (22 min)","isActive":true},"kind":"sampleDownload"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"style":"note","content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiimage\/building_high-performance_lists_and_collection_views","isActive":true}],"type":"paragraph"}],"type":"aside","name":"Note"},{"anchor":"Performance-fundamentals","text":"Performance fundamentals","type":"heading","level":2},{"items":[{"content":[{"inlineContent":[{"text":"Diffable data source is built to store identifiers of items in your model, and not the model objects themselves","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Improvements to diffable data source:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before iOS 15, applying a snapshot without animation would do a "},{"code":"reloadData","type":"codeVoice"},{"type":"text","text":" internally"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"From iOS 15 onwards, applying a snapshot without animation will only apply the differences and not perform any extra work"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"diffable data source also gains a new "},{"type":"codeVoice","code":"reconfigureItems"},{"type":"text","text":" method that makes it easy to update the contents of visible cells"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Life-of-a-cell","text":"Life of a cell","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Two phases:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"preparation"}],"type":"paragraph"}]}],"type":"orderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the collection view is asked to dequeue a new cell using a registration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"if a cell exists in the reuse pool, ","type":"text"},{"code":"UICollectionView","type":"codeVoice"},{"text":" will call ","type":"text"},{"code":"prepareForReuse","type":"codeVoice"},{"text":" on it, and then dequeue the cell. Otherwise it will create a new one","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"the cell is then passed in to the configuration handler from the registration","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the collection view queries the cell for its preferred layout attributes and sizes the cell appropriately"}]}]}],"type":"unorderedList"},{"start":2,"items":[{"content":[{"inlineContent":[{"type":"text","text":"display"}],"type":"paragraph"}]}],"type":"orderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"willDisplayCell"},{"type":"text","text":" is called on the delegate"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the cell is made visible inside the "},{"type":"codeVoice","code":"UICollectionView"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when the cell is scrolled off screen, "},{"type":"codeVoice","code":"didEndDisplaying"},{"type":"text","text":" is called for the cell, and it ends up in the reuse pool"}]}]}],"type":"unorderedList"},{"anchor":"How-an-app-updates-the-display","text":"How an app updates the display","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"How an app produces a frame:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"commit","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"for each frame, events such as touches are delivered to the app"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"in response, the app updates the properties of its views and layers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"as a result of those changes, the app‚Äôs views and layers perform layout"}],"type":"paragraph"}]}],"type":"unorderedList"},{"start":2,"items":[{"content":[{"inlineContent":[{"type":"text","text":"rendering"}],"type":"paragraph"}]}],"type":"orderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the layer tree is sent to the render server","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"each frame has a commit deadline, this is the time by which all commits for that frame need to finish"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the amount of time an app has to commit for each frame depends on the refresh rate of the display"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"What is a hitch?"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when the commit for a frame takes too long and misses the deadline, those updates don‚Äôt get incorporated into the intended frame"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the display keeps the previous frame on screen until the commit finishes, and this delayed frame can render"}]}]},{"content":[{"inlineContent":[{"text":"this is a commit hitch and is perceived as a momentary interruption when scrolling","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Cell-prefetching","text":"Cell prefetching","type":"heading","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"from iOS 15 cells are pre-fetched after finishing a short commit"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"this makes them pre-ready for when they‚Äôre needed","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"How prefetching effects the cell lifecycle:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"it is possible for a prepared cell to never be displayed, which could happen if the user suddenly changed the scroll direction"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"once a cell is displayed, it can go right back into the waiting state after it goes off screen"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the same cell can be displayed more than once for the same index path"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This means that a cell will not be immediately added to the reuse pool when it ends displaying."}],"type":"paragraph"},{"anchor":"Updating-cell-content","text":"Updating cell content","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"When a cell needs to get\/display remote data, we shouldn‚Äôt update its content directly, as the cell might have been already reused to display other content."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"iOS 15 introduces the ","type":"text"},{"type":"codeVoice","code":"reconfigureItems"},{"text":" snapshot method: this method will rerun the associated cells registration‚Äôs configuration handler.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["private func setPostNeedsUpdate(id: DestinationPost.ID) {","  var snapshot = dataSource.snapshot()","  snapshot.reconfigureItems([id]) \/\/ üëàüèª","  dataSource.apply(snapshot, animatingDifferences: true)","}"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"use this instead of "},{"code":"reloadItems","type":"codeVoice"},{"type":"text","text":", because it reuses the item‚Äôs existing cell, rather than dequeuing and configuring new cells"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Updating cells asynchronously","","let cellRegistration = UICollectionView.CellRegistration<DestinationPostCell,","                                                         DestinationPost.ID> {","  (cell, indexPath, postID) in","","  let post = self.postsStore.fetchByID(postID)","  let asset = self.assetsStore.fetchByID(post.assetID)","  ","  if asset.isPlaceholder {","    self.assetsStore.downloadAsset(post.assetID) { _ in","      self.setPostNeedsUpdate(id: post.id) \/\/ üëàüèª","    }","  }","  ","  cell.titleView.text = post.region","  cell.imageView.image = asset.image","}"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"to maximize prepare time, trigger downloads during the data-source prefetching."}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Image-preparation-APIs","text":"Image preparation APIs","type":"heading","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"decoding and displaying images takes time","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ideally, we could prepare the image in advance and only update the UI when the image decoding is completed","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"new in iOS 15, we have image preparation APIs, giving us control over where and when image preparation happens","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"these APIs produce a new "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":", which only contains the pixel data that the renderer needs"}]}]},{"content":[{"inlineContent":[{"text":"two forms:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"synchronous, which can on any thread","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"asynchronous, which run on an internal UIKit serial queue"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ Using prepareForDisplay","","\/\/ Initialize the full image","let fullImage = UIImage()","","\/\/ Set a placeholder before preparation","imageView.image = placeholderImage","","\/\/ Prepare the full image (in the background)","fullImage.prepareForDisplay { preparedImage in","  DispatchQueue.main.async {","    self.imageView.image = preparedImage","  }","}"]},{"inlineContent":[{"text":"Warning:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"these prepared images are not to be stored on disk, but should be cached"}]}]},{"content":[{"inlineContent":[{"text":"they take large amount of memory","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Usage example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Asset downloading ‚Äì with image preparation","","func downloadAsset(","  _ id: Asset.ID,"," completionHandler: @escaping (Asset) -> Void",") -> Cancellable {","  \/\/ Check for an already prepared image","  if let preparedAsset = imageCache.fetchByID(id) {","      completionHandler(preparedAsset)","      return AnyCancellable {}","  }","  return fetchAssetFromServer(assetID: id) { asset in","    asset.image.prepareForDisplay { preparedImage in","      \/\/ Store the image in the cache.","      self.imageCache.add(asset: asset.withImage(preparedImage!))","      DispatchQueue.main.async {","        completionHandler(asset)","      }","    }","  }","}"]},{"inlineContent":[{"text":"New thumbnail API:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"use less memory and computation"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ Using prepareThumbnail","","\/\/ Initialize the full image","let profileImage = UIImage(...)","","\/\/ Set a placeholder before preparation","posterAvatarView.image = placeholderImage","","\/\/ Prepare the image","profileImage.prepareThumbnail(of: posterAvatarView.bounds.size) { thumbnailImage in","  DispatchQueue.main.async {","    self.posterAvatarView.image = thumbnailImage","  }","}"]},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"inlineContent":[{"identifier":"zntfdr","type":"image"}],"type":"paragraph"}]},{"size":4,"content":[{"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello","level":3},{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10059-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10045-Advances-in-diffable-data-sources","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10097-Advances-in-UICollectionView"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"abstract":[{"type":"text","text":"Build consistently smooth scrolling list and collection views: Explore the lifecycle of a cell and learn how to apply that knowledge to eliminate rough scrolling and missed frames. We‚Äôll also show you how to improve your overall scrolling experience and avoid costly hitches, with optimized image loading and automatic cell prefetching."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10252-Make-blazing-fast-lists-and-collection-views"},"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"references":{"https://github.com/zntfdr":{"type":"link","title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}],"identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr"},"WWDCNotes.png":{"alt":null,"identifier":"WWDCNotes.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10097-Advances-in-UICollectionView":{"abstract":[{"text":"Learn about new features of UICollectionView that make it easier to use and unlock powerful new functionality. We‚Äôll show you how to use section snapshots with your diffable data source to create outlines that can expand and collapse, and introduce you to building lists with compositional layout to create UITableView-like interfaces with a collection view. And discover modern techniques for dequeuing cells and configuring their content and styling.","type":"text"}],"title":"Advances in UICollectionView","url":"\/documentation\/wwdcnotes\/wwdc20-10097-advances-in-uicollectionview","type":"topic","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10097-Advances-in-UICollectionView"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10045-Advances-in-diffable-data-sources":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10045-Advances-in-diffable-data-sources","title":"Advances in diffable data sources","url":"\/documentation\/wwdcnotes\/wwdc20-10045-advances-in-diffable-data-sources","kind":"article","type":"topic","abstract":[{"type":"text","text":"Diffable data sources dramatically simplify the work involved in managing and updating collection and table views to create dynamic and responsive experiences in your apps. Discover how you can use section snapshots to efficiently build lists and outline collection views for iOS and iPadOS and provide support for implementing the sidebar in an iPad app. We‚Äôll also show you how to simplify cell reordering using UICollectionViewDiffableDataSource to help you streamline your code and build app interfaces more quickly."}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"zntfdr":{"alt":"Profile image of Federico Zanetello","identifier":"zntfdr","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]},"WWDC21.jpeg":{"type":"image","variants":[{"url":"\/images\/WWDC21.jpeg","traits":["1x","light"]}],"identifier":"WWDC21.jpeg","alt":null},"https://zntfdr.dev":{"identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev","titleInlineContent":[{"type":"text","text":"Blog"}],"type":"link","title":"Blog"},"https://developer.apple.com/documentation/uikit/uiimage/building_high-performance_lists_and_collection_views":{"type":"link","title":"Session code sample","titleInlineContent":[{"text":"Session code sample","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiimage\/building_high-performance_lists_and_collection_views","url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiimage\/building_high-performance_lists_and_collection_views"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"url":"\/documentation\/wwdcnotes\/wwdc21","title":"WWDC21","role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"code":"DocC","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit 2","type":"codeVoice"},{"text":", and more.","type":"text"}],"images":[{"identifier":"WWDC21-Icon.png","type":"icon"},{"identifier":"WWDC21.jpeg","type":"card"}],"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"type":"topic","url":"\/documentation\/wwdcnotes","role":"collection","title":"WWDC Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol"},"WWDC21-Icon.png":{"alt":null,"identifier":"WWDC21-Icon.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC21-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10059-Whats-new-in-UIKit":{"url":"\/documentation\/wwdcnotes\/wwdc21-10059-whats-new-in-uikit","abstract":[{"text":"Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We‚Äôll take you through UI refinements, productivity updates, and API enhancements, and help you explore performance improvements and security & privacy features.","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10059-Whats-new-in-UIKit","kind":"article","title":"What‚Äôs new in UIKit","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","title":"Federico Zanetello (332 notes)","url":"\/documentation\/wwdcnotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"role":"sampleCode"},"https://developer.apple.com/wwdc21/10252":{"type":"download","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10252","url":"https:\/\/developer.apple.com\/wwdc21\/10252"},"zntfdr.jpeg":{"type":"image","identifier":"zntfdr.jpeg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]}}}