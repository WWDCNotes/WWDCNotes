{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"üêß New SDK for building for Linux on macOS","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"üèõÔ∏è Foundation is now cross plaform and open source"}],"type":"paragraph"},{"inlineContent":[{"text":"üß™ New open source Testing framework","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"üèéÔ∏è Swift 6 language mode, that ensures data-race safety"}],"type":"paragraph"},{"anchor":"Presenters","text":"Presenters","type":"heading","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Mishal Shah, Swift Team"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Meghana Gupta, Swift Team","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"History","text":"History","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The first couple of minutes is a recap of the first 10 years of Swift, and what has been leading up to Swift 6 (the new release)."}],"type":"paragraph"},{"anchor":"Community-structure","text":"Community structure","type":"heading","level":2},{"inlineContent":[{"text":"They started out with the Core team, and new steering groups has been added over the years. This year a Platform steering group was introduced to focus on bringing Swift to more places.","type":"text"},{"text":" ","type":"text"},{"text":"The Core team is also actively working on creating a new Ecosystem steering group to focus on the developer experience and the broader ecosystem, and a new Embedded workgroup.","type":"text"}],"type":"paragraph"},{"anchor":"Supported-platforms","text":"Supported platforms","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Swift is officially supported on Apple platforms, Linux, and Windows. In addition, there are a number of platforms being brought up by the Swift community, including WebAssembly."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This year supported Linux platforms will expand to include Fedora and Debian (in addition to the current: Ubuntu, Amazon Linux, CentOS, and Red Hat UBI)."}],"type":"paragraph"},{"anchor":"Static-Linux-SDK-for-Swift","text":"Static Linux SDK for Swift","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"There is a new SDK to help cross compile from macOS to Linux. It is ‚Äúfully static‚Äù, which means ‚Äúyou will no longer need to install additional packages in order to run your program.‚Äù"}],"type":"paragraph"},{"inlineContent":[{"text":"With the new SDK you can build a package for Linux on macOS.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To install the SDK run this command (there was no info about where to download it):","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"swift sdk install <path-to-sdk>","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"To compile for an ARM64 Linux environment and link against musl, to produce a statically linked binary which can run on any Linux machine, even one without a Swift runtime installed, add the parameter to the ","type":"text"},{"code":"swift build","type":"codeVoice"},{"text":" command:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"swift build --swift-sdk aarch64-swift-linux-musl"}],"type":"paragraph"},{"anchor":"Foundation-updates","text":"Foundation updates","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swift-corelibs-foundation"},{"type":"text","text":" project was introduced when Swift was open sourced, to have the Foundation framework available on all platforms."},{"type":"text","text":" "},{"type":"text","text":"Now, a single unified implementation has been created and used across all platforms."},{"type":"text","text":" "},{"type":"text","text":"Foundation has been rewritten from legacy C and Objective-C into modern, portable Swift, "},{"type":"codeVoice","code":"swift-foundation"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The new implementation is "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-foundation","isActive":true},{"type":"text","text":" and shipped with iOS and macOS last year."}],"type":"paragraph"},{"anchor":"Swift-Testing","text":"Swift Testing","type":"heading","level":2},{"inlineContent":[{"text":"A new testing framework, that takes advantage of modern Swift features such as macros and seamlessly integrates with concurrency.","type":"text"},{"text":" ","type":"text"},{"text":"Developed in ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-testing","isActive":true,"type":"reference"},{"text":" with cross platform in mind.","type":"text"},{"text":" ","type":"text"},{"text":"Designed to integrate into multiple IDEs such as Xcode and VSCode.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example below we can see the "},{"code":"@Test","type":"codeVoice"},{"type":"text","text":" macro applied to the test function. It is possible to specify a title and some tags for the test, as well as a list of arguments to pas to the test."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The tags are used in Xcode‚Äôs test navigator to group the tests together.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The arguments are used to run the same test multiple times with different inputs."}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["import Testing","","@Test(\"Recognized rating\",","       .tags(.critical),","       arguments: [","           (1, \"A Beach\",       \"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"),","           (2, \"Mystery Creek\", \"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"),","       ])","func rating(videoId: Int, videoName: String, expectedRating: String) {","    let video = Video(id: videoId, name: videoName)","    #expect(video.rating == expectedRating)","}"]},{"anchor":"Implicitly-vs-explicitly-built-modules","text":"Implicitly vs. explicitly built modules","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Previously Swift modules was built implicitly without you noticing (except a slow down in the build) when a module depend on other modules."},{"type":"text","text":" "},{"type":"text","text":"Explicitly built modules turn those implicit steps into explicit build steps, so they can be done in parallel and show up in the build log."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Should give more predictable and reliable builds.","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The debugger can also share binary modules with the build, resulting in faster debugging"}],"type":"paragraph"},{"inlineContent":[{"text":"This is a build setting ‚ÄúExplicitly Built Modules‚Äù and there is a session about that ‚ÄúDemysitifying explicitly built modules‚Äù.","type":"text"}],"type":"paragraph"},{"anchor":"A-new-GitHub-organization","text":"A new GitHub organization","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Swift will be moving to a new GitHub organization: https:\/\/github.com\/swiftlang"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It will include the Swift compiler, Foundation and many more packages."}],"type":"paragraph"},{"anchor":"Language-updates","text":"Language updates","type":"heading","level":2},{"anchor":"Noncopyable-types","text":"Noncopyable types","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"All Swift types are copyable by default. It is now possible to suppress this if you want to express unique ownership."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, a unique system resource such as a file can be represented as a noncopyable struct with a deinitializer that automatically closes it:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct File: ~Copyable {","  private let fd: CInt","  ","  init?(name: String) {","    guard let fd = open(name) else {","      return nil","    }","    self.fd = fd","  }","","  func write(buffer: [UInt8]) {","    \/\/ ...","  }","","  deinit {","    close(fd)","  }","}"]},{"inlineContent":[{"type":"text","text":"Swift 5.10‚Äôs support for noncopyable types was limited only to concrete types."}],"type":"paragraph"},{"inlineContent":[{"text":"Swift 6 introduces support for noncopyable types in all generic contexts and in standard library types like ","type":"text"},{"type":"codeVoice","code":"Optional"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" and Unsafe pointers.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"There is a session about this called ‚ÄúConsume noncopyable types in Swift‚Äù.","type":"text"}],"type":"paragraph"},{"anchor":"Embedded-Swift","text":"Embedded Swift","type":"heading","level":3},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"New language subset"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"New compilation model","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Small and standalone binaries","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"How","text":"How:","type":"heading","level":4},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Disables features needing a runtime like reflection and "},{"type":"codeVoice","code":"any"},{"type":"text","text":" types"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Uses compiler techniques such as full generics specialization and static linking","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Embedded Swift subset feels very close to ‚Äúfull‚Äù Swift","type":"text"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"The Apple Secure Enclave Processor uses Embedded Swift.","type":"text"}],"type":"paragraph"},{"anchor":"C++-interoperability","text":"C++ interoperability","type":"heading","level":3},{"inlineContent":[{"text":"Swift 6, C++ virtual methods, default arguments, move-only types and crucial C++ standard library types can be directly imported into Swift.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"C++ move-only types like this ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" type is mapped to a noncopyable type in Swift:","type":"text"}],"type":"paragraph"},{"syntax":"c++","type":"codeListing","code":["struct Person {","  Person(const Person&) = delete;","  Person(Person &&) = default;","  \/\/ ...","};"]},{"syntax":"swift","type":"codeListing","code":["struct Developer: ~Copyable {","    let person: Person","    init(person: consuming Person) {","      self.person = person","    }","}","","let person = Person()","let developer = Developer(person: person)"]},{"anchor":"Typed-throws","text":"Typed throws","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Swift 6 introduces typed throws, which let you specify the error type along with the throws keyword."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum IntegerParseError: Error {","  case nonDigitCharacter(String, index: String.Index)","}","","func parse(string: String) throws(IntegerParseError) -> Int {","  for index in string.indices {","    \/\/ ...","    throw IntegerParseError.nonDigitCharacter(string, index: index)","  }","}","","do {","  let value = try parse(string: \"1+234\")","}","catch {","   \/\/ error is 'IntegerParseError'","}"]},{"anchor":"When-to-use-typed-throws","text":"When to use typed throws?","type":"heading","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When handling errors in the same module","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When propagating error type in generic contexts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In constrained environments"}]}]}],"type":"unorderedList"},{"anchor":"Data-race-safety","text":"Data-race safety","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"It has been a primary goal of Swift concurrency."},{"type":"text","text":" "},{"type":"text","text":"The new Swift 6 language mode achieves data-race safety by default. Turning all the data-race issues in your app into compile time errors."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The new language mode can be enabled module-by-module."}],"type":"paragraph"},{"anchor":"Atomics-and-Mutex","text":"Atomics and Mutex","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"New types, Atomic and Mutix, are added in Synchronization framework."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"They should always be in a "},{"type":"codeVoice","code":"let"},{"type":"text","text":" property."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Dispatch","import Synchronization ","","let counter = Atomic<Int>(0)","","DispatchQueue.concurrentPerform(iterations: 10) { _ in","  for _ in 0 ..< 1_000_000 {","    counter.wrappingAdd(1, ordering: .relaxed)","  }","}","","print(counter.load(ordering: .relaxed))"]},{"syntax":"swift","type":"codeListing","code":["import Synchronization","","final class LockingResourceManager: Sendable {","  let cache = Mutex<[String: Resource]>([:])","  ","  func save(_ resource: Resource, as key: String) {","    cache.withLock {","      $0[key] = resource","    }","  }","}"]},{"anchor":"Final-notes","text":"Final notes","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"For best practices on migration, there is a hands-on tutorial in the session ‚ÄúMigrate your app to Swift 6‚Äù."}],"type":"paragraph"},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"type":"row","columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"MortenGregersen"}],"type":"paragraph"}],"size":1},{"content":[{"type":"heading","text":"Morten Bjerg Gregersen","anchor":"Morten-Bjerg-Gregersen","level":3},{"type":"paragraph","inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/MortenGregersen","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"http:\/\/atterdagapps.com","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/mortengregersen","isActive":true,"type":"reference"}]}],"size":4}],"numberOfColumns":5},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10171-Meet-Swift-OpenAPI-Generator","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10179-Meet-Swift-Testing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10195-Go-further-with-Swift-Testing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10171-Demystify-explicitly-built-modules","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10170-Consume-noncopyable-types-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10217-Explore-Swift-performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10197-Go-small-with-Embedded-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10172-Mix-Swift-and-C++","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10169-Migrate-your-app-to-Swift-6"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10136-whats-new-in-swift"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10136-Whats-new-in-Swift"},"sampleCodeDownload":{"action":{"type":"reference","overridingTitle":"Watch Video (30 min)","identifier":"https:\/\/developer.apple.com\/wwdc24\/10136","isActive":true},"kind":"sampleDownload"},"kind":"article","metadata":{"roleHeading":"WWDC24","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"What‚Äôs new in Swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Join us for an update on Swift. We‚Äôll briefly go through a history of Swift over the past decade, and show you how the community has grown through workgroups, expanded the package ecosystem, and increased platform support. We‚Äôll introduce you to a new language mode that achieves data-race safety by default, and a language subset that lets you run Swift on highly constrained systems. We‚Äôll also explore some language updates including noncopyable types, typed throws, and improved C++ interoperability.","type":"text"}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"type":"topic","role":"collectionGroup","kind":"article","title":"WWDC24","images":[{"type":"icon","identifier":"WWDC24-Icon.png"},{"type":"card","identifier":"WWDC24.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc24","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","abstract":[{"text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: Swift Testing, ","type":"text"},{"code":"FinanceKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"TabletopKit","type":"codeVoice"},{"text":", and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10179-Meet-Swift-Testing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10179-Meet-Swift-Testing","title":"Meet Swift Testing","url":"\/documentation\/wwdcnotes\/wwdc24-10179-meet-swift-testing","role":"sampleCode","kind":"article","abstract":[{"type":"text","text":"Introducing Swift Testing: a new package for testing your code using Swift. Explore the building blocks of its powerful new API, discover how it can be applied in common testing workflows, and learn how it relates to XCTest and open source Swift."}],"type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"title":"WWDC Notes","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10171-Demystify-explicitly-built-modules":{"abstract":[{"type":"text","text":"Explore how builds are changing in Xcode 16 with explicitly built modules. Discover how modules are used to build your code, how explicitly built modules improve transparency in compilation tasks, and how you can optimize your build by sharing modules across targets."}],"url":"\/documentation\/wwdcnotes\/wwdc24-10171-demystify-explicitly-built-modules","role":"sampleCode","type":"topic","title":"Demystify explicitly built modules","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10171-Demystify-explicitly-built-modules"},"doc://WWDCNotes/documentation/WWDCNotes/MortenGregersen":{"url":"\/documentation\/wwdcnotes\/mortengregersen","kind":"article","images":[{"type":"card","identifier":"MortenGregersen.jpeg"},{"type":"icon","identifier":"MortenGregersen.jpeg"}],"type":"topic","abstract":[{"type":"text","text":"Hi üëã I am Morten - I live in Denmark üá©üá∞"}],"title":"Morten Bjerg Gregersen (21 notes)","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen"},"WWDC24-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24-Icon.png"}],"alt":null,"identifier":"WWDC24-Icon.png","type":"image"},"https://developer.apple.com/wwdc24/10136":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10136","type":"download","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc24\/10136"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10171-Meet-Swift-OpenAPI-Generator":{"type":"topic","title":"Meet Swift OpenAPI Generator","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10171-Meet-Swift-OpenAPI-Generator","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10171-meet-swift-openapi-generator","abstract":[{"text":"Discover how Swift OpenAPI Generator can help you work with HTTP server APIs whether you‚Äôre extending an iOS app or writing a server in Swift. We‚Äôll show you how this package plugin can streamline your workflow and simplify your codebase by generating code from an OpenAPI document.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10217-Explore-Swift-performance":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10217-explore-swift-performance","abstract":[{"text":"Discover how Swift balances abstraction and performance. Learn what elements of performance to consider and how the Swift optimizer affects them. Explore the different features of Swift and how they‚Äôre implemented to further understand the tradeoffs available that can impact performance.","type":"text"}],"kind":"article","title":"Explore Swift performance","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10217-Explore-Swift-performance","role":"sampleCode"},"MortenGregersen":{"variants":[{"traits":["1x","light"],"url":"\/images\/MortenGregersen.jpeg"}],"alt":"Profile image of Morten Bjerg Gregersen","identifier":"MortenGregersen","type":"image"},"http://atterdagapps.com":{"title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"http:\/\/atterdagapps.com","type":"link","url":"http:\/\/atterdagapps.com"},"WWDC24.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24.jpeg"}],"alt":null,"identifier":"WWDC24.jpeg","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10169-Migrate-your-app-to-Swift-6":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10169-Migrate-your-app-to-Swift-6","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10169-migrate-your-app-to-swift-6","title":"Migrate your app to Swift 6","abstract":[{"text":"Experience Swift 6 migration in action as we update an existing sample app. Learn how to migrate incrementally, module by module, and how the compiler helps you identify code that‚Äôs at risk of data races.  Discover different techniques for ensuring clear isolation boundaries and eliminating concurrent access to shared mutable state.","type":"text"}],"kind":"article","role":"sampleCode"},"MortenGregersen.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/MortenGregersen.jpeg"}],"alt":null,"identifier":"MortenGregersen.jpeg","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10197-Go-small-with-Embedded-Swift":{"title":"Go small with Embedded Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10197-Go-small-with-Embedded-Swift","type":"topic","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10197-go-small-with-embedded-swift","abstract":[{"type":"text","text":"Embedded Swift brings the safety and expressivity of Swift to constrained environments. Explore how Embedded Swift runs on a variety of microcontrollers through a demonstration using an off-the-shelf Matter device. Learn how the Embedded Swift subset packs the benefits of Swift into a tiny footprint with no runtime, and discover plenty of resources to start your own Embedded Swift adventure."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10172-Mix-Swift-and-C++":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10172-Mix-Swift-and-C++","url":"\/documentation\/wwdcnotes\/wwdc23-10172-mix-swift-and-c++","kind":"article","type":"topic","title":"Mix Swift and C++","abstract":[{"type":"text","text":"Learn how you can use Swift in your C++ and Objective-C++ projects to make your code safer, faster, and easier to develop. We‚Äôll show you how to use C++ and Swift APIs to incrementally incorporate Swift into your app."}],"role":"sampleCode"},"https://github.com/apple/swift-foundation":{"title":"open source","titleInlineContent":[{"type":"text","text":"open source"}],"identifier":"https:\/\/github.com\/apple\/swift-foundation","type":"link","url":"https:\/\/github.com\/apple\/swift-foundation"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://x.com/mortengregersen":{"title":"X\/Twitter","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"identifier":"https:\/\/x.com\/mortengregersen","type":"link","url":"https:\/\/x.com\/mortengregersen"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10170-Consume-noncopyable-types-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc24-10170-consume-noncopyable-types-in-swift","abstract":[{"text":"Get started with noncopyable types in Swift. Discover what copying means in Swift, when you might want to use a noncopyable type, and how value ownership lets you state your intentions clearly.","type":"text"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10170-Consume-noncopyable-types-in-Swift","kind":"article","title":"Consume noncopyable types in Swift","type":"topic"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"identifier":"WWDCNotes.png","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10195-Go-further-with-Swift-Testing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10195-Go-further-with-Swift-Testing","title":"Go further with Swift Testing","url":"\/documentation\/wwdcnotes\/wwdc24-10195-go-further-with-swift-testing","role":"sampleCode","kind":"article","abstract":[{"type":"text","text":"Learn how to write a sweet set of (test) suites using Swift Testing‚Äôs baked-in features. Discover how to take the building blocks further and use them to help expand tests to cover more scenarios, organize your tests across different suites, and optimize your tests to run in parallel."}],"type":"topic"},"https://github.com/MortenGregersen":{"title":"GitHub","titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/MortenGregersen","type":"link","url":"https:\/\/github.com\/MortenGregersen"},"https://github.com/apple/swift-testing":{"title":"open source","titleInlineContent":[{"type":"text","text":"open source"}],"identifier":"https:\/\/github.com\/apple\/swift-testing","type":"link","url":"https:\/\/github.com\/apple\/swift-testing"}}}