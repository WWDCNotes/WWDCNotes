{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10605-Gain-insights-into-your-Metal-app-with-Xcode-12","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc20-10605-gain-insights-into-your-metal-app-with-xcode-12"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"üò± ‚ÄúNo Overview Available!‚Äù","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Be the hero to change that by watching the video and providing notes! It‚Äôs super easy:","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10602-Harness-Apple-GPUs-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10603-Optimize-Metal-apps-and-games-with-GPU-counters","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10616-Debug-GPUside-errors-in-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs"]}]}],"metadata":{"role":"sampleCode","title":"Gain insights into your Metal app with Xcode 12","roleHeading":"WWDC20","modules":[{"name":"WWDC Notes"}]},"abstract":[{"type":"text","text":"Learn how to locate graphics issues in minutes with Metal‚Äôs debugging and performance optimization tools in Xcode 12. We‚Äôll show you how to diagnose problems quickly using Metal Debugger. Discover the new summary view, which suggests ways to improve memory usage, bandwidth, performance, and implementation of the Metal API."}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc20\/10605","overridingTitle":"Watch Video (14 min)"}},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"role":"collectionGroup","images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"identifier":"WWDC20.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","title":"WWDC20","url":"\/documentation\/wwdcnotes\/wwdc20","type":"topic","abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WidgetKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit Testing"},{"type":"text","text":", and more."}],"kind":"article"},"WWDC20-Icon.png":{"identifier":"WWDC20-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-Icon.png"}],"alt":null,"type":"image"},"https://developer.apple.com/wwdc20/10605":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10605","url":"https:\/\/developer.apple.com\/wwdc20\/10605","type":"download"},"WWDC20.jpeg":{"identifier":"WWDC20.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20.jpeg"}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10616-Debug-GPUside-errors-in-Metal":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10616-Debug-GPUside-errors-in-Metal","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10616-debug-gpuside-errors-in-metal","abstract":[{"type":"text","text":"Track down even the trickiest GPU-side programming errors with enhanced reporting in Xcode 12. While Metal‚Äôs API validation layer can catch most problems in a project, GPU errors can cause a host of difficult-to-debug issues."}],"title":"Debug GPU-side errors in Metal","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10602-Harness-Apple-GPUs-with-Metal":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10602-Harness-Apple-GPUs-with-Metal","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10602-harness-apple-gpus-with-metal","abstract":[{"type":"text","text":"Create visually stunning, high-performance apps and games when you combine the power of Apple GPUs with Metal, the modern foundation for GPU-accelerated graphics on Apple platforms. Discover the architecture and capabilities of the Apple GPU and how Metal harnesses its tile-based deferred rendering (TBDR) architecture to achieve measurable performance gains in apps and games. In this session, we‚Äôll discuss the efficiency of Apple GPUs and show how TBDR applies to an array of modern rendering techniques."}],"title":"Harness Apple GPUs with Metal","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Learn More‚Ä¶"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Learn More‚Ä¶","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10631-bring-your-metal-app-to-apple-silicon-macs","abstract":[{"type":"text","text":"Meet the Tile Based Deferred Rendering (TBDR) GPU architecture for Apple silicon Macs ‚Äî the heart of your Metal app or game‚Äôs graphics performance. Learn how you can translate or port your graphics-intensive app over to Apple silicon, and how to take advantage of TBDR and Metal when building natively for the platform. We‚Äôll look at how TBDR compares with the Immediate Mode Rendering pipeline of older Macs, go through common issues you may face when bringing an app or game over, and explore how to offer incredible performance when building with the native SDK."}],"title":"Bring your Metal app to Apple silicon Macs","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal":{"abstract":[{"type":"text","text":"Discover how you can support Metal in your rendering code as we close out our three-part series on bringing your game to Mac. Once you‚Äôve evaluated your existing Windows binary with the game porting toolkit and brought your HLSL shaders over to Metal, learn how you can optimally implement the features that high-end, modern games require. We‚Äôll show you how to manage GPU resource bindings, residency, and synchronization. Find out how to optimize GPU commands submission, render rich visuals with MetalFX Upscaling, and more."}],"role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10125-bring-your-game-to-mac-part-3-render-with-metal","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal","title":"Bring your game to Mac, Part 3: Render with Metal","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10603-Optimize-Metal-apps-and-games-with-GPU-counters":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10603-Optimize-Metal-apps-and-games-with-GPU-counters","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10603-optimize-metal-apps-and-games-with-gpu-counters","abstract":[{"type":"text","text":"GPU counters can help you precisely measure GPU utilization to pinpoint bottlenecks and optimize workloads for your Metal apps and games. We‚Äôll walk you through the tools available in the Metal System Trace instrument and Metal Debugger in Xcode 12 to profile your graphics workload, and show you how to use collected data to discover underused and overworked stages of your GPU pipeline. Discover how you can act on that data to improve your app‚Äôs capabilities."}],"title":"Optimize Metal apps and games with GPU counters","type":"topic"},"WWDCNotes.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"identifier":"WWDCNotes.png"}}}