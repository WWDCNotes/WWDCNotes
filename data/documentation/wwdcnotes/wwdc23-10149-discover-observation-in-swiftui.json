{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI"},"sampleCodeDownload":{"action":{"overridingTitle":"Watch Video (12 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10149","isActive":true,"type":"reference"},"kind":"sampleDownload"},"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC23","title":"Discover Observation in SwiftUI","role":"sampleCode"},"kind":"article","abstract":[{"type":"text","text":"Simplify your SwiftUI data models with Observation. We’ll share how the Observable macro can help you simplify models and improve your app’s performance. Get to know Observation, learn the fundamentals of the macro, and find out how to migrate from ObservableObject to Observable."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10149-discover-observation-in-swiftui"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Presenter:"}],"type":"strong"},{"text":" Philippe Hauser, Software Engineer","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Super power:"}]},{"text":" Observant. Sees everything.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Length:"}]},{"type":"text","text":" 12m, Supports Copy Code"}]}]}]},{"type":"heading","level":1,"text":"Observation","anchor":"Observation"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Magical new feature in Swift.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define models with standard Swift syntax - UI will respond to changes to the model.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Geared towards SwiftUI - “seamless and intuitive”."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Easy to update code from "},{"type":"codeVoice","code":"@ObservableObject"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"property wrapper"}]},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"macro"}]},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"What-is-observation","level":2,"text":"What is observation?"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Tracks changes to properties."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Normal Swift types transformed with ","type":"text"},{"inlineContent":[{"text":"macro magic","type":"text"}],"type":"strong"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider your current model…"}]},{"syntax":"Swift","code":["class FoodTruckModel {","","    var orders: [Order] = []","    ","    var donuts = Donut.all","    ","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make SwiftUI respond to changes in that model…"}]},{"syntax":"Swift","code":["@Observable class FoodTruckModel {","","    var orders: [Order] = []","    ","    var donuts = Donut.all","    ","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"code":"@Observable","type":"codeVoice"},{"text":" is a ","type":"text"},{"inlineContent":[{"text":"macro","type":"text"}],"type":"strong"},{"text":".","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It transforms your type into something that is able to be observed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You don’t need any Property Wrappers* to make this just work - no more "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" annotations required."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI knows that your code accesses specific properties in the body call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When body is executed, SwiftUI tracks access to properties of ","type":"text"},{"type":"codeVoice","code":"@Observable"},{"text":" types.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Now SwiftUI can detect when properties on those specific instances will change."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Computed properties will be tracked if they refer to a stored property."}]}]}],"type":"unorderedList"},{"style":"important","type":"aside","content":[{"inlineContent":[{"text":"if your property isn’t accessed, SwiftUI won’t track it and won’t invalidate the view if the property changes.","type":"text"}],"type":"paragraph"}],"name":"Important"},{"type":"paragraph","inlineContent":[{"text":"In the model above, if your view uses ","type":"text"},{"code":"donuts","type":"codeVoice"},{"text":" then SwiftUI will track changes to it. If your view does not use ","type":"text"},{"code":"orders","type":"codeVoice"},{"text":", SwiftUI won’t track it - so you can make changes to ","type":"text"},{"code":"orders","type":"codeVoice"},{"text":" without causing a view redraw.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Expect performance improvements as SwiftUI won’t redraw if a non-tracked property changes - only changes to tracked properties will cause a UI redraw.","type":"text"}]},{"type":"heading","anchor":"Property-Wrappers","level":2,"text":"Property Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI property wrappers are simplified to an “all the best things comes in threes” approach: "},{"type":"codeVoice","code":"@State"},{"type":"text","text":", "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":", "},{"type":"codeVoice","code":"@Bindable"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"@State","type":"codeVoice"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If a View needs its own state use ","type":"text"},{"code":"@State","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Managed by the lifetime of the View it’s contained in.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"codeVoice","code":"@Environment"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Propagate values as globally accessible throughout an app.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" types work great with this."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"code":"@Bindable","type":"codeVoice"}]}]},{"items":[{"content":[{"inlineContent":[{"text":"Newest member of the Property Wrappers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lightweight - allows bindings to be created for the type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Uses $ syntax as before - ","type":"text"},{"code":"$myType.myProperty","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Bindings are read\/write - we read from it, but we can write back to the Property too."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"How-do-I-decide-which-to-use","level":3,"text":"How do I decide which to use?"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the state is part of the View itself - use "},{"type":"codeVoice","code":"@State"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the model is required globally - use "},{"type":"codeVoice","code":"@Environment"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we only need bindings - use "},{"type":"codeVoice","code":"@Bindable"}]}]},{"content":[{"inlineContent":[{"text":"If No is the answer to all three questions - use the model as a property of your view: ","type":"text"},{"code":"var model: MyModel","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI can observe arrays of your model types. Your model types can also contain other "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" model types."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"General rule - if a used property changes, SwiftUI updates the view."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"We can break this rule with computed properties - if they do not reference any stored property, SwiftUI won’t update the view."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"This can be un-broken though - 2 extra steps required: tell Observation when the property is "},{"type":"strong","inlineContent":[{"type":"text","text":"accessed"}]},{"type":"text","text":" and when the property "},{"type":"strong","inlineContent":[{"type":"text","text":"changes"}]},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Usually not required - most computed properties use some stored property anyway."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observation just works for stored properties and computed properties that reference stored properties."}]}]},{"content":[{"inlineContent":[{"text":"For computed properties that don’t reference stored properties, we have manual control to make Observation work.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can easily replace "},{"type":"codeVoice","code":"@ObservableObject"},{"type":"text","text":" with "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Good chance of seeing a performance boost too!"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Before…"}],"type":"strong"}]},{"syntax":"Swift","code":["public class FoodTruckModel: ObservableObject {","\t@Published public var truck = Truck()","\t@Published public var orders: [Order] = []","\t@Published public var donuts: Donut.all","…","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"After…"}],"type":"strong"}]},{"syntax":"Swift","code":["@Observable public class FoodTruckModel {","\tpublic var truck = Truck()","\tpublic var orders: [Order] = []","\tpublic var donuts: Donut.all","…","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And in SwiftUI","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Before…"}],"type":"strong"}]},{"syntax":"Swift","code":["struct AccountView: View {","\t","   @ObservedObject var model: FoodTruckModel","","   @EnvironmentObject private var accountStore: AccountStore","   @Environment(\\.authorizationController) private var authorizationController","…","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"After…","type":"text"}]}]},{"syntax":"Swift","code":["struct AccountView: View {","","   var model: FoodTruckModel","","   @Environment(AccountStore.self) private var accountStore","   @Environment(AuthorizationController.self) private var authorizationController","…","}"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Mostly you will just change annotations."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Or simplify your view down to the 3 primary Property Wrappers: ","type":"text"},{"code":"@State","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@Environment","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Fewer options to consider - Views should be easier to reason about.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"Takeaways","level":2,"text":"Takeaways"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"@Observable","type":"codeVoice"},{"text":" is a ","type":"text"},{"inlineContent":[{"text":"macro","type":"text"}],"type":"strong"},{"text":" for automating property observation.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Can be overridden manually in specific cases if required."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"New projects should use "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Simplifies models and views."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Performance boost."}]}]}],"type":"unorderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"No Property Wrappers were hurt in the making of ","type":"text"},{"code":"@Observable","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"Written-By","level":2,"text":"Written By"},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"lordmooch"}]}],"size":1},{"content":[{"text":"Michael Lysons","anchor":"Michael-Lysons","level":3,"type":"heading"},{"inlineContent":[{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/lordmooch"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/lordmooch"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.castlemooch.net"}],"type":"paragraph"}],"size":4}],"type":"row","numberOfColumns":5},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}]},{"type":"heading","anchor":"Related-Sessions","level":2,"text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10154-Build-an-app-with-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10166-Write-Swift-macros","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10189-Migrate-to-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10195-Model-your-schema-with-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10196-Dive-deeper-into-SwiftData"],"style":"list","type":"links"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10195-Model-your-schema-with-SwiftData":{"title":"Model your schema with SwiftData","abstract":[{"type":"text","text":"Learn how to use schema macros and migration plans with SwiftData to build more complex features for your app. We’ll show you how to fine-tune your persistence with @Attribute and @Relationship options. Learn how to exclude properties from your data model with @Transient and migrate from one version of your schema to the next with ease."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10195-model-your-schema-with-swiftdata","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10195-Model-your-schema-with-SwiftData"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10167-Expand-on-Swift-macros":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","kind":"article","title":"Expand on Swift macros","url":"\/documentation\/wwdcnotes\/wwdc23-10167-expand-on-swift-macros","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Discover how Swift macros can help you reduce boilerplate in your codebase and adopt complex features more easily. Learn how macros can analyze code, emit rich compiler errors to guide developers towards correct usage, and generate new code that is automatically incorporated back into your project. We’ll also take you through important concepts like macro roles, compiler plugins, and syntax trees."}]},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","title":"WWDC Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","type":"topic","url":"\/documentation\/wwdcnotes"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10189-Migrate-to-SwiftData":{"kind":"article","type":"topic","role":"sampleCode","abstract":[{"text":"Discover how you can start using SwiftData in your apps. We’ll show you how to use Xcode to generate model classes from your existing Core Data object models, use SwiftData alongside your previous implementation, or even completely replace your existing solution.","type":"text"}],"title":"Migrate to SwiftData","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10189-Migrate-to-SwiftData","url":"\/documentation\/wwdcnotes\/wwdc23-10189-migrate-to-swiftdata"},"lordmooch.jpeg":{"type":"image","identifier":"lordmooch.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/lordmooch.jpeg"}],"alt":null},"doc://WWDCNotes/documentation/WWDCNotes/lordmooch":{"role":"sampleCode","abstract":[{"text":"iOS developer. Swift. SwiftUI. SQLite. MS SQL Server.","type":"text"}],"title":"Michael Lysons (2 notes)","kind":"article","url":"\/documentation\/wwdcnotes\/lordmooch","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/lordmooch","images":[{"type":"card","identifier":"lordmooch.jpeg"},{"type":"icon","identifier":"lordmooch.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10160-Demystify-SwiftUI-performance":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance","abstract":[{"text":"Learn how you can build a mental model for performance in SwiftUI and write faster, more efficient code. We’ll share some of the common causes behind performance issues and help you triage hangs and hitches in SwiftUI to create more responsive views in your app.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10160-demystify-swiftui-performance","title":"Demystify SwiftUI performance","role":"sampleCode","kind":"article"},"lordmooch":{"type":"image","identifier":"lordmooch","variants":[{"traits":["1x","light"],"url":"\/images\/lordmooch.jpeg"}],"alt":"Profile image of Michael Lysons"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10154-Build-an-app-with-SwiftData":{"url":"\/documentation\/wwdcnotes\/wwdc23-10154-build-an-app-with-swiftdata","title":"Build an app with SwiftData","kind":"article","role":"sampleCode","type":"topic","abstract":[{"text":"Discover how SwiftData can help you persist data in your app. Code along with us as we bring SwiftData to a multi-platform SwiftUI app. Learn how to convert existing model classes into SwiftData models, set up the environment, reflect model layer changes in UI, and build document-based applications backed by SwiftData storage.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10154-Build-an-app-with-SwiftData"},"WWDC23.jpeg":{"type":"image","identifier":"WWDC23.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23.jpeg"}],"alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10196-Dive-deeper-into-SwiftData":{"title":"Dive deeper into SwiftData","abstract":[{"type":"text","text":"Learn how you can harness the power of SwiftData in your app. Find out how ModelContext and ModelContainer work together to persist your app’s data. We’ll show you how to track and make your changes manually and use SwiftData at scale with FetchDescriptor, SortDescriptor, and enumerate."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10196-dive-deeper-into-swiftdata","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10196-Dive-deeper-into-SwiftData"},"https://www.castlemooch.net":{"type":"link","identifier":"https:\/\/www.castlemooch.net","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/www.castlemooch.net","title":"Blog"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10187-Meet-SwiftData":{"url":"\/documentation\/wwdcnotes\/wwdc23-10187-meet-swiftdata","title":"Meet SwiftData","kind":"article","role":"sampleCode","type":"topic","abstract":[{"text":"SwiftData is a powerful and expressive persistence framework built for Swift. We’ll show you how you can model your data directly from Swift code, use SwiftData to work with your models, and integrate with SwiftUI.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10148-Whats-new-in-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc23-10148-whats-new-in-swiftui","title":"What’s new in SwiftUI","kind":"article","role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Learn how you can use SwiftUI to build great apps for all Apple platforms. Explore the latest updates to SwiftUI and discover new scene types for visionOS. Simplify your data models with the latest data flow options and learn about the Inspector view. We’ll also take you through enhanced animation APIs, powerful ScrollView improvements, and a host of refinements to help you make tidier tables, improve focus and keyboard input, and so much more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI"},"WWDC23-Icon.png":{"type":"image","identifier":"WWDC23-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-Icon.png"}],"alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10166-Write-Swift-macros":{"kind":"article","abstract":[{"text":"Discover how you can use Swift macros to make your codebase more expressive and easier to read. Code along as we explore how macros can help you avoid writing repetitive code and find out how to use them in your app. We’ll share the building blocks of a macro, show you how to test it, and take you through how you can emit compilation errors from macros.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10166-Write-Swift-macros","title":"Write Swift macros","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10166-write-swift-macros","type":"topic"},"https://github.com/lordmooch":{"type":"link","identifier":"https:\/\/github.com\/lordmooch","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/lordmooch","title":"GitHub"},"https://developer.apple.com/wwdc23/10149":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc23\/10149","url":"https:\/\/developer.apple.com\/wwdc23\/10149","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"url":"\/documentation\/wwdcnotes\/wwdc23","title":"WWDC23","kind":"article","role":"collectionGroup","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"type":"topic","abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"SwiftData"},{"text":", ","type":"text"},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"},"WWDCNotes.png":{"type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png"}}}