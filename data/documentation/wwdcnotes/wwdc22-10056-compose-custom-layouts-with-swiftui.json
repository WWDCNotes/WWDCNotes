{"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/composing_custom_layouts_with_swiftui"}],"type":"paragraph"}],"type":"aside"},{"anchor":"Grid","level":2,"type":"heading","text":"`Grid`"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"perfect for two-dimensional layouts when you have a static set of views to display"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"not lazy\/scrollable","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"all views are loaded rightaway"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"allocates as much space to each row and column as it needs to hold its largest view (for that row\/column)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"lets you align all elements of a column via "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcolumnalignment(_:)"},{"type":"text","text":" (see also "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellanchor(_:)"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"for an element\/view to take multiple columns, use ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellcolumns(_:)","type":"reference","isActive":true}]}]}]},{"inlineContent":[{"identifier":"WWDC22-10056-leaderboard","type":"image"}],"type":"paragraph"},{"syntax":"swift","code":["struct Leaderboard: View {","  var pets: [Pet]","  var totalVotes: Int","","  var body: some View {","    \/\/     👇🏻 this alignment will apply to all cells in the Grid (unless overridden via gridColumnAlignment(_:) and similar)","    Grid(alignment: .leading) {","      ForEach(pets) { pet in","        GridRow { \/\/ 👈🏻 within each Grid row, every view will correspond to a different column","          Text(pet.type) ","","          \/\/ 👇🏻 this view is flexible, and will take as much space as the Grid offers, Grid will make sure ","          \/\/    that ProgressView in each row will take the same amount of space","          ProgressView( ","            value: Double(pet.votes),","            total: Double(totalVotes)","          )","","          Text(\"\\(pet.votes)\")","            .gridColumnAlignment(.trailing)","            \/\/ 👆🏻makes sure that all this text is trailing aligned across all Grid rows","        }","","        Divider() \/\/ Alternative: GridRow { Divider().gridCellColumns(3) }","      }","    }","    .padding()","  }","}"],"type":"codeListing"},{"anchor":"Layout","level":2,"type":"heading","text":"`Layout`"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"by conforming to the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout","isActive":true,"type":"reference"},{"type":"text","text":" protocol, we can define a custom layout container that participates directly in SwiftUI’s layout process"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"possible thanks to"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"the new "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/proposedviewsize"},{"type":"text","text":" structure, which is the size offered by your container view"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout\/subviews","type":"reference"},{"type":"text","text":" which is a collection of proxies for the subviews of a layout view, where we can ask for various layout properties for each sub view"}]}]}]}]}]},{"syntax":"swift","code":["public protocol Layout: Animatable {","  static var layoutProperties: LayoutProperties { get }","  associatedtype Cache = Void","  typealias Subviews = LayoutSubviews","","  func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)","","  func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing","","  \/\/\/ We return our view size here, use the passed parameters for computing the","  \/\/\/ layout.","  func sizeThatFits(","    proposal: ProposedViewSize, ","    subviews: Self.Subviews, ","    cache: inout Self.Cache \/\/ 👈🏻 use this for calculated data shared among Layout methods","  ) -> CGSize","  ","  \/\/\/ Use this to tell your subviews where to appear.","  func placeSubviews(","    in bounds: CGRect, \/\/ 👈🏻 region where we need to place our subviews into, origin might not be .zero","    proposal: ProposedViewSize, ","    subviews: Self.Subviews, ","    cache: inout Self.Cache","  )","  ","  \/\/ ... there are more a couple more optional methods","}"],"type":"codeListing"},{"anchor":"Example","level":3,"type":"heading","text":"Example"},{"inlineContent":[{"type":"text","text":"A custom horizontal stack that offers all its subviews the width of its largest subview:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC22-10056-buttons","type":"image"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyEqualWidthHStack: Layout {","  \/\/\/ Returns a size that the layout container needs to arrange its subviews.","  \/\/\/ - Tag: sizeThatFitsHorizontal","  func sizeThatFits(","    proposal: ProposedViewSize,","    subviews: Subviews,","    cache: inout Void","  ) -> CGSize {","    guard !subviews.isEmpty else { return .zero }","","    let maxSize = maxSize(subviews: subviews)","    let spacing = spacing(subviews: subviews)","    let totalSpacing = spacing.reduce(0) { $0 + $1 }","","    return CGSize(","      width: maxSize.width * CGFloat(subviews.count) + totalSpacing,","      height: maxSize.height)","  }","","  \/\/\/ Places the stack's subviews.","  \/\/\/ - Tag: placeSubviewsHorizontal","  func placeSubviews(","    in bounds: CGRect,","    proposal: ProposedViewSize,","    subviews: Subviews,","    cache: inout Void","  ) {","    guard !subviews.isEmpty else { return }","","    let maxSize = maxSize(subviews: subviews)","    let spacing = spacing(subviews: subviews)","","    let placementProposal = ProposedViewSize(width: maxSize.width, height: maxSize.height)","    var nextX = bounds.minX + maxSize.width \/ 2","","    for index in subviews.indices {","      subviews[index].place(","        at: CGPoint(x: nextX, y: bounds.midY),","        anchor: .center,","        proposal: placementProposal)","      nextX += maxSize.width + spacing[index]","    }","  }","","  \/\/\/ Finds the largest ideal size of the subviews.","  private func maxSize(subviews: Subviews) -> CGSize {","    let subviewSizes = subviews.map { $0.sizeThatFits(.unspecified) }","    let maxSize: CGSize = subviewSizes.reduce(.zero) { currentMax, subviewSize in","      CGSize(","        width: max(currentMax.width, subviewSize.width),","        height: max(currentMax.height, subviewSize.height))","    }","","    return maxSize","  }","","  \/\/\/ Gets an array of preferred spacing sizes between subviews in the","  \/\/\/ horizontal dimension.","  private func spacing(subviews: Subviews) -> [CGFloat] {","    subviews.indices.map { index in","      guard index < subviews.count - 1 else { return 0 }","      return subviews[index].spacing.distance(","        to: subviews[index + 1].spacing,","        along: .horizontal)","    }","  }","}"],"type":"codeListing"},{"anchor":"LayoutValueKey","level":3,"type":"heading","text":"`LayoutValueKey`"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a custom "},{"type":"codeVoice","code":"Layout"},{"type":"text","text":" can only access the subview proxies ("},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout\/subviews","type":"reference","overridingTitleInlineContent":[{"code":"Layout.Subviews","type":"codeVoice"}],"isActive":true,"overridingTitle":"Layout.Subviews"},{"type":"text","text":"), not the views or your data model"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"we can store custom values on each subview via "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layoutvaluekey"},{"type":"text","text":", set via the new "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/layoutvalue(key:value:)"},{"type":"text","text":" modifier"}],"type":"paragraph"}]}]},{"syntax":"swift","code":["private struct Rank: LayoutValueKey {","  static let defaultValue: Int = 1","}","","extension View {","  func rank(_ value: Int) -> some View { \/\/ 👈🏻 convenience method","    layoutValue(key: Rank.self, value: value) \/\/ 👈🏻 the new modifier","  }","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"we can then read our custom "},{"code":"LayoutValueKey","type":"codeVoice"},{"type":"text","text":" values via "},{"code":"Layout.Subviews","type":"codeVoice"},{"type":"text","text":" proxies in our "},{"code":"Layout","type":"codeVoice"},{"type":"text","text":" methods:"}],"type":"paragraph"}]}]},{"syntax":"swift","code":["func placeSubviews(","  in bounds: CGRect,","  proposal: ProposedViewSize,","  subviews: Subviews,","  cache: inout Void",") {","  let ranks = subviews.map { subview in","    subview[Rank.self] \/\/ 👈🏻","  }","","  \/\/ ...","}"],"type":"codeListing"},{"anchor":"ViewThatFits","level":2,"type":"heading","text":"`ViewThatFits`"},{"inlineContent":[{"text":"Container type that automatically picks the first view that fits in the available space from the list of given views","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct StackedButtons: View {","  @Binding var pets: [Pet]","","  var body: some View {","    ViewThatFits {","      \/\/ 👇🏻 stack the horizontally if there's enough width","      HStack { ","        Buttons(pets: $pets)","      }","","      \/\/ 👇🏻 ...otherwise stack them vertically","      VStack {","        Buttons(pets: $pets)","      }","    }","  }","}"],"type":"codeListing"},{"anchor":"AnyLayout","level":2,"type":"heading","text":"`AnyLayout`"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"lets you seamlessly transitions between layout types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"you can apply different layouts to a single view hierarchy, so that you maintain the identity of the views as you transition from one layout type to another","type":"text"}]}]}]},{"syntax":"swift","code":["var body: some View {","  let layout = isThreeWayTie ? AnyViewLayout(HStack()) : AnyViewLayout(MyRadialLayout()) \/\/ 👈🏻","","  layout {","    ForEach(pets) { pet in","      Avatar(pet: pet)","        .rank(rank(pet))","    }","  }","  .animation(.default, value: pets)","}"],"type":"codeListing"},{"anchor":"Written-By","level":2,"type":"heading","text":"Written By"},{"type":"row","columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}],"size":1},{"content":[{"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello","level":3},{"inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","level":2,"type":"heading","text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10050-Complications-and-widgets-Reloaded","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10052-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10110-Build-global-apps-Localization-by-example","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10031-Stacks-Grids-and-Outlines-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-237-Building-Custom-Views-with-SwiftUI"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"SwiftUI now offers powerful tools to level up your layouts and arrange views for your app’s interface. We’ll introduce you to the Grid container, which helps you create highly customizable, two-dimensional layouts, and show you how you can use the Layout protocol to build your own containers with completely custom behavior. We’ll also explore how you can create seamless animated transitions between your layout types, and share tips and best practices for creating great interfaces."}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc22-10056-compose-custom-layouts-with-swiftui"]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/10056","type":"reference","isActive":true,"overridingTitle":"Watch Video (27 min)"},"kind":"sampleDownload"},"metadata":{"roleHeading":"WWDC22","modules":[{"name":"WWDC Notes"}],"title":"Compose custom layouts with SwiftUI","role":"sampleCode"},"kind":"article","references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-237-Building-Custom-Views-with-SwiftUI":{"type":"topic","kind":"article","title":"Building Custom Views with SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc19-237-building-custom-views-with-swiftui","abstract":[{"type":"text","text":"Learn how to build custom views and controls in SwiftUI with advanced composition, layout, graphics, and animation. See a demo of a high performance, animatable control and watch it made step by step in code. Gain a deeper understanding of the layout system of SwiftUI."}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-237-Building-Custom-Views-with-SwiftUI"},"WWDCNotes.png":{"type":"image","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","alt":null},"https://developer.apple.com/documentation/swiftui/layout":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"Layout"}],"title":"Layout","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout"},"https://developer.apple.com/documentation/swiftui/proposedviewsize":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"ProposedViewSize"}],"title":"ProposedViewSize","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/proposedviewsize","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/proposedviewsize"},"WWDC22-10056-buttons":{"type":"image","variants":[{"url":"\/images\/WWDC22-10056-buttons.png","traits":["1x","light"]}],"identifier":"WWDC22-10056-buttons","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10031-Stacks-Grids-and-Outlines-in-SwiftUI":{"abstract":[{"type":"text","text":"Display detailed data in your SwiftUI apps more quickly and efficiently with improved stacks and new list and outline views. Now available on iOS and iPadOS for the first time, outlines are a new multi-platform tool for expressing hierarchical data that work alongside stacks and lists. Learn how to use new and improved tools in SwiftUI to display more content on screen when using table views, create smooth-scrolling and responsive stacks, and build out list views for content that needs more than a vStack can provide. Take your layout options even further with the new grid view, as well as disclosure groups."}],"url":"\/documentation\/wwdcnotes\/wwdc20-10031-stacks-grids-and-outlines-in-swiftui","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10031-Stacks-Grids-and-Outlines-in-SwiftUI","kind":"article","type":"topic","role":"sampleCode","title":"Stacks, Grids, and Outlines in SwiftUI"},"WWDC22-Icon.png":{"type":"image","variants":[{"url":"\/images\/WWDC22-Icon.png","traits":["1x","light"]}],"identifier":"WWDC22-Icon.png","alt":null},"zntfdr.jpeg":{"type":"image","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg","alt":null},"https://zntfdr.dev":{"type":"link","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC Notes","role":"collection"},"zntfdr":{"type":"image","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr","alt":"Profile image of Federico Zanetello"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10032-Meet-Assistive-Access":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10032-meet-assistive-access","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","abstract":[{"text":"Learn how Assistive Access can help people with cognitive disabilities more easily use iPhone and iPad. Discover the design principles that guide Assistive Access and find out how the system experience adapts to lighten cognitive load. We’ll show you how Assistive Access works and what you can do to support this experience in your app.","type":"text"}],"type":"topic","title":"Meet Assistive Access"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10050-Complications-and-widgets-Reloaded":{"title":"Complications and widgets: Reloaded","role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10050-complications-and-widgets-reloaded","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10050-Complications-and-widgets-Reloaded","type":"topic","abstract":[{"type":"text","text":"Our widgets code-along returns as we adventure onto the watchOS and iOS Lock Screen. Learn about the latest improvements to WidgetKit that help power complex complications on watchOS and can help you create Lock Screen widgets for iPhone. We’ll show you how to incorporate the latest SwiftUI views to provide great glanceable data, explore how each platform renders content, and learn how you can customize the design and feel of your content within a widget or complication."}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://developer.apple.com/documentation/swiftui/composing_custom_layouts_with_swiftui":{"type":"link","titleInlineContent":[{"text":"Sample app","type":"text"}],"title":"Sample app","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/composing_custom_layouts_with_swiftui","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/composing_custom_layouts_with_swiftui"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10052-Whats-new-in-SwiftUI":{"abstract":[{"type":"text","text":"It’s a SwiftUI party — and you’re invited! Join us as we share the latest updates and a glimpse into the future of UI framework design. Discover deep levels of customization, advanced techniques for layout, elegant strategies for sharing, and rock-solid structural approaches for designing an app top-to-bottom in SwiftUI. We’ll also have some celebratory fun as we play with the latest graphical effects and explore APIs."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10052-Whats-new-in-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc22-10052-whats-new-in-swiftui","title":"What’s new in SwiftUI","role":"sampleCode","type":"topic","kind":"article"},"https://developer.apple.com/documentation/swiftui/layoutvaluekey":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"LayoutValueKey"}],"title":"LayoutValueKey","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layoutvaluekey","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/layoutvaluekey"},"WWDC22-10056-leaderboard":{"type":"image","variants":[{"url":"\/images\/WWDC22-10056-leaderboard.png","traits":["1x","light"]}],"identifier":"WWDC22-10056-leaderboard","alt":null},"https://developer.apple.com/documentation/swiftui/layout/subviews":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"Layout.Subviews"}],"title":"Layout.Subviews","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout\/subviews","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout\/subviews"},"https://developer.apple.com/documentation/swiftui/view/gridcolumnalignment(_:)":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"gridColumnAlignment(_:)"}],"title":"gridColumnAlignment(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcolumnalignment(_:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcolumnalignment(_:)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10110-Build-global-apps-Localization-by-example":{"role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10110-Build-global-apps-Localization-by-example","abstract":[{"text":"Learn how you can run your apps on devices around the world and help everyone have a great experience — regardless of the language they speak. We’ll explore how Apple APIs can provide a solid foundation when creating apps for diverse audiences, and we’ll share examples, challenges, and best practices from our own experiences.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-10110-build-global-apps-localization-by-example","title":"Build global apps: Localization by example"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"title":"Federico Zanetello (332 notes)","role":"sampleCode"},"https://github.com/zntfdr":{"type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr"},"https://developer.apple.com/documentation/swiftui/view/gridcellanchor(_:)":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"gridCellAnchor(_:)"}],"title":"gridCellAnchor(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellanchor(_:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellanchor(_:)"},"https://developer.apple.com/documentation/swiftui/view/layoutvalue(key:value:)":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"layoutValue(key:value:)"}],"title":"layoutValue(key:value:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/layoutvalue(key:value:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/layoutvalue(key:value:)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"WeatherKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ScreenCaptureKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Swift Regex","type":"codeVoice"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","title":"WWDC22","role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC22-Icon.png"},{"type":"card","identifier":"WWDC22.jpeg"}],"type":"topic","kind":"article"},"https://developer.apple.com/documentation/swiftui/view/gridcellcolumns(_:)":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"gridCellColumns(_:)"}],"title":"gridCellColumns(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellcolumns(_:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/gridcellcolumns(_:)"},"https://developer.apple.com/wwdc22/10056":{"type":"download","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc22\/10056","url":"https:\/\/developer.apple.com\/wwdc22\/10056"},"WWDC22.jpeg":{"type":"image","variants":[{"url":"\/images\/WWDC22.jpeg","traits":["1x","light"]}],"identifier":"WWDC22.jpeg","alt":null}}}