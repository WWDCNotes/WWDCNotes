{"metadata":{"title":"Meet Swift Testing","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC24"},"sections":[],"kind":"article","abstract":[{"type":"text","text":"Introducing Swift Testing: a new package for testing your code using Swift. Explore the building blocks of its powerful new API, discover how it can be applied in common testing workflows, and learn how it relates to XCTest and open source Swift."}],"seeAlsoSections":[{"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10139-Introducing-enterprise-APIs-for-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10203-Meet-AccessorySetupKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10060-Meet-AdAttributionKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-2023-Meet-FinanceKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10091-Meet-TabletopKit-for-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10121-Meet-the-Contact-Access-Button","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10117-Meet-the-Translation-API","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10111-Meet-the-next-generation-of-CarPlay-architecture"],"title":"New Tools & Frameworks","generated":true}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10179","type":"reference","overridingTitle":"Watch Video (23 min)","isActive":true}},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc24-10179-meet-swift-testing"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10179-Meet-Swift-Testing","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"text":"Key takeaways","type":"heading","anchor":"Key-takeaways","level":2},{"inlineContent":[{"type":"text","text":"üß™ Use "},{"code":"@Test","type":"codeVoice"},{"type":"text","text":" annotation for functions with test."}],"type":"paragraph"},{"inlineContent":[{"text":"‚òëÔ∏è Use ","type":"text"},{"type":"codeVoice","code":"#expect"},{"type":"text","text":" macro for conditional check and "},{"type":"codeVoice","code":"#require"},{"text":" for early exit.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"‚öôÔ∏è Traits for test customization.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"üíª Support for Linux and Windows.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"ü´• UI, performance and Objective-C are not supported.","type":"text"}],"type":"paragraph"},{"text":"Presenters","type":"heading","anchor":"Presenters","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stuart Montgomery, Xcode Engineer"}]}]}],"type":"unorderedList"},{"text":"Building Blocks","type":"heading","anchor":"Building-Blocks","level":2},{"text":"Getting started: @Test","type":"heading","anchor":"Getting-started-Test","level":3},{"inlineContent":[{"type":"text","text":"In order to use the new testing framework we need to import the "},{"type":"codeVoice","code":"Testing"},{"type":"text","text":" framework in your unit test file."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Adding the "},{"inlineContent":[{"code":"@Test","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" annotation any of our functions, and the function will automatically change to a test case."}],"type":"paragraph"},{"code":["import Testing","","@Test func simpleTest() {","    var a = 2","    #expect(a < 1)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In case of test validation error, after clicking on the red error bar, the new "},{"type":"codeVoice","code":"Show"},{"type":"text","text":" button appears. Clicking on it reveals the result view, where the expressions passed to the macro are shown."}],"type":"paragraph"},{"text":"Validation macros: #expect and #require","type":"heading","anchor":"Validation-macros-expect-and-require","level":3},{"inlineContent":[{"type":"text","text":"There are 2 validation macros introduced to test any expression."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"code":"#expect","type":"codeVoice"}]},{"type":"text","text":" macro can be used as a default case, and it has great flexibility in terms of the evaluation expressions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"#require"}]},{"type":"text","text":" macro is more strict: when it fails, it exit from the current test case. Since it throws an error, needs to be invoked via the "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"try"}]},{"type":"text","text":" invocation. It can be useful for "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"nil"}]},{"type":"text","text":" check and other checks that might imply early exit from the test function in case of failure."}],"type":"paragraph"},{"text":"Traits and Suite","type":"heading","anchor":"Traits-and-Suite","level":3},{"inlineContent":[{"text":"Traits are great for test customization. Here are some examples:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Trait"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Description"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Test(\"Custom Name\")"}]}],[{"type":"paragraph","inlineContent":[{"text":"Custom name for the test case. It is used in Xcode and the reports too.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"@Test(.bug(\"http:\/\/bugtracker.my\/bugs\/33344\" , \"Title\"))","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Reference issue from a bug tracker","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Test(.enabled(if: serverIsOnline))"}]}],[{"type":"paragraph","inlineContent":[{"text":"Specify a runtime condition for the test","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Test(.disabled(\"FIXME: Currently broken\"))"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unconditional disable test (test will marked as skipped)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"@Test() @available(macOS 15, *)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Limit a test to certain OS versions","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"@Test(.timeLimit(.minutes(3)))","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Set a maximum time limit for the test","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Suite(.serialized)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the tests in a suite one at time, without parallelization."}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"Although we are able to write test functions in the global scope, as a standalone function, putting the test cases in structure is encouraged."}],"type":"paragraph"},{"inlineContent":[{"text":"Suite is one of the structure to group the tests into an entity. The ","type":"text"},{"inlineContent":[{"code":"@Suite","type":"codeVoice"}],"type":"strong"},{"text":" annotation can be added to any Swift type, however types containing ","type":"text"},{"inlineContent":[{"code":"@Test","type":"codeVoice"}],"type":"strong"},{"text":" functions or suites will be implicitly annotated. The ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"struct"}],"type":"strong"},{"text":" type is recommended by Apple to define a suite, due to its value type nature, for state isolation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For set-up and tear-down logic the ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"init"}]},{"text":" and ","type":"text"},{"type":"strong","inlineContent":[{"code":"deinit","type":"codeVoice"}]},{"text":" functions can be used. During the test run a new instance of the suite initialized for each ","type":"text"},{"code":"@Test","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Suites can also be nested into each other."}],"type":"paragraph"},{"text":"Common Workflows","type":"heading","anchor":"Common-Workflows","level":2},{"text":"Tests with conditions","type":"heading","anchor":"Tests-with-conditions","level":3},{"inlineContent":[{"text":"Using the .disabled trait is recommended, instead of commenting out the code. Adding the .bug trait in cases when test is disabled due to a known issue makes it more elegant.","type":"text"}],"type":"paragraph"},{"text":"Tests with common characteristics","type":"heading","anchor":"Tests-with-common-characteristics","level":3},{"inlineContent":[{"text":"Tags are another traits that can be used to group tests with common characteristics. Based on the tag the test cases can be grouped together. One test function can belong more than one tag.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The tags needs to be defined before we can start to use them:","type":"text"}],"type":"paragraph"},{"code":["import Testing","","extension Tag {","    @Tag static var formatting: Self","    @Tag static var networking: Self","}","","struct myTests {","    @Test(.tags(.formatting))","    func sampleTest()  {","        let a = 2","        #expect(a < 3)","    }","","    @Test(.tags(.networking, .formatting))","    func sampleTestThrows() throws {","        let a = 2","        try #require(a < 3)","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Repeating tests with different parameters","type":"heading","anchor":"Repeating-tests-with-different-parameters","level":3},{"inlineContent":[{"text":"Instead of using the ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"for"}],"type":"strong"},{"text":" loop to run tests with different parameters the recommended method is to pass arguments to the test. The parameters are passed as a function argument to the test function.","type":"text"}],"type":"paragraph"},{"code":["import Testing","","struct myTests {","    @Test(\"Test for repeating integers\", arguments:","    [","        1,","        2,","        3,","        4","    ])","    func sampleTest(number: Int) {","        #expect(number < 9)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above the "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"number"}]},{"type":"text","text":" variable carries the current value passed from the argument list."}],"type":"paragraph"},{"inlineContent":[{"text":"In Xcode each test parameter can be re-run independently.","type":"text"}],"type":"paragraph"},{"text":"Swift Testing vs XCTest","type":"heading","anchor":"Swift-Testing-vs-XCTest","level":2},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Function","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Swift Testing","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"XCTest"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Test function declaration","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"code":"@Test","type":"codeVoice"}]}]}],[{"type":"paragraph","inlineContent":[{"text":"Name begins with ‚Äútest‚Äù","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Supported types","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance methods, Static\/class methods, Global functions"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance methods"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Traits support"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Yes"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"No"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parallel execution"}]}],[{"type":"paragraph","inlineContent":[{"text":"In-process parallel execution (via Swift concurrency)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multi process parallel execution"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Runs on"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supports device execution"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"macOS and simulator only"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Expectations","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"#expect(...)","type":"codeVoice"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"try #required(...)"}],"type":"strong"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"XCTAssert","type":"codeVoice"}],"type":"strong"},{"text":" functions","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Types"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"actor","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"}],"type":"strong"}]}],[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"class"}]}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Suite declaration"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"codeVoice","code":"@Suite"}],"type":"strong"},{"text":" (before a type)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"code":"XCTestCase","type":"codeVoice"}]},{"text":" subclassing","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before each test"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"init() async throws","type":"codeVoice"}],"type":"strong"}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"code":"setUp()","type":"codeVoice"},{"text":", ","type":"text"},{"code":"setUpWithError() throws","type":"codeVoice"},{"text":", ","type":"text"},{"code":"setUp() async throws","type":"codeVoice"}],"type":"strong"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"After each test","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"deinit"}]}]}],[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"codeVoice","code":"tearDown() async throws"},{"text":", ","type":"text"},{"type":"codeVoice","code":"tearDownWithError() throws"},{"text":", ","type":"text"},{"type":"codeVoice","code":"tearDown()"}],"type":"strong"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sub-groups"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Via typed nesting"}]}],[{"type":"paragraph","inlineContent":[{"text":"Not supported","type":"text"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"Migration: Swift Testing and XCTests can co-exist and share a singe unit test target. Can be migrated granularly (don‚Äôt forget to remove ","type":"text"},{"code":"test","type":"codeVoice"},{"text":" prefix from the function name).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Exceptions, can not be migrated:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"UI Automation test cases (like using ","type":"text"},{"type":"codeVoice","code":"XCUIApplication"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Performance testing API (like using "},{"type":"codeVoice","code":"XCTMetric"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Tests can be only written in Objective-C","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Avoid calling "},{"code":"XCTAssert","type":"codeVoice"},{"type":"text","text":" from Swift Testing tests, or "},{"code":"#expect","type":"codeVoice"},{"type":"text","text":" from XCTests."}],"type":"paragraph"},{"text":"Avaliability","type":"heading","anchor":"Avaliability","level":2},{"inlineContent":[{"text":"Swift Testing is integrated with Swift Package Manager CLI, Xcode 16 and VS Code Swift Extension.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Swift Testing is Open Source.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Learn more in the session: ‚ÄúGo further with Swift Testing‚Äù","type":"text"}],"type":"paragraph"},{"text":"Written By","type":"heading","anchor":"Written-By","level":2},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/avatars.githubusercontent.com\/u\/3090905?v=4"}]}]},{"size":4,"content":[{"type":"heading","anchor":"Peter-Molnar","text":"Peter Molnar","level":3},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/petermolnar-dev","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/petermolnar-dev","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"http:\/\/petermolnar.dev","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/x.com\/petermolnar_hu","type":"reference"}]}]}]},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"text":"Related Sessions","type":"heading","anchor":"Related-Sessions","level":2},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10195-Go-further-with-Swift-Testing"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"references":{"https://x.com/petermolnar_hu":{"identifier":"https:\/\/x.com\/petermolnar_hu","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"url":"https:\/\/x.com\/petermolnar_hu","type":"link","title":"X\/Twitter"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-2023-Meet-FinanceKit":{"title":"Meet FinanceKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-2023-Meet-FinanceKit","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-2023-meet-financekit","type":"topic","abstract":[{"text":"Learn how FinanceKit lets your financial management apps seamlessly and securely share on-device data from Apple Cash, Apple Card, and more, with user consent and control. Find out how to request one-time and ongoing access to accounts, transactions, and balances ‚Äî and how to build great experiences for iOS and iPadOS.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10139-Introducing-enterprise-APIs-for-visionOS":{"title":"Introducing enterprise APIs for visionOS","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10139-Introducing-enterprise-APIs-for-visionOS","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10139-introducing-enterprise-apis-for-visionos","type":"topic","abstract":[{"text":"Find out how you can use new enterprise APIs for visionOS to create spatial experiences that enhance employee and customer productivity on Apple Vision Pro.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10121-Meet-the-Contact-Access-Button":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10121-Meet-the-Contact-Access-Button","role":"sampleCode","title":"Meet the Contact Access Button","kind":"article","abstract":[{"text":"Learn about the new Contacts authorization modes and how to improve Contacts access in your app. Discover how to integrate the Contact Access Button into your app to share additional contacts on demand and provide an easier path to Contacts authorization. We‚Äôll also cover Contacts security features and an alternative API to be used if the button isn‚Äôt appropriate for your app.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc24-10121-meet-the-contact-access-button"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15, tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"code":"FinanceKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"TabletopKit","type":"codeVoice"},{"type":"text","text":", and more."}],"title":"WWDC24","kind":"article","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes\/wwdc24","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","type":"topic"},"https://avatars.githubusercontent.com/u/3090905?v=4":{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/3090905?v=4","variants":[{"url":"https:\/\/avatars.githubusercontent.com\/u\/3090905?v=4","traits":["1x","light"]}],"alt":"Profile image of Peter Molnar","type":"image"},"http://petermolnar.dev":{"identifier":"http:\/\/petermolnar.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"http:\/\/petermolnar.dev","type":"link","title":"Blog"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10060-Meet-AdAttributionKit":{"title":"Meet AdAttributionKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10060-Meet-AdAttributionKit","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10060-meet-adattributionkit","type":"topic","abstract":[{"type":"text","text":"Introducing AdAttributionKit, a new iOS framework for privacy-preserving ad attribution. Learn how AdAttributionKit supports re-engagement, click-through attribution (including support for custom creative), JWS formatted impressions and postbacks, and more. We‚Äôll provide insight into testing your AdAttributionKit implementation and deep-dive into code snippets and best practices for adopting AdAttributionKit."}]},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/petermolnar-dev":{"url":"\/documentation\/wwdcnotes\/petermolnar-dev","kind":"article","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/petermolnar-dev","abstract":[{"text":"iOS Developer @Parallels","type":"text"}],"title":"Peter Molnar (1 note)"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"type":"image"},"https://github.com/petermolnar-dev":{"identifier":"https:\/\/github.com\/petermolnar-dev","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","url":"https:\/\/github.com\/petermolnar-dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC Notes","url":"\/documentation\/wwdcnotes","kind":"symbol","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10111-Meet-the-next-generation-of-CarPlay-architecture":{"title":"Meet the next generation of CarPlay architecture","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10111-Meet-the-next-generation-of-CarPlay-architecture","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10111-meet-the-next-generation-of-carplay-architecture","type":"topic","abstract":[{"text":"Dive into the architecture for the next generation of CarPlay. Learn how your vehicle system works with iPhone to create a single cohesive experience that showcases the best of your car and iPhone. Learn how UI is rendered and composited, and explore ways to configure and customize a special experience for each vehicle model. This session is intended for automakers and system developers interested in the next generation of CarPlay.","type":"text"}]},"https://developer.apple.com/wwdc24/10179":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10179","url":"https:\/\/developer.apple.com\/wwdc24\/10179","checksum":null,"type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10195-Go-further-with-Swift-Testing":{"role":"sampleCode","abstract":[{"type":"text","text":"Learn how to write a sweet set of (test) suites using Swift Testing‚Äôs baked-in features. Discover how to take the building blocks further and use them to help expand tests to cover more scenarios, organize your tests across different suites, and optimize your tests to run in parallel."}],"title":"Go further with Swift Testing","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10195-go-further-with-swift-testing","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10195-Go-further-with-Swift-Testing","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10091-Meet-TabletopKit-for-visionOS":{"title":"Meet TabletopKit for visionOS","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10091-Meet-TabletopKit-for-visionOS","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10091-meet-tabletopkit-for-visionos","type":"topic","abstract":[{"type":"text","text":"Build a board game for visionOS from scratch using TabletopKit. We‚Äôll show you how to set up your game, add powerful rendering using RealityKit, and enable multiplayer using spatial Personas in FaceTime with only a few extra lines of code."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10203-Meet-AccessorySetupKit":{"title":"Meet AccessorySetupKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10203-Meet-AccessorySetupKit","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10203-meet-accessorysetupkit","type":"topic","abstract":[{"text":"Elevate your accessory setup experience with AccessorySetupKit. Display a beautiful pairing dialog with an image of your Bluetooth or Wi-Fi accessory ‚Äî no trip to the Settings app required. Discover how to improve privacy by pairing only your app with an accessory. And learn how you can migrate existing accessories so they can be managed by AccessorySetupKit.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10117-Meet-the-Translation-API":{"title":"Meet the Translation API","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10117-Meet-the-Translation-API","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc24-10117-meet-the-translation-api","type":"topic","abstract":[{"text":"Discover how you can translate text across different languages in your app using the new Translation framework.  We‚Äôll show you how to quickly display translations in the system UI, and how to translate larger batches of text for your app‚Äôs UI.","type":"text"}]}}}