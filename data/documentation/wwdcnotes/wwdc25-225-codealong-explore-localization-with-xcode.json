{"metadata":{"roleHeading":"WWDC25","modules":[{"name":"WWDC Notes"}],"title":"Code-along: Explore localization with Xcode","role":"sampleCode"},"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2025\/225","isActive":true,"overridingTitle":"Watch Video (21 min)"},"kind":"sampleDownload"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc25-225-codealong-explore-localization-with-xcode"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC25"]]},"abstract":[{"text":"Learn how to localize your app into additional languages using Xcode. We’ll walk step-by-step through the process of creating a String Catalog, translating text, and exchanging files with external translators. You’ll learn best practices for providing necessary context to translators and how Xcode can help to provide this information automatically. For larger projects, we’ll also dive into techniques to manage complexity and streamline string management using type-safe Swift code.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC25-225-Codealong-Explore-localization-with-Xcode"},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Key-takeaways","level":2,"text":"Key takeaways","type":"heading"},{"inlineContent":[{"text":"🔎 Easily spot the keys with Assistant.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"☑️ Test your app by modifying the scheme language."}],"type":"paragraph"},{"inlineContent":[{"text":"🤖 Use AI to generate context aware comments for localization.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"📦 Automated bundle detection with "},{"type":"codeVoice","code":"#bundle"},{"type":"text","text":" macro."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"🆕 Swift Symbol generation from manual keys with Swift type safety, and easier maintenance."}],"type":"paragraph"},{"anchor":"Presenters","level":2,"text":"Presenters","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Andreas Neusüß, Localization Xcode Engineer"}]}]}],"type":"unorderedList"},{"anchor":"Getting-Started","level":2,"text":"Getting Started","type":"heading"},{"anchor":"Project-files","level":3,"text":"Project files","type":"heading"},{"inlineContent":[{"text":"The code presented in the video is available for download on ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/Xcode\/localizing-landmarks","isActive":true,"type":"reference"},{"text":". It contains folders named ","type":"text"},{"code":"Start","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"End","type":"codeVoice"},{"text":", with the respective states.","type":"text"}],"type":"paragraph"},{"anchor":"Adding-String-Catalog","level":2,"text":"Adding String Catalog","type":"heading"},{"inlineContent":[{"text":"From Xcode File menu select ","type":"text"},{"code":"New -> File from Template","type":"codeVoice"},{"text":" or use the ","type":"text"},{"code":"⌘ + N","type":"codeVoice"},{"text":" keyboard shortcut.","type":"text"},{"text":" ","type":"text"},{"text":"Filter for ","type":"text"},{"code":"String Catalog","type":"codeVoice"},{"text":", and click on the respective icon. Keep the default ","type":"text"},{"code":"Localizable","type":"codeVoice"},{"text":" filename, but make sure that you are selecting the ","type":"text"},{"code":"Resources","type":"codeVoice"},{"text":" group in the ","type":"text"},{"code":"Group","type":"codeVoice"},{"text":" selector on the bottom of the dialog box.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Add the file."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The string catalog is empty in the beginning, in order to populate or update it automatically by Xcode, the project needs to be succefully built."},{"type":"text","text":" "},{"type":"text","text":"When a project contains a String Catalog, Xcode is automatically populating the localizable strings from the code."}],"type":"paragraph"},{"anchor":"Add-text-to-the-catalog","level":3,"text":"Add text to the catalog","type":"heading"},{"inlineContent":[{"text":"Most SwiftUI controlls are localizable by default, see the examples below:","type":"text"}],"type":"paragraph"},{"code":["import SwiftUI","","Text(\"This will be automatically picked up for localization\", comment: \"Test text for localization auto-generation.\")","","Button(\"Cancel\") { }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The Foundation framework provides a sepcial String initializer, which marks the string for automatical localization. This is can be used when the string is not defined in a SwiftUI element.","type":"text"}],"type":"paragraph"},{"code":["import Foundation","","String(localized: \"This will also be automatically picked up for localization\", comment: \"Test text for localization auto-generation, using Foundation framework.\")"],"syntax":"swift","type":"codeListing"},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the Assistant pane is opened from the string catalog on the other side, clicking on the keys in the string catalog will jump the assistant pane to the exact line, where the key is defined in the code."}]}],"style":"tip","type":"aside"},{"anchor":"Using-plural","level":3,"text":"Using plural","type":"heading"},{"inlineContent":[{"type":"text","text":"Using number based placeholders, like "},{"type":"codeVoice","code":"%lld items"},{"type":"text","text":", where "},{"type":"codeVoice","code":"%lld"},{"type":"text","text":" value is defined in runtime, might have a need to use different variants of the text depending on the number. To add a variant use the context menu (right click), and select "},{"type":"codeVoice","code":"Vary by Plural"},{"type":"text","text":". It will split the text entry into single and plural representation."}],"type":"paragraph"},{"anchor":"Adding-new-language","level":3,"text":"Adding new language","type":"heading"},{"inlineContent":[{"type":"text","text":"To add new laguage to the project can be done by clicking on the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" button on the bottom-left corner, and selecting the language."}],"type":"paragraph"},{"inlineContent":[{"text":"The new langage will be added below the original English, with the percentage value, which indicates how many keys from all of the keys have been provided translation for that particular language.","type":"text"}],"type":"paragraph"},{"anchor":"Translation-workflow","level":3,"text":"Translation workflow","type":"heading"},{"inlineContent":[{"text":"To create a package that can be shared with translators, use the exporting function under the ","type":"text"},{"code":"Product -> Export Localization","type":"codeVoice"},{"text":" menu. Select the languages that need to be localized. The produced file extension will be ","type":"text"},{"code":".xcloc","type":"codeVoice"},{"text":", and it is containig the respective industry recognised ","type":"text"},{"code":".xliff","type":"codeVoice"},{"text":" files for the translators.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When the translators are ready with the translation, the updated ","type":"text"},{"code":".xloc","type":"codeVoice"},{"text":" file should be imported to update the string catalog of the app, from the ","type":"text"},{"code":"Product -> Import Localization","type":"codeVoice"},{"text":" menupoint.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An example file in German ("},{"type":"codeVoice","code":"de.xcloc"},{"type":"text","text":") is provided in downloadable code samples, to try out the import functionality in the provided sample app."}],"type":"paragraph"},{"anchor":"Testing-the-translation","level":3,"text":"Testing the translation","type":"heading"},{"inlineContent":[{"type":"text","text":"In order to ensure that the localization correctly shows in the app, change the "},{"code":"App Language","type":"codeVoice"},{"type":"text","text":" settingsd in the"},{"type":"text","text":" "},{"code":"Edit Scheme -> Run -> Options tab","type":"codeVoice"},{"type":"text","text":", and select the preferred language. Build and run the app to see the reults (without changing the language of your simulator or dev device)."}],"type":"paragraph"},{"anchor":"Translation-context","level":2,"text":"Translation context","type":"heading"},{"inlineContent":[{"type":"text","text":"Translators can’t see the code, so the content of the comment column should be informative anught to the translators to get the right context. Consider the following 3 things to add to the comment."}],"type":"paragraph"},{"inlineContent":[{"text":"There are 2 examples, ","type":"text"},{"code":"Landmarks","type":"codeVoice"},{"text":" which is a text extracted from the tab bar, and ","type":"text"},{"code":"%@ is contained in %@","type":"codeVoice"},{"text":" which is a subtitle, with placeholders for the landmark name and the collection name.","type":"text"}],"type":"paragraph"},{"anchor":"Add-Interface-element","level":3,"text":"Add Interface element","type":"heading"},{"inlineContent":[{"type":"text","text":"Adding the reference to the user interface element type (title, subtitle, etc…) is is the first step."}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"text":"Key","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Comment","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Landmarks"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Title for "},{"type":"codeVoice","code":"Landmarks"},{"type":"text","text":" tab"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"%@ is contained in %@"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Subtitle for a landmark"}],"type":"paragraph"}]]],"type":"table"},{"anchor":"Describe-surrounding-UI","level":3,"text":"Describe surrounding UI","type":"heading"},{"inlineContent":[{"type":"text","text":"Describing the surrounding user interface elemts (sidebar, list, etc…) adds further clarity."}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Comment","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Landmarks"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Title for "},{"type":"codeVoice","code":"Landmarks"},{"type":"text","text":" tab shown in the sidebar."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"%@ is contained in %@"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Subtitle for a landmark in a list","type":"text"}],"type":"paragraph"}]]],"type":"table"},{"anchor":"Placeholder-content","level":3,"text":"Placeholder content","type":"heading"},{"inlineContent":[{"type":"text","text":"Text with placeholders (starting with %) needs more clarification."}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Comment"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"%@ is contained in %@"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Subtitle for a landmark in a list, first variable is name of the landmark, second variable is a collection name.","type":"text"}],"type":"paragraph"}]]],"type":"table"},{"anchor":"Automatic-comment-generation","level":2,"text":"Automatic comment generation","type":"heading"},{"inlineContent":[{"text":"Automatic comment generation is new in Xcode 26. By using the built-in LLM of Xcode, it generates the comment for the key, based on the key place in the code.","type":"text"},{"text":" ","type":"text"},{"text":"The comment generation can be automatically started by right clicking on the string catalog line, and selecting ","type":"text"},{"code":"Generate Comment","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This AI based comment generation can be automated by toggling on the ","type":"text"},{"code":"Settings-> Editing-> Automatically Generate string catalog comments","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Tip","content":[{"inlineContent":[{"text":"The AI generated comment can be identified in the JSON represetation of the String Catalog by the ","type":"text"},{"code":"\"isCommentAutoGenerated\" : true","type":"codeVoice"},{"text":" entry, while in the exported ","type":"text"},{"code":".xliff","type":"codeVoice"},{"text":" XML file the entry has the ","type":"text"},{"code":"from=\"auto-generated\"","type":"codeVoice"},{"text":" tag.","type":"text"}],"type":"paragraph"}],"style":"tip","type":"aside"},{"anchor":"Managing-complexity","level":2,"text":"Managing complexity","type":"heading"},{"anchor":"Modularisation","level":3,"text":"Modularisation","type":"heading"},{"inlineContent":[{"text":"Code can be split into extension, frameworks and Swift Packages in order to modularize the codebase.","type":"text"},{"text":" ","type":"text"},{"text":"By using the ","type":"text"},{"code":"bundle","type":"codeVoice"},{"text":" parameter in the localized text call, the code can locate in runtime the string catalog in the specified bundle. By default it is setup as ","type":"text"},{"code":".main","type":"codeVoice"},{"text":", which is always referring to the main app.","type":"text"}],"type":"paragraph"},{"code":["import Foundation","","String(localized: \"This will also be automatically picked up for localization\",","bundle: .main,","comment: \"Test text for localization auto-generation, using Foundation framework.\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Using the ","type":"text"},{"code":".module","type":"codeVoice"},{"text":" refers to the current module.","type":"text"}],"type":"paragraph"},{"code":["import Foundation","","String(localized: \"This will also be automatically picked up for localization\",","bundle: .module,","comment: \"Test text for localization auto-generation, using Foundation framework.\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"From Xcode 26 the ","type":"text"},{"code":"#bundle","type":"codeVoice"},{"text":" macro is available, which automatically resolves the current bundle.","type":"text"}],"type":"paragraph"},{"code":["import Foundation","","String(localized: \"This will also be automatically picked up for localization\",","bundle: #bundle,","comment: \"Test text for localization auto-generation, using Foundation framework.\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Tables","level":3,"text":"Tables","type":"heading"},{"inlineContent":[{"text":"The default table name is ","type":"text"},{"code":"Localizable","type":"codeVoice"},{"text":", however, any other table name can be used for our string catalog. In order to keep the reference between ther catalog file and the code, use the ","type":"text"},{"code":"tableName","type":"codeVoice"},{"text":" parameter. For example if the string catalog name is ","type":"text"},{"code":"Discover.xcstring","type":"codeVoice"},{"text":", the following code will resolve the table name correctly:","type":"text"}],"type":"paragraph"},{"code":["import Foundation","String(localized: \"This will also be automatically picked up for localization\",","tableName: \"Discover\",","bundle: #bundle,","comment: \"Test text for localization auto-generation, using Foundation framework.\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Generated-Swift-Symbols","level":3,"text":"Generated Swift Symbols","type":"heading"},{"inlineContent":[{"type":"text","text":"In Xcode 26 when adding keys "},{"type":"emphasis","inlineContent":[{"type":"text","text":"manually"}]},{"type":"text","text":" to the string catalog, when the "},{"type":"codeVoice","code":"Generate Swift Symbol"},{"type":"text","text":" is set to true on the Attributes inspector, Xcode automatically generates a "},{"type":"codeVoice","code":"LocalizedStringResource"},{"type":"text","text":", (which is available from iOS 16, macOS 13 and watchOS 9), so it can be referenced either a static variable, if there are no placeholders, or as a static function where the parameters aligned with the placeholders."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Generate Swift Catalog Symbols","type":"codeVoice"},{"text":" under the Build Setting controls this functionality, and enabled by default with new projects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This new feature helps to handle the keys with the Swift type-safety, adding the static variables the the ","type":"text"},{"code":"LocalizedStringResource","type":"codeVoice"},{"text":" struct. That being said, all of the SwiftUI elements and the ","type":"text"},{"code":"Sting","type":"codeVoice"},{"text":" initalizer, which is using the ","type":"text"},{"code":"LocalizedStringResource","type":"codeVoice"},{"text":" can benefit from this technique.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Under the hood Xcode re-generates the ","type":"text"},{"code":"GeneratedStringSymbols_<tableName>.swift","type":"codeVoice"},{"text":" file, each time you update the manual keys with automatic Swift Symbol generation.","type":"text"}]}],"style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"The parameter names for the placeholders can be custumized with adding the parameter name label after the "},{"code":"%","type":"codeVoice"},{"type":"text","text":" sign, in parenthesis, like: "},{"code":"%(landMarkCount)lld landmarks found","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Given the previous example, the symbols are generated by the following:"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Comment"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Swift symbol"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Landmarks","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Title for "},{"code":"Landmarks","type":"codeVoice"},{"type":"text","text":" tab shown in the sidebar."}],"type":"paragraph"}],[{"inlineContent":[{"code":".landmarks","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"%(landmark)@ is contained in %(landmarkCollection)@"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Subtitle for a landmark in a list, first variable is name of the landmark, second variable is a collection name.","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"code":".isContainedIn(landmark: String, landmarkCollection: String)","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"Example usage:"}],"type":"paragraph"},{"code":["import SwiftUI","import Foundation","","Text(.landmarks)","String(localized: .landmarks)","Text(.isContainedIn(landmark: String, landmarkCollection: String))","String(localized: .isContainedIn(landmark: String, landmarkCollection: String))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"When custom table name is used, like the ","type":"text"},{"code":"Discover.xcstring","type":"codeVoice"},{"text":", the table name comes first:","type":"text"}],"type":"paragraph"},{"code":["import SwiftUI","import Foundation","","Text(.Discover.landmarks)","String(localized: .Discover.landmarks)"],"syntax":"swift","type":"codeListing"},{"anchor":"Workflow-considerations","level":3,"text":"Workflow considerations","type":"heading"},{"inlineContent":[{"text":"With the generated symbols there is a new way of tackle the localization.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Apple recommends to start with extraction from code. In this case the UI code is easier to understand, and also can benefit from the generated comments.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When the codebase grows, referencing symbols can give better organization into frameworks and packages. It is easy to organize the keys into separate tables. The main point here is that the key is (again) separated from the values."}],"type":"paragraph"},{"inlineContent":[{"text":"In Xcode 26 the migration from the code extracted entries to the referencing symbols is supported by refactoring, selecting in the context menu: ","type":"text"},{"code":"Refactor -> Convert Strings to Symbols","type":"codeVoice"},{"text":". It is supported even on multiple rows selection from the string catalog.","type":"text"}],"type":"paragraph"},{"anchor":"Written-By","level":2,"text":"Written By","type":"heading"},{"numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"petermolnar-dev","type":"image"}]}]},{"size":4,"content":[{"anchor":"Peter-Molnar","level":3,"text":"Peter Molnar","type":"heading"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/petermolnar-dev","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/petermolnar-dev","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/x.com\/petermolnar_hu","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"http:\/\/petermolnar.dev","type":"reference"}],"type":"paragraph"}]}],"type":"row"},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"anchor":"Related-Sessions","level":2,"text":"Related Sessions","type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10155-Discover-String-Catalogs"],"style":"list","type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"sections":[],"references":{"petermolnar-dev.jpeg":{"alt":null,"type":"image","identifier":"petermolnar-dev.jpeg","variants":[{"url":"\/images\/WWDCNotes\/petermolnar-dev.jpeg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2025/225":{"checksum":null,"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2025\/225","type":"download","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2025\/225"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","identifier":"WWDCNotes.png","alt":null},"https://developer.apple.com/documentation/Xcode/localizing-landmarks":{"titleInlineContent":[{"type":"text","text":"the Apple Developer site"}],"url":"https:\/\/developer.apple.com\/documentation\/Xcode\/localizing-landmarks","type":"link","title":"the Apple Developer site","identifier":"https:\/\/developer.apple.com\/documentation\/Xcode\/localizing-landmarks"},"https://x.com/petermolnar_hu":{"type":"link","identifier":"https:\/\/x.com\/petermolnar_hu","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"title":"X\/Twitter","url":"https:\/\/x.com\/petermolnar_hu"},"WWDC25-Icon.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC25-Icon.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC25-Icon.png","alt":null},"https://github.com/petermolnar-dev":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/petermolnar-dev","type":"link","title":"GitHub","identifier":"https:\/\/github.com\/petermolnar-dev"},"doc://WWDCNotes/documentation/WWDCNotes/petermolnar-dev":{"title":"Peter Molnar (3 notes)","images":[{"type":"card","identifier":"petermolnar-dev.jpeg"},{"type":"icon","identifier":"petermolnar-dev.jpeg"}],"role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/petermolnar-dev","url":"\/documentation\/wwdcnotes\/petermolnar-dev","kind":"article","abstract":[{"text":"iOS Developer @Parallels","type":"text"}]},"http://petermolnar.dev":{"titleInlineContent":[{"text":"Blog","type":"text"}],"type":"link","identifier":"http:\/\/petermolnar.dev","url":"http:\/\/petermolnar.dev","title":"Blog"},"petermolnar-dev":{"variants":[{"url":"\/images\/WWDCNotes\/petermolnar-dev.jpeg","traits":["1x","light"]}],"type":"image","identifier":"petermolnar-dev","alt":"Profile image of Peter Molnar"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10155-Discover-String-Catalogs":{"role":"sampleCode","abstract":[{"type":"text","text":"Discover how Xcode 15 makes it easy to localize your app by managing all of your strings in one place. We’ll show you how to extract, edit, export, and build strings in your project using String Catalogs. We’ll also share how you can adopt String Catalogs in existing projects at your own pace by choosing which files to migrate."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10155-discover-string-catalogs","kind":"article","title":"Discover String Catalogs","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10155-Discover-String-Catalogs"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC25":{"title":"WWDC25","abstract":[{"text":"Xcode 26, Swift 6.2, iOS\/macOS\/tvOS\/visionOS 26.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"Foundation Models","type":"codeVoice"},{"text":", ","type":"text"},{"code":"AlarmKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"PermissionKit","type":"codeVoice"},{"text":", and more.","type":"text"}],"images":[{"type":"icon","identifier":"WWDC25-Icon.png"},{"type":"card","identifier":"WWDC25.jpg"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc25","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC25","kind":"article","role":"collectionGroup"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","title":"WWDC Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","kind":"symbol","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"WWDC25.jpg":{"alt":null,"type":"image","identifier":"WWDC25.jpg","variants":[{"url":"\/images\/WWDCNotes\/WWDC25.jpg","traits":["1x","light"]}]}}}