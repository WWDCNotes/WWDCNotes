{"metadata":{"role":"sampleCode","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC24","title":"Consume noncopyable types in Swift"},"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10170","overridingTitle":"Watch Video"},"kind":"sampleDownload"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10170-Consume-noncopyable-types-in-Swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10170-consume-noncopyable-types-in-swift"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"abstract":[{"text":"Get started with noncopyable types in Swift. Discover what copying means in Swift, when you might want to use a noncopyable type, and how value ownership lets you state your intentions clearly.","type":"text"}],"kind":"article","primaryContentSections":[{"content":[{"level":1,"text":"Copying","anchor":"Copying","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"By default, when you copy a variable, you‚Äôre copying its contents","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"For value types, the contents are the actual data that makes up the instance"}],"type":"paragraph"}]}]},{"code":["struct Player { ... }","let player1 = Player(icon: \"üê∏\")","var player2 = player1","player2.icon = \"üöö\" \/\/ player1.icon is still \"üê∏\""],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For reference types, the contents are a managed reference, so the reference is copied, not the object itself"}]},{"items":[{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Shallow","type":"text"}]},{"type":"text","text":" copy by default"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"code":["class PlayerClass { ... }","let player1 = PlayerClass(\"üê∏\")","let player2 = player1","player2.icon = \"üöö\" \/\/ player1.icon is \"üöö\""],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can make reference types perform an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"explicit"}]},{"type":"text","text":" deep copy by defining a custom initializer"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Does not control whether Swift can make "},{"inlineContent":[{"type":"text","text":"automatic"}],"type":"emphasis"},{"type":"text","text":" copies"}]}]}],"type":"unorderedList"}]}]},{"type":"heading","text":"Copyable","level":2,"anchor":"Copyable"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"text":"marker","type":"text"}]},{"type":"text","text":" protocol, like "},{"type":"codeVoice","code":"Sendable"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. it doesn‚Äôt have any associated requirements"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"Describes the ability for a type to be automatically copied by Swift"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Everything is "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" in Swift by default"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Types, generic parameters, protocols and associated types, boxed protocol types, etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is an assumption, since "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" types are generally easier to work with"}]}]}],"type":"unorderedList"}]}]},{"type":"heading","text":"Noncopyable types","level":1,"anchor":"Noncopyable-types"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"You can suppress the default ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" behavior by annotating your types with ","type":"text"},{"code":"~Copyable","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["struct FloppyDisk: ~Copyable { ... }"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"When copying is not supported, Swift will ","type":"text"},{"inlineContent":[{"text":"consume","type":"text"}],"type":"strong"},{"text":" the variable instead","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Can ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"optionally","type":"text"}]},{"text":" annotate variable consumption using the ","type":"text"},{"type":"codeVoice","code":"consume"},{"text":" keyword explicitly","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Reading consumed values after they‚Äôve been consumed is a compile-time error","type":"text"}]}]}],"type":"unorderedList"}]}]},{"syntax":"swift","type":"codeListing","code":["let system = FloppyDisk()","print(system) \/\/ this works","let backup = system \/\/ can also be written as `consume system`","print(system) \/\/ this produces an error: system is used after consume"]},{"type":"heading","text":"Ownership","level":2,"anchor":"Ownership"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" types by default, you don‚Äôt have to worry about ownership"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions you wrote would effectively receive a copy"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"With ","type":"text"},{"code":"~Copyable","type":"codeVoice"},{"text":", you have to declare what ownership your functions have over the ","type":"text"},{"code":"~Copyable","type":"codeVoice"},{"text":" values","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are 3 kinds of ownership, outlined below."}]},{"type":"heading","text":"Consuming","level":3,"anchor":"Consuming"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your function will ‚Äútake‚Äù the argument from the caller, and will effectively own it"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"You can mutate the argument"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Caller has no access to the value anymore","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["func format(_ disk: consuming FloppyDisk) { ... }","","let result = FloppyDisk()","format(disk)","return result \/\/ produces an error: result is consumed more than once"]},{"type":"heading","text":"Borrowing","level":3,"anchor":"Borrowing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Gives you temporary read-only access to the argument","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Similar"}],"type":"emphasis"},{"type":"text","text":" to how parameters already work by default for "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Cannot consume, or mutate, an explicitly borrowed argument","type":"text"}]}]}]},{"syntax":"swift","type":"codeListing","code":["func format(_ disk: borrowing FloppyDisk) {","    var tempDisk = disk \/\/ produces an error: disk is borrowed and cannot be consumed","}"]},{"type":"heading","text":"Mutating, or inout","level":3,"anchor":"Mutating-or-inout"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides ","type":"text"},{"inlineContent":[{"text":"temporary","type":"text"}],"type":"emphasis"},{"text":" write access to a caller-owned variable","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Can consume the parameter","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Have to reinitialize the parameter at some point before end of function scope"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["func format(_ disk: inout FloppyDisk) {","    var tempDisk = disk","    \/\/ Have to reinitialize the parameter before end of scope:","    disk = tempDisk","}"]},{"anchor":"Consumable-resources","type":"heading","text":"Consumable resources","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can mark functions as "},{"type":"codeVoice","code":"consuming"},{"type":"text","text":" to take the value for "},{"type":"codeVoice","code":"self"},{"type":"text","text":" away from callers"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Guarantees function cannot be called more than once on the same instance","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Relationship to ","type":"text"},{"code":"consuming","type":"codeVoice"},{"text":" parameters is similar to how ","type":"text"},{"code":"mutating","type":"codeVoice"},{"text":" is used to indicate an ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" reference to ","type":"text"},{"code":"self","type":"codeVoice"}],"type":"paragraph"}]}]}]}]},{"type":"codeListing","syntax":"swift","code":["struct BankTransfer: ~Copyable {","    consuming func run() {","        \/\/ Never called more than once for the same BankTransfer.","    }","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"By default, reaching the end of the ","type":"text"},{"code":"consuming","type":"codeVoice"},{"text":" function scope will destroy the instance (and call ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Can call ","type":"text"},{"type":"codeVoice","code":"discard self"},{"text":" at end of function scope to destroy without calling ","type":"text"},{"type":"codeVoice","code":"deinit"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["consuming func run() {","    ...","    \/\/ Destroy `self` without calling `deinit`:","    discard self","}"]},{"anchor":"Generics","type":"heading","text":"Generics","level":1},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Core idea: conformance constraints describe generic types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Any"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Copyable"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift 6 introduces noncopyable generics"}],"type":"paragraph"}]}]},{"anchor":"Noncopyable-generics","type":"heading","text":"Noncopyable generics","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recall: by default, every protocol inherits from "},{"code":"Copyable","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"You can now "},{"type":"emphasis","inlineContent":[{"text":"remove","type":"text"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" constraint from a protocol explicitly:"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["protocol Runnable: ~Copyable {","    consuming func run()","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Generics also have a ","type":"text"},{"inlineContent":[{"text":"default","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" constraint","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You can also remove the ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" requirement from a generic constraint:","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ This requires T to be *both* `Runnable` and `Copyable`","func execute<T>(_ t: consuming T) where T: Runnable { ... }","","\/\/\/ This requires T to be `Runnable`, but *not necessarily* `Copyable`","func execute<T>(_ t: consuming T) where T: Runnable, T: ~Copyable { ... }"]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"regular"}]},{"type":"text","text":" constraint is "},{"type":"strong","inlineContent":[{"text":"more","type":"text"}]},{"type":"text","text":" specific and "},{"type":"strong","inlineContent":[{"type":"text","text":"narrows"}]},{"type":"text","text":" the set of permitted types."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"tilde","type":"text"}]},{"type":"text","text":" constraint is "},{"type":"strong","inlineContent":[{"type":"text","text":"less"}]},{"type":"text","text":" specific and "},{"type":"strong","inlineContent":[{"text":"broadens","type":"text"}]},{"type":"text","text":" the types."}]}],"name":"Key point","style":"note"},{"anchor":"Nesting-~Copyable-values","type":"heading","text":"Nesting ~Copyable values","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"May store "},{"code":"~Copyable","type":"codeVoice"},{"type":"text","text":" values inside a class, since copying only copies a reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Or, containing type must be "},{"type":"codeVoice","code":"~Copyable"},{"type":"text","text":" itself"}],"type":"paragraph"}]}]},{"anchor":"Conditional-Copyable","type":"heading","text":"Conditional Copyable","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"You may define conditional "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" conformance on a "},{"type":"codeVoice","code":"~Copyable"},{"type":"text","text":" type using an extension"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" is a marker, no additional declarations are necessary inside such an extension"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Stores a *potentially* `~Copyable` value, so must be a class or suppress `Copyable`","struct Job<Action: Runnable & ~Copyable>: ~Copyable {","    var action: Action?","}","","\/\/\/ Whenever the contained `Action` is `Copyable`, mark `Job` as `Copyable` too:","extension Job: Copyable where Action: Copyable { }"]},{"anchor":"Extensions","type":"heading","text":"Extensions","level":1},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"By default, generic parameters in scope of the extended type are constrained to ","type":"text"},{"code":"Copyable","type":"codeVoice"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Includes "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" in a protocol"}]}]}],"type":"unorderedList"}]}]},{"type":"codeListing","syntax":"swift","code":["struct Job<Action: Runnable & ~Copyable>: ~Copyable { }","","extension Job { ... }","","\/\/ By default, equivalent to:","extension Job where Action: Copyable { ... }"]},{"anchor":"Written-By","type":"heading","text":"Written By","level":2},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"philptr"}]}],"size":1},{"content":[{"anchor":"Phil-Zakharchenko","level":3,"text":"Phil Zakharchenko","type":"heading"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/philptr","isActive":true,"type":"reference","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/philptr","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/philzet","isActive":true,"type":"reference"}]}],"size":4}],"type":"row","numberOfColumns":5},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design"],"style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"references":{"philptr":{"alt":"Profile image of Phil Zakharchenko","type":"image","identifier":"philptr","variants":[{"traits":["1x","light"],"url":"\/images\/philptr.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-415-Modern-Swift-API-Design":{"title":"Modern Swift API Design","type":"topic","abstract":[{"type":"text","text":"Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API design, with examples from new APIs like SwiftUI, Combine, and RealityKit. Whether you‚Äôre developing an app as part of a team, or you‚Äôre publishing a library for others to use, find out how to use new features of Swift to ensure clarity and correct use of your APIs."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design","url":"\/documentation\/wwdcnotes\/wwdc19-415-modern-swift-api-design","role":"sampleCode","kind":"article"},"WWDC24.jpeg":{"alt":null,"type":"image","identifier":"WWDC24.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24.jpeg"}]},"https://github.com/philptr":{"type":"link","identifier":"https:\/\/github.com\/philptr","url":"https:\/\/github.com\/philptr","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","kind":"symbol","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"url":"\/documentation\/wwdcnotes","role":"collection"},"philptr.jpeg":{"alt":null,"type":"image","identifier":"philptr.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/philptr.jpeg"}]},"WWDC24-Icon.png":{"alt":null,"type":"image","identifier":"WWDC24-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24-Icon.png"}]},"https://developer.apple.com/wwdc24/10170":{"checksum":null,"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc24\/10170","url":"https:\/\/developer.apple.com\/wwdc24\/10170"},"doc://WWDCNotes/documentation/WWDCNotes/philptr":{"abstract":[{"text":"macOS UI & Frameworks | previously AppKit @ Apple","type":"text"}],"title":"Phil Zakharchenko (5 notes)","images":[{"type":"card","identifier":"philptr.jpeg"},{"type":"icon","identifier":"philptr.jpeg"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/philptr","role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/philptr"},"WWDCNotes.png":{"alt":null,"type":"image","identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"https://":{"type":"link","identifier":"https:\/\/","url":"https:\/\/","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog"},"https://x.com/philzet":{"type":"link","identifier":"https:\/\/x.com\/philzet","url":"https:\/\/x.com\/philzet","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"title":"X\/Twitter"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","title":"WWDC24","kind":"article","abstract":[{"text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: Swift Testing, ","type":"text"},{"code":"FinanceKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"TabletopKit","type":"codeVoice"},{"type":"text","text":", and more."}],"url":"\/documentation\/wwdcnotes\/wwdc24","role":"collectionGroup"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!"}}}