{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10173-Analyze-heap-memory"},"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc24\/10173","overridingTitle":"Watch Video","isActive":true}},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"name":"Heap memory","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Any memory allocated by ","type":"text"},{"type":"codeVoice","code":"malloc"},{"text":", either directly or indirectly","type":"text"}]}]},{"text":"Measurement","level":1,"anchor":"Measurement","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"At startup, a process gets its own empty address space of virtual memory","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"System loads main executable, libraries, frameworks, and other read-only resources","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"At runtime, a process uses the "},{"type":"strong","inlineContent":[{"type":"text","text":"stack"}]},{"type":"text","text":" for "},{"type":"emphasis","inlineContent":[{"text":"local","type":"text"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"text":"temporary","type":"text"}]},{"type":"text","text":" variables"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"heap"}],"type":"strong"},{"text":" is used at runtime for ","type":"text"},{"inlineContent":[{"type":"text","text":"dynamic"}],"type":"emphasis"},{"text":" and other types of ","type":"text"},{"inlineContent":[{"type":"text","text":"long-lived"}],"type":"emphasis"},{"text":" memory","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Focus of this session"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"identifier":"process-memory","type":"image"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Heap consists of multiple "},{"type":"strong","inlineContent":[{"text":"regions","type":"text"}]},{"type":"text","text":" as well"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each region is broken up into "},{"type":"strong","inlineContent":[{"type":"text","text":"heap allocations"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Each of them is made up of 16KB "},{"type":"strong","inlineContent":[{"type":"text","text":"memory pages"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Note: generally, the memory page size is SoC dependent","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Individual allocations can be bigger or smaller"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Memory pages can be of 3 types:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Clean","type":"text"}]},{"type":"text","text":" pages are memory that hasn’t been written to"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Allocated but unused","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Files mapped read-only from disk","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Dirty","type":"text"}]},{"type":"text","text":" pages have been written to recently by the process"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Can be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"swapped"}]},{"type":"text","text":" under memory pressure"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Swapped"}]},{"text":" pages are memory compressed or written to disk","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When needed, can be decompressed or faulted from disk again"}]}]}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"Only "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dirty"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"swapped"}]},{"type":"text","text":" pages count towards "},{"type":"strong","inlineContent":[{"type":"text","text":"memory footprint"}]}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"identifier":"heap-breakdown","type":"image"}],"type":"paragraph"},{"text":"malloc","level":2,"anchor":"malloc","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"Allow memory to outlive current scope until ","type":"text"},{"type":"codeVoice","code":"free"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"16-byte minimum allocation size"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Most small allocations are 0’ed when ","type":"text"},{"code":"free","type":"codeVoice"},{"text":"d","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Debugging features","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Stack logging","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Track when memory was allocated"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enabled in Scheme Diagnostics tab in Xcode","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"Xcode memory report"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shows footprint over time"}]}]},{"content":[{"inlineContent":[{"text":"Does not show causes for memory footprint growth","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory Graph Debugger"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Useful for focusing on a specific allocation","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Includes backtraces for each allocation when ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":" stack logging is enabled","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Located in Xcode debug bar"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"CLI","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leaks"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"heap","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"vmmap"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"malloc_history","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Instruments","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allocations"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"History of all allocation and "},{"type":"codeVoice","code":"free"},{"type":"text","text":" events over time"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Leaks"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Detects memory leaks"}],"type":"paragraph"}]}]}]}]}]}]}]}],"type":"unorderedList"},{"text":"Transient growth","level":1,"anchor":"Transient-growth","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Memory spikes are one type of transient growth","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Can mean memory pressure and termination of the process"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Can cause fragmentation in heap memory"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allocations template in Instruments is useful for diagnosing memory spikes","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"image","identifier":"transient-memory-growth"}],"type":"paragraph"},{"text":"Autorelease Pools","level":2,"anchor":"Autorelease-Pools","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Can be a common reason for memory spikes","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Used by Objective-C to extend object lifetimes","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Autorelease pools delay release of return values until later","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Calling into Objective-C APIs from Swift can produce autorelease pools"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A loop enclosed in an autorelease pool can autorelease a lot of objects"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Lots of objects will be released at once, when the pool is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"drained"}]}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Could define a local autorelease pool for each iteration of the loop"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","code":["\/\/ The outer autorelease pool can autorelease a lot of objects:","autoreleasepool {","    for _ in 1...1000 {","        \/\/ Autoreleases into nested pool, preventing outer pool from bloating.","        autoreleasepool {","            print(\"Now is \\(Date.now)\")","        }","    }","}"],"type":"codeListing"},{"text":"Persistent growth","level":1,"anchor":"Persistent-growth","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Memory that doesn’t get deallocated","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Increasing footprint over time"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In Instruments, use the Mark Generation button to break down memory growth by timespan","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subsequent generations collect persistent allocations made after the previous generation"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Snapshots can be viewed in Memory Graph Debugger"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"image","identifier":"persistent-memory-growth"}],"type":"paragraph"},{"text":"Memory leaks","level":1,"anchor":"Memory-leaks","type":"heading"},{"text":"Reachability","level":2,"anchor":"Reachability","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Memory must be reachable from somewhere in program to be used in future"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"3 kinds of memory on the heap:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Useful","type":"text"}]},{"type":"text","text":" memory is reachable using non-weak references and can be used again"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Abandoned","type":"text"}],"type":"strong"},{"text":" memory is reachable but ","type":"text"},{"inlineContent":[{"type":"text","text":"won’t"}],"type":"emphasis"},{"text":" be used again","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Excessive caching or singletons"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Still counts towards the footprint"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Leaked"}],"type":"strong"},{"text":" memory is unreachable and can’t ever be used again","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Loss of a pointer through a manually managed allocation"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A reference cycle"}],"type":"paragraph"}]}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Leaked memory can be identified using Memory Graph Debugger"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Marked automatically"}]}]}]}]}],"type":"unorderedList"},{"text":"Closure context","level":2,"anchor":"Closure-context","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Swift closures capture values by allocating memory on the heap"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Closure metadata shows up as ","type":"text"},{"code":"[capture]","type":"codeVoice"},{"text":" – names are not included","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Captured references are "},{"type":"codeVoice","code":"strong"},{"type":"text","text":" by default"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If this is a cause for a leak, use ","type":"text"},{"code":"weak","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"unowned","type":"codeVoice"},{"text":" instead","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Runtime speed","level":1,"anchor":"Runtime-speed","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducing memory can improve performance"}]}]}],"type":"unorderedList"},{"text":"Weak references","level":2,"anchor":"Weak-references","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Always valid to use"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Always an optional","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Come with overhead: weak reference storage table needs to be allocated","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Unowned references","level":2,"anchor":"Unowned-references","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Force-unwrapped ","type":"text"},{"code":"weak","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Non-optional and constant","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"More efficient than "},{"code":"weak","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Not always valid to use","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Destination won’t be deallocated while an ","type":"text"},{"code":"unowned","type":"codeVoice"},{"text":" reference exists","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" if unknown how long destination will live"}]}]}]}]}],"type":"unorderedList"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"-","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"weak"}]}],[{"type":"paragraph","inlineContent":[{"code":"unowned","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Accessing when destination has been deinitialized"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"text":" (safe)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Crash"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Memory cost","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"32 bytes per destination"}]}],[{"type":"paragraph","inlineContent":[{"text":"None","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Runtime cost compared to ","type":"text"},{"code":"strong","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"~10x","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~4x"}]}]]],"type":"table"},{"text":"Performance tips","level":2,"anchor":"Performance-tips","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Managing memory manually or moving to an unsafe language is not always the answer","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Turn on whole module optimization to use inlining more aggressively","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Ensure struct copies are cheap"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Use fewer ","type":"text"},{"type":"codeVoice","code":"any"},{"text":" boxes and reference types in structs","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In Objective-C code:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Turning off ARC is not always the answer: bugs can be hard to debug","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"__attribute__(objc_direct)"},{"type":"text","text":" to allow inlining"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"__attribute__(objc_externally_retained)"},{"type":"text","text":" to eliminate "},{"type":"codeVoice","code":"retain"},{"type":"text","text":" and "},{"type":"codeVoice","code":"release"},{"type":"text","text":" when parameter lifetimes are guaranteed"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"text":"Written By","level":2,"anchor":"Written-By","type":"heading"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"philptr"}]}]},{"size":4,"content":[{"anchor":"Phil-Zakharchenko","level":3,"type":"heading","text":"Phil Zakharchenko"},{"type":"paragraph","inlineContent":[{"isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/philptr","overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/philptr","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/x.com\/philzet","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/","type":"reference"}]}]}],"numberOfColumns":5,"type":"row"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"text":"Related Sessions","level":2,"anchor":"Related-Sessions","type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10106-Profile-and-optimize-your-games-memory","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10180-Detect-and-diagnose-memory-issues","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10217-Explore-Swift-performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10170-Consume-noncopyable-types-in-Swift"],"style":"list","type":"links"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"kind":"article","abstract":[{"text":"Dive into the basis for your app’s dynamic memory: the heap! Explore how to use Instruments and Xcode to measure, analyze, and fix common heap issues. We’ll also cover some techniques and best practices for diagnosing transient growth, persistent growth, and leaks in your app.","type":"text"}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc24-10173-analyze-heap-memory"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"metadata":{"title":"Analyze heap memory","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC24"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"kind":"symbol","title":"WWDC Notes","role":"collection","url":"\/documentation\/wwdcnotes"},"https://x.com/philzet":{"identifier":"https:\/\/x.com\/philzet","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"type":"link","title":"X\/Twitter","url":"https:\/\/x.com\/philzet"},"https://developer.apple.com/wwdc24/10173":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10173","type":"download","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc24\/10173"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10106-Profile-and-optimize-your-games-memory":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10106-Profile-and-optimize-your-games-memory","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10106-profile-and-optimize-your-games-memory","title":"Profile and optimize your game’s memory","abstract":[{"text":"Learn how Apple platforms calculate and allocate memory for your game. We’ll show you how to use Instruments and the Game Memory template to profile your game, take a memory graph to monitor current memory use, and analyze it using Xcode Memory Debugger and command line tools. We’ll also explore Metal resources in Metal Debugger and provide tips and tricks to further help you optimize memory usage.","type":"text"}]},"WWDC24.jpeg":{"identifier":"WWDC24.jpeg","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24.jpeg"}]},"transient-memory-growth":{"identifier":"transient-memory-growth","type":"image","alt":"A memory footprint graph depicting a typical example of transient growth.","variants":[{"traits":["1x","light"],"url":"\/images\/transient-memory-growth.jpg"}]},"philptr.jpeg":{"identifier":"philptr.jpeg","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/philptr.jpeg"}]},"WWDCNotes.png":{"identifier":"WWDCNotes.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/philptr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/philptr","type":"topic","images":[{"identifier":"philptr.jpeg","type":"card"},{"identifier":"philptr.jpeg","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"macOS UI & Frameworks | previously AppKit @ Apple"}],"title":"Phil Zakharchenko (5 notes)","url":"\/documentation\/wwdcnotes\/philptr","role":"sampleCode"},"philptr":{"identifier":"philptr","type":"image","alt":"Profile image of Phil Zakharchenko","variants":[{"traits":["1x","light"],"url":"\/images\/philptr.jpeg"}]},"persistent-memory-growth":{"identifier":"persistent-memory-growth","type":"image","alt":"A memory footprint graph depicting a typical example of persistent growth.","variants":[{"traits":["1x","light"],"url":"\/images\/persistent-memory-growth.jpg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10217-Explore-Swift-performance":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10217-Explore-Swift-performance","type":"topic","kind":"article","abstract":[{"type":"text","text":"Discover how Swift balances abstraction and performance. Learn what elements of performance to consider and how the Swift optimizer affects them. Explore the different features of Swift and how they’re implemented to further understand  the tradeoffs available that can impact performance."}],"title":"Explore Swift performance","url":"\/documentation\/wwdcnotes\/wwdc24-10217-explore-swift-performance","role":"sampleCode"},"heap-breakdown":{"identifier":"heap-breakdown","type":"image","alt":"The breakdown of the heap memory","variants":[{"traits":["1x","light"],"url":"\/images\/heap-breakdown.jpg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"kind":"article","type":"topic","title":"WWDC24","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"type":"codeVoice","code":"FinanceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"url":"\/documentation\/wwdcnotes\/wwdc24","role":"collectionGroup"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10180-Detect-and-diagnose-memory-issues":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10180-Detect-and-diagnose-memory-issues","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10180-detect-and-diagnose-memory-issues","title":"Detect and diagnose memory issues","abstract":[{"text":"Discover how you can understand and diagnose memory performance problems with Xcode. We’ll take you through the latest updates to Xcode’s tools, explore Metrics, check out the memgraph collection feature in XCTest, and learn how to catch regressions using a Performance XCTest.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10170-Consume-noncopyable-types-in-Swift":{"role":"sampleCode","abstract":[{"text":"Get started with noncopyable types in Swift. Discover what copying means in Swift, when you might want to use a noncopyable type, and how value ownership lets you state your intentions clearly.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10170-Consume-noncopyable-types-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc24-10170-consume-noncopyable-types-in-swift","title":"Consume noncopyable types in Swift"},"process-memory":{"identifier":"process-memory","type":"image","alt":"Types of memory in a running process","variants":[{"traits":["1x","light"],"url":"\/images\/process-memory.jpg"}]},"WWDC24-Icon.png":{"identifier":"WWDC24-Icon.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24-Icon.png"}]},"https://":{"identifier":"https:\/\/","titleInlineContent":[{"type":"text","text":"Blog"}],"type":"link","title":"Blog","url":"https:\/\/"},"https://github.com/philptr":{"identifier":"https:\/\/github.com\/philptr","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link","title":"GitHub","url":"https:\/\/github.com\/philptr"}}}