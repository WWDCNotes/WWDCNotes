{"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19"]]},"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video (41 min)","identifier":"https:\/\/developer.apple.com\/wwdc19\/415","isActive":true,"type":"reference"}},"abstract":[{"type":"text","text":"Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API design, with examples from new APIs like SwiftUI, Combine, and RealityKit. Whether you‚Äôre developing an app as part of a team, or you‚Äôre publishing a library for others to use, find out how to use new features of Swift to ensure clarity and correct use of your APIs."}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"The most important goal as an API designer: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Clarity at the point of use"}]},{"type":"text","text":"."}],"type":"paragraph"},{"text":"`@DynamicMemberLookup`","level":2,"type":"heading","anchor":"DynamicMemberLookup"},{"inlineContent":[{"type":"text","text":"It can be used to expose all the properties of a hidden object as if they belonged to the main object."}],"type":"paragraph"},{"syntax":"swift","code":["@dynamicMemberLookup","struct Material { ","  public var roughness: Float","  public var color: Color ","","  private var _texture: Texture ","","  public subscript<T>(","  \tdynamicMember keyPath: ReferenceWritableKeyPath<Texture, T>","  ) -> T { ","  \tget { _texture[keyPath: keyPath] }","  \tset { ","      if !isKnownUniquelyReferenced(&_texture) { ","      \t_texture = Texture (copying: _texture) ","      }","      _texture[keyPath: keyPath] = newValue ","    }","  }","}"],"type":"codeListing"},{"text":"`@PropertyWrapper`","level":2,"type":"heading","anchor":"PropertyWrapper"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Provides similar benefits to the built-in lazy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Eliminates boilerplate.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Documents semantics at the point of definition.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Property Wrappers can be seen as generic getters and setters:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Implementing a Property Wrapper ","","@propertyWrapper ","public struct LateInitialized<Value> { ","\tprivate var storage: Value?","","  public init() { ","    storage = nil ","  }","","  public var value: Value {","  \tget { ","      guard let value = storage else {","      \tfatalError(\"value has not yet been set!\") ","      } ","      return value ","    }","    set { ","      storage = newValue ","    }","  }","}"],"type":"codeListing"},{"syntax":"swift","code":["\/\/ Uses of property wrappers expand into a stored property and a computed property public ","","public struct MyType {","  @LateInitialized public var text: String ","}","","\/\/ Compiler-synthesized code üëáüèª","public struct MyType {","  var $text: LateInitialized<String> = LateInitialized<String>()","","  public var text: String { ","  \tget { $text. value } ","  \tset { $text. value = newValue }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can even pass values to the property initializer:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Defensive Copying ","","@propertyWrapper ","public struct DefensiveCopying<Value: NSCopying> {","\tprivate var storage: Value ","","  public init(initialValue value: Value) {","\t  storage = value. copy () as! Value ","  }","","  public var value: Value {","  \tget { storage } ","  \tset { ","      storage = newValue.copy() as! Value ","    }","  }","}"],"type":"codeListing"},{"syntax":"swift","code":["\/\/ Initializing the backing storage property: ","","public struct MyType { ","  @DefensiveCopying(withoutCopying: UIBezierPath())","  public var path: UIBezierPath ","}"],"type":"codeListing"},{"text":"Written By","level":2,"type":"heading","anchor":"Written-By"},{"numberOfColumns":5,"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"level":3,"anchor":"Federico-Zanetello","type":"heading","text":"Federico Zanetello"},{"inlineContent":[{"overridingTitle":"Contributed Notes","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}],"size":4}]},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"text":"Related Sessions","level":2,"type":"heading","anchor":"Related-Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-237-Building-Custom-Views-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-603-Introducing-RealityKit-and-Reality-Composer","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-721-Combine-in-Practice"],"type":"links"},{"inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc19-415-modern-swift-api-design"]}],"sections":[],"metadata":{"role":"sampleCode","modules":[{"name":"WWDC Notes"}],"title":"Modern Swift API Design","roleHeading":"WWDC19"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-237-Building-Custom-Views-with-SwiftUI":{"kind":"article","type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-237-building-custom-views-with-swiftui","title":"Building Custom Views with SwiftUI","abstract":[{"type":"text","text":"Learn how to build custom views and controls in SwiftUI with advanced composition, layout, graphics, and animation. See a demo of a high performance, animatable control and watch it made step by step in code. Gain a deeper understanding of the layout system of SwiftUI."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-237-Building-Custom-Views-with-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"url":"\/documentation\/wwdcnotes\/zntfdr","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","title":"Federico Zanetello (332 notes)","type":"topic","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-226-Data-Flow-Through-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","kind":"article","type":"topic","abstract":[{"text":"SwiftUI was built from the ground up to let you write beautiful and correct user interfaces free of inconsistencies. Learn how to connect your data as dependencies while keeping the UI fully predictable and error free. Familiarize yourself with SwiftUI‚Äôs powerful data flow tools and understand what the best tool is for each situation.","type":"text"}],"role":"sampleCode","title":"Data Flow Through SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc19-226-data-flow-through-swiftui"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection"},"WWDC19.jpeg":{"alt":null,"type":"image","identifier":"WWDC19.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC19.jpeg"}]},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","type":"link","identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders":{"kind":"article","title":"Write a DSL in Swift using result builders","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders","url":"\/documentation\/wwdcnotes\/wwdc21-10253-write-a-dsl-in-swift-using-result-builders","abstract":[{"type":"text","text":"Some problems are easier to solve by creating a customized programming language, or ‚Äúdomain-specific language.‚Äù While creating a DSL traditionally requires writing your own compiler, you can instead use result builders with Swift 5.4 to make your code both easier to read and maintain. We‚Äôll take you through best practices for designing a custom language for Swift: Learn about result builders and trailing closure arguments, explore modifier-style methods and why they work well, and discover how you can extend Swift‚Äôs normal language rules to turn Swift into a DSL."}]},"https://developer.apple.com/wwdc19/415":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc19\/415","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc19\/415"},"zntfdr":{"alt":"Profile image of Federico Zanetello","type":"image","identifier":"zntfdr","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19":{"url":"\/documentation\/wwdcnotes\/wwdc19","images":[{"identifier":"WWDC19-Icon.png","type":"icon"},{"identifier":"WWDC19.jpeg","type":"card"}],"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19","abstract":[{"type":"text","text":"Xcode 11, Swift 5.1, iOS 13, macOS 10.15 (Catalina), tvOS 13, watchOS 6."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"Combine","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Core Haptics","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Create ML","type":"codeVoice"},{"text":", and more.","type":"text"}],"title":"WWDC19","role":"collectionGroup"},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","type":"link","identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-603-Introducing-RealityKit-and-Reality-Composer":{"title":"Introducing RealityKit and Reality Composer","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-603-Introducing-RealityKit-and-Reality-Composer","type":"topic","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-603-introducing-realitykit-and-reality-composer","abstract":[{"text":"Architected for AR, RealityKit provides developers access to world-class capabilities for rendering, animation, physics, and spatial audio. See how RealityKit reimagines the traditional 3D engine to make AR development faster and easier for developers than ever before. Understand the building blocks of developing RealityKit based apps and games, and learn about prototyping and producing content for AR experiences with Reality Composer.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-721-Combine-in-Practice":{"abstract":[{"text":"Expand your knowledge of Combine, Apple‚Äôs new unified, declarative framework for processing values over time. Learn about how to correctly handle errors, schedule work and integrate Combine into your app today.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc19-721-combine-in-practice","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-721-Combine-in-Practice","title":"Combine in Practice"},"WWDC19-Icon.png":{"alt":null,"type":"image","identifier":"WWDC19-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC19-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-216-SwiftUI-Essentials":{"title":"SwiftUI Essentials","abstract":[{"type":"text","text":"Take your first deep-dive into building an app with SwiftUI. Learn about Views and how they work. From basic controls to sophisticated containers like lists and navigation stacks, SwiftUI enables the creation of great user interfaces, faster and more easily. See how basic controls like Button are both simple yet versatile. Discover how to compose these pieces into larger, full-featured user interfaces that facilitate building great apps with SwiftUI. Build your SwiftUI skills as you learn the essentials of Apple‚Äôs new declarative framework."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-216-swiftui-essentials","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials"},"WWDCNotes.png":{"alt":null,"type":"image","identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"zntfdr.jpeg":{"alt":null,"type":"image","identifier":"zntfdr.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]}}}