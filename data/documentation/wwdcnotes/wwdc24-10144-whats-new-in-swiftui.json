{"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc24-10144-whats-new-in-swiftui"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10144-Whats-new-in-SwiftUI"},"primaryContentSections":[{"kind":"content","content":[{"text":"Key takeaways","type":"heading","level":2,"anchor":"Key-takeaways"},{"type":"paragraph","inlineContent":[{"type":"text","text":"✨ Refresh your apps with new styles"}]},{"type":"paragraph","inlineContent":[{"text":"⌨️ Add windowing and input capabilities","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"⌚️ Bring live activities to watchOS","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"⛰️ Create immersive experiences","type":"text"}]},{"text":"Presenters","type":"heading","level":2,"anchor":"Presenters"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sam Lazarus, SwiftUI Engineer"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Sommer Panage, SwiftUI Engineer","type":"text"}]}]}],"type":"unorderedList"},{"text":"TabView and .sidebarAdaptable","type":"heading","level":2,"anchor":"TabView-and-sidebarAdaptable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The TabView now has type-safe syntax, and it can change to be a sidebar using the "},{"code":".tabViewStyle(.sidebarAdaptable)","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The tab bar is customizable, so the user can change the tabs in the tabbar."},{"type":"text","text":" "},{"type":"text","text":"This is done by specifying the "},{"code":".customizationID","type":"codeVoice"},{"type":"text","text":" modifier to the tabs."}]},{"code":["import SwiftUI","","struct KaraokeTabView: View {","    @State var customization = TabViewCustomization()","    ","    var body: some View {","        TabView {","            Tab(\"Parties\", image: \"party.popper\") {","                PartiesView(parties: Party.all)","            }","            .customizationID(\"karaoke.tab.parties\")","            Tab(\"Planning\", image: \"pencil.and.list.clipboard\") {","                PlanningView()","            }","            .customizationID(\"karaoke.tab.planning\")","            Tab(\"Attendance\", image: \"person.3\") {","                AttendanceView()","            }","            .customizationID(\"karaoke.tab.attendance\")","            Tab(\"Song List\", image: \"music.note.list\") {","                SongListView()","            }","            .customizationID(\"karaoke.tab.songlist\")","        }","        .tabViewStyle(.sidebarAdaptable)","        .tabViewCustomization($customization)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Improve your tab and sidebar experience on iPad”"}]},{"text":"Presentation sizing","type":"heading","level":2,"anchor":"Presentation-sizing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is now possible to use the same sizes for sheets in SwiftUI as in UIKit using the "},{"code":".presentationSizing","type":"codeVoice"},{"type":"text","text":" modifier."}]},{"code":["import SwiftUI","","struct AllPartiesView: View {","    @State var showAddSheet: Bool = true","    var parties: [Party] = []","    ","    var body: some View {","        PartiesGridView(parties: parties, showAddSheet: $showAddSheet)","            .sheet(isPresented: $showAddSheet) {","                AddPartyView()","                    .presentationSizing(.form)","            }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Zoom transition","type":"heading","level":2,"anchor":"Zoom-transition"},{"type":"paragraph","inlineContent":[{"text":"A new zoom navigation transition has been added. It makes the destination zoom out from the ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["import SwiftUI","","struct PartyView: View {","    var party: Party","    @Namespace() var namespace","    ","    var body: some View {","        NavigationLink {","            PartyDetailView(party: party)","                .navigationTransition(.zoom(","                    sourceID: party.id, in: namespace))","        } label: {","            Text(\"Party!\")","        }","        .matchedTransitionSource(id: party.id, in: namespace)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Enhance your UI animations and transitions”","type":"text"}]},{"text":"Controls","type":"heading","level":2,"anchor":"Controls"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Controls are a new type of widget that works as buttons or toggles and lives in the control center, on the lock screen and can be activated with the Action button."}]},{"code":["import WidgetKit","import SwiftUI","","struct StartPartyControl: ControlWidget {","    var body: some ControlWidgetConfiguration {","        StaticControlConfiguration(","            kind: \"com.apple.karaoke_start_party\"","        ) {","            ControlWidgetButton(action: StartPartyIntent()) {","                Label(\"Start the Party!\", systemImage: \"music.mic\")","                Text(PartyManager.shared.nextParty.name)","            }","        }","    }","}","","\/\/ Model code","","class PartyManager {","    static let shared = PartyManager()","    var nextParty: Party = Party(name: \"WWDC Karaoke\")","}","","struct Party {","    var name: String","}","","\/\/ AppIntent","","import AppIntents","","struct StartPartyIntent: AppIntent {","    static let title: LocalizedStringResource = \"Start the Party\"","    ","    func perform() async throws -> some IntentResult {","        return .result()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Access your app’s controls across the system”","type":"text"}]},{"text":"SwiftCharts improvements","type":"heading","level":2,"anchor":"SwiftCharts-improvements"},{"type":"paragraph","inlineContent":[{"text":"SwiftCharts has gotten improvements around “Function plotting” and “Vectorized plots”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Swift Charts: Vectorized and function plots”","type":"text"}]},{"text":"Dynamic table columns","type":"heading","level":2,"anchor":"Dynamic-table-columns"},{"type":"paragraph","inlineContent":[{"text":"A new ","type":"text"},{"code":"TableColumnForEach","type":"codeVoice"},{"text":" lets you have a dynamic number of columns.","type":"text"}]},{"code":["import SwiftUI","","struct SongCountsTable: View {","    var body: some View {","        Table(Self.guestData) {","            \/\/ A static column for the name","            TableColumn(\"Name\", value: \\.name)","            ","            TableColumnForEach(Self.partyData) { party in","                TableColumn(party.name) { guest in","                    Text(guest.songsSung[party.id] ?? 0, format: .number)","                }","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Mesh gradients","type":"heading","level":2,"anchor":"Mesh-gradients"},{"type":"paragraph","inlineContent":[{"text":"The new mesh gradients are created “by interpolating between points on a grid of colors”.","type":"text"}]},{"code":["import SwiftUI","","struct MyMesh: View {","    var body: some View {","        MeshGradient(","            width: 3,","            height: 3,","            points: [","                .init(0, 0), .init(0.5, 0), .init(1, 0),","                .init(0, 0.5), .init(0.3, 0.5), .init(1, 0.5),","                .init(0, 1), .init(0.5, 1), .init(1, 1)","            ],","            colors: [","                .red, .purple, .indigo,","                .orange, .cyan, .blue,","                .yellow, .green, .mint","            ]","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Document Group Launch Scene","type":"heading","level":2,"anchor":"Document-Group-Launch-Scene"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"code":"DocumentGroupLaunchScene","type":"codeVoice"},{"type":"text","text":" lets you easily create a launch screen for a document based app. It has a header and below the header are the file picker."}]},{"code":["DocumentGroupLaunchScene(\"Your Lyrics\") {","    NewDocumentButton()","    Button(\"New Parody from Existing Song\") {","        \/\/ Do something!","    }","} background: {","    PinkPurpleGradient()","} backgroundAccessoryView: { geometry in","    MusicNotesAccessoryView(geometry: geometry)","         .symbolEffect(.wiggle(.rotational.continuous()))","} overlayAccessoryView: { geometry in","    MicrophoneAccessoryView(geometry: geometry)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Evolve your document launch experience”"}]},{"text":"Animation presets for SF Symbols","type":"heading","level":2,"anchor":"Animation-presets-for-SF-Symbols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There three new animation presets for SF Symbols:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Wiggle: Oscillates a symbol in any direction or angle to draw attention"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Breathe: Smoothly scales a symbol up and down to indicate ongoing activity"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Rotate: S pins some parts of a symbol around a designated anchor point.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some existing presets has been improved:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Repalce: Now prefers a new MagicReplace behavior, which smoothly animate badges and slashes","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “What’s new in SF Symbols”","type":"text"}]},{"text":"More customizable windows on macOS","type":"heading","level":2,"anchor":"More-customizable-windows-on-macOS"},{"type":"paragraph","inlineContent":[{"text":"There is a new ","type":"text"},{"code":".plain","type":"codeVoice"},{"text":" window style, which removes the default window chrome:","type":"text"}]},{"code":["Window(\"Lyric Preview\", id: \"lyricPreview\") {","    LyricPreview()","}","  .windowStyle(.plain)","  .windowLevel(.floating)","  .defaultWindowPlacement { content, context in","      let displayBounds = context.defaultDisplay.visibleRect","      let contentSize = content.sizeThatFits(.unspecified)","      return topPreviewPlacement(size: contentSize, bounds: displayBounds)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is also a new "},{"type":"codeVoice","code":"WindowDragGesture"},{"type":"text","text":" which lets you move a window around, even if it has no default window chrome:"}]},{"code":["Text(currentLyric)","    .background(.thinMaterial, in: .capsule)","    .gesture(WindowDragGesture())"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is also a new scene for utility windows."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Tailor macOS windows with SwiftUI”"}]},{"text":"Push window action","type":"heading","level":3,"anchor":"Push-window-action"},{"type":"paragraph","inlineContent":[{"text":"A new environment value for pushing a window has been added. It enables you to open a window and hide the originating window:","type":"text"}]},{"code":["struct EditorView: View {","    @Environment(\\.pushWindow) private var pushWindow","    ","    var body: some View {","        Button(\"Play\", systemImage: \"play.fill\") {","            pushWindow(id: \"lyric-preview\")","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Work with windows in SwiftUI”","type":"text"}]},{"text":"Custom hover effects on visionOS","type":"heading","level":2,"anchor":"Custom-hover-effects-on-visionOS"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is now possible to create custom hover effects for views when a user looks at them in visionOS:"}]},{"code":["struct ProfileButtonStyle: ButtonStyle {","    func makeBody(configuration: Configuration) -> some View {","        configuration.label","            .background(.thinMaterial)","            .hoverEffect(.highlight)","            .clipShape(.capsule)","            .hoverEffect { effect, isActive, _ in","                effect.scaleEffect(isActive ? 1.05 : 1.0)","            }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Modifier key alternates","type":"heading","level":2,"anchor":"Modifier-key-alternates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For buttons in the main menu of a macOS app, you can now add a "},{"type":"codeVoice","code":".modifierKeyAlternate"},{"type":"text","text":" which lets you add an alternative action for the button, if a modifier key is pressed."}]},{"code":["Button(\"Preview Lyrics in Window\") {","    \/\/ show preview in window","}",".modifierKeyAlternate(.option) {","    Button(\"Preview Lyrics in Full Screen\") {","        \/\/ show preview in full screen","    }","}",".keyboardShortcut(\"p\", modifiers: [.shift, .command])"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to listen for changes in modifier keys:"}]},{"code":["var body: some View {","    LyricLine()","        .overlay(alignment: .top) {","            if showBouncingBallAlignment {","                \/\/ Show bouncing ball alignment guide","            }","        }","        .onModifierKeysChanged(mask: .option) {","            showBouncingBallAlignment = !$1.isEmpty","        }","}"],"type":"codeListing","syntax":"swift"},{"text":"Pointer style","type":"heading","level":2,"anchor":"Pointer-style"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Is it now possible to customize the style of the pointer\/cursor like a resizing pointer, drag pointer or vertical text cursor."}]},{"code":["ForEach(resizeAnchors) { anchor in","    ResizeHandle(anchor: anchor)","         .pointerStyle(.frameResize(position: anchor.position))","}"],"type":"codeListing","syntax":"swift"},{"text":"Apple Pencil double-tap and squeeze","type":"heading","level":2,"anchor":"Apple-Pencil-double-tap-and-squeeze"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In iPadOS 17.5, SwiftUI got support for double-tap and squeeze:"}]},{"code":["var body: some View {","    LyricsEditorView()","        .onPencilSqueeze { phase in","            if preferredAction == .showContextualPalette, case let .ended(value) = phase {","                if let anchorPoint = value.hoverPose?.anchor {","                    lyricDoodlePaletteAnchor = .point(anchorPoint)","                }","                lyricDoodlePalettePresented = true","            }","       }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Squeeze the most out of Apple Pencil”"}]},{"text":"Live activities on watchOS","type":"heading","level":2,"anchor":"Live-activities-on-watchOS"},{"type":"paragraph","inlineContent":[{"text":"No work is required to make current live activities show up on watchOS.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There is a new ","type":"text"},{"code":"small","type":"codeVoice"},{"text":" value for ","type":"text"},{"code":".supplementalActivityFamily","type":"codeVoice"},{"text":" which fits the watch:","type":"text"}]},{"code":["struct KaraokeLyricActivity: Widget {","    var body: some WidgetConfiguration {","        ...","    }","    .supplementalActivityFamily([.small, .medium])","}","","struct LyricView: View {","    @Environment(\\.activityFamily) private var activityFamily","    var context: ActivityViewContext<KaraokeLiveAttributes>","","    var body: some View {","        switch activityFamily {","        case .small: WatchLyricView(context)","        case .medium: MultiLineLyricView(context)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Double tap on watchOS","type":"heading","level":2,"anchor":"Double-tap-on-watchOS"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":".handGestureShortcut"},{"text":" modifier has beed added to enable you to respond to double taps:","type":"text"}]},{"code":["struct KaraokeLyricActivity: Widget {","    var body: some WidgetConfiguration {","        ActivityConfiguration(","            for: KaraokeLiveActivityAttributes.self)","        ) { context in","            HStack {","                LyricView()","                Button(\"Next\", intent: LyricIntent(lyrics: lyrics))","                    .handGestureShortcut(.primaryAction)","            }","        }","        .supplementalActivityFamily([.small, .medium])","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"New formats for dates in `Text`","type":"heading","level":2,"anchor":"New-formats-for-dates-in-Text"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Text"},{"type":"text","text":" now supports formatting a date in new ways like date reference (shown in exsample), date offset and timers:"}]},{"code":["Text(.currentDate, format: .reference(to: nextSongDate))","\/\/ Shows \"in 8 minutes\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"They can be customized for their components and adapt to the size of their container."}]},{"text":"Widget relevances","type":"heading","level":2,"anchor":"Widget-relevances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The system can now more intelligently show up widgets in smart stacks if you specify relevancy:"}]},{"code":["func relevances() async -> WidgetRelevances<Void> {","    let dateEntries = nextKaraikeDates.map {","        WidgetRelevanceEntry(context: .date($0))","    }","    let locationEntries = favoriteKaraokeVenues.map {","        WidgetRelevanceEntry(context: .location($0))","    }","    return WidgetRelevances(dateEntries + locationEntries)","}"],"type":"codeListing","syntax":"swift"},{"text":"Containers","type":"heading","level":2,"anchor":"Containers"},{"type":"paragraph","inlineContent":[{"text":"With the new API ","type":"text"},{"code":"ForEach(subviewOf:)","type":"codeVoice"},{"text":", it is now possible to create custom containers that have the same capabilities like SwiftUI’s List and Picker, and mix static and dynamic content.","type":"text"}]},{"code":["struct DisplayBoard<Content: View>: View {","  @ViewBuilder var content: Content","","  var body: some View {","    DisplayBoardCardLayout {","      ForEach(subviewOf: content) { subview in","        CardView {","          subview","        }","      }","    }","    .background { BoardBackgroundView() }","  }","}","","DisplayBoard {","  Text(\"Scrolling in the Deep\")","  Text(\"Born to Build & Run\")","  Text(\"Some Body Like View\")","","  ForEach(songsFromSam) { song in","    Text(song.title)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Demystify SwiftUI Containers”","type":"text"}]},{"text":"Ease of use","type":"heading","level":2,"anchor":"Ease-of-use"},{"text":"Simpler EnvironmentValue properties","type":"heading","level":3,"anchor":"Simpler-EnvironmentValue-properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"No need to make full conformance to "},{"type":"codeVoice","code":"EnvironmentKey"},{"type":"text","text":". Now there is an @Entry macro:"}]},{"code":["extension EnvironmentValues {","  @Entry var karaokePartyColor: Color = .purple","}","","extension FocusValues {","  @Entry var lyricNote: String? = nil","}","","extension Transaction {","  @Entry var animatePartyIcons: Bool = false","}","","extension ContainerValues {","  @Entry var displayBoardCardStyle: DisplayBoardCardStyle = .bordered","}"],"type":"codeListing","syntax":"swift"},{"text":"Add more info to accessibility labels","type":"heading","level":3,"anchor":"Add-more-info-to-accessibility-labels"},{"type":"paragraph","inlineContent":[{"text":"It is now possible to add more info to accessibility labels without overriding the label provided by the framework:","type":"text"}]},{"code":["SongView(song)","  .accessibilityElement(children: .combine)","  .accessibilityLabel { label in","    if let rating = song.rating {","      Text(rating)","    }","    label","  }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Catch up on accessibility in SwiftUI”"}]},{"text":"State in previews","type":"heading","level":3,"anchor":"State-in-previews"},{"type":"paragraph","inlineContent":[{"text":"With the new ","type":"text"},{"type":"codeVoice","code":"@Previewable"},{"text":" macro, it is possible to have ","type":"text"},{"type":"codeVoice","code":"@State"},{"text":" inside a preview:","type":"text"}]},{"code":["#Preview {","   @Previewable @State var showAllSongs = true","   Toggle(\"Show All songs\", isOn: $showAllSongs)","}"],"type":"codeListing","syntax":"swift"},{"text":"Text selection","type":"heading","level":3,"anchor":"Text-selection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TextField"},{"type":"text","text":" now has a "},{"type":"codeVoice","code":"selection"},{"type":"text","text":" which lets you hook up the selection in the field to a "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" property:"}]},{"code":["struct LyricView: View {","  @State private var selection: TextSelection?","  ","  var body: some View {","    TextField(\"Line \\(line.number)\", text: $line.text, selection: $selection)","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"Search field focused","type":"heading","level":3,"anchor":"Search-field-focused"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":".searchFocused"},{"type":"text","text":" modifier, lets you control if a search field has focus:"}]},{"code":["struct SongSearchView: View {","  @FocusState private var isSearchFieldFocused: Bool","  ","  @State private var searchText = \"\"","  @State private var isPresented = false","","  var body: some View {","    NavigationSplitView {","      Text(\"Power Ballads\")","      Text(\"Show Tunes\")","    } detail: {","      \/\/ ...","      if !isSearchFieldFocused {","        Button(\"Find another song\") {","          isSearchFieldFocused = true","        }","      }","    }","    .searchable(text: $searchText, isPresented: $isPresented)","    .searchFocused($isSearchFieldFocused)","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"Text field suggestions","type":"heading","level":3,"anchor":"Text-field-suggestions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a "},{"type":"codeVoice","code":"TextField"},{"type":"text","text":" it is now possible to supply suggestions, which will show as a dropdown from the field:"}]},{"code":["TextField(\"Line \\(line.number)\", text: $line.text)","  .textInputSuggestions {","    ForEach(lyricCompletions) {","      Text($0.attributedCompletion)","        .textInputCompletion($0.text)","    }","  }"],"type":"codeListing","syntax":"swift"},{"text":"Mixing of colors","type":"heading","level":3,"anchor":"Mixing-of-colors"},{"code":["Color.red.mix(with: .purple, by: 0.2)","Color.red.mix(with: .purple, by: 0.5)","Color.red.mix(with: .purple, by: 0.8)"],"type":"codeListing","syntax":"swift"},{"text":"Scrolling enhancements","type":"heading","level":2,"anchor":"Scrolling-enhancements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are lots of improvements to "},{"type":"codeVoice","code":"ScrollView"},{"type":"text","text":". Here are some of them:"}]},{"text":"React to scroll geometry changes","type":"heading","level":3,"anchor":"React-to-scroll-geometry-changes"},{"code":["struct ContentView: View {","  @State private var showBackButton = false","","  ScrollView {","    \/\/ ...","  }","  .onScrollGeometryChange(for: Bool.self) { geometry in","    geometry.contentOffset.y < geometry.contentInsets.top","  } action: { wasScrolledToTop, isScrolledToTop in","    withAnimation {","      showBackButton = !isScrolledToTop","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"React to scroll visibility changes","type":"heading","level":3,"anchor":"React-to-scroll-visibility-changes"},{"code":["struct AutoPlayingVideo: View {","  @State private var player: AVPlayer = makePlayer()","","  var body: some View {","    VideoPlayer(player: player)","      .onScrollVisibilityChange(threshold: 0.2) { visible in","        if visible {","          player.play()","        } else {","          player.pause()","        }","      }","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"New scroll positions","type":"heading","level":3,"anchor":"New-scroll-positions"},{"code":["struct ContentView: View {","  @State private var position: ScrollPosition =","    .init(idType: Int.self)","","  var body: some View {","    ScrollView {","      \/\/ ... ","    }","    .scrollPosition($position)","    .overlay {","      FloatingButton(\"Back to Invitation\") {","        position.scrollTo(edge: .top)","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"Swift 6 language mode support","type":"heading","level":2,"anchor":"Swift-6-language-mode-support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables compile-time data-race safety. SwiftUI has improved its APIs to make it easier to adopt."}]},{"text":"View on @MainActor","type":"heading","level":3,"anchor":"View-on-MainActor"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI Views has always been evaluated on the "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" and the protocol now reflects that."}]},{"type":"paragraph","inlineContent":[{"text":"If you have annotated your ","type":"text"},{"code":"View","type":"codeVoice"},{"text":"s with ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" you can now remove that.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Migrate your app to Swift 6”","type":"text"}]},{"text":"Improved interoperability","type":"heading","level":2,"anchor":"Improved-interoperability"},{"text":"Gesture interoperability","type":"heading","level":3,"anchor":"Gesture-interoperability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All "},{"code":"UIGestureRecognizer","type":"codeVoice"},{"type":"text","text":"s can now be used in SwiftUI."}]},{"code":["struct VideoThumbnailScrubGesture: UIGestureRecognizerRepresentable {","  @Binding var progress: Double","","  func makeUIGestureRecognizer(context: Context) -> VideoThumbnailScrubGestureRecognizer {","    VideoThumbnailScrubGestureRecognizer()","  }","","  func handleUIGestureRecognizerAction(","    _ recognizer: VideoThumbnailScrubGestureRecognizer, context: Context","  ) {","    progress = recognizer.progress","  }","}","","struct VideoThumbnailTile: View {","  var body: some View {","    VideoThumbnail()","      .gesture(VideoThumbnailScrubGesture(progress: $progress))","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"SwiftUI animations in UIKit and AppKit","type":"heading","level":3,"anchor":"SwiftUI-animations-in-UIKit-and-AppKit"},{"code":["let animation = SwiftUI.Animation.spring(duration: 0.8)","","\/\/ UIKit","UIView.animate(animation) {","    view.center = endOfBracelet","}","","\/\/ AppKit","NSAnimationContext.animate(animation) {","    view.center = endOfBracelet","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Enhance your UI animations and transitions”","type":"text"}]},{"text":"visionOS","type":"heading","level":2,"anchor":"visionOS"},{"text":"Hide volume baseplate","type":"heading","level":3,"anchor":"Hide-volume-baseplate"},{"code":["struct KaraokePracticeApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","    .windowStyle(.volumetric)","    .defaultWorldScaling(.trueScale)","    .volumeBaseplateVisibility(.hidden)","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"React to viewpoint changes","type":"heading","level":3,"anchor":"React-to-viewpoint-changes"},{"code":["struct MicrophoneView: View {"," @State var micRotation: Rotation3D = .identity","    ","  var body: some View {","    Model3D(named: \"microphone\")","      .onVolumeViewpointChange { _, new in","        micRotation = rotateToFace(new)","      }","      .rotation3DEffect(micRotation)","      .animation(.easeInOut, value: micRotation)","  } ","}"],"type":"codeListing","syntax":"swift"},{"text":"Control allowed immersion levels","type":"heading","level":3,"anchor":"Control-allowed-immersion-levels"},{"code":["struct KaraokeApp: App {","  @State private var immersion: ImmersionStyle = .progressive(","    0.4...1.0, initialAmount: 0.5)","  ","  var body: some Scene {","    ImmersiveSpace(id: \"Karaoke\") {","      LoungeView()","    }","    .immersionStyle(selection: $immersion, in: immersion)","   }","}"],"type":"codeListing","syntax":"swift"},{"text":"Preferred surrounding effects","type":"heading","level":3,"anchor":"Preferred-surrounding-effects"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply effects to the surroundings (and hands)"}]},{"code":["struct LoungeView: View {","  var body: some View {","    StageView()","      .preferredSurroundingsEffect(.colorMultiply(.purple))","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Learn more in the session: “Dive deep into volumes and immersive spaces”","type":"text"}]},{"text":"Custom text renderers","type":"heading","level":2,"anchor":"Custom-text-renderers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to create custom text renderers that add effects to the text:"}]},{"code":["struct KaraokeRenderer: TextRenderer {","  func draw(","    layout: Text.Layout,","    in context: inout GraphicsContext","  ) {","    for line in layout {","      for run in line {","        var glow = context","","        glow.addFilter(.blur(radius: 8))","        glow.addFilter(purpleColorFilter)","","        glow.draw(run)","        context.draw(run)","      }","    }","  }","}","","struct LyricsView: View {","  var body: some View {","    Text(\"A Whole View World\")","      .textRenderer(KaraokeRenderer())","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more in the session: “Create custom visual effects with SwiftUI”"}]},{"text":"Written By","type":"heading","level":2,"anchor":"Written-By"},{"numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"MortenGregersen","type":"image"}]}]},{"size":4,"content":[{"level":3,"text":"Morten Bjerg Gregersen","anchor":"Morten-Bjerg-Gregersen","type":"heading"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/MortenGregersen","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"http:\/\/atterdagapps.com","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/mortengregersen","isActive":true,"type":"reference"}],"type":"paragraph"}]}],"type":"row"},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"text":"Related Sessions","type":"heading","level":2,"anchor":"Related-Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10147-Elevate-your-tab-and-sidebar-experience-in-iPadOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10145-Enhance-your-UI-animations-and-transitions","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10157-Extend-your-apps-controls-across-the-system","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10155-Swift-Charts-Vectorized-and-function-plots","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10132-Evolve-your-document-launch-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10188-Whats-new-in-SF-Symbols-6","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10148-Tailor-macOS-windows-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10149-Work-with-windows-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10152-Create-custom-hover-effects-in-visionOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10214-Squeeze-the-most-out-of-Apple-Pencil","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10146-Demystify-SwiftUI-containers","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10073-Catch-up-on-accessibility-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10169-Migrate-your-app-to-Swift-6","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10153-Dive-deep-into-volumes-and-immersive-spaces","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10151-Create-custom-visual-effects-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10068-Bring-your-Live-Activity-to-Apple-Watch"],"type":"links"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"abstract":[{"text":"Learn how you can use SwiftUI to build great apps for any Apple platform. Explore a fresh new look and feel for tabs and documents on iPadOS. Improve your window management with new windowing APIs, and gain more control over immersive spaces and volumes in your visionOS apps. We’ll also take you through other exciting refinements that help you make expressive charts, customize and layout text, and so much more.","type":"text"}],"metadata":{"modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC24","title":"What’s new in SwiftUI"},"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc24\/10144","isActive":true,"overridingTitle":"Watch Video (23 min)"},"kind":"sampleDownload"},"references":{"MortenGregersen":{"alt":"Profile image of Morten Bjerg Gregersen","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/MortenGregersen.jpeg"}],"identifier":"MortenGregersen"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10169-Migrate-your-app-to-Swift-6":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10169-migrate-your-app-to-swift-6","type":"topic","title":"Migrate your app to Swift 6","abstract":[{"text":"Experience Swift 6 migration in action as we update an existing sample app. Learn how to migrate incrementally, module by module, and how the compiler helps you identify code that’s at risk of data races.  Discover different techniques for ensuring clear isolation boundaries and eliminating concurrent access to shared mutable state.","type":"text"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10169-Migrate-your-app-to-Swift-6"},"https://developer.apple.com/wwdc24/10144":{"url":"https:\/\/developer.apple.com\/wwdc24\/10144","checksum":null,"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc24\/10144"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10149-Work-with-windows-in-SwiftUI":{"title":"Work with windows in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10149-Work-with-windows-in-SwiftUI","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10149-work-with-windows-in-swiftui","kind":"article","abstract":[{"type":"text","text":"Learn how to create great single and multi-window apps in visionOS, macOS, and iPadOS. Discover tools that let you programmatically open and close windows, adjust position and size, and even replace one window with another. We’ll also explore design principles for windows that help people use your app within their workflows."}],"role":"sampleCode"},"WWDC24-Icon.png":{"alt":null,"identifier":"WWDC24-Icon.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC24-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10151-Create-custom-visual-effects-with-SwiftUI":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10151-create-custom-visual-effects-with-swiftui","type":"topic","title":"Create custom visual effects with SwiftUI","abstract":[{"type":"text","text":"Discover how to create stunning visual effects in SwiftUI. Learn to build unique scroll effects, rich color treatments, and custom transitions. We’ll also explore advanced graphic effects using Metal shaders and custom text rendering."}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10151-Create-custom-visual-effects-with-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10152-Create-custom-hover-effects-in-visionOS":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10152-Create-custom-hover-effects-in-visionOS","title":"Create custom hover effects in visionOS","url":"\/documentation\/wwdcnotes\/wwdc24-10152-create-custom-hover-effects-in-visionos","type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how to develop custom hover effects that update views when people look at them. Find out how to build an expanding button effect that combines opacity, scale, and clip effects. Discover best practices for creating effects that are comfortable and respect people’s accessibility needs."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10188-Whats-new-in-SF-Symbols-6":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10188-whats-new-in-sf-symbols-6","type":"topic","abstract":[{"text":"Explore the latest updates to SF Symbols, Apple’s library of iconography designed to integrate seamlessly with San Francisco, the system font for all Apple platforms. Learn how the new Wiggle, Rotate, and Breathe animation presets can bring vitality to your interface. To get the most out of this session, we recommend first watching “What’s new in SF Symbols 5” from WWDC23.","type":"text"}],"title":"What’s new in SF Symbols 6","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10188-Whats-new-in-SF-Symbols-6"},"https://github.com/MortenGregersen":{"type":"link","title":"GitHub","url":"https:\/\/github.com\/MortenGregersen","identifier":"https:\/\/github.com\/MortenGregersen","titleInlineContent":[{"type":"text","text":"GitHub"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10073-Catch-up-on-accessibility-in-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10073-Catch-up-on-accessibility-in-SwiftUI","title":"Catch up on accessibility in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc24-10073-catch-up-on-accessibility-in-swiftui","type":"topic","kind":"article","abstract":[{"text":"SwiftUI makes it easy to build amazing experiences that are accessible to everyone. We’ll discover how assistive technologies understand and navigate your app through the rich accessibility elements provided by SwiftUI. We’ll also discuss how you can further customize these experiences by providing more information about your app’s content and interactions by using accessibility modifiers.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10153-Dive-deep-into-volumes-and-immersive-spaces":{"url":"\/documentation\/wwdcnotes\/wwdc24-10153-dive-deep-into-volumes-and-immersive-spaces","kind":"article","abstract":[{"type":"text","text":"Discover powerful new ways to customize volumes and immersive spaces in visionOS. Learn to fine-tune how volumes resize and respond to people moving around them. Make volumes and immersive spaces interact through the power of coordinate conversions. Find out how to make your app react when people adjust immersion with the Digital Crown, and use a surrounding effect to dynamically customize the passthrough tint in your immersive space experience."}],"role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10153-Dive-deep-into-volumes-and-immersive-spaces","title":"Dive deep into volumes and immersive spaces"},"http://atterdagapps.com":{"type":"link","title":"Blog","url":"http:\/\/atterdagapps.com","identifier":"http:\/\/atterdagapps.com","titleInlineContent":[{"type":"text","text":"Blog"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10148-Tailor-macOS-windows-with-SwiftUI":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10148-tailor-macos-windows-with-swiftui","type":"topic","abstract":[{"text":"Make your windows feel tailor-made for macOS. Fine-tune your app’s windows for focused purposes, ease of use, and to express functionality. Use SwiftUI to style window toolbars and backgrounds. Arrange your windows with precision, and make smart decisions about restoration and minimization.","type":"text"}],"title":"Tailor macOS windows with SwiftUI","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10148-Tailor-macOS-windows-with-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10146-Demystify-SwiftUI-containers":{"title":"Demystify SwiftUI containers","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10146-Demystify-SwiftUI-containers","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc24-10146-demystify-swiftui-containers","kind":"article","abstract":[{"type":"text","text":"Learn about the capabilities of SwiftUI container views and build a mental model for how subviews are managed by their containers. Leverage new APIs to build your own custom containers, create modifiers to customize container content, and give your containers that extra polish that helps your apps stand out."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10147-Elevate-your-tab-and-sidebar-experience-in-iPadOS":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10147-elevate-your-tab-and-sidebar-experience-in-ipados","type":"topic","abstract":[{"type":"text","text":"iPadOS 18 introduces a new navigation system that gives people the flexibility to choose between using a tab bar or sidebar. The newly redesigned tab bar provides more space for content and other functionality. Learn how to use SwiftUI and UIKit to enable customization features – like adding, removing and reordering tabs – to enable a more personal touch in your app."}],"title":"Elevate your tab and sidebar experience in iPadOS","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10147-Elevate-your-tab-and-sidebar-experience-in-iPadOS"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10068-Bring-your-Live-Activity-to-Apple-Watch":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10068-Bring-your-Live-Activity-to-Apple-Watch","title":"Bring your Live Activity to Apple Watch","url":"\/documentation\/wwdcnotes\/wwdc24-10068-bring-your-live-activity-to-apple-watch","type":"topic","kind":"article","abstract":[{"text":"Bring Live Activities into the Smart Stack on Apple Watch with iOS 18 and watchOS 11. We’ll cover how Live Activities are presented on Apple Watch, as well as how you can enhance their presentation for the Smart Stack. We’ll also explore additional considerations to ensure Live Activities on Apple Watch always present up-to-date information.","type":"text"}],"role":"sampleCode"},"WWDCNotes.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10132-Evolve-your-document-launch-experience":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10132-evolve-your-document-launch-experience","type":"topic","abstract":[{"text":"Make your document-based app stand out, and bring its unique identity into focus with the new document launch experience. Learn how to leverage the new API to customize the first screen people see when they launch your app. Utilize the new system-provided design, and amend it with custom actions, delightful decorative views, and impressive animations.","type":"text"}],"title":"Evolve your document launch experience","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10132-Evolve-your-document-launch-experience"},"WWDC24.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC24.jpeg"}],"identifier":"WWDC24.jpeg","alt":null},"MortenGregersen.jpeg":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/MortenGregersen.jpeg","traits":["1x","light"]}],"identifier":"MortenGregersen.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10157-Extend-your-apps-controls-across-the-system":{"url":"\/documentation\/wwdcnotes\/wwdc24-10157-extend-your-apps-controls-across-the-system","role":"sampleCode","abstract":[{"type":"text","text":"Bring your app’s controls to Control Center, the Lock Screen, and beyond. Learn how you can use WidgetKit to extend your app’s controls to the system experience. We’ll cover how you can to build a control, tailor its appearance, and make it configurable."}],"kind":"article","title":"Extend your app’s controls across the system","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10157-Extend-your-apps-controls-across-the-system","type":"topic"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!"},"https://x.com/mortengregersen":{"type":"link","title":"X\/Twitter","url":"https:\/\/x.com\/mortengregersen","identifier":"https:\/\/x.com\/mortengregersen","titleInlineContent":[{"type":"text","text":"X\/Twitter"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"url":"\/documentation\/wwdcnotes\/wwdc24","images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","title":"WWDC24","type":"topic","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"type":"codeVoice","code":"FinanceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"kind":"article","role":"collectionGroup"},"doc://WWDCNotes/documentation/WWDCNotes/MortenGregersen":{"url":"\/documentation\/wwdcnotes\/mortengregersen","role":"sampleCode","images":[{"type":"card","identifier":"MortenGregersen.jpeg"},{"type":"icon","identifier":"MortenGregersen.jpeg"}],"abstract":[{"text":"Hi 👋 I am Morten - I live in Denmark 🇩🇰","type":"text"}],"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen","title":"Morten Bjerg Gregersen (21 notes)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10155-Swift-Charts-Vectorized-and-function-plots":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10155-Swift-Charts-Vectorized-and-function-plots","title":"Swift Charts: Vectorized and function plots","url":"\/documentation\/wwdcnotes\/wwdc24-10155-swift-charts-vectorized-and-function-plots","type":"topic","kind":"article","abstract":[{"text":"The plot thickens! Learn how to render beautiful charts representing math functions and extensive datasets using function and vectorized plots in your app. Whether you’re looking to display functions common in aerodynamics, magnetism, and higher order field theory, or create large interactive heat maps, Swift Charts has you covered.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","kind":"symbol","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"role":"collection","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC Notes"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10145-Enhance-your-UI-animations-and-transitions":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10145-enhance-your-ui-animations-and-transitions","type":"topic","title":"Enhance your UI animations and transitions","abstract":[{"type":"text","text":"Explore how to adopt the zoom transition in navigation and presentations to increase the sense of continuity in your app, and learn how to animate UIKit views with SwiftUI animations to make it easier to build animations that feel continuous."}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10145-Enhance-your-UI-animations-and-transitions"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10214-Squeeze-the-most-out-of-Apple-Pencil":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10214-Squeeze-the-most-out-of-Apple-Pencil","title":"Squeeze the most out of Apple Pencil","url":"\/documentation\/wwdcnotes\/wwdc24-10214-squeeze-the-most-out-of-apple-pencil","type":"topic","kind":"article","abstract":[{"type":"text","text":"New in iOS 18, iPadOS 18, and visionOS 2, the PencilKit tool picker gains the ability to have completely custom tools, with custom attributes. Learn how to express your custom drawing experience in the tool picker using the same great tool picking experience available across the system. Discover how to access the new features of the Apple Pencil Pro, including roll angle, the squeeze gesture, and haptic feedback."}],"role":"sampleCode"}}}