{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"In this session the Apple engineer will build a fully functional trip planner from scratch.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We use annotations to mark places on the map.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And enable selection so that we can tap on each marker to learn more about that place."}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-newAnnotations","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Integrate "},{"type":"codeVoice","code":"Look Around"},{"type":"text","text":" to explore some places."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-lookAround","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Add an overlay that shows a driving route."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-overlay"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the map to display different locations and regions.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-enablingRegions"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-enablingRegions2"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another dimension to the map by enabling realistic elevation."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-enablingRealisticElevetion"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Show how to display satellite and flyover imagery as well."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Add some controls to the map, including a user location button."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-userLocationButtons"}]},{"level":1,"text":"Let’s start with a brand-new SwiftUI project","type":"heading","anchor":"Lets-start-with-a-brand-new-SwiftUI-project"},{"type":"paragraph","inlineContent":[{"text":"After removing the boilerplate code, we add ","type":"text"},{"type":"codeVoice","code":"import MapKit"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Map()"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"ContentView()"},{"text":" and this alone is already enough to show the map in the preview.","type":"text"}]},{"type":"codeListing","syntax":"Swift","code":["import SwiftUI","import MapKit","","struct ContentView: View {","    var body: some View {","        Map ()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The parking garage is right underneath the Common. Add some content to the map to mark the parking garage."}]},{"level":1,"text":"Show content on the map","type":"heading","anchor":"Show-content-on-the-map"},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-marker","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Markers can be added to the map within the MapContentBuilder closure."}]},{"type":"codeListing","syntax":"Swift","code":["extension CLLocationCoordinate2D {","    static let parking = CLLocationCoordinate2D(","        latitude: 42.354528, longitude: -71.068369","    )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"and"}]},{"type":"codeListing","syntax":"Swift","code":["import SwiftUI","import MapKit","","struct ContentView: View {","    var body: some View {","        Map () {","            Marker(\"Parking\", coordinate: .parking)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding a Marker to the map is a lot like adding a View to a List. The map has automatically framed our content by zooming in to show the Marker. Markers are used to display content at a specific coordinate on the map. The balloon shape is one of the defaults."}]},{"type":"codeListing","syntax":"Swift","code":["Map {","    Marker (\"Sign-in\", systemImage: \"figure.wave\", coordinate: signIn)","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-marker2"}]},{"type":"paragraph","inlineContent":[{"text":"Like Marker, Annotation is used to display content at a specific coordinate.","type":"text"}]},{"type":"codeListing","syntax":"Swift","code":["    Annotation(","        \"Sign-in\", ","        coordinate: signIn, ","        anchor: .bottom","    ) {","        Image(systemName: \"figure.wave\")","            .padding (4)","            .foregroundStyle(.white)","            .background (Color.indigo)","            .cornerRadius (4)","    }"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-annotations2"}]},{"type":"paragraph","inlineContent":[{"text":"Instead of a Marker’s balloon, Annotation displays a SwiftUI View.","type":"text"},{"text":"\n","type":"text"},{"text":"The content builder can be used to present an overlay content as well. Use the content builder closure to add all kinds of content to the map.","type":"text"}]},{"type":"codeListing","syntax":"Swift","code":["        MapCircle(center: islandCenter, radius: islandRadius)","            .foregroundStyle(.orange.opacity(0.75))","        ","        MapPolyline(coordinates: sidewalk)","            .stroke(.blue, linewidth: 13)","            ","        MapPolygon(coordinates: dock)","            .foregroundStyle(.purple)"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-otherContent"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will display a custom SwiftUI view for the parking spot, so we will use an Annotation to mark it, and using ZStack to compose some shapes and an image. This SwiftUI view will be displayed on the map centered right on the parking coordinate. If we’d like the view to be positioned above the coordinate instead, we can use Annotation’s anchor parameter. Specifying an anchor value of “bottom” will position the bottom of the view right on the annotation’s coordinate."}]},{"type":"codeListing","syntax":"Swift","code":["struct ContentView: View {","    var body: some View {","        Map() {","            Annotation(\"Parking\", coordinate: .parking) {","                ZStack {","                    RoundedRectangle(cornerRadius: 5)","                        .fill(.background)","                    RoundedRectangle(cornerRadius: 5)","                        .stroke(.secondary, lineWidth: 5)","                    Image(systemName: \"car\")","                        .padding(5)","                }","            }","            .annotationTitles(.hidden) \/\/ hide the title, icon only","        }","    }","}"]},{"level":1,"text":"Enabling realistic terrain elevation","type":"heading","anchor":"Enabling-realistic-terrain-elevation"},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-senseOfPlace","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can set a style using the mapStyle modifier."}]},{"type":"paragraph","inlineContent":[{"code":".mapStyle(.standard)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enable realistic elevated terrain with:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".mapStyle(.standard(elevation: .realistic))"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-standard"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The imagery map style displays a map rendered using satellite or flyover imagery."}]},{"type":"paragraph","inlineContent":[{"code":".mapStyle(.imagery(elevation: .realistic))","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-imagery"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".mapStyle(.hybrid(elevation: .realistic))"}]},{"type":"paragraph","inlineContent":[{"text":"The Hybrid map style combines imagery with roads and labels.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-hybrid"}]},{"level":1,"text":"Add a Search to the App","type":"heading","anchor":"Add-a-Search-to-the-App"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app will help us search for the places we want to visit."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-searchForPlaces","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"We add a SwiftUI file, ","type":"text"},{"type":"codeVoice","code":"BeantownButtons"},{"text":".  And add a button to search for playgrounds, and a button to search for beaches. The app will add a Marker for each search result. Tapping a button calls a search function with a simple query, either playground or beach.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["HStack {","    Button {","        search(for: \"playground\")","    } label: {","        Label(\"Playgrounds\", systemImage: \"figure.and.child.holdinghands\")","    } ","    .buttonStyle(.borderedProminent)","    ","    Button {","        search(for: \"beach\")","    } label: {","        Label(\"Beaches\", systemImage: \"beach.umbrella\")","    } ","    .buttonStyle(.borderedProminent)","}",".labelStyle(.iconOnly)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The search function uses MKLocalSearch to find places near the Boston Common parking garage, and writes the results using a binding. We add this to the new "},{"type":"codeVoice","code":"BeantownButtons"},{"type":"text","text":" view."}]},{"type":"codeListing","syntax":"swift","code":["@Binding var searchResults: [MKMapItem]","","func search(for query: String) {","    let request = MKLocalSearch.Request()","    request.naturalLanguageQuery = query","    request.resultTypes = .pointOfInterest","    request.region = MKCoordinateRegion(","        center: .parking,","        span: MKCoordinateSpan (latitudeDelta: 0.0125, longitudeDelta: 0.0125)","        )","","    Task {","        let search = MKLocalSearch(request: request)","        let response = try? await search.start()","        searchResults = response?.mapItems ?? []","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Back in the app’s main ContentView, we’ll add State to keep track of the search results."}]},{"type":"paragraph","inlineContent":[{"code":"@State private var searchResults: [MKMapItem] = []","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"When the BeantownButtons UI performs a search, it will write the results back to this state using a binding.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s add the buttons above the map at the bottom of the screen. Using safeAreaInset will make sure the app’s UI doesn’t obscure any of the content or any system-provided controls that can appear on the map, such as the Apple Maps logo and Legal link.","type":"text"},{"text":" ","type":"text"},{"text":"Put this code below the mapStyle modifier.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    .safeAreaInset(edge: .bottom) {","        HStack {","            Spacer()","            BeanTownButtons(searchResults: $searchResults)","                .padding(.top)","            Spacer()","        }","        .background(.ultraThinMaterial)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, use the content builder to add search result Markers. We are using ForEach to add a marker for each search result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add this below the "},{"type":"codeVoice","code":"annotationTitles"},{"type":"text","text":" modifier."}]},{"type":"codeListing","syntax":"swift","code":["    ForEach(searchResults, id: \\.self) { result in","        Marker(item: result)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The search results are MKMapItems, which is the type MapKit APIs like MKLocalSearch use to represent places. Markers created this way use the map item’s name for their title and use information from the map item to show an icon and tint color that represent the place. Most of these search results show as light blue beach umbrella markers, which is Marker’s automatic content and style support."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, Marker shows a map pin icon in its balloon. We can provide our own icon using an Image asset or a system image. we can also show up to three letters of text using monogram. And change the Marker’s color using the tint modifier."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Markers with custom content and tint","Map {","    Marker(\"Parking\", systemImage: \"car.fill\",","        coordinate: parking","    )","    .tint(.mint)","","    Marker(\"Foot Bridge\", monogram: \"FB\", ","        coordinate: bridge","    )","    .tint(.blue)","    ","    Marker (\"Ducklings\", image: \"DucklingAsset\",","        coordinate: ducklings","    )","    .tint(.orange)","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-customMarkers"}]},{"level":1,"text":"Display a Place or a Region","type":"heading","anchor":"Display-a-Place-or-a-Region"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-displayRegion"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The map frames content automatically."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we pan away and search for playgrounds… the map no longer automatically displays the results near the Boston Common parking spot. To display the search results after the user has interacted with the map, we need to re-set the Map’s camera position state so that the map will frame the markers…"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add state to track the position using the default automatic position that frames the content we’ve added to the map."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@State private var position: MapCameraPosition = .automatic"}]},{"type":"paragraph","inlineContent":[{"text":"And I’ll pass the binding to Map’s initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Map(position: $position) { ... }"}]},{"type":"paragraph","inlineContent":[{"text":"We use an onChange modifier to find out when the search results are updated. When they are, the camera position will be set back to automatic to make sure they’re visible.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["        .onChange(of: searchResults) {","            position = .automatic","        }"]},{"type":"paragraph","inlineContent":[{"text":"Now when performing a search, the results are all displayed even if we had panned away.","type":"text"},{"text":" ","type":"text"},{"text":"Let’s add coordinate regions for the city and for the North Shore.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension MKCoordinateRegion {","    static let boston = MKCoordinateRegion(","        center: CLLocationCoordinate2D(","            latitude: 42.360256, longitude: -71.057279),","            span: MKCoordinateSpan(latitudeDelta: 0.1, longitudeDelta: 0.1)","    )","    ","    static let northShore = MKCoordinateRegion(","        center: CLLocationCoordinate2D(","            latitude: 42.547408, longitude: -70.870085),","            span: MKCoordinateSpan(latitudeDelta: 0.5, longitudeDelta: 0.5)","    )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Switching over to the BeantownButtons UI and adding a binding for the position state."}]},{"type":"paragraph","inlineContent":[{"code":"@Binding var position: MapCameraPosition","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We add a couple of buttons, each setting the camera position to a region."},{"type":"text","text":" "},{"type":"text","text":"Pressing the City button, the Map will show Boston. When pressing the Waves button, the map will show the north shore coastline."},{"type":"text","text":"\n"},{"type":"text","text":"In BeantownButtons buttons in the bottom view have a binding to position:"}]},{"type":"codeListing","syntax":"swift","code":["    Button {","        position = .region(.boston)","    } label: {","        Label(\"Boston\", systemImage: \"building.2\")","    }","    .buttonStyle(.bordered)","        ","    Button {","        position = .region(.northShore)","    } label: {","        Label(\"North Shore\", systemImage: \"water.waves\")","    }","    .buttonStyle(.bordered)      "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Switch back to ContentView and pass a position binding to the buttons UI."}]},{"type":"paragraph","inlineContent":[{"code":"BeanTownButtons(position: $position, searchResults: $searchResults)","type":"codeVoice"}]},{"level":1,"text":"Control What the Map Displays","type":"heading","anchor":"Control-What-the-Map-Displays"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Explicit: "},{"type":"codeVoice","code":"MapCamera"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Semantic Positioning: "},{"type":"codeVoice","code":"MapCameraPosition"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes, what the Map shows is ultimately controlled by a MapCamera. The camera looks at a coordinate on the ground from a certain distance and the orientation of the camera determines what is visible in the map. MapKit takes care of the camera for us."}]},{"level":1,"text":"Position the camera: `MapCameraPosition`","type":"heading","anchor":"Position-the-camera-MapCameraPosition"},{"level":3,"text":"Control what place or region is displayed:","type":"heading","anchor":"Control-what-place-or-region-is-displayed"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"automatic","type":"text"},{"text":"\n","type":"text"},{"text":"The app uses an automatic camera position to frame content, such as search results.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"region ("},{"type":"codeVoice","code":"MKCoordinateRegion"},{"type":"text","text":")"},{"type":"text","text":"\n"},{"type":"text","text":"It uses a region position to show Boston and the North Shore."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"rect (","type":"text"},{"code":"MKMapRect","type":"codeVoice"},{"text":")","type":"text"},{"text":"\n","type":"text"},{"text":"we can specify a camera position to frame other things. Rect position is used to show an area. It simply uses a map rect to represent that area, instead of a coordinate region.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"item (","type":"text"},{"type":"codeVoice","code":"MKMapItem"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"camera (","type":"text"},{"code":"MapCamera","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"userLocation()","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using MKMapItem, we can show a particular place. If the map item represents Cape Cod Bay, MapKit will automatically zoom out so that it fits."}]},{"type":"paragraph","inlineContent":[{"code":"position = .item(.capeCodBay)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-item"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a MapCamera with a pitch angle is a great way to deliver a 3D perspective."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Camera position with an exact MapCamera configuration","position = .camera (","    MapCamera (","        centerCoordinate: CLLocationCoordinate2D(","            latitude: 42.360431, ","            longitude: -71.055930","    ), ","    distance: 980, ","    heading: 242, ","    pitch: 60","    )",")"]},{"type":"paragraph","inlineContent":[{"text":"We can supply a fallback position that will be used when the user’s location is not known, such as when location authorization has not been granted or while the device is trying to get a location fix. If we provide a binding to the camera position state, MapKit will update it when the camera position changes.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Camera position that follows the user's location","position = .userLocation(fallback: .automatic)"]},{"type":"paragraph","inlineContent":[{"text":"Here is a user location camera position. The ","type":"text"},{"code":"followsUserLocation","type":"codeVoice"},{"text":" property is true.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"position.followsUserLocation == true","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-mapCameraPosition"}]},{"type":"paragraph","inlineContent":[{"text":"If the user pans away, the camera is no longer following the user’s location. When the user interacts with the map, the camera position state is ","type":"text"},{"code":"positionedByUser","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"position.followsUserLocation == false","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"code":"position.positionedByUser == true","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-mapCameraPosition2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the app sets the camera position state, it is not "},{"code":"positionedByUser","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"code":"position.followsUserLocation == true","type":"codeVoice"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"code":"position.positionedByUser == false","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-mapCameraPosition3"}]},{"level":1,"text":"Search in the visible region","type":"heading","anchor":"Search-in-the-visible-region"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-searchInRegion"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How to get the visible region when the camera changes?"}]},{"type":"paragraph","inlineContent":[{"text":"We add state to track the region that’s visible in the map and an onMapCameraChange modifier, where we grab the visible region from the update context and stash it in our own state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"@State private var visibleRegion: MKCoordinateRegion?","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"and","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["         .onMapCameraChange { context in","            visibleRegion = context.region","        }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, the closure supplied to onMapCameraChange will be called when the user has finished interacting with the map. To have the closure called while the user is interacting with the map, we can request continuous updates by passing a frequency parameter. In addition to the region property that used here, the context also has a property for the visible map rect and one for the map camera itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Update BeantownButtons so that it will search within the region that’s visible to the user. Add the visibleRegion to the buttons."}]},{"type":"codeListing","syntax":"swift","code":["    var visibleRegion: MKCoordinateRegion?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use it in the search request:"}]},{"type":"codeListing","syntax":"swift","code":["            [...]","        request.region = visibleRegion ?? MKCoordinateRegion(","            center: .parking,","            span: MKCoordinateSpan(","                latitudeDelta: 0.0125, ","                longitudeDelta: 0.0125))","            [...]    "]},{"type":"paragraph","inlineContent":[{"text":"In ContentView, we’ll pass the visibleRegion to the buttons UI.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    BeanTownButtons(","        position: $position, ","        searchResults: $searchResults, ","        visibleRegion: visibleRegion","        )"]},{"type":"paragraph","inlineContent":[{"text":"onMapCameraChange will inform us when there’s been a change in what’s visible.","type":"text"}]},{"level":1,"text":"Interact with search results","type":"heading","anchor":"Interact-with-search-results"},{"level":2,"text":"Enable selection for Map Content","type":"heading","anchor":"Enable-selection-for-Map-Content"},{"type":"paragraph","inlineContent":[{"text":"Let’s add support for selecting a search result. Right now, there is no selection state, so the markers are not selectable. To enable selection, we’ll just add a selection binding to our Map.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@State private var selectedResult: MKMapItem?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The balloon animates to show that it’s selected. Each marker that represents a map item is now selectable. The Parking Spot annotation doesn’t represent a map item, so it is not selectable."},{"type":"text","text":"\n"},{"type":"text","text":"If we want to support selection for Markers and Annotations that don’t necessarily have the same type of identity, we can simply tag them. This works the same way it does when managing selection with Picker and List. Here, the selectedTag state is an Int. Each marker is tagged with an Int, so the binding enables selection for both of them. When using tag to enable selection, we can use any type conforming to hashable for the selection state."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-selectionTag","type":"image"}]},{"level":1,"text":"Display useful search-result information","type":"heading","anchor":"Display-useful-search-result-information"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Look Around"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Place name","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Travel time"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app should display some additional information about the selected search result. We’ll add a look around preview to offer a sneak peek and the name of the place and the drive time as well."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s make a new SwiftUI file called ","type":"text"},{"type":"codeVoice","code":"ItemInfoView"},{"text":" that shows… a title, the estimated travel time, and a Look Around Preview.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    var body: some View {","        LookAroundPreview(initialScene: lookAroundScene)","            .overlay(alignment: .bottomTrailing) {","                HStack {","                    Text (\"\\(selectedResult.name ?? \"\")\")","                    if let travelTime {","                        Text(travelTime)","                    }","                }","                .font(.caption)","                .foregroundStyle(.white)","                .padding (10)","            }","            .onAppear {","                getLookAroundScene()","            }","            .onChange(of: selectedResult) {","                getLookAroundScene()","            }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Look Around Preview will show what the selected place looks like. The Preview displays a Look Around Scene. We get the scene for a given map item using MKLookAroundSceneRequest. The scene will be fetched when the view is displayed, and again any time the selected search result changes."}]},{"type":"codeListing","syntax":"swift","code":["    \/\/ ItemInfoView.swift - Fetch a Look Around scene","    @State private var lookAroundScene: MKLookAroundScene?","    ","    func getLookAroundScene () {","        lookAroundScene = nil","        Task {","            let request = MKLookAroundSceneRequest(mapItem: selectedResult)","            lookAroundScene = try? await request.scene","        }","    }"]},{"type":"paragraph","inlineContent":[{"text":"There’s a property that formats an ","type":"text"},{"type":"codeVoice","code":"MKRoute"},{"text":"’s expected travel time for display, using ","type":"text"},{"type":"codeVoice","code":"DateComponentsFormatter"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ItemInfoView.swift - Format travel time for display","    private var travelTime: String? {","        guard let route else { return nil }","        let formatter = DateComponentsFormatter()","        formatter.unitsStyle = .abbreviated","        formatter.allowedUnits = [.hour, .minute]","        return formatter.string(from: route.expectedTravelTime)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Switch back to ContentView and adding this ItemInfoView. Then add state to keep track of a route…"}]},{"type":"paragraph","inlineContent":[{"code":"@State private var route: MKRoute?","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We add a function that uses "},{"code":"MKDirections","type":"codeVoice"},{"type":"text","text":" to get one… and set the state."}]},{"type":"codeListing","syntax":"swift","code":["func getDirections() {","    route = nil","    guard let selectedResult else { return }","    let request = MKDirections.Request()","    request.source = MKMapItem(placemark: MKPlacemark(coordinate: .parking))","    request.destination = selectedResult","    ","    Task {","        let directions = MKDirections(request: request)","        let response = try? await directions.calculate()","        route = response?.routes.first","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we add another "},{"code":"onChange","type":"codeVoice"},{"type":"text","text":" modifier to call the function when the selection changes, the app will show the itemInfoView when it has a selected search result."}]},{"type":"codeListing","syntax":"swift","code":["        .onChange(of: selectedResult) {","            getDirections()","        }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"and"}]},{"type":"codeListing","syntax":"swift","code":["    VStack(spacing:0) {","        if let selectedResult {","            ItemInfoView(selectedResult: selectedResult, route: route)","                .frame(height: 128)","                .clipShape(RoundedRectangle (cornerRadius: 10))","                .padding([.top, .horizontal])","        }","        BeantownButtons( \/\/...","    }"]},{"type":"paragraph","inlineContent":[{"text":"We hide the Marker titles for the search results to clean up the appearance of the map.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ItemInfoView will display the name of the selected place instead.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    ForEach (searchResults, id: \\.self) { result in","        \/\/...","    } ","    .annotationTitles(.hidden) \/\/ hide the Marker titles"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-lookaround1"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-lookaround2","type":"image"}]},{"level":1,"text":"Show Overlay Content","type":"heading","anchor":"Show-Overlay-Content"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-overlayRoute"}]},{"type":"paragraph","inlineContent":[{"text":"Since we already have a route to show the travel time, we can use it to display the driving route to the selected search result. We’ll add a ","type":"text"},{"code":"MapPolyline","type":"codeVoice"},{"text":" overlay to show the route and stroke it with blue.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    if let route {","        MapPolyline(route)","            .stroke(.blue, lineWidth: 5)","    }"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-ownPolyline","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"We can also use ","type":"text"},{"code":"MapPolyline","type":"codeVoice"},{"text":" to show our own location data. ","type":"text"},{"code":"StrokeStyle","type":"codeVoice"},{"text":" can draw dashes and gradients as well…","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-ownPolyline2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To highlight an area, we use "},{"type":"codeVoice","code":"MapPolygon"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MapCircle"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-mapPoligon"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are two circles marking the same parks. An overlay level is specified for each circle. The pink circle is using the default overlay level of above roads, which puts the map’s labels above the circle. The cyan circle is using above labels."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-mapCircles","type":"image"}]},{"level":1,"text":"User Location and Map Controls","type":"heading","anchor":"User-Location-and-Map-Controls"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Show the user’s location","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn about Map Control views"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll add "},{"type":"codeVoice","code":"UserAnnotation"},{"type":"text","text":" to the map content to show our position:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UserAnnotation()"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"and a "},{"code":"MapUserLocationButton","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["    .mapControls {","        MapUserLocationButton()","        MapCompass()","        MapScaleView()","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, tapping the button to display our location, the map camera will follow us as we move around. We’ve also added a "},{"code":"MapCompass","type":"codeVoice"},{"type":"text","text":" and a "},{"code":"MapScaleView","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default "},{"type":"codeVoice","code":"mapControls"},{"type":"text","text":" configuration shows a compass when the map is rotated, and a scale indicator while the user is zooming in or out. We’ve specified them in addition to the user location button."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10043-compass","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these are added using the "},{"type":"codeVoice","code":"mapControls"},{"type":"text","text":" modifier, so the map will automatically display them in their default locations. This includes map controls on all platforms, including the "},{"type":"codeVoice","code":"MapZoomStepper"},{"type":"text","text":" and "},{"type":"codeVoice","code":"MapPitchSlider"},{"type":"text","text":" on macOS."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-compass2"}]},{"type":"paragraph","inlineContent":[{"text":"The Map controls are simply views, so instead of using the mapControls modifier, we can just add them as you would any other view. To customize we will need to use the mapScope modifier to associate the controls with a particular Map scope.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Custom positioning of map controls","","@Namespace var mapScope","","var body: some View {","    Map(scope: mapScope)","        .overlay(alignment: .bottomTrailing) {","            VStack {","                MapUserLocationButton(scope: mapScope)","                MapPitchButton(scope: mapScope)","                MapCompass(scope: mapScope)","                    .mapControlVisibility(.visible)","            }","            .padding(.trailing, 10)","            .buttonBorderShape(.circle)","        }","        .mapScope(mapScope)","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10043-compass3"}]},{"level":1,"text":"A few final thoughts","type":"heading","anchor":"A-few-final-thoughts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apple Maps Server APIs has been extended to support Autocomplete and Directions. To learn more check out last year’s dub-dub session "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2022\/10006"}]},{"level":1,"text":"Resources","type":"heading","anchor":"Resources"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/forums\/create\/question?tag1=239&tag2=157&tag3=635030","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/mapkit","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/mapkit\/mapkit_for_swiftui","type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10043","type":"reference"}]},{"level":1,"text":"Related Videos","type":"heading","anchor":"Related-Videos"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10156","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10148","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10157","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2022\/10006","isActive":true,"overridingTitle":"Meet Apple Maps Server APIs -  WWDC22","overridingTitleInlineContent":[{"text":"Meet Apple Maps Server APIs -  WWDC22","type":"text"}],"type":"reference"}]},{"level":2,"text":"Written By","type":"heading","anchor":"Written-By"},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"multitudes","type":"image"}]}]},{"size":4,"content":[{"text":"laurent b","anchor":"laurent-b","type":"heading","level":3},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","type":"reference","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/multitudes","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/wrmultitudes","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/laurentbrusa.hashnode.dev\/","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"level":2,"text":"Related Sessions","type":"heading","anchor":"Related-Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10006-Meet-Apple-Maps-Server-APIs"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10043","isActive":true,"type":"reference","overridingTitle":"Watch Video (27 min)"}},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10043-meet-mapkit-for-swiftui"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10043-Meet-MapKit-for-SwiftUI"},"metadata":{"role":"sampleCode","modules":[{"name":"WWDC Notes"}],"title":"Meet MapKit for SwiftUI","roleHeading":"WWDC23"},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"kind":"article","abstract":[{"text":"Discover how expanded SwiftUI support for MapKit has made it easier than ever for you to integrate Maps into your app. We’ll show you how to use SwiftUI to add annotations and overlays to a map, control the camera, and more.","type":"text"}],"references":{"WWDC23-10043-displayRegion":{"type":"image","alt":"Display Regions","identifier":"WWDC23-10043-displayRegion","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-displayRegion.jpg","traits":["1x","light"]}]},"WWDC23-10043-mapCameraPosition":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-mapCameraPosition.jpg"}],"type":"image","identifier":"WWDC23-10043-mapCameraPosition","alt":"mapCameraPosition"},"WWDC23-10043-customMarkers":{"type":"image","identifier":"WWDC23-10043-customMarkers","alt":"Customizig the markers","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-customMarkers.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"url":"\/documentation\/wwdcnotes\/wwdc23","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","role":"collectionGroup","title":"WWDC23","type":"topic","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"kind":"article"},"WWDC23-10043-imagery":{"type":"image","alt":"With the imagery map style","identifier":"WWDC23-10043-imagery","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-imagery.jpg","traits":["1x","light"]}]},"WWDC23-10043-selectionTag":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-selectionTag.jpg"}],"type":"image","identifier":"WWDC23-10043-selectionTag","alt":"Selection with Tag"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"kind":"symbol"},"WWDC23-10043-ownPolyline":{"type":"image","identifier":"WWDC23-10043-ownPolyline","alt":"Use your own Polyline","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-ownPolyline.jpg","traits":["1x","light"]}]},"WWDC23-10043-mapCameraPosition3":{"type":"image","alt":"mapCameraPosition","identifier":"WWDC23-10043-mapCameraPosition3","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-mapCameraPosition3.jpg","traits":["1x","light"]}]},"WWDC23-10043-mapCircles":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-mapCircles.jpg"}],"type":"image","identifier":"WWDC23-10043-mapCircles","alt":"Use your own mapCircles"},"WWDC23-10043-marker2":{"type":"image","identifier":"WWDC23-10043-marker2","alt":"Another marker example","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-marker2.jpg","traits":["1x","light"]}]},"WWDC23-10043-compass2":{"type":"image","alt":"Use your own location buttons","identifier":"WWDC23-10043-compass2","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-compass2.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10148":{"title":"What’s new in SwiftUI - WWDC23","type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10148","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10148","titleInlineContent":[{"type":"text","text":"What’s new in SwiftUI - WWDC23"}]},"https://developer.apple.com/videos/play/wwdc2023/10156":{"type":"link","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10156","titleInlineContent":[{"type":"text","text":"Explore SwiftUI animation - WWDC23"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10156","title":"Explore SwiftUI animation - WWDC23"},"WWDC23-10043-overlay":{"type":"image","alt":"overlay","identifier":"WWDC23-10043-overlay","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-overlay.jpg","traits":["1x","light"]}]},"WWDC23-10043-searchForPlaces":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-searchForPlaces.jpg"}],"type":"image","identifier":"WWDC23-10043-searchForPlaces","alt":"Search for places"},"WWDC23-10043-mapCameraPosition2":{"type":"image","identifier":"WWDC23-10043-mapCameraPosition2","alt":"mapCameraPosition","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-mapCameraPosition2.jpg","traits":["1x","light"]}]},"WWDC23-10043-newAnnotations":{"type":"image","alt":"newAnnotations","identifier":"WWDC23-10043-newAnnotations","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-newAnnotations.jpg","traits":["1x","light"]}]},"WWDC23-10043-senseOfPlace":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-senseOfPlace.jpg"}],"type":"image","identifier":"WWDC23-10043-senseOfPlace","alt":"Give a Sense Of Place"},"WWDC23-10043-searchInRegion":{"type":"image","identifier":"WWDC23-10043-searchInRegion","alt":"searchInRegion","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-searchInRegion.jpg","traits":["1x","light"]}]},"WWDC23-10043-compass":{"type":"image","alt":"Use your own location buttons","identifier":"WWDC23-10043-compass","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-compass.jpg","traits":["1x","light"]}]},"https://github.com/multitudes":{"title":"GitHub","type":"link","url":"https:\/\/github.com\/multitudes","identifier":"https:\/\/github.com\/multitudes","titleInlineContent":[{"type":"text","text":"GitHub"}]},"WWDC23.jpeg":{"type":"image","identifier":"WWDC23.jpeg","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC23.jpeg","traits":["1x","light"]}]},"https://developer.apple.com/forums/tags/wwdc2023-10043":{"type":"link","url":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10043","identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10043","titleInlineContent":[{"text":"Search the forums for tag wwdc2023-10043","type":"text"}],"title":"Search the forums for tag wwdc2023-10043"},"WWDC23-10043-lookaround1":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-lookaround1.jpg"}],"type":"image","identifier":"WWDC23-10043-lookaround1","alt":"lookaround1"},"WWDC23-10043-ownPolyline2":{"type":"image","identifier":"WWDC23-10043-ownPolyline2","alt":"Use your own Polyline","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-ownPolyline2.jpg","traits":["1x","light"]}]},"WWDC23-10043-enablingRegions":{"type":"image","alt":"Enabling Regions","identifier":"WWDC23-10043-enablingRegions","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-enablingRegions.jpg","traits":["1x","light"]}]},"multitudes.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/multitudes.jpeg"}],"type":"image","identifier":"multitudes.jpeg","alt":null},"WWDC23-10043-standard":{"type":"image","identifier":"WWDC23-10043-standard","alt":"With the standard parameter","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-standard.jpg","traits":["1x","light"]}]},"WWDC23-10043-item":{"type":"image","alt":"item","identifier":"WWDC23-10043-item","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-item.jpg","traits":["1x","light"]}]},"WWDC23-10043-userLocationButtons":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-userLocationButtons.jpg"}],"type":"image","identifier":"WWDC23-10043-userLocationButtons","alt":"User Location Buttons"},"WWDC23-10043-overlayRoute":{"type":"image","identifier":"WWDC23-10043-overlayRoute","alt":"overlayRoute","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-overlayRoute.jpg","traits":["1x","light"]}]},"WWDC23-10043-otherContent":{"type":"image","alt":"Other content example","identifier":"WWDC23-10043-otherContent","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-otherContent.jpg","traits":["1x","light"]}]},"WWDC23-10043-mapPoligon":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-mapPoligon.jpg"}],"type":"image","identifier":"WWDC23-10043-mapPoligon","alt":"Use your own mapPoligon"},"multitudes":{"type":"image","identifier":"multitudes","alt":"Profile image of laurent b","variants":[{"url":"\/images\/WWDCNotes\/multitudes.jpeg","traits":["1x","light"]}]},"https://x.com/wrmultitudes":{"type":"link","url":"https:\/\/x.com\/wrmultitudes","identifier":"https:\/\/x.com\/wrmultitudes","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"title":"X\/Twitter"},"WWDC23-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-Icon.png"}],"type":"image","identifier":"WWDC23-Icon.png","alt":null},"https://developer.apple.com/forums/create/question?tag1=239&tag2=157&tag3=635030":{"type":"link","identifier":"https:\/\/developer.apple.com\/forums\/create\/question?tag1=239&tag2=157&tag3=635030","titleInlineContent":[{"type":"text","text":"Have a question? Ask with tag wwdc2023-10043"}],"url":"https:\/\/developer.apple.com\/forums\/create\/question?tag1=239&tag2=157&tag3=635030","title":"Have a question? Ask with tag wwdc2023-10043"},"WWDC23-10043-compass3":{"type":"image","alt":"Use your own location buttons","identifier":"WWDC23-10043-compass3","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-compass3.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2022/10006":{"title":"“Meet Apple Maps Server APIs.”","type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2022\/10006","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2022\/10006","titleInlineContent":[{"type":"text","text":"“Meet Apple Maps Server APIs.”"}]},"WWDC23-10043-hybrid":{"type":"image","identifier":"WWDC23-10043-hybrid","alt":"With the hybrid map style","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-hybrid.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10157":{"type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10157","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10157","titleInlineContent":[{"text":"Wind your way through advanced animations in SwiftUI - WWDC23","type":"text"}],"title":"Wind your way through advanced animations in SwiftUI - WWDC23"},"https://developer.apple.com/documentation/mapkit":{"title":"MapKit","type":"link","url":"https:\/\/developer.apple.com\/documentation\/mapkit","identifier":"https:\/\/developer.apple.com\/documentation\/mapkit","titleInlineContent":[{"type":"text","text":"MapKit"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10156-Explore-SwiftUI-animation":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","role":"sampleCode","abstract":[{"type":"text","text":"Explore SwiftUI’s powerful animation capabilities and find out how these features work together to produce impressive visual effects. Learn how SwiftUI refreshes the rendering of a view, determines what to animate, interpolates values over time, and propagates context for the current transaction."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10156-explore-swiftui-animation","title":"Explore SwiftUI animation","kind":"article"},"WWDCNotes.png":{"type":"image","identifier":"WWDCNotes.png","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}]},"WWDC23-10043-marker":{"type":"image","alt":"The first marker","identifier":"WWDC23-10043-marker","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-marker.jpg","traits":["1x","light"]}]},"WWDC23-10043-annotations2":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-annotations2.jpg"}],"type":"image","identifier":"WWDC23-10043-annotations2","alt":"Another annotation example"},"https://developer.apple.com/wwdc23/10043":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc23\/10043","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc23\/10043"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10006-Meet-Apple-Maps-Server-APIs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10006-Meet-Apple-Maps-Server-APIs","abstract":[{"text":"Simplify your app’s mapping architecture by implementing the Apple Maps stack across MapKit, MapKit JS, and Apple Maps Server APIs. Learn how these APIs can reduce network calls and increase power efficiency, which can help improve the overall performance of your app. We’ll show you how to use geocoding and estimated time of arrival APIs to build functionality for a simple store locator, and explore the API authentication flow.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-10006-meet-apple-maps-server-apis","role":"sampleCode","kind":"article","title":"Meet Apple Maps Server APIs","type":"topic"},"https://laurentbrusa.hashnode.dev/":{"type":"link","url":"https:\/\/laurentbrusa.hashnode.dev\/","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog"},"WWDC23-10043-lookaround2":{"type":"image","identifier":"WWDC23-10043-lookaround2","alt":"lookaround","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-lookaround2.jpg","traits":["1x","light"]}]},"WWDC23-10043-enablingRegions2":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10043-enablingRegions2.jpg","traits":["1x","light"]}],"type":"image","identifier":"WWDC23-10043-enablingRegions2","alt":"Enabling Regions"},"WWDC23-10043-lookAround":{"type":"image","alt":"look around","identifier":"WWDC23-10043-lookAround","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-lookAround.jpg"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10148-Whats-new-in-SwiftUI":{"type":"topic","role":"sampleCode","kind":"article","abstract":[{"type":"text","text":"Learn how you can use SwiftUI to build great apps for all Apple platforms. Explore the latest updates to SwiftUI and discover new scene types for visionOS. Simplify your data models with the latest data flow options and learn about the Inspector view. We’ll also take you through enhanced animation APIs, powerful ScrollView improvements, and a host of refinements to help you make tidier tables, improve focus and keyboard input, and so much more."}],"title":"What’s new in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10148-whats-new-in-swiftui","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI"},"https://developer.apple.com/documentation/mapkit/mapkit_for_swiftui":{"title":"MapKit for SwiftUI","type":"link","url":"https:\/\/developer.apple.com\/documentation\/mapkit\/mapkit_for_swiftui","identifier":"https:\/\/developer.apple.com\/documentation\/mapkit\/mapkit_for_swiftui","titleInlineContent":[{"type":"text","text":"MapKit for SwiftUI"}]},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","images":[{"identifier":"multitudes.jpeg","type":"card"},{"identifier":"multitudes.jpeg","type":"icon"}],"url":"\/documentation\/wwdcnotes\/multitudes","abstract":[{"text":"student at 42Berlin 🐬 | C & C++ | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️","type":"text"}],"kind":"article","title":"laurent b (33 notes)","type":"topic"},"WWDC23-10043-enablingRealisticElevetion":{"type":"image","alt":"Enabling Realistic Elevetion","identifier":"WWDC23-10043-enablingRealisticElevetion","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10043-enablingRealisticElevetion.jpg"}]}}}