{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10258-understand-and-eliminate-hangs-from-your-app"],"traits":[{"interfaceLanguage":"swift"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc21\/10258","isActive":true,"overridingTitle":"Watch Video (24 min)"}},"kind":"article","sections":[],"abstract":[{"text":"Discover how you can track down hangs and delays in your app. We’ll show you tools and methods to discover hangs and their causes, learn about anti-patterns that can lead to hangs, explore best practices for eliminating hangs like GCD, and provide guidance on when you should consider asynchronous code to improve your app performance.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What is a hang?"}]},{"items":[{"content":[{"inlineContent":[{"text":"Whenever the app hangs, is unresponsive, lags, slows down, spins, or is just stuck","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This period of unresponsiveness is called ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"hang"}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"What is the app main runloop?","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The main runloop is a loop your application’s main thread enters to run event handlers in response to incoming events, primarily user interactions"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"When a user interacts with an app:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the runloop receives the event"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the runloop processes it"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then the runloop updates the UI, if needed"}]}]}],"type":"orderedList"},{"items":[{"content":[{"inlineContent":[{"text":"this all happens in one turn of the runloop, and on the main thread","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"this process repeats for each user input","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"events are buffered and cannot be handled by the main thread during a hang","type":"text"}]}]}],"type":"unorderedList"},{"text":"What causes a hang?","type":"heading","level":2,"anchor":"What-causes-a-hang"},{"items":[{"content":[{"inlineContent":[{"text":"The high-level cause for hangs is too much work being done on, or on behalf of, the main thread.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To ensure performance, it’s important the main thread of your application focuses on what’s necessary to update UI"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Common cases:"}]},{"items":[{"content":[{"inlineContent":[{"text":"proactive work in the main thread (e.g., reading, preparing and composite more images than necessary","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"performing irrelevant work on the main thread","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"use sub-optimal API (e.g. use CPU instead of GPU for rounding corners of views)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"network and I\/O on the main thread","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"synchronization on the main thread (locks, semaphores and similar)"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The main thread services blocks from the main dispatch queue, but it can also service blocks from other queues via dispatch sync:","type":"text"},{"text":"\n","type":"text"},{"text":"anytime a queue dispatch syncs onto another queue, all pending blocks on the other queue have to execute before the newly enqueued one","type":"text"}]},{"text":"How to diagnose hangs?","type":"heading","level":2,"anchor":"How-to-diagnose-hangs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"During development:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The time profiler instrument shows you what the app is executing by showing your application’s callstacks over time"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The system trace instrument adds more context with data on system calls, VM faults, I\/O, as well as inter and intra-process interactions.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"On production:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"use MetricKit, MetricKit returns a call tree by aggregating callstacks taken during a hang"}]}]}],"type":"unorderedList"},{"text":"How to eliminate hangs?","type":"heading","level":2,"anchor":"How-to-eliminate-hangs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reduce work on the main thread:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"optimize work on the main thread, to reduce execution time."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"move work off the main thread in a non-blocking manner to keep it responsive"}],"type":"paragraph"}]}],"type":"orderedList"},{"text":"Caching","type":"heading","level":3,"anchor":"Caching"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"quickly access frequently used assets or previously queried values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"in-memory store, but can be persisted to disk, if needed across multiple app invocations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"formatted assets (e.g. images) are great candidates for caching"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It is important to have an accurate cache invalidation mechanism to strike a balance between having stale data and constantly updating a cache."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"cache invalidation should happen asynchronously on a secondary dispatch queue to keep the main thread responsive to events","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"NSCache","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Notification observers","type":"heading","level":3,"anchor":"Notification-observers"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"allow your app to react to changes in a value or state, without having to do expensive, on-demand computation","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"to find all observable system notifications, check out the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsnotification\/name"}]}]}],"type":"unorderedList"},{"text":"Written By","type":"heading","level":2,"anchor":"Written-By"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}]},{"size":4,"content":[{"text":"Federico Zanetello","anchor":"Federico-Zanetello","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"overridingTitle":"Contributed Notes","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}]}]}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"text":"Related Sessions","type":"heading","level":2,"anchor":"Related-Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10087-Diagnose-Power-and-Performance-regressions-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10181-Ultimate-application-performance-survival-guide","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10081-Whats-new-in-MetricKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-417-Improving-Battery-Life-and-Performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-706-Modernizing-Grand-Central-Dispatch-Usage","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-418-Using-Time-Profiler-in-Instruments"],"type":"links"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10258-Understand-and-eliminate-hangs-from-your-app"},"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Understand and eliminate hangs from your app","role":"sampleCode","roleHeading":"WWDC21"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10082-track-down-hangs-with-xcode-and-ondevice-detection","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection","title":"Track down hangs with Xcode and on-device detection","abstract":[{"text":"Learn how you can increase responsiveness and eliminate hangs in your app and make even better experiences. Hang out with the Performance Tools team as we explore how you can track down these issues — and even stop them from occurring in the first place. We’ll take you through the latest detection mechanisms for iOS to help track hangs during pre-release testing, show you how to identify issues in release builds using the Xcode Organizer, and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC17-706-Modernizing-Grand-Central-Dispatch-Usage":{"abstract":[{"type":"text","text":"macOS 10.13 and iOS 11 have reinvented how Grand Central Dispatch and the Darwin kernel collaborate, enabling your applications to run concurrent workloads more efficiently. Learn how to modernize your code to take advantage of these improvements and make optimal use of hardware resources."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-706-Modernizing-Grand-Central-Dispatch-Usage","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc17-706-modernizing-grand-central-dispatch-usage","title":"Modernizing Grand Central Dispatch Usage","role":"sampleCode","type":"topic"},"WWDCNotes.png":{"alt":null,"type":"image","identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}]},"https://developer.apple.com/wwdc21/10258":{"url":"https:\/\/developer.apple.com\/wwdc21\/10258","type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10258","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"url":"\/documentation\/wwdcnotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","kind":"article","title":"Federico Zanetello (332 notes)","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},"zntfdr":{"alt":"Profile image of Federico Zanetello","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","identifier":"zntfdr"},"WWDC21-Icon.png":{"type":"image","identifier":"WWDC21-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21-Icon.png"}],"alt":null},"https://zntfdr.dev":{"title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/zntfdr.dev","type":"link","identifier":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC16-418-Using-Time-Profiler-in-Instruments":{"abstract":[{"text":"Learn how to make your apps faster and more efficient in this introduction to Time Profiler in Instruments. Walk through how to use Time Profiler to measure your app’s performance. Learn how Time Profiler works and can be used to identify problems and verify your fixes. Discover how easy it is to improve your app’s power usage and performance by using Instruments throughout your development process.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-418-Using-Time-Profiler-in-Instruments","title":"Using Time Profiler in Instruments","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc16-418-using-time-profiler-in-instruments","role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10248-Analyze-hangs-with-Instruments":{"url":"\/documentation\/wwdcnotes\/wwdc23-10248-analyze-hangs-with-instruments","title":"Analyze hangs with Instruments","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","kind":"article","role":"sampleCode","type":"topic","abstract":[{"text":"User interface elements often mimic real-world interactions, including real-time responses. Apps with a noticeable delay in user interaction — a hang — can break that illusion and create frustration. We’ll show you how to use Instruments to analyze, understand, and fix hangs in your apps on all Apple platforms. Discover how you can efficiently navigate an Instruments trace document, interpret trace data, and record additional profiling data to better understand your specific hang.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10181-Ultimate-application-performance-survival-guide":{"abstract":[{"text":"Performance optimization can seem like a daunting task — with many metrics to track and tools to use. Fear not: Our survival guide to app performance is here to help you understand tooling, metrics, and paradigms that can help smooth your development process and contribute to a great experience for people using your app.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10181-ultimate-application-performance-survival-guide","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10181-Ultimate-application-performance-survival-guide","kind":"article","title":"Ultimate application performance survival guide"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-417-Improving-Battery-Life-and-Performance":{"abstract":[{"text":"Learn about new ways to find and fix performance issues during daily development, beta testing, and public release on the App Store. Learn how to catch performance issues during daily development by measuring CPU, memory, and more in your XCTests. Discover how to find issues in the field during beta testing and public release using MetricKit. See how the Xcode Organizer now displays the most important metrics from your app aggregated from each version on the App Store.","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-417-Improving-Battery-Life-and-Performance","title":"Improving Battery Life and Performance","url":"\/documentation\/wwdcnotes\/wwdc19-417-improving-battery-life-and-performance","role":"sampleCode","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10081-Whats-new-in-MetricKit":{"abstract":[{"type":"text","text":"Quickly detect power and performance regressions and troubleshoot app issues when you adopt MetricKit. Discover the latest trackable metrics for your app, including CPU instructions, animation hitches, and exit reasons. And learn about diagnostics in MetricKit that can help you troubleshoot hangs, crashes, and disk writes."}],"url":"\/documentation\/wwdcnotes\/wwdc20-10081-whats-new-in-metrickit","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10081-Whats-new-in-MetricKit","kind":"article","title":"What’s new in MetricKit"},"zntfdr.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","identifier":"zntfdr.jpeg"},"WWDC21.jpeg":{"type":"image","identifier":"WWDC21.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21.jpeg"}],"alt":null},"https://github.com/zntfdr":{"title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/zntfdr","type":"link","identifier":"https:\/\/github.com\/zntfdr"},"https://developer.apple.com/documentation/foundation/nsnotification/name":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsnotification\/name","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsnotification\/name","titleInlineContent":[{"type":"codeVoice","code":"NSNotification.Name"},{"text":" documentation","type":"text"}],"title":"NSNotification.Name documentation"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10087-Diagnose-Power-and-Performance-regressions-in-your-app":{"type":"topic","role":"sampleCode","kind":"article","title":"Diagnose Power and Performance regressions in your app","url":"\/documentation\/wwdcnotes\/wwdc21-10087-diagnose-power-and-performance-regressions-in-your-app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10087-Diagnose-Power-and-Performance-regressions-in-your-app","abstract":[{"text":"Quickly discover how to identify priorities when viewing power and performance regressions. Learn how to track metrics that have regressed with device-and percentile-specific information, so you can focus your efforts on optimization and save valuable development time. We’ll also show you how to track down common anti-patterns in your app that wear out device storage, help you customize your workflows, and add App Store Connect APIs to help you stay up to date on your app’s real-world performance.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"role":"collection","title":"WWDC Notes","kind":"symbol"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21","role":"collectionGroup","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","title":"WWDC21","images":[{"identifier":"WWDC21-Icon.png","type":"icon"},{"identifier":"WWDC21.jpeg","type":"card"}],"abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"MusicKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"DocC","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit 2","type":"codeVoice"},{"type":"text","text":", and more."}],"type":"topic"}}}