{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10211-symbolication-beyond-the-basics"]}],"sections":[],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10211-Symbolication-Beyond-the-basics","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"What-is-symbolication","level":2,"text":"What is symbolication?"},{"type":"paragraph","inlineContent":[{"text":"Mechanism to convert\/translate how our devices see our apps at runtime — which is in terms of memory addresses and instructions — back to how we as developers see our apps — which is in terms of functions, names, and files.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A crash without symbols just tell us that a crash occurred, to make sense of it we need to reprocess the crash log with the build ","type":"text"},{"type":"codeVoice","code":"dSYM"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Thanks to ","type":"text"},{"code":"dSYM","type":"codeVoice"},{"text":", Xcode applies the concepts of symbolication, so that I can diagnose the issue with a much nicer crash log, where I can not only see all of my functions actually being called, but I can also determine the file and line number to refer back to in my code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Alternatively, If I already have the dSYM, I can use the ","type":"text"},{"code":"atos","type":"codeVoice"},{"text":" command to get the same information:","type":"text"}]},{"type":"codeListing","code":["atos -o MyApp.dSYM\/Contents\/Resources\/DWARF\/MyApp -arch arm64 -l 0x10045c000 -i 0x16045fb70"],"syntax":"cli"},{"type":"heading","anchor":"Two-steps-process-for-symbolication","level":2,"text":"Two-steps process for symbolication"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Going back to the file - here we convert\/translate runtime memory addresses into a more stable, usable form"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Consult debug information"}]}]}]},{"type":"heading","anchor":"Going-back-to-the-file","level":2,"text":"Going back to the file"},{"type":"paragraph","inlineContent":[{"text":"Goal: translate a runtime memory address to a corresponding address in your binary on disk (a.k.a. file addresses)","type":"text"}]},{"type":"heading","anchor":"On-disk-address-space","level":3,"text":"On disk address space"},{"type":"paragraph","inlineContent":[{"text":"Your app has an address space on disk.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"assigned by the linker"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the linker groups the file into segments"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"each segment has certain properties, such as a name, a size, and their assigned addresses"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC21-10211-diskSpace","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"__TEXT","type":"codeVoice"},{"type":"text","text":" segment of your binary contains all of the functions and methods you’ve written"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"__DATA"},{"type":"text","text":" segment contains program-wide state such as global variables"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"each of these segments gets assigned a different address such that they don’t overlap","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"the linker records this information at the very beginning of your executables as part of the Mach-O header","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Mach-O","level":3,"text":"Mach-O"},{"type":"paragraph","inlineContent":[{"text":"Mach-O is the format used for all executable binaries and libraries, and the system knows that it needs to read this header to run your apps.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the Mach-O header contains a number of load commands that hold the segment properties","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"the system uses these load commands to load the segments into memory","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"if your apps are Universal 2, then the app will have one header and a set of segments for each architecture","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"We can inspect these load commands by using ","type":"text"},{"code":"otool -l","type":"codeVoice"},{"text":" in the terminal, which prints the load commands for a specified file","type":"text"}]},{"type":"heading","anchor":"ASLR-slide","level":3,"text":"ASLR slide"},{"type":"paragraph","inlineContent":[{"text":"Before the kernel actually loads the segments, it initializes a random value known as the ASLR slide","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"this is to randomize the addresses values, it’s a safety feature","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"all runtime addresses will be shifted by this ASLR slide","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the difference between a runtime address and the linker address is the ASLR slide"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"we can always go back to the file address space once we know the ASLR slide","type":"text"}]}]}]},{"type":"heading","anchor":"Crash-example","level":3,"text":"Crash example"},{"inlineContent":[{"type":"text","text":"This is the crash report that we will use in this session:"}],"type":"paragraph"},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","","0 MyApp                    0x000080010045fb70 0x16045c600 + 15216 ","1 libdyld.dylib            0x000008018248d420 start + 423","","Thread 0 crashed with ARM Thread State (64-bit): ","  xO: 0x0000000159e113a0 x1: 0x0000080000080103 x2: 0x0000000000000103 x3: 0x00000001ed6a1608 ","  x4: 0x0000090159e11300 x5: 0x0000000000000004 x6: 0x1b56e56ab0142e5a x7: 0x0000000000000000","  x8: 0x000009006006000a x9: 0x0000000159e11308 x10: 0x0600800000008054 x11: 0x0080000008179f41","  x12: 0x0000000159000000 x13: 0x00000000770b8226 x14: 0x00000000770b8201 x15: 0x00000000000625eb","  x16: 0x000000018e48ee2c x17: 0x00000001f0cbfe70 x18: 0x0000000000090999 x19: 0x0000000159e111b0 ","  x20: 0x000000016ef26940 x21: 9x0000000800000000 x22: 0x0000000000008888 x23: 0x000000000009d0 ","  x24: 0x0000009000008600 x25: 0x0000000000000800 x26: 0x0000600880000000 x27: 0x0000000000000000 ","  x28: 0x000600016ef2b930 fp: 04000000016ef2b970 lr: 0x0000000100ed7a50 ","  sp: 0x000000016ef2b930 pc: 0x0000080100ed7ae0: cpsr: 0x80000000","  far: 0x000001ed8b3068 esr: 0xf2000001 ","","Binary Images: ","  0x10045c000 - 0x10045ffff +MyApp <C061EE83-B61D-3352-8EE5-655491DB1D16> \/Users\/USER\/MyApp"],"syntax":"cli"},{"anchor":"Computing-the-ASLR-slide","type":"heading","level":3,"text":"Computing the ASLR slide"},{"inlineContent":[{"text":"The ASLR slide equation requires two addresses:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"the load address"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the linker address"}]}]}]},{"type":"codeListing","code":["ASLR slide + linker address = load address"],"syntax":null},{"inlineContent":[{"text":"We can get the load address by looking at the mach-o load commands via ","type":"text"},{"code":"otool","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To know the runtime address, the system queries your app either at the point of a crash, or as its being profiled by Instruments for its runtime address space."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"You can also see the load addresses interactively with the ","type":"text"},{"code":"vmmap","type":"codeVoice"},{"text":" tool, which enumerates the active memory regions in your program","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"We can see the load address from the crashlog ("},{"code":"0x10045c000","type":"codeVoice"},{"type":"text","text":", in the "},{"code":"Binary images","type":"codeVoice"},{"type":"text","text":" section):"}],"type":"paragraph"},{"type":"codeListing","code":["0x10045c000 - 0x10045ffff +MyApp <C061EE83-B61D-3352-8EE5-655491DB1D16>"],"syntax":"cli"},{"inlineContent":[{"type":"text","text":"We can see the linker address from "},{"type":"codeVoice","code":"otool"},{"type":"text","text":" ("},{"type":"codeVoice","code":"0x0000000100000000"},{"type":"text","text":" or "},{"type":"codeVoice","code":"0x100000000"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","code":["$ otool -l MyApp | grep LC_SEGMENT -A8 ","","     cmd LC_SEGMENT_64      # segment load command"," cmdsize 712"," segname __TEXT             # name and ","  vmaddr 0x0000000100000000 # address","  vmsize 0x0000000000004000 # range"," fileoff 0 ","filesize 16384 "," maxprot 0x00000005 ","initprot 0x00000005 "],"syntax":"cli"},{"inlineContent":[{"type":"text","text":"Subtracting these two yields ("},{"code":"0x10045c000 - 0x100000000","type":"codeVoice"},{"type":"text","text":") an ASLR slide value of "},{"code":"0x45c000","type":"codeVoice"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"This means that every address in my program’s runtime "},{"code":"__TEXT","type":"codeVoice"},{"type":"text","text":" segment is "},{"code":"0x45c000","type":"codeVoice"},{"type":"text","text":" bytes away from the linker "},{"code":"__TEXT","type":"codeVoice"},{"type":"text","text":" segment address"}],"type":"paragraph"}]}]},{"anchor":"Back-to-the-file-address-space","type":"heading","level":3,"text":"Back to the file address space"},{"inlineContent":[{"text":"Now that we have the ASLR slide value, we can see what a backtrace address from the crash log corresponds to in the file:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","0 MyApp              0x000000010045fb70 0x10045c000 + 15216"],"syntax":"cli"},{"type":"codeListing","code":["ASLR slide = 0x45c000 ","Backtrace address = 0x000000010045fb70","0x10045fb70 - 0x45c000 = 0x100003b70 "],"syntax":"cli"},{"inlineContent":[{"code":"0x100003b70","type":"codeVoice"},{"text":" is the address on disk","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Since this address is now part of the on-disk address space, I can inspect my app to see what resides there."}],"type":"paragraph"},{"inlineContent":[{"text":"We can use ","type":"text"},{"type":"codeVoice","code":"otool"},{"text":" too see where the crash occurred:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["otool -tV MyApp -arch arm64"],"syntax":"cli"},{"inlineContent":[{"text":"This will print the disassembly where the crask occurred:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ ASLR slide = 0x45c000","\/\/ 0x10045fb70 - 0x45c000 = 0x100003B70 ","","0000000100003b6c      ret","0000000100003670      brk #0x1 "],"syntax":"cli"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"brk","type":"codeVoice"},{"text":" signals an exception or a problem in the app","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Other ways to calculate ASLR slide:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"atos"},{"type":"text","text":" will read the load commands for the file segment address indicated by the "},{"type":"codeVoice","code":"-o"},{"type":"text","text":" flag, and we tell it about the load address with the "},{"type":"codeVoice","code":"-l"},{"type":"text","text":" flag"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"vmmap","type":"codeVoice"},{"text":" can also tell us about the load addresses of a running app (run this before it crashes)","type":"text"}]}]}]},{"type":"codeListing","code":["vmmap MyApp | grep __TEXT"],"syntax":"cli"},{"anchor":"Debug-information","type":"heading","level":3,"text":"Debug information"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"created during build"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"either embedded directly into your app binaries, or stored as a separate file, such as a "},{"code":".dSYM","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"There are different categories\/types of debug info","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"each offers a different level of detail for a given file address:"}]}]}]},{"type":"table","rows":[[[{"inlineContent":[],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Function addresses"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Function names"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"File and line numbers"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Optimizations"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Function starts","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"text":"❌","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Nlist symbol table"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅"}],"type":"paragraph"}],[{"inlineContent":[{"text":"❌","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"❌","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"DWARF"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}]]],"header":"row"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Since DWARF offers the most detail, we really want to strive to have this type of debug info whenever possible","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Function-starts","type":"heading","level":4,"text":"Function starts"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"offers the least source code detail","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"only tells us about the first address — or the literal start — of our functions","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"this would tell us that a function begins and exists at a certain address. However, it doesn’t tell us which functions begin at those addresses, only that they exist"}]}]}]},{"inlineContent":[{"identifier":"WWDC21-10211-functionStarts","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The function starts debug info does this by encoding the list of addresses in your app’s "},{"type":"codeVoice","code":"__LINKEDIT"},{"type":"text","text":" segment."}],"type":"paragraph"},{"inlineContent":[{"text":"Since this is embedded directly in your app, the Mach-O header also has a load command to inform us where we can find it, which is ","type":"text"},{"code":"LC_FUNCTION_STARTS","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We can obtain the function starts with the "},{"type":"codeVoice","code":"symbols"},{"type":"text","text":" command and the "},{"type":"codeVoice","code":"-onlyFuncStartsData"},{"type":"text","text":" flag"}],"type":"paragraph"},{"type":"codeListing","code":["symbols -onlyFuncStartsData -arch arm64 MyApp"],"syntax":null},{"type":"codeListing","code":["0x0000000100003a68 (    0x3c4) TEXT _text ","  0x0000000100003a68 (   0x10c) (null) [FUNC, FunctionStarts]","  0x0000000100003674 (    0x3c) (null) [FUNC, FunctionStarts] ","  0x0000000100003bb0 (   0x114) (null) [FUNC, FunctionStarts] ","  0x0000000100003cc4 (    0x40) (null) [FUNC, FunctionStarts] ","  0x0000000100003d04 (    0x98) (null) [FUNC, FunctionStarts] ","  0x0000000100003d9c (    0x8c) (null) [FUNC, FunctionStarts] ","  0x0000000100003e28 (     0x4) (null) [FUNC, FunctionStarts] "],"syntax":null},{"inlineContent":[{"text":"Here we get back a list of addresses and ","type":"text"},{"code":"null","type":"codeVoice"},{"text":" placeholders","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"These placeholders would ideally have function and method names instead of null, but the function starts data doesn’t provide names."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, it does allow for a slight update to the crash log."}],"type":"paragraph"},{"inlineContent":[{"text":"We can now view the file addresses as offsets from a function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","0 MyApp              0x000000010045fb70 0x10045c000 + 15216"],"syntax":"cli"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"first we go back to the file by subtracting the ASLR slide value:"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","0 MyApp              0x100003b70 0x100003a68 + 264"],"syntax":"cli"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Then we find the function starts value that could contain the file address:"}],"type":"paragraph"}]}],"start":2},{"type":"codeListing","code":["0x0000000100003a68 (    0x3c4) TEXT _text ","  0x0000000100003a68 (   0x10c) (null) [FUNC, FunctionStarts] \/\/ 👈🏻","  0x0000000100003674 (    0x3c) (null) [FUNC, FunctionStarts] ","  ..."],"syntax":null},{"inlineContent":[{"text":"In this case, only the first value could contain the address because all of the other values are larger than the address.","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally we can claim that our file address is actually 264 bytes into this function"}]}]}],"start":3},{"inlineContent":[{"text":"This is primarily useful for debuggers, since they can understand the details of how this function was set up and which registers were modified.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This is all we get from Function starts.","type":"text"}],"type":"paragraph"},{"anchor":"Nlist-symbol-table","type":"heading","level":4,"text":"Nlist symbol table"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"builds on the idea of function starts","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"encode a list of information in the "},{"code":"__LINKEDIT","type":"codeVoice"},{"type":"text","text":" segment (described by "},{"code":"LC_SYMTAB","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"more than just encoding addresses, they encode "},{"type":"codeVoice","code":"nlist_62"},{"type":"text","text":" C structs"}]}]}]},{"type":"codeListing","code":["struct nlist_64 {","  union {","    uint32_t  n_strx;","  } n_un;","  uint8_t n_type; \/\/ Determines values and properties","  uint8_t n_sect;","  uint16_t n_desc;","  uint64_t n_value; ","};"],"syntax":"c"},{"inlineContent":[{"type":"text","text":"There are two primary "},{"type":"codeVoice","code":"n_type"},{"type":"text","text":"s:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"direct symbols","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"indirect symbols"}]}]}]},{"inlineContent":[{"type":"text","text":"The way we distinguish them is via "},{"type":"codeVoice","code":"n_type"},{"type":"text","text":" value:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"direct symbols:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"000001110"},{"type":"text","text":" - second, third, and fourth least significant bits set"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"this bit pattern is also known as "},{"code":"N_SECT","type":"codeVoice"},{"type":"text","text":" ("},{"code":"0xe","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"indirect symbols:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"000000001","type":"codeVoice"},{"type":"text","text":" - only the least significant bit is set"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"this bit pattern is also known as "},{"code":"N_EXT","type":"codeVoice"},{"type":"text","text":" ("},{"code":"0x01","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"anchor":"Direct-symbols","type":"heading","level":3,"text":"Direct symbols"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"functions and methods defined in your apps and frameworks"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"have a name and address in the "},{"code":"nlist_64","type":"codeVoice"},{"type":"text","text":" struct"}]}]}]},{"inlineContent":[{"type":"text","text":"We can list all direct symbols via "},{"type":"codeVoice","code":"nm"},{"type":"text","text":" ("},{"type":"codeVoice","code":"nm"},{"type":"text","text":" stands for name - it’s the display symbol name list tool):"}],"type":"paragraph"},{"type":"codeListing","code":["nm -arch arm64 --defined-only --numeric-sort MyApp"],"syntax":"cli"},{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["0000000100000000 T __mh_execute_header 0000000100003a68 T _main ","0000000100003674 t ___swift_instantiateConcreteTypeFromMangledName","0000000100003bb0 t _$s12MyApp13numberChoicesSaySiGyF ","0000000100003cc4 t _$sS2iSzsWl","0000000100003d04 t _$ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity","0000000100003d9c t _$ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi","0000000100003e28 t __swift_stdlib_malloc_size ","0000000100003ef0 s ___swift_reflection_version "],"syntax":"cli"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"nm"},{"type":"text","text":" walked through the defined symbols of the app program and listed them in address order"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the names stored in the symbol tables are mangled names"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"these mangled names help the compiler and linker to uniquely identify a function, but they aren’t easy to understand unless they’re demangled"}]}]}]},{"inlineContent":[{"text":"For a better output, we can pass ","type":"text"},{"code":"nm","type":"codeVoice"},{"text":" output to ","type":"text"},{"code":"swift-demangle","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["nm -arch arm64 —defined-only --numeric-sort MyApp | xcrun swift-demangle"],"syntax":"cli"},{"inlineContent":[{"type":"text","text":"Output:"}],"type":"paragraph"},{"type":"codeListing","code":["0000000100000000 T __mh_execute_header","0000000100003a68 T _main","0000000100003674 t ___swift_instantiateConcreteTypeFromMangledName","0000000100003bb0 t MyApp.numberChoices() -> [Swift.Int]","0000000100003cc4 t lazy protocol witness table accessor for type Swift.Int and conformance Swift","0000000100003d04 t t generic specialization <Swift.Int> of Swift._ArrayBuffer._consumeAndCreateNew.Bool) -> Swift._ArrayBuffer<A> "],"syntax":"cli"},{"inlineContent":[{"code":"symbols","type":"codeVoice"},{"type":"text","text":" tool also has an option to show Nlist data, it demangles names automatically:"}],"type":"paragraph"},{"type":"codeListing","code":["symbols -arch arm64 -onlyNListData MyApp"],"syntax":"cli"},{"type":"codeListing","code":["0x0000000100003a68 (0x3c4) _TEXT __text ","  0x0000000100003a68 (  0x10c) main [FUNC, EXT, NameNList, MangledNameNList, Merged, List, FunctionStarts]","  0x0000000100003b74 (   0x3c) __swift_instantiateConcreteTypeFromMangledName [FUNC, PEXT, NameNList, MangledNameNList ","  0x0000000100003bb0 (  0x114) numberChoices () [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts ","  0x0000000100003cc4 (   0x40) lazy protocol witness table accessor for type Int and conformance Int [FUNC, PEXT, Name ","  0x0000000100003d04 (   0x98) specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForApp","  0x0000000100003d9c (   0x8c) specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)[FUNC,PE ","  0x0000000100003e28 (    0x4) _swift_stdlib_malloc_size [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionSt "],"syntax":"cli"},{"inlineContent":[{"text":"Going back to our crashlog:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","0 MyApp              0x100003b70 0x10003a68 + 264"],"syntax":"cli"},{"inlineContent":[{"text":"Here we can observe that our offset expression (","type":"text"},{"code":"0x10003a68 + 264","type":"codeVoice"},{"text":") that we got from the function starts data also matches an entry from the direct symbols. That entry has a name:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["0x0000000100003a68 (  0x10c) main"],"syntax":"cli"},{"inlineContent":[{"text":"Putting these two together, we can now say that our crash happened at 264 bytes into ","type":"text"},{"code":"main","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Thread 0 Crashed:: Dispatch queue: com.apple.main-thread ","0 MyApp              0x100003b70 main + 264"],"syntax":"cli"},{"inlineContent":[{"type":"text","text":"This still doesn’t tell us a lot, because direct symbols have some limitations such as missing some functions names."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One reason for this is that the symbol table only has direct symbol entries for functions that are involved in linking:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"these are functions that you use across modules or functions that you export from your frameworks"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"this makes it useful for identifying API boundaries","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"it has the necessary data to power dynamic loading with functions such as ","type":"text"},{"code":"dlsym()","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"dladdr()","type":"codeVoice"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Direct symbols gaps in information:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"local, static functions are not represented","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"can omit implementation functions"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"stripped in release configurations"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"primary app executables left practically empty"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"helps reduce the size of our app"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"frameworks left with only exported functions"}]}]}]}]}]},{"inlineContent":[{"identifier":"WWDC21-10211-stripXcode","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Xcode has various build settings around stripping symbols such as:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Strip Linked Product"},{"type":"text","text":" - if enabled, then the binary is stripped according to Strip Style"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Strip Style"},{"text":" - three options:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"All Symbols - Most invasive; preserve essentials","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Non Global - Remove locally shared functions","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Debugging Symbols - Remove debug list entry, keep direct symbols"}]}]}],"type":"unorderedList"}]}]},{"anchor":"Indirect-symbols","type":"heading","level":3,"text":"Indirect symbols"},{"inlineContent":[{"text":"These are functions and methods that you’re using from other frameworks or libraries, such as ","type":"text"},{"code":"print()","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"You can see them via ","type":"text"},{"type":"codeVoice","code":"nm"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["nm -m —arch arm64 --undefined-only --numeric-sort MyApp"],"syntax":"cli"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"the ","type":"text"},{"code":"m","type":"codeVoice"},{"text":" flag asks ","type":"text"},{"code":"nm","type":"codeVoice"},{"text":" to print from which frameworks the symbols come from","type":"text"}],"type":"paragraph"}]},{"type":"codeListing","code":["(undefined) external Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) (from libswiftCore)","(undefined) external Swift.print(_: ","Any..., separator: Swift.String, terminator: Swift. String) -> () (from libswiftCore)","(undefined) external type metadata for Any (from libswiftCore) "],"syntax":"cli"},{"anchor":"Function-starts-nlist-recap","type":"heading","level":3,"text":"Function starts, nlist recap"},{"inlineContent":[{"text":"Function starts are a list of addresses (they lack names, but do allow us to determine offsets)","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"NList symbols tables:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"add names to addresses"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"direct and indirect symbols","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"reserved for functions involved in linking","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"strip build settings influence which direct symbols are available.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Both are embedded in "},{"type":"codeVoice","code":"__LINKEDIT"},{"type":"text","text":" (in debug mode)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"What we haven’t seen yet is the richer levels of detail, such as file names and line numbers. This is provided to us by DWARF."}],"type":"paragraph"},{"anchor":"DWARF","type":"heading","level":3,"text":"DWARF"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"DWARF strives to describe everything","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"DWARD adds relationships to nlist symbols data"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"primarily found in dSYM bundles","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"When we’re analyzing DWARF, we’re primarily referring to a dSYM bundle.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In addition to other metadata such as plists, the dSYM bundle contains a binary with DWARF."}],"type":"paragraph"},{"anchor":"DWARF-binary","type":"heading","level":4,"text":"DWARF binary"},{"inlineContent":[{"identifier":"WWDC21-10211-dwarfBinary","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"The DWARF specification mentions three streams of data within the segment:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"debug_info"},{"text":" contains the raw data","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"debug_abbrev","type":"codeVoice"},{"type":"text","text":" assigns structure to the data"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"debug_line"},{"text":" contains the file names and line numbers","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"DWARF also defines two vocabulary types:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the compile unit"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"a single source file that went into building the product","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"contains assigned attributes and properties (name of the file, the SDKs, the portion of the "},{"type":"codeVoice","code":"__TEXT"},{"type":"text","text":" segment its functions occupy, and much more)"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"text":"the subprogram","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"represents a defined function"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"not limited to exported or shared functions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"name and ","type":"text"},{"code":"__TEXT","type":"codeVoice"},{"text":" segment range","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"defined in compile units"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"DWARD represents this with a tree"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"}]}]},{"inlineContent":[{"text":"We can observe this in detail with the ","type":"text"},{"code":"dwarfdump","type":"codeVoice"},{"text":" command:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["dwarfdump -v -debug-info -arch arm64 MyApp.dSYM"],"syntax":"cli"},{"type":"codeListing","code":["DW_TAG_compile_unit [154] *","  DW_AT_producer [DW_FORM_strp]    (.debug_str[0x000b656e] = \"Apple Swift version 5.5 (swiftlang-1300.0.16.7 clang-1300.0.18.1)\")","  DW_AT_language [DW_FORM_data2]   (DW_ LANG Swift)","  DW_AT_name [DW_FORM_strp] ( .debug_str[0x000b65b0] = '\/Users\/USER\/Projects\/MyApp\/main.swift\")","  DW_AT_stmt_list [DW_FORM_sec_offset] (0x0000a7be)","  DW_AT_comp_dir [DW_FORM_strp] debug_st[0x000b65f2] = \"\/Users\/USER\/Projects\/MyApp\")","  DW_AT_APPLE_optimized [DW_FORM_flag_present] (true)","  DW_AT_APPLE_major_runtime_vers [DW_FORM_data1] (0x05)","  DW_AT_low_pc [DW_FORM_addr] (0x0000000100003a68) ","  DW_AT_high_pc [DW_FORM_data4] (0x000003c0) "],"syntax":"cli"},{"inlineContent":[{"code":"dwarfdump","type":"codeVoice"},{"type":"text","text":" helpfully combines the "},{"code":"debug_ info","type":"codeVoice"},{"type":"text","text":" and "},{"code":"debug _abbrev","type":"codeVoice"},{"type":"text","text":" contents to show you the structure and content of the data in your dSYMs."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"File names and line numbers come from the "},{"code":"debug_line","type":"codeVoice"},{"type":"text","text":" stream"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"this stream defines a line table program where the individual file addresses can be mapped back to an exact line of code","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"generates a list of source code details which we can search to find the file and line","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Given a crash log and a DWARF, we can map back to the specific line of code where the crash has happened via ","type":"text"},{"type":"codeVoice","code":"atos"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["atos -o MyApp.dSYM\/Contents\/Resources\/DWARF\/MyApp -arch arm64 —l 0x10045c000 0x10045fb70"],"syntax":null},{"inlineContent":[{"type":"text","text":"Output:"}],"type":"paragraph"},{"type":"codeListing","code":["main (in MyApp) (main.swift:36)"],"syntax":null},{"inlineContent":[{"text":"DWARF also takes care of inline functions","type":"text"}],"type":"paragraph"},{"anchor":"DWARF-recap","type":"heading","level":4,"text":"DWARF recap"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"function and file relationships"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"inlined functions impact the quality of symbolication (DWARF can take care of this)"}]}]},{"content":[{"inlineContent":[{"text":"can be found in dSYMs and static libraries (prefer dSYM, as you can easily transfer them to others and have built-in support from several tools)","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Tools-and-tips","type":"heading","level":2,"text":"Tools and tips"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"in Xcode build settings, make sure that the "},{"code":"Debug Information Format","type":"codeVoice"},{"type":"text","text":" is set to "},{"code":"DWARF with dSYM File","type":"codeVoice"},{"type":"text","text":" for your Release mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"you can download your dSYMs through App Store Connect"}]}]}]},{"inlineContent":[{"text":"If you want to check that a certain dSYM is already on your device, you can use the ","type":"text"},{"code":"mdfind","type":"codeVoice"},{"text":" command","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["mdfind \"com_apple_xcode_dsyms_uuids == C061EE83-B61D-3352-8EE5-655491DB1D16\" \/User\/USER\/Documents\/MyApp.dSYM"],"syntax":null},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the alphanumeric string here is your binary’s UUID, which is a unique identifier defined in a load command"}]}]},{"inlineContent":[{"type":"text","text":"You can see the UUID for your dSYMs with "},{"type":"codeVoice","code":"symbols -uuid"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["symbols -uuid MyApp.dSYM"],"syntax":null},{"inlineContent":[{"type":"text","text":"The app’s UUID is in the "},{"code":"Binary Images","type":"codeVoice"},{"type":"text","text":" list section of crash reports and you can also see it with the "},{"code":"symbols","type":"codeVoice"},{"type":"text","text":" command:"}],"type":"paragraph"},{"type":"codeListing","code":["symbols -uuid MyApp"],"syntax":"cli"},{"inlineContent":[{"type":"text","text":"A toolchain could generate invalid DWARF. You can check this with:"}],"type":"paragraph"},{"type":"codeListing","code":["dwarfdump —verify MyApp.dSYM"],"syntax":null},{"inlineContent":[{"text":"You can use ","type":"text"},{"code":"symbols","type":"codeVoice"},{"text":" to check the types of debug information your app has available:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["symbols -arch arm64 MyApp"],"syntax":null},{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["0x0000000100003a68 (  Ox10c) main [FUNC, EXT, LENGTH, NameNList, MangledNameNList, Merged, NList, Dwarf, FunctionStarts] # 👈🏻","  0x0000000100003a68 (   0x74) main. swift:0","  0x0000000100003adc (    0x4) main. swift:29","  0x0000000100003ae0 (   0x44) <compiler-generated>:0","  0x0000000100003638 (   0x14) main.swift:36","  0x0000000100003624 (   0x38) main.swift:36","  0x0000000100003b70 (    0x4) <compiler-generated>:0","0x0000000100003674 (   0x3c) __swift_instantiateConcreteTypeFromMangledName [FUNC, OMIT-FP, PEXT, LENGTH, NameDwarfMIPSLinkag. # 👈🏻","  0x0000000100003674 (   0x3c) <compiler-generated>:0","0x0000000100003bb0 (  0x114) numberChoices () [FUNC, PEXT, LENGTH, NameDwarfMIPSLinkage, MangledNameNList, Merged, NList, Dwar. "],"syntax":"cli"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"these tags in square brackets tell you the information source"}],"type":"paragraph"}]},{"anchor":"Verify-entitlements","type":"heading","level":3,"text":"Verify entitlements"},{"inlineContent":[{"text":"If you’re certain that you have dSYMs available but still aren’t getting names for your functions in Instruments traces, check your entitlements and code signing:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["codesign --display -v  --entitlements :- MyApp.app"],"syntax":"cli"},{"type":"codeListing","code":["Format=app bundle with Mach-O universal (×86_64 arm64) ","CodeDirectory v=20500 size=909 flags=0x10000 (runtime) hashes=17+7 location=embedded ","Signature size=4810                     # 👈🏻","Signed Time=May 15, 2021 at 4:46:02 PM  # 👈🏻","Info.plist entries=23                   # 👈🏻","TeamIdentifier=59GAB85EFG               # 👈🏻","Runtime Version=12.0.0 ","Sealed Resources version=2 rules=13 files=4","Internal requirements count=1 size=200 ","<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"https:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">","<plist version= \"1.0\">","  <dict>","    <key>com.apple.security.app-sandbox<\/key>","    <true\/> ","    <key>com.apple-security.get-task-allow<\/key> # 👈🏻","    <true\/>                                      # 👈🏻","    ..."],"syntax":"xml"},{"inlineContent":[{"type":"text","text":"You should also verify that locally built apps for development have the "},{"type":"codeVoice","code":"get-task-allow"},{"type":"text","text":" entitlement."}],"type":"paragraph"},{"inlineContent":[{"text":"This entitlement grants permissions to tools such as Instruments to symbolicate your app.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t have the ","type":"text"},{"type":"codeVoice","code":"get-task-allow"},{"text":" entitlement enabled, you should check your ","type":"text"},{"type":"codeVoice","code":"Code Signing Inject Base Entitlements"},{"text":" build setting and make sure that it’s enabled as you’re developing.","type":"text"}],"type":"paragraph"},{"anchor":"DWARF-size-limits","type":"heading","level":3,"text":"DWARF size limits"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"limited to 4GB","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"consider splitting the project into separate components\/modules so that each one has its own smaller dSYM","type":"text"}]}]}]},{"anchor":"Written-By","type":"heading","level":2,"text":"Written By"},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"anchor":"Federico-Zanetello","type":"heading","level":3,"text":"Federico Zanetello"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}]}],"size":4}],"type":"row","numberOfColumns":5},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","type":"heading","level":2,"text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110370-Debug-Swift-debugging-with-LLDB","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-413-App-Startup-Time-Past-Present-and-Future"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"sampleCode","roleHeading":"WWDC21","title":"Symbolication: Beyond the basics","modules":[{"name":"WWDC Notes"}]},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"abstract":[{"text":"Discover how you can achieve maximum performance and insightful debugging with your app. Symbolication is at the center of tools such as Instruments and LLDB to help bridge the layers between your application’s runtime and your source code. Learn how this process works and the steps you can take to gain the most insight into your app.","type":"text"}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc21\/10211","overridingTitle":"Watch Video (37 min)","isActive":true,"type":"reference"},"kind":"sampleDownload"},"kind":"article","references":{"zntfdr.jpeg":{"variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg","type":"image","alt":null},"https://zntfdr.dev":{"identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"type":"link","title":"Blog","url":"https:\/\/zntfdr.dev"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"text":"GitHub","type":"text"}],"type":"link","title":"GitHub","url":"https:\/\/github.com\/zntfdr"},"WWDC21.jpeg":{"variants":[{"url":"\/images\/WWDC21.jpeg","traits":["1x","light"]}],"identifier":"WWDC21.jpeg","type":"image","alt":null},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"zntfdr":{"variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr","type":"image","alt":"Profile image of Federico Zanetello"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","type":"image","alt":null},"WWDC21-10211-diskSpace":{"variants":[{"url":"\/images\/WWDC21-10211-diskSpace.png","traits":["1x","light"]}],"identifier":"WWDC21-10211-diskSpace","type":"image","alt":null},"https://developer.apple.com/wwdc21/10211":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10211","type":"download","url":"https:\/\/developer.apple.com\/wwdc21\/10211"},"WWDC21-Icon.png":{"variants":[{"url":"\/images\/WWDC21-Icon.png","traits":["1x","light"]}],"identifier":"WWDC21-Icon.png","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"abstract":[{"text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"MusicKit","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DocC"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit 2"},{"type":"text","text":", and more."}],"kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc21","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","title":"WWDC21"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC17-413-App-Startup-Time-Past-Present-and-Future":{"kind":"article","title":"App Startup Time: Past, Present, and Future","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-413-App-Startup-Time-Past-Present-and-Future","role":"sampleCode","abstract":[{"text":"Learn about the dyld dynamic linker used on Apple platforms, how it’s changed over the years, and where it’s headed next. Find out how improved tooling makes it easier to optimize your app’s launch time, and see how new changes coming in dyld will bring even further launch time improvements.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc17-413-app-startup-time-past-present-and-future","type":"topic"},"WWDC21-10211-functionStarts":{"variants":[{"url":"\/images\/WWDC21-10211-functionStarts.png","traits":["1x","light"]}],"identifier":"WWDC21-10211-functionStarts","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","url":"\/documentation\/wwdcnotes","title":"WWDC Notes","role":"collection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110370-Debug-Swift-debugging-with-LLDB":{"abstract":[{"text":"Learn how you can set up complex Swift projects for debugging. We’ll take you on a deep dive into the internals of LLDB and debug info. We’ll also share best practices for complex scenarios such as debugging code built on build servers or code from custom build systems.","type":"text"}],"title":"Debug Swift debugging with LLDB","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110370-debug-swift-debugging-with-lldb","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110370-Debug-Swift-debugging-with-LLDB","type":"topic"},"WWDC21-10211-dwarfBinary":{"variants":[{"url":"\/images\/WWDC21-10211-dwarfBinary.png","traits":["1x","light"]}],"identifier":"WWDC21-10211-dwarfBinary","type":"image","alt":null},"WWDC21-10211-stripXcode":{"variants":[{"url":"\/images\/WWDC21-10211-stripXcode.png","traits":["1x","light"]}],"identifier":"WWDC21-10211-stripXcode","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","title":"Federico Zanetello (332 notes)","url":"\/documentation\/wwdcnotes\/zntfdr","role":"sampleCode","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"kind":"article"}}}