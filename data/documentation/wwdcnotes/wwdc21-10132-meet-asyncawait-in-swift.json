{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you call an asynchronous function, it unblocks your thread quickly, having kicked off its work. That allows the thread to do other things while that long running work completes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"in functions, properties, and initializers, ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":" can be used on expressions to indicate where the function might unblock the thread"}]}]}],"type":"unorderedList"},{"level":2,"text":"Async Sequences","type":"heading","anchor":"Async-Sequences"},{"inlineContent":[{"text":"An async sequence is just like a normal sequence except that it vends its elements asynchronously. So fetching the next item must be marked with the await keyword, indicating that it’s async.","type":"text"}],"type":"paragraph"},{"code":["for await id in staticImageIDsURL.lines {","  let thumbnail = await fetchThumbnail(for: id)","  collage.add(thumbnail)","}","let result = await collage.draw()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"As the function iterates over the async sequence, over and over, it may unblock the thread while awaiting the next element and then resume either with the next element into the body of the loop or, if there are no elements left, after the loop.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Suspension","anchor":"Suspension","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" keyword indicates that your async function might suspend there.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"What does it mean for an async function to suspend?"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"For sync functions, when called, you hand your function’s thread control over to that function. Then the thread will be fully occupied doing work on behalf of that one function until it finishes"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"For asynchronous functions, when called, it ","type":"text"},{"inlineContent":[{"type":"text","text":"can"}],"type":"emphasis"},{"type":"text","text":" give up control of the thread by suspending. When an async function suspends, it gives up control of the thread. But rather than giving control back to your function, it gives control of the thread to the system. The system is then free to use the thread to do other work."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"a function can suspend itself as many times as it needs to","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Takeaways","anchor":"Takeaways","type":"heading"},{"items":[{"content":[{"inlineContent":[{"code":"async","type":"codeVoice"},{"text":" enables a function to suspend - when a function suspends itself, it suspends its callers too. So its callers must be async as well","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"await","type":"codeVoice"},{"type":"text","text":" marks where a function "},{"inlineContent":[{"text":"may","type":"text"}],"type":"emphasis"},{"type":"text","text":" suspend"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"other work can happen during a suspension - the thread is not blocked"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"once an awaited async call completes, execution resumes after the await"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Bridging from sync to async","anchor":"Bridging-from-sync-to-async","type":"heading"},{"inlineContent":[{"type":"text","text":"When you want to call an async function from a sync function, you can use an async task function:"}],"type":"paragraph"},{"code":["struct ThumbnailView: View {","  ...","","  var body: some View {","    Image(uiImage: self.image ?? placeholder)","      .onAppear { \/\/ 👈🏻 on appear accepts a sync function","        Task { \/\/ 👈🏻 async task","          self.image = try? await self.viewModel.fetchThumbnail(for: post.id)","        }","      }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"An async task packages up the work in the closure and sends it to the system for immediate execution on the next available thread, like the async function on a global dispatch queue."}],"type":"paragraph"},{"level":2,"text":"Async alternatives and continuations","anchor":"Async-alternatives-and-continuations","type":"heading"},{"inlineContent":[{"type":"text","text":"When you have a sync function and would like to create an async alternative, use "},{"code":"withCheckedThrowingContinuation","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["\/\/ Existing function","func getPersistentPosts(completion: @escaping ([Post], Error?) -> Void) {     ","  do {","    let req = Post.fetchRequest()","    req.sortDescriptors = [NSSortDescriptor(key: \"date\", ascending: true)]","    let asyncRequest = NSAsynchronousFetchRequest<Post>(fetchRequest: req) { result in","      completion(result.finalResult ?? [], nil)","    }","    try self.managedObjectContext.execute(asyncRequest)","  } catch {","    completion([], error)","  }","}","","\/\/ Async alternative","func persistentPosts() async throws -> [Post] {     ","  return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<[Post], Error>) in","    self.getPersistentPosts { posts, error in","      if let error = error { ","        continuation.resume(throwing: error) ","      } else {","        continuation.resume(returning: posts)","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Written By","anchor":"Written-By","type":"heading"},{"numberOfColumns":5,"columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}],"size":1},{"content":[{"text":"Federico Zanetello","level":3,"anchor":"Federico-Zanetello","type":"heading"},{"inlineContent":[{"isActive":true,"overridingTitle":"Contributed Notes","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}],"size":4}],"type":"row"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"level":2,"text":"Related Sessions","anchor":"Related-Sessions","type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10142-Efficiency-awaits-Background-tasks-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10017-Bring-Core-Data-concurrency-to-Swift-and-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10054-Whats-new-in-AppKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10086-Whats-new-in-CloudKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10146-Whats-new-in-AVFoundation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10296-Diagnose-unreliable-code-with-test-repetitions"],"type":"links","style":"list"},{"inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"kind":"article","metadata":{"roleHeading":"WWDC21","title":"Meet async\/await in Swift","modules":[{"name":"WWDC Notes"}],"role":"sampleCode"},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","interfaceLanguage":"swift"},"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video (33 min)","identifier":"https:\/\/developer.apple.com\/wwdc21\/10132","isActive":true,"type":"reference"}},"abstract":[{"type":"text","text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions."}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10194-Swift-concurrency-Update-a-sample-app":{"title":"Swift concurrency: Update a sample app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app","abstract":[{"type":"text","text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We’ll also explore techniques for migrating existing code to Swift concurrency over time."}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10095-Use-asyncawait-with-URLSession":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","abstract":[{"type":"text","text":"Discover how you can adopt Swift concurrency in URLSession using async\/await and AsyncSequence, and how you can apply Swift concurrency concepts to improve your networking code."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10095-use-asyncawait-with-urlsession","kind":"article","type":"topic","title":"Use async\/await with URLSession"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10142-Efficiency-awaits-Background-tasks-in-SwiftUI":{"title":"Efficiency awaits: Background tasks in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc22-10142-efficiency-awaits-background-tasks-in-swiftui","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10142-Efficiency-awaits-Background-tasks-in-SwiftUI","abstract":[{"type":"text","text":"Background Tasks help apps respond to system events and keep time-sensitive data up to date. Learn how you can use the SwiftUI Background Tasks API to handle tasks succinctly. We’ll show you how to use Swift Concurrency to handle network responses, background refresh, and more — all while preserving performance and power."}],"kind":"article","role":"sampleCode"},"https://developer.apple.com/wwdc21/10132":{"checksum":null,"url":"https:\/\/developer.apple.com\/wwdc21\/10132","type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10132"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10019-Discover-concurrency-in-SwiftUI":{"abstract":[{"type":"text","text":"Discover how you can use Swift’s concurrency features to build even better SwiftUI apps. We’ll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we’ll take you through the process of enabling additional asynchronous flows in your custom views."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10019-discover-concurrency-in-swiftui","kind":"article","type":"topic","title":"Discover concurrency in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10296-Diagnose-unreliable-code-with-test-repetitions":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10296-diagnose-unreliable-code-with-test-repetitions","type":"topic","title":"Diagnose unreliable code with test repetitions","abstract":[{"type":"text","text":"Test repetitions can help you debug even the most unreliable code. Discover how you can use the maximum repetitions, until failure, and retry on failure testing modes within test plans, Xcode, and xcodebuild to track down bugs and crashers and make your app more stable for everyone."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10296-Diagnose-unreliable-code-with-test-repetitions"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10146-Whats-new-in-AVFoundation":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10146-Whats-new-in-AVFoundation","url":"\/documentation\/wwdcnotes\/wwdc21-10146-whats-new-in-avfoundation","kind":"article","title":"What’s new in AVFoundation","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Discover the latest updates to AVFoundation, Apple’s framework for inspecting, playing, and authoring audiovisual presentations. We’ll explore how you can use AVFoundation to query attributes of audiovisual assets, further customize your custom video compositions with timed metadata, and author caption files."}]},"WWDC21.jpeg":{"identifier":"WWDC21.jpeg","type":"image","alt":null,"variants":[{"url":"\/images\/WWDC21.jpeg","traits":["1x","light"]}]},"zntfdr.jpeg":{"alt":null,"identifier":"zntfdr.jpeg","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC Notes","role":"collection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"title":"Visualize and optimize Swift concurrency","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","abstract":[{"text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc21","kind":"article","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","type":"topic","abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"DocC"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit 2"},{"type":"text","text":", and more."}],"title":"WWDC21"},"zntfdr":{"variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","alt":"Profile image of Federico Zanetello","identifier":"zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10058-Meet-AsyncSequence":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","abstract":[{"type":"text","text":"Iterating over a sequence of values over time is now as easy as writing a “for” loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We’ll also show you how to adapt existing code to provide asynchronous sequences of your own."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10058-meet-asyncsequence","kind":"article","type":"topic","title":"Meet AsyncSequence"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"title":"Eliminate data races using Swift Concurrency","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency","type":"topic","abstract":[{"type":"text","text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","kind":"article","role":"sampleCode","title":"Explore structured concurrency in Swift","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"abstract":[{"text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug.","type":"text"}],"kind":"article","title":"Protect mutable state with Swift actors","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10086-Whats-new-in-CloudKit":{"url":"\/documentation\/wwdcnotes\/wwdc21-10086-whats-new-in-cloudkit","kind":"article","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10086-Whats-new-in-CloudKit","title":"What’s new in CloudKit","abstract":[{"type":"text","text":"CloudKit provides a secure, convenient, and reliable cloud database for your apps — and it’s only getting better. Discover how you can unravel your threads with support for async\/await and convenience API additions. We’ll also show you how to encourage collaboration between people using your app through sharing entire record zones of data, and explore how to adopt CloudKit features like encrypted values and help protect sensitive data within your app."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","abstract":[{"type":"text","text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","kind":"article","type":"topic","title":"Swift concurrency: Behind the scenes"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"title":"Federico Zanetello (332 notes)","role":"sampleCode"},"WWDC21-Icon.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDC21-Icon.png","traits":["1x","light"]}],"identifier":"WWDC21-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110360-Use-Xcode-for-serverside-development":{"url":"\/documentation\/wwdcnotes\/wwdc22-110360-use-xcode-for-serverside-development","title":"Use Xcode for server-side development","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","type":"topic","role":"sampleCode","kind":"article","abstract":[{"text":"Discover how you can create, build, and deploy a Swift server app alongside your pre-existing Xcode projects within the same workspace. We’ll show you how to create your own local app and test endpoints using Xcode, and explore how you can structure and share code between server and client apps to ease your development process","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10054-Whats-new-in-AppKit":{"url":"\/documentation\/wwdcnotes\/wwdc21-10054-whats-new-in-appkit","kind":"article","role":"sampleCode","type":"topic","title":"What’s new in AppKit","abstract":[{"text":"Explore the latest advancements in Mac app development with AppKit. We’ll show how you can enhance your app’s design with new control features and SF Symbols 3, build powerful text experiences using TextKit 2, and harness the latest Swift features in your app.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10054-Whats-new-in-AppKit"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10192-Whats-new-in-Swift":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","abstract":[{"text":"Join us for an update on Swift. Discover the latest language advancements that make your code easier to read and write. Explore the growing number of APIs available as Swift packages. And we’ll introduce you to Swift’s async\/await syntax, structured concurrency, and actors.","type":"text"}],"type":"topic","title":"What‘s new in Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10192-whats-new-in-swift","kind":"article","role":"sampleCode"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link","title":"GitHub","url":"https:\/\/github.com\/zntfdr"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10017-Bring-Core-Data-concurrency-to-Swift-and-SwiftUI":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10017-Bring-Core-Data-concurrency-to-Swift-and-SwiftUI","title":"Bring Core Data concurrency to Swift and SwiftUI","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10017-bring-core-data-concurrency-to-swift-and-swiftui","abstract":[{"text":"Discover how Core Data is adopting the new concurrency capabilities of Swift 5.5, leading to more concise, efficient, and safe asynchronous code. We’ll show you how to update Core Data in your apps to work with concurrency, and detail the many other improvements throughout the framework that make working with Swift and SwiftUI more expressive and powerful.","type":"text"}]},"https://zntfdr.dev":{"url":"https:\/\/zntfdr.dev","titleInlineContent":[{"type":"text","text":"Blog"}],"type":"link","title":"Blog","identifier":"https:\/\/zntfdr.dev"},"WWDCNotes.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png"}}}