{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Core-Motion-Overview","type":"heading","text":"Core Motion Overview","level":1},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"CoreMotion serves as a central framework to access motion data from inertial sensors."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Crash detection, fall detection, and spatial audio are just some of the features that rely on improved sensing capabilities."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Capturing the way a device moves is central to how we experience them.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Many of Apple’s devices use built-in sensors to help create a notion of their movement through space.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Apple Watch for example has built-in sensors include:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"an accelerometer, which measures acceleration","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"a gyroscope, which measures rotation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"a magnetometer, which measures the magnetic field","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"a barometer, which measures pressure.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Together, they help track how the device moves and orients in space.","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"Generating an idea of a device’s movement is fundamental like steps taken, calories burned.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It supports experiences that rely on the orientation of the device, like with a stargazing app","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Headphone-motion","type":"heading","text":"Headphone motion","level":2},{"items":[{"content":[{"inlineContent":[{"text":"Dynamic head tracking relies on the same device motion algorithms that live on iPhone and Apple Watch.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"CMHeadphoneMotionManager","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Introduced a couple years ago","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provided the same data that made dynamic head tracking possible"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Head tracking unlocked features like gaming to fitness applications."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"coming to macOS 14 and can be used to stream device motion from audio products that support spatial audio with dynamic head tracking.","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"CMDeviceMotion"},{"type":"text","text":" for data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CMDeviceMotion.SensorLocation"},{"type":"text","text":" for sensor location"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"CMHeadphoneMotionManagerDelegate"},{"type":"text","text":" for connection state"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Headphone-motion-events","type":"heading","text":"Headphone motion events","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Adopt the ","type":"text"},{"code":"CMHeadphoneMotionManagerDelegate protocol","type":"codeVoice"},{"text":" to respond to connection state updates.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If Automatic Ear Detection is enabled we receive events that impact head tracking."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the buds are taken out of ear we get a disconnect event and a connect event when they’re put back in.","type":"text"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","func headphoneMotionManagerDidConnect(_ manager: CMHeadphoneMotionManger) {","\t\/\/\tTracking started with connect event","}","","func headphoneMotionManagerDidDisConnect(_ manager: CMHeadphoneMotionManger) {","\t\/\/\tTracking stopped with connect event","}",""]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"if automatic head detection is enabled, putting on and taking off over ear headphones will trigger these events."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Setting up "},{"code":"CMHeadphoneMotionManager","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"make sure that device motion data is available by checking the ","type":"text"},{"code":"isDeviceMotionAvailable","type":"codeVoice"},{"text":" property","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assign a delegate to receive the connection events"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Then, start streaming data.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CMHeadphoneMotionManager"},{"type":"text","text":" exposes both a push and a pull interface to grab data."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"startDeviceMotionUpdates","type":"codeVoice"},{"text":" and specify an operation queue and handler.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Users need to authorize your app for motion data using the Motion Usage Description key you add to your Info.plist.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"can check the ","type":"text"},{"type":"codeVoice","code":"authorizationStatus"},{"text":" property to confirm whether you’ve been authorized for motion data","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Once authorized and data starts streaming, tracking head pose is easy using the attitude information provided with each device motion update."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","\/\/ Start streaming headphone motion","let manager = CMHeadphoneMotionManager()","guard manger.isDeviceMotionAvailable else {","\treturn","}","manager.delegate = self","","manager.startDeviceMotionUpdates(to: queue) { (motion, error) in","\tguard let motion else {","\t\treturn","\t}","\/\/Track head movement using device motion","let currentPose = motion.attitude","  if let startingPose {","\t  currentPose.Multiply(byInverseOf: startingPoint)","\t}","}",""]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Along with the attitude, user acceleration, and rotation rate data, each device motion update contains sensor location information."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"motion data is delivered to you from one bud at a time.","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Sensor-location","type":"heading","text":"Sensor location","level":3},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Use SensorLocation to Identify which bug produced the data"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The bud streaming the data can be impacted by a number of things, including in-ear state if Automatic Ear Detection is enabled."}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","\tpublic enum SensorLocation: Int {","\t","\tcase ‘default’ = 0","\tcase headphoneLeft = 1","\tcase headphoneRight = 2","}",""]},{"anchor":"Submersion","type":"heading","text":"Submersion","level":2},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"CMWaterSubmersionManager:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Available on Apple Watch Ultra running watchOS 9.0","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Uses the built-in barometer to tracks metrics during water-based activities.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Further CMWaterSubmersionManagerDelegate is used for:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Submersion and depth state","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Surface air pressure"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Water Depth"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Temperature","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the Shallow Depth and Pressure capability"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure Auto Launch settings"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","\/\/ start tracking water submersion state","guard CMWaterSubmersionManager.waterSubmersionAvailable else {","\treturn","}","","let waterSubmersionManager = CMWaterSubmersionManager()","","\/\/Assign a delegate to recieve events and measurement updates","waterSubmersionManager.delegate = self ",""]},{"inlineContent":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Getting submersion updates with CMWaterSubmersionManagerDelegate"}],"type":"strong"}],"type":"emphasis"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Submersion event"}],"type":"emphasis"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","func(_ manager: CMWaterSubmersionManager, didUpdate event: CMWaterSubmersionEvent) {","","\tvar submerged: Bool ?","\tswitch event.state {","\tcase .unknown:","\t\tsubmerged = nil","\tcase .notSubmerged:","\t\tsubmerged = false","\tcase .submerged:","\t\tsubmerged = true","\t@unknown default:","\t\tfatalError(“Unknown submersion event: \\(event.state)”)","\t}","\t\/\/ Handle water submersion update","}",""]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Error"}],"type":"emphasis"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","func manager(_ manager: CMWaterSubmersionManager, errorOccurred error: Error) {","\t\/\/ Handle error received when there are problems delivering submersion updates","}",""]},{"items":[{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Temperature update","type":"text"}]}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterTemperature) {","","\tlet temp = measurement.temperature","\tlet uncertainty = measurement.temperatureUncertainty","\tlet currentTemperature = “\\(temp.value) * \\(uncertainty.value) \\(temp.unit)” ","\t\/\/ Handle current water temperature update","}",""]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Measurement update"}],"type":"emphasis"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["","func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterSubmersion) {","\tvar current Depth: String","\tif let depth = measurement.dept {","\t\tcurrentDepth = “\\(depth.value) \\(depth.unit)”","\t} else {","\t\tcurrentDepth = “None”","\t}","\t\/\/ Handle new measurement update","\t\/\/ Similar to depth, pressure and surface contain both a value and unit","}"]},{"anchor":"Depth-State","type":"heading","text":"Depth State","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Out of water, its the ","type":"text"},{"code":"notSubmerged","type":"codeVoice"},{"text":" state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Above 1 meter under water its "},{"code":"submergedShallow","type":"codeVoice"},{"type":"text","text":" state."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Beyond 1 meter, its the "},{"type":"codeVoice","code":"submergedDeep"},{"type":"text","text":" state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Shallow Depth and Pressure, ensures the app to stay within depth zones that minimize the risk of decompression sickness.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It keeps the maximum depth at 6 meters, and prompts when you’re close to that.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"6 meters, you’ll enter the "},{"type":"codeVoice","code":"approachingMaxDepth"},{"type":"text","text":" state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Beyond 6 meters, you’re in the "},{"type":"codeVoice","code":"pastMaxDepth"},{"type":"text","text":" state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Data is vended down to 6 meters, plus some uncertainty in the "},{"type":"codeVoice","code":"pastMaxDepth"},{"type":"text","text":" state."}]}]},{"content":[{"inlineContent":[{"text":"Beyond that, you’re in the ","type":"text"},{"code":"sensorDepthError","type":"codeVoice"},{"text":" state.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Batched-sensors","type":"heading","text":"Batched sensors","level":2},{"anchor":"Comparing-motion-interface","type":"heading","text":"Comparing motion interface:","level":3},{"anchor":"How-sensor-data-is-delivered","type":"heading","text":"How sensor data is delivered","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Device motion algorithms fuse data from the built-in accelerometer and gyroscope to provide an easy way to track the way a device, moving through space."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CMMotionManager delivers samples on a per-sample basis to your app in real time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum supported frequency is 100 Hz hence it’s a great choice for low latency requirements, like UI components that rely on the instantaneous attitude of the device.","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"how-high-rate-data-is-delivered-using-the-new-CMBatchedSensorManager","type":"heading","text":"how high rate data is delivered using the new CMBatchedSensorManager","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CMBatchedSensorManager provides batches of sensor data on a fixed schedule, delivering a batch of data per second."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Higher rate data is delivered at a lower overhead to your app."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s 800 Hz accelerometer and 200 Hz device motion, compared to 100 Hz with the existing CMMotionManager."}]}]},{"content":[{"inlineContent":[{"text":"Access some data streams that power the features that keep us safe, like fall and crash detection.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If your app has workout-centric features that can benefit from high rate data, but without very tight latency requirements, then CMBatchedSensorManager is well suited.","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Using-high-rate-motion-data","type":"heading","text":"Using high- rate motion data","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Evaluating a swing:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A swing has a couple different phases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pre-swing setup, the actual swing and then the post-impact follow-through."}]}]},{"content":[{"inlineContent":[{"text":"time to contact is also an important metric for swing quality.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Δt = time to contact, from (start of swing to Impact)","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"First detect the point of impact between the bat and the ball using 800 Hz accelerometer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then detect the start of the swing using rotation along gravity with 200 Hz device motion."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Compute time to contact.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then use CMBatchedSensorManager to start streaming and processing data."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"this a workout-centric API, you need to have an active HealthKit workout session to get data."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Swift async support, it’s easy to receive batches of sensor data and process each batch.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Make sure you evaluate for conditions to exit the loop.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Pick the right interface for you"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"CMMotionManager","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"CMBatchedSensorManager","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"100 Hz maximum or 200 Hz device motion and 800 Hz accelerometer"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Per-sample dispatch or batched delivery schedule","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Low-latency requirements\/Motion-based features outside of workouts or workout-centric features that can benefit from high-rate data. It’s available on Apple Watch Series 8 and Ultra.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Written-By","type":"heading","text":"Written By","level":2},{"columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"RamitSharma991"}],"type":"paragraph"}],"size":1},{"content":[{"text":"Ramit Sharma","level":3,"type":"heading","anchor":"Ramit-Sharma"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","overridingTitle":"Contributed Notes","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/RamitSharma991","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/iosDev_ramit","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/","type":"reference","isActive":true}],"type":"paragraph"}],"size":4}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10016-Build-custom-workouts-with-WorkoutKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10656-Beyond-counting-steps"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","overridingTitle":"Watch Video (23 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10179"}},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10179-whats-new-in-core-motion"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"What’s new in Core Motion","role":"sampleCode","roleHeading":"WWDC23"},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10179-Whats-new-in-Core-Motion","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"abstract":[{"type":"text","text":"Learn how you can use the latest Core Motion updates to expand how your app uses motion data. Discover how to stream higher-frequency sensor data when recording a HealthKit workout on Apple Watch. We’ll show you how you can get submersion data — including water depth and temperature — during water-based activities like snorkeling. Find out how to stream motion data like attitude, user acceleration, and rotation rate from audio devices like AirPods to connected devices like iPhone and Mac."}],"references":{"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","type":"image","alt":null},"https://":{"title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/","identifier":"https:\/\/","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10656-Beyond-counting-steps":{"type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc20-10656-beyond-counting-steps","title":"Beyond counting steps","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10656-Beyond-counting-steps","abstract":[{"text":"Move beyond step counting in your app and give people a much richer understanding of their mobility. We’ll detail how you can take advantage of mobility metrics in iOS and watchOS to measure movement in more distinct and actionable ways. Learn about the latest HealthKit APIs for accessing mobility data, strategies for meaningful data aggregation, and how to interpret results for people using your app.","type":"text"}],"role":"sampleCode"},"RamitSharma991.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/RamitSharma991.jpeg","traits":["1x","light"]}],"identifier":"RamitSharma991.jpeg","type":"image"},"WWDC23.jpeg":{"identifier":"WWDC23.jpeg","type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC23.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10016-Build-custom-workouts-with-WorkoutKit":{"kind":"article","title":"Build custom workouts with WorkoutKit","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10016-build-custom-workouts-with-workoutkit","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10016-Build-custom-workouts-with-WorkoutKit","abstract":[{"text":"WorkoutKit makes it easy to create, preview, and schedule planned workouts for the Workout app on Apple Watch. Learn how to build custom intervals, create alerts, and use the built-in preview UI to send your own workout routines to Apple Watch.","type":"text"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","url":"\/documentation\/wwdcnotes"},"https://x.com/iosDev_ramit":{"identifier":"https:\/\/x.com\/iosDev_ramit","url":"https:\/\/x.com\/iosDev_ramit","title":"X\/Twitter","type":"link","titleInlineContent":[{"text":"X\/Twitter","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/RamitSharma991":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","role":"sampleCode","images":[{"type":"card","identifier":"RamitSharma991.jpeg"},{"type":"icon","identifier":"RamitSharma991.jpeg"}],"url":"\/documentation\/wwdcnotes\/ramitsharma991","title":"Ramit Sharma (15 notes)","type":"topic","abstract":[{"text":"Indie iOS Dev. Swift, SwiftUI, Obj-C, UX and related.","type":"text"}],"kind":"article"},"RamitSharma991":{"alt":"Profile image of Ramit Sharma","variants":[{"url":"\/images\/WWDCNotes\/RamitSharma991.jpeg","traits":["1x","light"]}],"identifier":"RamitSharma991","type":"image"},"https://developer.apple.com/wwdc23/10179":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10179","url":"https:\/\/developer.apple.com\/wwdc23\/10179","type":"download","checksum":null},"https://github.com/RamitSharma991":{"identifier":"https:\/\/github.com\/RamitSharma991","url":"https:\/\/github.com\/RamitSharma991","title":"GitHub","type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}]},"WWDC23-Icon.png":{"identifier":"WWDC23-Icon.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","kind":"article","role":"collectionGroup","title":"WWDC23","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23"}}}