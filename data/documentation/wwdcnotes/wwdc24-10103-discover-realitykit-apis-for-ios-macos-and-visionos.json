{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc24-10103-discover-realitykit-apis-for-ios-macos-and-visionos"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Learn how new cross-platform APIs in RealityKit can help you build immersive apps for iOS, macOS, and visionOS. Check out the new hover effects, lights and shadows, and portal crossing features, and view them in action through real examples."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sampleCodeDownload":{"action":{"isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10103","type":"reference","overridingTitle":"Watch Video (31 min)"},"kind":"sampleDownload"},"kind":"article","metadata":{"roleHeading":"WWDC24","title":"Discover RealityKit APIs for iOS, macOS and visionOS","modules":[{"name":"WWDC Notes"}],"role":"sampleCode"},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Key-Takeaways","text":"Key Takeaways"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"üñ•Ô∏è Feature parity on visionOS, iOS, iPadOS & macOS","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"üí° Lights on visionOS","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"üîò New hover effect styles: highlight & shader"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"üëã Hand tracking via AnchorEntities for hand joints"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"üß≤ Force effects","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"‚õìÔ∏è‚Äçüí• Physics joints","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"üßø Portal enhancements"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"üëÅÔ∏è BillboardComponent"}]}]},{"content":[{"inlineContent":[{"text":"ü™© Subdivision surface & much more","type":"text"}],"type":"paragraph"}]}]},{"type":"row","numberOfColumns":2,"columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"WWDC24-10103-Overview1"}],"type":"paragraph"}],"size":1},{"content":[{"inlineContent":[{"identifier":"WWDC24-10103-Overview2","type":"image"}],"type":"paragraph"}],"size":1}]},{"type":"row","numberOfColumns":2,"columns":[{"content":[{"inlineContent":[{"identifier":"WWDC24-10103-Overview3","type":"image"}],"type":"paragraph"}],"size":1},{"content":[{"inlineContent":[{"type":"image","identifier":"WWDC24-10103-Overview4"}],"type":"paragraph"}],"size":1}]},{"type":"heading","level":2,"anchor":"Sample-game","text":"Sample game"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The presenter, Yidi Zhu, a RealityKit engineer, showcases the new features of RealityKit by creating a toy spaceship game in this session. The game is extended in the session "},{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-111801-Enhance-your-spatial-computing-app-with-RealityKit-audio","isActive":true},{"type":"text","text":" and the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/RealityKit\/creating-a-spaceship-game","isActive":true},{"type":"text","text":" is available online."}]},{"type":"heading","level":2,"anchor":"New-features-not-covered-in-detail","text":"New features not covered in detail"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following new capabilities of RealityKit are just briefly mentioned in this session, the viewer is referred to the documentation:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Low-level access to meshes and textures via "},{"inlineContent":[{"type":"codeVoice","code":"LowLevelMesh"}],"type":"strong"},{"type":"text","text":" and "},{"inlineContent":[{"type":"codeVoice","code":"LowLevelTexture"}],"type":"strong"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"New animation system capabilities, such as ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"animation timelines"}]},{"text":" in Reality Composer Pro.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"code":"BillboardComponent","type":"codeVoice"}]},{"type":"text","text":" introduces a privacy-preserving way to make entities always face the user."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"PixelCast"}],"type":"strong"},{"text":" enables pixel-perfect entity selection through a rendering-based approach.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Subdivision surface"}]},{"type":"text","text":" enables smooth surfaces rendering without creating a dense mesh."}]}]}]},{"type":"heading","level":2,"anchor":"Cross-platform-capabilities","text":"Cross-platform capabilities"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"text":"RealityKit has achieved ","type":"text"},{"inlineContent":[{"text":"feature parity","type":"text"}],"type":"strong"},{"text":" on all platforms (except tvOS): visionOS, iOS, iPadOS and macOS. But there are differences to consider, when developing a cross-platform app:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"visionOS"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"iOS, iPadOS, macOS"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Spatial UI layout","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"2D UI layout","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"ImmersiveSpace","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"RealityView"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Hands-based input"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Touch-based input","type":"text"}],"type":"paragraph"}]]]}],"size":3},{"content":[{"inlineContent":[{"type":"image","identifier":"WWDC24-10103-APIs"}],"type":"paragraph"}],"size":2}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To this end, "},{"type":"codeVoice","code":"RealityView"},{"type":"text","text":" has received some enhancements like "},{"inlineContent":[{"text":"camera mode","type":"text"}],"type":"strong"},{"type":"text","text":" and "},{"inlineContent":[{"text":"post processing","type":"text"}],"type":"strong"},{"type":"text","text":"."}]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"text":"The camera mode can be set to world tracking like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["RealityView { content in","#if os(iOS)","    content.camera = .worldTracking","#endif","}"]}],"name":"Tip"},{"type":"heading","level":2,"anchor":"Dynamic-lights","text":"Dynamic lights"},{"type":"paragraph","inlineContent":[{"type":"text","text":"RealityKit‚Äôs three types of lights are now available in visionOS 2.0 (author‚Äôs comment: Finally! üéâ)."}]},{"type":"paragraph","inlineContent":[{"text":"However, only spot and directional lights can cast shadows (author‚Äôs comment: üò≠).","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC24-10103-Lights","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here‚Äôs how to add a spotlight to a spaceship‚Äôs "},{"inlineContent":[{"type":"text","text":"Headlight"}],"type":"emphasis"},{"type":"text","text":" entity:"}]},{"type":"codeListing","code":["guard let lightEntity = spaceship.findEntity(named: \"HeadLight\") else { return }","lightEntity.components.set(SpotLightComponent(color: .yellow, intensity: 10000.0, attenuationRadius: 6.0))","lightEntity.components.set(SpotLightComponent.Shadow())"],"syntax":"swift"},{"type":"aside","style":"tip","content":[{"inlineContent":[{"type":"text","text":"If you don‚Äôt want an entity to cast a shadow, use this code:"}],"type":"paragraph"},{"code":["let component = DynamicLightShadowComponent(castsShadow: false)","entity.components.set(component)"],"type":"codeListing","syntax":"swift"}],"name":"Tip"},{"type":"heading","level":2,"anchor":"Hover-effects","text":"Hover effects"},{"type":"paragraph","inlineContent":[{"code":"HoverEffectComponent","type":"codeVoice"},{"text":" has two new styles, in addition to the default ","type":"text"},{"code":"spotlight","type":"codeVoice"},{"text":" style:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Highlight","type":"text"}],"type":"strong"},{"text":": The ","type":"text"},{"code":"highlight","type":"codeVoice"},{"text":" style applies a uniform highlight to the entire mesh. Its tint color and strength can be modified, which is now also possible for the ","type":"text"},{"code":"spotlight","type":"codeVoice"},{"text":" style:","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["let highlightStyle = HoverEffectComponent.HighlightHoverEffectStyle(color: .lightYellow, strength: 0.8)","let hoverEffect = HoverEffectComponent(.highlight(highlightStyle))","spaceship.components.set(hoverEffect)"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Shader","type":"text"}],"type":"strong"},{"text":": The shader style integrates with a shader graph material created with Reality Composer Pro, using the HoverState node‚Äôs intensity value:","type":"text"}],"type":"paragraph"}]}]},{"type":"row","numberOfColumns":3,"columns":[{"size":2,"content":[{"syntax":"swift","type":"codeListing","code":["let hoverEffect = HoverEffectComponent(.shader(.default))","spaceship.components.set(hoverEffect)"]},{"inlineContent":[{"type":"text","text":"A more complex example is developed in the session "},{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","type":"reference","isActive":true}],"type":"paragraph"}]},{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"WWDC24-10103-HoverStateNode"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"Hand-tracking","text":"Hand tracking"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Spatial Tracking API makes custom hand tracking easier, which was previously possibly through ARKit only:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use a ","type":"text"},{"type":"codeVoice","code":"SpatialTrackingSession"},{"text":" to get the user‚Äôs consent for hand tracking.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"AnchorEntity"},{"type":"text","text":" for a joint like this:"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC24-10103-HandTracking"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here‚Äôs how to control a spaceship‚Äôs acceleration via the distance between left thumb and index finger, in a system‚Äôs update function:"}]}]}]},{"type":"codeListing","code":["class HandTrackingSystem: System {","    func update(context: SceneUpdateContext) {","        let indexTipPosition = indexTipEntity.position(relativeTo: nil)","        let thumbTipPosition = thumbTipEntity.position(relativeTo: nil)","        let distance = distance(indexTipPosition, thumbTipPosition)","        let force = spaceship.transform.forward * computeThrottle(with: distance)","        spaceship.addForce(force, relativeTo: nil)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another example is developed in the session "},{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","isActive":true}]},{"type":"heading","level":2,"anchor":"Force-effects","text":"Force effects"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are 4 built-in force effects, that define a volume and continuously apply forces to physics bodies in that volume:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Constant radial"}],"type":"strong"},{"text":" applies a constant force towards the center","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Vortex","type":"text"}],"type":"strong"},{"text":" applies forces that circulate bodies around the axis","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Drag","type":"text"}],"type":"strong"},{"type":"text","text":" applies a breaking force proportional to the velocity"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Turbulence"}],"type":"strong"},{"text":" applies random forces","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC24-10103-ForceEffects"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Custom","type":"text"}]},{"type":"text","text":" force effects can be defined by setting "},{"type":"codeVoice","code":"parameterTypes"},{"type":"text","text":", "},{"type":"codeVoice","code":"forceMode"},{"type":"text","text":", and an "},{"type":"codeVoice","code":"update"},{"type":"text","text":" function of a "},{"type":"codeVoice","code":"ForceEffectProtocol"},{"type":"text","text":", like this gravity effect:"}]},{"type":"codeListing","code":["struct Gravity: ForceEffectProtocol {","    var parameterTypes: PhysicsBodyParameterTypes { [.position, .distance] }","    var forceMode: ForceMode = .force","","    func update(parameters: inout ForceEffectParameters) {","        guard let distances = parameters.distances,","              let positions = parameters.positions else { return }","","        for i in 0..<parameters.physicsBodyCount {","            let force = computeForce(distances[i], positions[i])","            parameters.setForce(force, index: i)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom force effects can be activated like this:"}]},{"type":"codeListing","code":["let gravity = ForceEffect(effect: Gravity(),","                          spatialFalloff: SpatialForceFalloff(bounds: .sphere(radius: 8.0)),","                          mask: .asteroids)","planet.components.set(ForceEffectComponent(effects: [gravity]))"],"syntax":"swift"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To apply an initial velocity to an entity, use "},{"code":"PhysicsMotionComponent","type":"codeVoice"},{"type":"text","text":" like this:"}]},{"syntax":"swift","code":["let physicsMotion = PhysicsMotionComponent(linearVelocity: initialVelocity)","asteroid.components.set(physicsMotion)"],"type":"codeListing"}],"name":"Note"},{"type":"heading","level":2,"anchor":"Physics-joints","text":"Physics joints"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Joints connect two pins of two physics bodies together through constraints regarding translation and\/or rotation. Pins define a position and orientation that‚Äôs relative to the entity. There are 6 types of joints:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Fixed: Disallows translation and rotation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Spherical: Prevents translation, allows limited Y\/Z axis rotation and free rotation around the X-axis."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Revolute: Prevents translation, allows only rotation around the X-axis."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Prismatic (also called slide joint): Only allows translation along the X-axis.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Distance: Allows free movement as long as the distance between the two bodies is within a given range.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Custom","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC24-10103-Joints","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here‚Äôs how to set a custom joint between a spaceship (where the pin is at the position of a "},{"inlineContent":[{"type":"text","text":"Hook"}],"type":"emphasis"},{"type":"text","text":" entity) and its trailer:"}]},{"type":"codeListing","code":["guard let hookEntity = spaceship.findEntity(named: \"Hook\") else { return }","let hookOffset: SIMD3<Float> = hookEntity.position(relativeTo: spaceship)","let hookPin = spaceship.pins.set(named: \"Hook\", position: hookOffset)","let trailerPin = trailer.pins.set(named: \"Trailer\", position: .zero)","var joint = PhysicsCustomJoint(pin0: hookPin, pin1: trailerPin)","joint.angularMotionAroundX = .range(-.pi * 0.05 ... .pi * 0.05)","joint.angularMotionAroundY = .range(-.pi * 0.2 ... .pi * 0.2)","joint.angularMotionAroundZ = .range(-.pi * 0.2 ... .pi * 0.2)","joint.linearMotionAlongX = .fixed","joint.linearMotionAlongY = .fixed","joint.linearMotionAlongZ = .fixed","try joint.addToSimulation()"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Portal-enhancements","text":"Portal enhancements"},{"type":"paragraph","inlineContent":[{"text":"Here‚Äôs how to let an object smoothly cross a portal‚Äôs surface:","type":"text"}]},{"type":"codeListing","code":["portal.components.set(PortalComponent(target: portalWorld, ","\t\t\t\t     clippingMode: .plane(.positiveZ), ","\t\t\t\t     crossingMode: .plane(.positiveZ)))","spaceship.components.set(PortalCrossingComponent())"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC24-10103-PortalCrossing"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the lighting conditions inside and outside of the portal may differ, a harsh lighting change might occur. To avoid it, use "},{"type":"codeVoice","code":"EnvironmentLightingConfigurationComponent"},{"type":"text","text":" like this:"}]},{"type":"codeListing","code":["var lightingConfig = EnvironmentLightingConfigurationComponent()","let distance: Float = computeShipDistanceFromPortal()","lightingConfig.environmentLightingWeight = mapDistanceToWeight(distance)","spaceship.components.set(lightingConfig)"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"inlineContent":[{"identifier":"VielfaltSoftware","type":"image"}],"type":"paragraph"}],"size":1},{"content":[{"text":"Alexander Gross","level":3,"anchor":"Alexander-Gross","type":"heading"},{"inlineContent":[{"type":"reference","overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/VielfaltSoftware","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/VielfaltSoftware","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/x.com\/VielfaltApps","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/vielfalt.software","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-111801-Enhance-your-spatial-computing-app-with-RealityKit-audio","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10102-Compose-interactive-3D-content-in-Reality-Composer-Pro","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation"]},{"type":"small","inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"sections":[],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10103-Discover-RealityKit-APIs-for-iOS-macOS-and-visionOS","interfaceLanguage":"swift"},"references":{"WWDC24-10103-ForceEffects":{"variants":[{"url":"\/images\/WWDC24-10103-ForceEffects.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-ForceEffects","alt":null,"type":"image"},"WWDC24.jpeg":{"variants":[{"url":"\/images\/WWDC24.jpeg","traits":["1x","light"]}],"identifier":"WWDC24.jpeg","alt":null,"type":"image"},"WWDC24-10103-Overview1":{"variants":[{"url":"\/images\/WWDC24-10103-Overview1.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Overview1","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10102-Compose-interactive-3D-content-in-Reality-Composer-Pro":{"role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Discover how the Timeline view in Reality Composer Pro can bring your 3D content to life. Learn how to create an animated story in which characters and objects interact with each other and the world around them using inverse kinematics, blend shapes, and skeletal poses. We‚Äôll also show you how to use built-in and custom actions, sequence your actions, apply triggers, and implement natural movements."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-10102-compose-interactive-3d-content-in-reality-composer-pro","title":"Compose interactive 3D content in Reality Composer Pro","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10102-Compose-interactive-3D-content-in-Reality-Composer-Pro"},"WWDC24-10103-Overview3":{"variants":[{"url":"\/images\/WWDC24-10103-Overview3.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Overview3","alt":null,"type":"image"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","alt":null,"type":"image"},"WWDC24-10103-APIs":{"variants":[{"url":"\/images\/WWDC24-10103-APIs.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-APIs","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/VielfaltSoftware":{"abstract":[{"text":"No Bio on GitHub","type":"text"}],"url":"\/documentation\/wwdcnotes\/vielfaltsoftware","title":"Alexander Gross (1 note)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/VielfaltSoftware","role":"sampleCode","kind":"article","images":[{"type":"card","identifier":"VielfaltSoftware.jpeg"},{"type":"icon","identifier":"VielfaltSoftware.jpeg"}],"type":"topic"},"https://x.com/VielfaltApps":{"titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"url":"https:\/\/x.com\/VielfaltApps","title":"X\/Twitter","identifier":"https:\/\/x.com\/VielfaltApps","type":"link"},"WWDC24-10103-Lights":{"variants":[{"url":"\/images\/WWDC24-10103-Lights.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Lights","alt":null,"type":"image"},"WWDC24-10103-HoverStateNode":{"variants":[{"url":"\/images\/WWDC24-10103-HoverStateNode.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-HoverStateNode","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes"},"WWDC24-10103-Joints":{"variants":[{"url":"\/images\/WWDC24-10103-Joints.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Joints","alt":null,"type":"image"},"WWDC24-10103-PortalCrossing":{"variants":[{"url":"\/images\/WWDC24-10103-PortalCrossing.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-PortalCrossing","alt":null,"type":"image"},"WWDC24-10103-Overview4":{"variants":[{"url":"\/images\/WWDC24-10103-Overview4.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Overview4","alt":null,"type":"image"},"VielfaltSoftware":{"variants":[{"url":"\/images\/VielfaltSoftware.jpeg","traits":["1x","light"]}],"identifier":"VielfaltSoftware","alt":"Profile image of Alexander Gross","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"images":[{"type":"icon","identifier":"WWDC24-Icon.png"},{"type":"card","identifier":"WWDC24.jpeg"}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","type":"topic","abstract":[{"text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"New APIs: Swift Testing, "},{"type":"codeVoice","code":"FinanceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"url":"\/documentation\/wwdcnotes\/wwdc24","title":"WWDC24"},"https://developer.apple.com/wwdc24/10103":{"url":"https:\/\/developer.apple.com\/wwdc24\/10103","identifier":"https:\/\/developer.apple.com\/wwdc24\/10103","checksum":null,"type":"download"},"https://github.com/VielfaltSoftware":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/VielfaltSoftware","title":"GitHub","identifier":"https:\/\/github.com\/VielfaltSoftware","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-111801-Enhance-your-spatial-computing-app-with-RealityKit-audio":{"role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Elevate your spatial computing experience using RealityKit audio. Discover how spatial audio can make your 3D immersive experiences come to life. From ambient audio, reverb, to real-time procedural audio that can add character to your 3D content, learn how RealityKit audio APIs can help make your app more engaging."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc24-111801-enhance-your-spatial-computing-app-with-realitykit-audio","title":"Enhance your spatial computing app with RealityKit audio","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-111801-Enhance-your-spatial-computing-app-with-RealityKit-audio"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit":{"role":"sampleCode","abstract":[{"text":"Go beyond the window and learn how you can bring engaging and immersive 3D content to your apps with RealityKit. Discover how SwiftUI scenes work in tandem with RealityView and how you can embed your content into an entity hierarchy. We‚Äôll also explore how you can blend virtual content and the real world using anchors, bring particle effects into your apps, add video content, and create more immersive experiences with portals.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10081-enhance-your-spatial-computing-app-with-realitykit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit","title":"Enhance your spatial computing app with RealityKit","kind":"article","type":"topic"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"VielfaltSoftware.jpeg":{"variants":[{"url":"\/images\/VielfaltSoftware.jpeg","traits":["1x","light"]}],"identifier":"VielfaltSoftware.jpeg","alt":null,"type":"image"},"WWDC24-10103-Overview2":{"variants":[{"url":"\/images\/WWDC24-10103-Overview2.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-Overview2","alt":null,"type":"image"},"WWDC24-Icon.png":{"variants":[{"url":"\/images\/WWDC24-Icon.png","traits":["1x","light"]}],"identifier":"WWDC24-Icon.png","alt":null,"type":"image"},"WWDC24-10103-HandTracking":{"variants":[{"url":"\/images\/WWDC24-10103-HandTracking.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10103-HandTracking","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10109-Whats-new-in-Foundation":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation","title":"What‚Äôs new in Foundation","kind":"article","abstract":[{"type":"text","text":"Discover how the latest updates to Foundation can help you improve your app‚Äôs localization and internationalization support. Find out about the new AttributedString, designed specifically for Swift, and learn how you can use Markdown to apply style to your localized strings. Explore the grammar agreement engine, which automatically fixes up localized strings so they match grammatical gender and pluralization. And we‚Äôll take you through improvements to date and number formatting that simplify complex requirements while also improving performance."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10109-whats-new-in-foundation","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10104-Build-a-spatial-drawing-app-with-RealityKit","type":"topic","title":"Build a spatial drawing app with RealityKit","kind":"article","abstract":[{"type":"text","text":"Harness the power of RealityKit through the process of building a spatial drawing app. As you create an eye-catching spatial experience that integrates RealityKit with ARKit and SwiftUI, you‚Äôll explore how resources work in RealityKit and how to use features like low-level mesh and texture APIs to achieve fast updates of the users‚Äô brush strokes."}],"url":"\/documentation\/wwdcnotes\/wwdc24-10104-build-a-spatial-drawing-app-with-realitykit"},"https://developer.apple.com/documentation/RealityKit/creating-a-spaceship-game":{"titleInlineContent":[{"text":"sample code","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/RealityKit\/creating-a-spaceship-game","title":"sample code","identifier":"https:\/\/developer.apple.com\/documentation\/RealityKit\/creating-a-spaceship-game","type":"link"},"https://vielfalt.software":{"titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/vielfalt.software","title":"Blog","identifier":"https:\/\/vielfalt.software","type":"link"}}}