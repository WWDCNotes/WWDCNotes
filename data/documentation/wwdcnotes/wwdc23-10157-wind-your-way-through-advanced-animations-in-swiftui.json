{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"roleHeading":"WWDC23","role":"sampleCode","modules":[{"name":"WWDC Notes"}],"title":"Wind your way through advanced animations in SwiftUI"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"SwiftUI animations are interruptible, physics-based, and integrated throughout the framework.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First: A quick review of the animation tools in SwiftUI"}]},{"type":"heading","text":"Scale Animation","anchor":"Scale-Animation","level":3},{"syntax":"swift","type":"codeListing","code":["struct Avatar: View {","    var petImage: Image","    @State private var selected: Bool = false","","    var body: some View {","        petImage","            .scaleEffect(selected ? 1.5 : 1.0)","            .onTapGesture {","                withAnimation {","                    selected.toggle()","                }","            }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Adding animation is as easy as using “withAnimation” or adding an “animation” modifier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the state of the application changes, SwiftUI applies animations that interpolate from the previous state to the new state."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-first","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But some animations don’t simply animate from a previous state into a new state."}]},{"type":"paragraph","inlineContent":[{"text":"Rather than animating between two states, these animations can define multiple steps that happen in sequence.","type":"text"},{"text":" ","type":"text"},{"text":"Especially great in two situations:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"repeating animations, that loop continuously while a view is visible…","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"and with event-driven animations, such as a view that pulses when an event occurs."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There a new family of APIs that makes animations easier to build."}]},{"type":"paragraph","inlineContent":[{"text":"In this session:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Animation phases, which let SwiftUI automatically advance through a set of pre-planned states that make up your animation.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Keyframes"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some tips and tricks to get the most out of this API.","type":"text"}]}]}]},{"type":"heading","text":"Animation phases","anchor":"Animation-phases","level":1},{"type":"paragraph","inlineContent":[{"text":"Ex with trail running.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Trail races can be very long. Ultramarathons can take a whole day, or even multiple days to finish, so he is showing an app to plan events.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-app"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the reminder at the bottom of the screen is letting know that it is time for a meal. We want to give it an animated highlight effect to make it extra visible."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make this view animate, we can apply the "},{"type":"codeVoice","code":".phaseAnimator"},{"type":"text","text":" modifier."}]},{"syntax":"swift","type":"codeListing","code":["OverdueReminderView()","        .phaseAnimator([false, true]) { content, phase in","            content","        } "]},{"type":"paragraph","inlineContent":[{"text":"Using the phase animator modifier, we need to provide a sequence of states that define the individual steps in a multipart animation. SwiftUI then animates between these states automatically.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In this case, we’ll just be animating between two states: highlighted, and not highlighted, so we can simply use a boolean values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll apply an opacity modifier: This will make the view fully opaque when highlighted, and 50% transparent otherwise."}]},{"syntax":"swift","type":"codeListing","code":["OverdueReminderView()","        .phaseAnimator([false, true]) { content, phase in","            content","                .opacity(phase ? 1.0 : 0.5)","        } "]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-phaseAnimator","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"We provided two phases to the phase animator modifier: false, and true.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When the view first appears, the first phase is active, causing the view to be 50% transparent. SwiftUI then immediately begins an animated transition to the next phase, where the view is fully opaque.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-phaseAnimator2","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Then when that animation is finished, SwiftUI advances again.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-phaseAnimator3","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are only have two phases, so this causes the animation to cycle between the two states. Of course, we can also define animations that include more than two phases, and any number of additional view modifiers."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-phaseAnimator4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, instead of changing the opacity, this changes the foreground style, using red when highlighted, and otherwise the primary foreground style."}]},{"syntax":"swift","type":"codeListing","code":["OverdueReminderView()","        .phaseAnimator([false, true]) { content, phase in","            content","                .foregroundStyle(phase ? .red : .primary)","        } "]},{"type":"paragraph","inlineContent":[{"text":"By default, SwiftUI uses a spring animation. And while springs are great for handling dynamic state changes, in this case we can change the animation by adding a trailing “animation” closure.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["OverdueReminderView()","        .phaseAnimator([false, true]) { content, phase in","            content","                .foregroundStyle(value ? .red : .primary)","        } animation: { phase in","            .easeInOut(duration: 1.0)","        }"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-phaseAnimator6"}]},{"type":"paragraph","inlineContent":[{"text":"The phase that is being animated to is passed in, in case we want to use a different animation for each phase.","type":"text"}]},{"type":"heading","text":"Animations that are triggered by events.","anchor":"Animations-that-are-triggered-by-events","level":1},{"type":"paragraph","inlineContent":[{"text":"Animating the emoji show reactions left by others.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-reactions","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike in the previous example that simply alternated between two states, we want a more complex animation. An enum is a great way to define a list of steps for the animation."}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","","enum Phase: CaseIterable {","    case initial   ","    case move  ","    case scale  ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Three cases:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"for the initial appearance,","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"to move the view up,","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"and scale it up ."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To simplify the view body, we will add computed properties to this enum that define the different effects that we will apply. for instance a computed vertical offset property. We switch over the enum to return the right offset for each case."}]},{"type":"paragraph","inlineContent":[{"text":"Likewise, there are two additional computed properties to determine the view’s scale and foreground style.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","","enum Phase: CaseIterable {","    case initial   ","    case move  ","    case scale  ","","    var verticalOffset: Double {","        switch self {","        case .initial: 0","        case .move, .scale: -64","        }","    }","","    var scale: Double {","        switch self {","        case .initial: 1.0","        case .move: 1.1","        case .scale: 1.8","        }","    }","    ","    var foregroundStyle: Color {","        switch self {","        case .initial: .white","        case .move, .scale: .red","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-reactionsPhases"}]},{"type":"paragraph","inlineContent":[{"text":"We add the phaseAnimator modifier, but this time, we give it a “trigger” value which observes the value that we specify for changes. And when a change occurs, it begins animating through the phases.","type":"text"},{"text":" ","type":"text"},{"text":"Using the computed properties that we defined on the phase type, we apply modifiers to the view.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .phaseAnimator","        Phase.allCases, ","        trigger: reactionCount","    ) { content, phase in","        content","            .scaleEffect(phase.scale)","            .offset(y: phase.verticalOffset)","            .foregroundStyle(phase.foregroundStyle)","    } ","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-reactionsPhases2"}]},{"type":"paragraph","inlineContent":[{"text":"Customizing the animation for each transition to get the effect that we want…","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .phaseAnimator","        Phase. allCases, ","        trigger: reactionCount","    ) { content, phase in","        content","            .scaleEffect(phase.scale)","            .offset(y: phase.verticalOffset)","            .foregroundStyle(phase.foregroundStyle)","    } animation: { phase in","        switch phase {","        case initial: .smooth","        case .move: .easeInOut(duration: 0.3)","        case .scale: .spring(","            duration: 0.3, bounce: 0.7)","        }","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-reactionsPhases3"}]},{"type":"heading","text":"Keyframes","anchor":"Keyframes","level":1},{"type":"paragraph","inlineContent":[{"text":"Keyframes provide complex, coordinated animations with complete control over timing and movement.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keyframes are different from phases. Phases define discrete states that are provided to your view one at a time. And SwiftUI animates between those states, using the same animation types that we already know. When a state transition occurs, all of the properties are animated at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-keyframes"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, when that animation is finished, SwiftUI animates to the next state."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-keyframes2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this continues across all of the phases of the animation."}]},{"type":"paragraph","inlineContent":[{"text":"Keyframes allow us to animate each property independently, defining values at specific times within an animation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The dots here indicate keyframes: angles to use at each point during the animation."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-dots"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the animation plays back, SwiftUI interpolates values in between these keyframes, which we can then use to apply modifiers to the view."},{"type":"text","text":"\n"},{"type":"text","text":"And keyframes allow to independently animate multiple effects at the same time by defining separate tracks, each with their own unique timing."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-keyframes3"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, keyframes are driving several other tracks, including vertical stretch, scale, and translation."}]},{"type":"paragraph","inlineContent":[{"text":"Getting back to the code:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","","struct AnimationValues {","    var scale = 1.0","    var verticalStretch = 1.0","    var verticalTranslation = 0.0","    var angle = Angle.zero","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-keyframes4"}]},{"type":"paragraph","inlineContent":[{"text":"Keyframes can animate any value conforming to the “Animatable” protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Unlike phases, keyframes generate interpolated values of the type that we specify.","type":"text"},{"text":" ","type":"text"},{"text":"While an animation is in progress, SwiftUI will provide us with a value of this type on every frame so that we can update the view.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Next, we add the keyframeAnimator modifier.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","       \/\/ ...","    }"]},{"type":"paragraph","inlineContent":[{"text":"This modifier is similar to the phase animator that we used earlier, but accepts keyframes.","type":"text"},{"text":"\n","type":"text"},{"text":"We provide an instance of the struct to use as the initial value. The keyframes that we define will apply animations onto this value. Next, we’ll apply modifiers to the view for each of the properties on the struct.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","            .rotationEffect(value.angle)","            .scaleEffect(value.scale)","            .scaleEffect(y: value.verticalStretch)","            .offset(y: value.verticalTranslation)","    } keyframes: {_ in","       \/\/ ...","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, defining keyframes:"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { ... } keyframes: {_ in","        KeyframeTrack(\\.scale) {","            \/\/...","    }"]},{"type":"paragraph","inlineContent":[{"text":"Keyframes are organized into tracks. Each track controls a different property of the type that we are animating, which is specified by the key path that we provide when creating the track.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here, We first add a linear keyframe, repeating the initial scale value and holding it for 0.36 seconds.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) {","            Linearkeyframe(1.0, duration: 0.36)","    }"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-keyframes5","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Previews in Xcode can be a great way to fine-tune animations…"}]},{"type":"paragraph","inlineContent":[{"text":"Adding a “SpringKeyframe.”. This uses a spring function to pull the value toward the target.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) {","            Linearkeyframe(1.0, duration: 0.36)","            SpringKeyframe(1.5, duration: 0.8,","                spring: bouncy)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then adding another spring keyframe that animates the scale back to 1.0."}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) {","            Linearkeyframe(1.0, duration: 0.36)","            SpringKeyframe(1.5, duration: 0.8,","                spring: bouncy)","            SpringKeyframe (1.0, spring: .bouncy)","    }"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-keyframes6","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are actually four different types of keyframes."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-moreKeyframes"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"LinearKeyframe interpolates linearly in vector space from the previous keyframe."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"SpringKeyframe, as its name suggests, uses a spring function to interpolate to the target value from the previous keyframe.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"CubicKeyframe uses a cubic Bézier curve to interpolate between keyframes. Combiniung multiple cubic keyframes in sequence, the resulting curve is equivalent to a Catmull-Rom spline.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"MoveKeyframe immediately jumps to a value without interpolation.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Each kind of keyframe supports customization and we can mix and match different kinds of keyframes within an animation.","type":"text"},{"text":"\n","type":"text"},{"text":"SwiftUI maintains velocity between keyframes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using linear and spring keyframes to animate the vertical translation."}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) { \/\/... }","        ","        KeyframeTrack(\\.verticalTranslation) {","            LinearKeyframe(0.0, duration: 0.1)","            SpringKeyframe(20.0, duration: 0.15,","                spring: .bouncy)","            SpringKeyframe(-60.0, duration: 1.0,","                spring: .bouncy)","            SpringKeyframe(0.0, spring: .bouncy)","            }","    }"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-moreKeyframes2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Right before the view jumps up, it pulls back."}]},{"type":"paragraph","inlineContent":[{"text":"This starts with vertical stretch, with a cubic keyframe.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) { \/\/... }","        ","        KeyframeTrack(\\.verticalTranslation) { \/\/... }","        ","        KeyframeTrack(\\.verticalStretch) {","            CubicKeyframe(1.0, duration: 0.1)","            CubicKeyframe(0.6, duration: 0.15)","            CubicKeyframe(1.5, duration: 0.1)","            CubicKeyframe(1.05, duration: 0.15)","            CubicKeyframe(1.0, duration: 0.88)","            CubicKeyframe(0.8, duration: 0.1)","            CubicKeyframe(1.04, duration: 0.4)","            CubicKeyframe(1.0, duration: 0.22)","        } ","    }"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-moreKeyframes3"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, the rotation will be animated."}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(","        initialValue: AnimationValues(), ","        trigger: reactionCount","    ) { content, value in","        content","    } keyframes: {_ in","        KeyframeTrack(\\.scale) { \/\/... }","        ","        KeyframeTrack(\\.verticalTranslation) { \/\/... }","        ","        KeyframeTrack(\\.verticalStretch) { \/\/... }","            ","        KeyframeTrack(\\.angle) {","            CubicKeyframe(.zero, duration: 0.58)","            CubicKeyframe(.degrees(16), duration: 0.125)","            CubicKeyframe(.degrees(-16), duration: 0.125)","            CubicKeyframe(.degrees(16), duration: 0.125)","            CubicKeyframe(.zero, duration: 0.125)","            }","    }"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-moreKeyframes4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And those curves? Those are a visualization of the animation"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-moreKeyframes5"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keyframes are like video clips that can be played. They give you a ton of control, but there’s a tradeoff. Keyframe animations can’t gracefully retarget the way that springs can, so it’s generally best to avoid changing keyframes mid-animation."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10157-remember"}]},{"type":"paragraph","inlineContent":[{"text":"Updates happen on every frame, so we should avoid performing any expensive operations while applying a keyframe animation to the view.","type":"text"}]},{"type":"heading","text":"Tips and tricks","anchor":"Tips-and-tricks","level":1},{"type":"paragraph","inlineContent":[{"text":"The race map example, showing the route.","type":"text"},{"text":"\n","type":"text"},{"text":"lets add an animation that automatically zooms in and follows the course. MapKit now allows to use keyframes to move the camera!","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RaceMap: View {","    let route: Route","    ","    var body: some View {","        Map(initialPosition: .rect(route.rect)) {","            MapPolyline (coordinates: route.coordinates)","                .stroke(.orange, lineWidth: 4.0)","            Marker(\"Start\", coordinate: route.start)","                .tint(.green)","            Marker (\"End\", coordinate: route.end)","                .tint (.red)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Here, we use a “Map” view to show the course.","type":"text"},{"text":"\n","type":"text"},{"text":"The view already has a route, which is a model that contains all of the coordinates along one leg of the race.","type":"text"},{"text":"\n","type":"text"},{"text":"To build the tour, we’ll add a state property and a button to change it.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RaceMap: View {","    let route: Route","    ","    @State private var trigger = false","    ","    var body: some View {","        Map(initialPosition: .rect(route.rect)) {","            MapPolyline (coordinates: route.coordinates)","                .stroke(.orange, lineWidth: 4.0)","            Marker(\"Start\", coordinate: route.start)","                .tint(.green)","            Marker (\"End\", coordinate: route.end)","                .tint (.red)","        }","        .toolbar {","            Button(\"Tour\") { trigger.toggle() }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-race","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Lets use the new “mapCameraKeyframeAnimator” modifier, giving the trigger value to it, then adding keyframes.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RaceMap: View {","    let route: Route","    ","    @State private var trigger = false","    ","    var body: some View {","        Map(initialPosition: .rect(route.rect)) {...} ","            .toolbar {...}","            .mapCameraKeyframeAnimator(trigger: trigger) {","                KeyframeTrack(\\.centerCoordinate) {...}","                KeyframeTrack(\\.heading) {...}","                KeyframeTrack(\\.distance) {...}","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every time the trigger value changes, maps will use these keyframes to animate."},{"type":"text","text":"\n"},{"type":"text","text":"The final value of the keyframes determines the camera value that is used at the end of the animation."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10157-mapAnimation","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"If the user performs a gesture while animating, the animation will be removed and the user will have full control over the camera.","type":"text"},{"text":"\n","type":"text"},{"text":"We can independently animate the center coordinate, heading, and distance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is more. We’ve seen the “keyframeAnimator” modifier. Outside of the modifier, we can use the “KeyframeTimeline” type to capture a set of keyframes and tracks. We initialize this type with an initial value, and the keyframe tracks that define the animation, just like with the view modifier."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Keyframes","let myKeyframes = KeyframeTimeline(initialValue: CGPoint.zero) {","    KeyframeTrack(\\.x) {...}","    KeyframeTrack(\\.y) {...}","}"]},{"type":"paragraph","inlineContent":[{"text":"KeyframeTimeline provides API that gives the duration, which is equal to the duration of the longest track.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Duration in seconds","let duration: TimeInterval = myKeyframes.duration"]},{"type":"paragraph","inlineContent":[{"text":"And we can calculate values for any time within the range of the animation.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Value for time","let value = myKeyframes.value (time: 1.2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes it easy to visualize keyframes with Swift Charts, This also means that we can use keyframe-defined curves however you want, or to creatively combine keyframes with other APIs, for example, with a geometry proxy to scrub keyframe-driven effects using scroll position, or with a “TimelineView” to update based on time."}]},{"type":"heading","text":"Conclusion","anchor":"Conclusion","level":1},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use keyframes for more complex animations where we need complete control."}]},{"type":"heading","text":"Check out also","anchor":"Check-out-also","level":1},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10148","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10156","type":"reference","isActive":true}]},{"type":"heading","text":"Some of the code examples included in the talk","anchor":"Some-of-the-code-examples-included-in-the-talk","level":1},{"type":"paragraph","inlineContent":[{"text":"Boolean Phases","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["OverdueReminderView()","        .phaseAnimator([false, true]) { content, value in","            content","                .foregroundStyle(value ? .red : .primary)","        } animation: { _ in","            .easeInOut(duration: 1.0)","        }"]},{"type":"paragraph","inlineContent":[{"text":"Custom Phases","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .phaseAnimator(","        Phase.allCases, ","        trigger: reactionCount","    ) { content, phase in","        content","            .scaleEffect(phase.scale)","            .offset(y: phase.verticalOffset)","    } animation: { phase in","        switch phase {","        case .initial: .smooth","        case .move: .easeInOut(duration: 0.3)","        case .scale: .spring(","            duration: 0.3, bounce: 0.7)","        } ","    }","    ","enum Phase: CaseIterable {","    case initial","    case move","    case scale","","    var verticalOffset: Double {","        switch self {","        case .initial: 0","        case .move, .scale: -64","        }","    }","","    var scale: Double {","        switch self {","        case .initial: 1.0","        case .move: 1.1","        case .scale: 1.8","        }","    }","}"]},{"syntax":"swift","type":"codeListing","code":["ReactionView()","    .keyframeAnimator(initialValue: AnimationValues()) { content, value in","        content","            .foregroundStyle(.red)","            .rotationEffect(value.angle)","            .scaleEffect(value.scale)","            .scaleEffect(y: value.verticalStretch)","            .offset(y: value.verticalTranslation)","        } keyframes: { _ in","            KeyframeTrack(\\.angle) {","                CubicKeyframe(.zero, duration: 0.58)","                CubicKeyframe(.degrees(16), duration: 0.125)","                CubicKeyframe(.degrees(-16), duration: 0.125)","                CubicKeyframe(.degrees(16), duration: 0.125)","                CubicKeyframe(.zero, duration: 0.125)","            }","","            KeyframeTrack(\\.verticalStretch) {","                CubicKeyframe(1.0, duration: 0.1)","                CubicKeyframe(0.6, duration: 0.15)","                CubicKeyframe(1.5, duration: 0.1)","                CubicKeyframe(1.05, duration: 0.15)","                CubicKeyframe(1.0, duration: 0.88)","                CubicKeyframe(0.8, duration: 0.1)","                CubicKeyframe(1.04, duration: 0.4)","                CubicKeyframe(1.0, duration: 0.22)","            }","            ","            KeyframeTrack(\\.scale) {","                LinearKeyframe(1.0, duration: 0.36)","                SpringKeyframe(1.5, duration: 0.8, spring: .bouncy)","                SpringKeyframe(1.0, spring: .bouncy)","            }","            KeyframeTrack(\\.verticalTranslation) {","                LinearKeyframe(0.0, duration: 0.1)","                SpringKeyframe(20.0, duration: 0.15, spring: .bouncy)","                SpringKeyframe(-60.0, duration: 1.0, spring: .bouncy)","                SpringKeyframe(0.0, spring: .bouncy)","            }","        }","","struct AnimationValues {","    var scale = 1.0","    var verticalStretch = 1.0","    var verticalTranslation = 0.0","    var angle = Angle.zero","}"]},{"type":"paragraph","inlineContent":[{"text":"map keyframes","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct RaceMap: View {","    let route: Route","","    @State private var trigger = false","","    var body: some View {","        Map(initialPosition: .rect(route.rect)) {","            MapPolyline(coordinates: route.coordinates)","                .stroke(.orange, lineWidth: 4.0)","            Marker(\"Start\", coordinate: route.start)","                .tint(.green)","            Marker(\"End\", coordinate: route.end)","                .tint(.red)","        }","        .toolbar {","            Button(\"Tour\") { trigger.toggle() }","        }","        .mapCameraKeyframeAnimation(trigger: playTrigger) { initialCamera in","            KeyframeTrack(\\MapCamera.centerCoordinate) {","                let points = route.points","                for point in points {","                    CubicKeyframe(point.coordinate, duration: 16.0 \/ Double(points.count))","                }","                CubicKeyframe(initialCamera.centerCoordinate, duration: 4.0)","            }","            KeyframeTrack(\\.heading) {","                CubicKeyframe(heading(from: route.start.coordinate, to: route.end.coordinate), duration: 6.0)","                CubicKeyframe(heading(from: route.end.coordinate, to: route.end.coordinate), duration: 8.0)","                CubicKeyframe(initialCamera.heading, duration: 6.0)","            }","            KeyframeTrack(\\.distance) {","                CubicKeyframe(24000, duration: 4)","                CubicKeyframe(18000, duration: 12)","                CubicKeyframe(initialCamera.distance, duration: 4)","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"keyframe timeline"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Keyframes","let myKeyframes = KeyframeTimeline(initialValue: CGPoint.zero) {","    KeyframeTrack(\\.x) {...}","    KeyframeTrack(\\.y) {...}","}","","\/\/ Duration in seconds","let duration: TimeInterval = myKeyframes.duration","","\/\/ Value for time","let value = myKeyframes.value(time: 1.2)"]},{"type":"heading","text":"Written By","anchor":"Written-By","level":2},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"multitudes"}]}]},{"size":4,"content":[{"type":"heading","anchor":"laurent-b","level":3,"text":"laurent b"},{"type":"paragraph","inlineContent":[{"isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/multitudes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/laurentbrusa.hashnode.dev\/"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/x.com\/wrmultitudes"}]}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"type":"heading","text":"Related Sessions","anchor":"Related-Sessions","level":2},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation"],"style":"list"},{"type":"small","inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10157-Wind-your-way-through-advanced-animations-in-SwiftUI","interfaceLanguage":"swift"},"kind":"article","abstract":[{"type":"text","text":"Discover how you can take animation to the next level with the latest updates to SwiftUI. Join us as we wind our way through animation and build out multiple steps, use keyframes to add coordinated multi-track animated effects, and combine APIs in unique ways to make your app spring to life."}],"sampleCodeDownload":{"action":{"type":"reference","overridingTitle":"Watch Video (18 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10157","isActive":true},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10157-wind-your-way-through-advanced-animations-in-swiftui"]}],"references":{"https://developer.apple.com/wwdc23/10156":{"url":"https:\/\/developer.apple.com\/wwdc23\/10156","titleInlineContent":[{"text":"Explore SwiftUI animations","type":"text"}],"identifier":"https:\/\/developer.apple.com\/wwdc23\/10156","type":"link","title":"Explore SwiftUI animations"},"WWDC23-10157-phaseAnimator2":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-phaseAnimator2.jpg","traits":["1x","light"]}],"type":"image","identifier":"WWDC23-10157-phaseAnimator2","alt":"the “.phaseAnimator” modifier"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"type":"topic","role":"collectionGroup","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"SwiftData","type":"codeVoice"},{"type":"text","text":", "},{"code":"Observation","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit","type":"codeVoice"},{"type":"text","text":" views, and more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23","title":"WWDC23"},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","role":"collection"},"WWDC23-10157-keyframes6":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes6.jpg"}],"alt":"keyframes","type":"image","identifier":"WWDC23-10157-keyframes6"},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"abstract":[{"type":"text","text":"student at 42Berlin 🐬 | C & C++ | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","url":"\/documentation\/wwdcnotes\/multitudes","type":"topic","kind":"article","title":"laurent b (33 notes)","images":[{"identifier":"multitudes.jpeg","type":"card"},{"identifier":"multitudes.jpeg","type":"icon"}]},"WWDC23-10157-reactionsPhases3":{"alt":"emoji show reactions left by others","identifier":"WWDC23-10157-reactionsPhases3","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-reactionsPhases3.jpg"}]},"WWDC23-10157-keyframes4":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes4.jpg","traits":["1x","light"]}],"type":"image","identifier":"WWDC23-10157-keyframes4","alt":"keyframes"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"alt":null,"type":"image","identifier":"WWDCNotes.png"},"https://x.com/wrmultitudes":{"url":"https:\/\/x.com\/wrmultitudes","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"identifier":"https:\/\/x.com\/wrmultitudes","type":"link","title":"X\/Twitter"},"https://developer.apple.com/wwdc23/10157":{"checksum":null,"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc23\/10157","url":"https:\/\/developer.apple.com\/wwdc23\/10157"},"WWDC23-10157-app":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-app.jpg"}],"alt":"the app","type":"image","identifier":"WWDC23-10157-app"},"multitudes.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/multitudes.jpeg"}],"type":"image","identifier":"multitudes.jpeg","alt":null},"WWDC23-10157-keyframes2":{"alt":"keyframes","identifier":"WWDC23-10157-keyframes2","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes2.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10148-Whats-new-in-SwiftUI":{"role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10148-whats-new-in-swiftui","title":"What’s new in SwiftUI","type":"topic","abstract":[{"text":"Learn how you can use SwiftUI to build great apps for all Apple platforms. Explore the latest updates to SwiftUI and discover new scene types for visionOS. Simplify your data models with the latest data flow options and learn about the Inspector view. We’ll also take you through enhanced animation APIs, powerful ScrollView improvements, and a host of refinements to help you make tidier tables, improve focus and keyboard input, and so much more.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10148-Whats-new-in-SwiftUI"},"WWDC23-10157-keyframes3":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes3.jpg"}],"alt":"keyframes","type":"image","identifier":"WWDC23-10157-keyframes3"},"WWDC23-10157-reactions":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-reactions.jpg"}],"type":"image","identifier":"WWDC23-10157-reactions","alt":"emoji show reactions left by others"},"WWDC23-10157-moreKeyframes3":{"alt":"keyframes","identifier":"WWDC23-10157-moreKeyframes3","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-moreKeyframes3.jpg","traits":["1x","light"]}]},"WWDC23-10157-mapAnimation":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-mapAnimation.jpg"}],"alt":"mapAnimation","type":"image","identifier":"WWDC23-10157-mapAnimation"},"https://github.com/multitudes":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/multitudes","url":"https:\/\/github.com\/multitudes","title":"GitHub"},"WWDC23-10157-moreKeyframes":{"alt":"keyframes","identifier":"WWDC23-10157-moreKeyframes","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-moreKeyframes.jpg","traits":["1x","light"]}]},"WWDC23-10157-reactionsPhases":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-reactionsPhases.jpg"}],"alt":"emoji show reactions left by others","type":"image","identifier":"WWDC23-10157-reactionsPhases"},"WWDC23-10157-first":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-first.jpg"}],"type":"image","identifier":"WWDC23-10157-first","alt":"scale animation"},"WWDC23-10157-moreKeyframes2":{"alt":"keyframes","identifier":"WWDC23-10157-moreKeyframes2","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-moreKeyframes2.jpg","traits":["1x","light"]}]},"multitudes":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/multitudes.jpeg"}],"alt":"Profile image of laurent b","type":"image","identifier":"multitudes"},"https://laurentbrusa.hashnode.dev/":{"titleInlineContent":[{"text":"Blog","type":"text"}],"type":"link","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","url":"https:\/\/laurentbrusa.hashnode.dev\/","title":"Blog"},"WWDC23-10157-dots":{"alt":"dots diagram","identifier":"WWDC23-10157-dots","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-dots.jpg","traits":["1x","light"]}]},"WWDC23-10157-phaseAnimator6":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-phaseAnimator6.jpg"}],"alt":"the “.phaseAnimator” modifier","type":"image","identifier":"WWDC23-10157-phaseAnimator6"},"WWDC23-10157-phaseAnimator":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-phaseAnimator.jpg"}],"type":"image","identifier":"WWDC23-10157-phaseAnimator","alt":"the “.phaseAnimator” modifier"},"WWDC23-10157-phaseAnimator3":{"alt":"the “.phaseAnimator” modifier","identifier":"WWDC23-10157-phaseAnimator3","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-phaseAnimator3.jpg","traits":["1x","light"]}]},"WWDC23-10157-moreKeyframes4":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-moreKeyframes4.jpg"}],"alt":"keyframes","type":"image","identifier":"WWDC23-10157-moreKeyframes4"},"WWDC23-10157-keyframes5":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes5.jpg"}],"type":"image","identifier":"WWDC23-10157-keyframes5","alt":"keyframes"},"https://developer.apple.com/wwdc23/10148":{"url":"https:\/\/developer.apple.com\/wwdc23\/10148","titleInlineContent":[{"type":"text","text":"What’s new in SwiftUI"}],"identifier":"https:\/\/developer.apple.com\/wwdc23\/10148","type":"link","title":"What’s new in SwiftUI"},"WWDC23-10157-moreKeyframes5":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-moreKeyframes5.jpg"}],"alt":"keyframes","type":"image","identifier":"WWDC23-10157-moreKeyframes5"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10156-Explore-SwiftUI-animation":{"title":"Explore SwiftUI animation","url":"\/documentation\/wwdcnotes\/wwdc23-10156-explore-swiftui-animation","type":"topic","abstract":[{"type":"text","text":"Explore SwiftUI’s powerful animation capabilities and find out how these features work together to produce impressive visual effects. Learn how SwiftUI refreshes the rendering of a view, determines what to animate, interpolates values over time, and propagates context for the current transaction."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","role":"sampleCode"},"WWDC23-10157-race":{"alt":"race","identifier":"WWDC23-10157-race","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-race.jpg","traits":["1x","light"]}]},"WWDC23.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23.jpeg"}],"alt":null,"type":"image","identifier":"WWDC23.jpeg"},"WWDC23-10157-reactionsPhases2":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-reactionsPhases2.jpg"}],"type":"image","identifier":"WWDC23-10157-reactionsPhases2","alt":"emoji show reactions left by others"},"WWDC23-Icon.png":{"alt":null,"identifier":"WWDC23-Icon.png","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-Icon.png","traits":["1x","light"]}]},"WWDC23-10157-remember":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-remember.jpg"}],"alt":"remember","type":"image","identifier":"WWDC23-10157-remember"},"WWDC23-10157-keyframes":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-10157-keyframes.jpg"}],"type":"image","identifier":"WWDC23-10157-keyframes","alt":"keyframes"},"WWDC23-10157-phaseAnimator4":{"alt":"the “.phaseAnimator” modifier","identifier":"WWDC23-10157-phaseAnimator4","type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10157-phaseAnimator4.jpg","traits":["1x","light"]}]}}}