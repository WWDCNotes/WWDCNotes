{"primaryContentSections":[{"content":[{"type":"heading","text":"Swift Charts","level":2,"anchor":"Swift-Charts"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Chart","type":"codeVoice"},{"text":" view that takes data, ","type":"text"},{"code":"BarMark","type":"codeVoice"},{"text":", ","type":"text"},{"code":"LineMark","type":"codeVoice"},{"text":" and other views inside","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".foregroundStyle(by: ...)"},{"type":"text","text":" helps declaratively specify details"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".symbol(by: ...)","type":"codeVoice"},{"text":" to declaratively specify details in chart","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".annotation"},{"type":"text","text":" supported, e.g. for marks"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"supports dark mode automatically (like any SwiftUI view)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Smart defaults for legends etc.","type":"text"}]}]}]},{"type":"heading","text":"Navigation and windows","level":2,"anchor":"Navigation-and-windows"},{"type":"heading","text":"Stacks","level":3,"anchor":"Stacks"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" a new container view for push\/pop style navigation"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"wraps a root content view"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"works with ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":" and ","type":"text"},{"code":".navigationTitle","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"New data-driven APIs: ","type":"text"},{"type":"codeVoice","code":".navigationDestination(for: ...)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"NavigationLink","type":"codeVoice"},{"text":" can now take a value that represents a destination","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"now also supported on macOS","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Split Views","level":3,"anchor":"Split-Views"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"NavigationSplitView","type":"codeVoice"},{"type":"text","text":" for multi-column navigation"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"can declare 2- or 3-column layouts"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"accepts a ","type":"text"},{"code":"detail","type":"codeVoice"},{"text":" view","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Split view adapts on resize automatically"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"works with stack together for complex navigation structures"}],"type":"paragraph"}]}]},{"type":"heading","text":"Scene","level":3,"anchor":"Scene"},{"type":"heading","text":"Window","level":3,"anchor":"Window"},{"type":"paragraph","inlineContent":[{"text":"New ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/window","type":"reference","isActive":true},{"text":" type to declare a single, unique window for your app","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"appears automatically in "},{"type":"codeVoice","code":"Window"},{"type":"text","text":" menu bar"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"add a ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/scene\/keyboardshortcut(_:)","type":"reference"},{"text":" modifier to quickly open that window via keyboard shortcut","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"new "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentvalues\/openwindow","type":"reference","isActive":true},{"type":"text","text":" environment value for programmatic trigger"}]}]}]},{"type":"codeListing","code":["@main","struct PartyPlanner: App {","  var body: some Scene {","    WindowGroup(\"Party Planner\") {","      PartyPlannerHome()","    }","","    \/\/ üëáüèª üÜï","    Window(\"Party Budget\", id: \"budget\") {","      Text(\"Budget View\")","    }","    .keyboardShortcut(\"0\")","  }","}"],"syntax":"swift"},{"type":"heading","text":"Window customizations","level":3,"anchor":"Window-customizations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"New windows customizations via modifiers:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/window\/defaultposition(_:)","isActive":true,"type":"reference"},{"text":" for default positions (on window open)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/defaultsize(_:)","type":"reference"},{"text":" for setting the window default size","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/windowresizability(_:)"},{"text":" for specifying window resizability preference","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/presentedwindowcontent\/presentationdetents(_:)","isActive":true},{"type":"text","text":" allows controls for resizable sheets, e.g. with two different sizes"}]}]}]},{"type":"heading","text":"`MenuBarExtra`","level":3,"anchor":"MenuBarExtra"},{"type":"paragraph","inlineContent":[{"text":"Menu bar extras now entirely in SwiftUI via ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/menubarextra","isActive":true,"type":"reference"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"always shown in Menu Bar while app is running","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"also possible to just provide a ","type":"text"},{"type":"codeVoice","code":"MenuBarExtra"},{"text":" in an app as root scene","type":"text"}]}]}]},{"type":"codeListing","code":["@main","struct PartyPlanner: App {","  var body: some Scene {","    Window(\"Party Budget\", id: \"budget\") {","      Text(\"Budget View\")","    }","","    MenuBarExtra(\"Bulletin Board\", systemImage: \"quote.bubble\") {","      BulletinBoard()","    }","    .menuBarExtraStyle(.window)","  }","}"],"syntax":"swift"},{"type":"heading","text":"Advanced controls","level":2,"anchor":"Advanced-controls"},{"type":"heading","text":"Forms","level":3,"anchor":"Forms"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"new settings app design in macOS uses new navigation SwiftUI views","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"New "},{"code":".formStyle(.grouped)","type":"codeVoice"},{"type":"text","text":" for forms to improve forms on macOS"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"LabeledContent","type":"codeVoice"},{"text":" used to build new controls or just read-only information","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"allows selection for simple data"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"SwiftUI is now smarter in formatting text in Forms"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New popup menu pickers in iOS (macOS inspired dropdowns)"}]}]}]},{"type":"heading","text":"Controls","level":3,"anchor":"Controls"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"TextField"},{"text":" can now have an expanding ","type":"text"},{"type":"codeVoice","code":"axis"},{"text":" specified (e.g. ","type":"text"},{"type":"codeVoice","code":".vertical"},{"text":")","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":".lineLimit(5...10)","type":"codeVoice"},{"type":"text","text":" range helps expanding with min\/max lines"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"New ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/multidatepicker","isActive":true,"type":"reference"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"supports non-contiguous date selection","type":"text"}]}]}]}]}]},{"type":"codeListing","code":["struct ContentView: View {","  @State private var activityDates: Set<DateComponents> = [","    DateComponents(calendar: .current, year: 2022, month: 6, day: 6),","    DateComponents(calendar: .current, year: 2022, month: 6, day: 9),","    DateComponents(calendar: .current, year: 2022, month: 6, day: 10)","  ]","","  var body: some View {","    MultiDatePicker(\"Activities Dates\", selection: $activityDates)","  }","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"DisclosureGroup","type":"codeVoice"},{"type":"text","text":" to combine multiple toggles into one:"}]}]}]},{"type":"codeListing","code":["DisclosureGroup {","  HStack {","    Toggle(\"Balloons üéà\", isOn: $includeBalloons)","    Spacer()","    decorationThemes[.balloon].map { $0.swatch }","  }","  .tag(Decoration.balloon)","","  HStack {","    Toggle(\"Confetti üéä\", isOn: $includeConfetti)","    Spacer()","    decorationThemes[.confetti].map { $0.swatch }","  }","  .tag(Decoration.confetti)","","  HStack {","    Toggle(\"Inflatables ü™Ö\", isOn: $includeInflatables)","    Spacer()","    decorationThemes[.inflatables].map { $0.swatch }","  }","  .tag(Decoration.inflatables)","","  HStack {","    Toggle(\"Party Horns ü•≥\", isOn: $includeBlowers)","    Spacer()","    decorationThemes[.noisemakers].map { $0.swatch }","  }","  .tag(Decoration.noisemakers)","} label: {","  Toggle(\"All Decorations\", isOn: [","    $includeBalloons, $includeConfetti,","    $includeInflatables, $includeBlowers","  ])","  .tag(Decoration.all)","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"Picker","type":"codeVoice"},{"text":" as an alternative:","type":"text"}]}]}]},{"type":"codeListing","code":["Picker(\"Decoration theme\", selection: themes) {","  Text(\"Blue\").tag(Theme.blue)","  Text(\"Black\").tag(Theme.black)","  Text(\"Gold\").tag(Theme.gold)","  Text(\"White\").tag(Theme.white)","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Button styles will now apply to any control that supports a button-like appearance, including toggles, menus, and pickers","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"Stepper","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"format","type":"codeVoice"},{"text":" parameter, now also available on watchOS","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".accessibilityQuickAction","type":"codeVoice"},{"type":"text","text":" with button for easy accessibility"}]}]}]},{"type":"heading","text":"Tables","level":3,"anchor":"Tables"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Table"},{"type":"text","text":" now supported on iOS and iPadOS"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Will render also on iPhone with a primary column","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"new ","type":"text"},{"type":"codeVoice","code":".contextMenu"},{"text":" modifier with multiple selections possible","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"allows to define advanced context menus","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"new "},{"code":".toolbar","type":"codeVoice"},{"type":"text","text":" in iPadOS, customizable by specifying explicit "},{"code":"id","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"placement: "},{"type":"codeVoice","code":".secondaryAction"},{"type":"text","text":" to be used for toolbar items"}]}]}]},{"type":"heading","text":"Search","level":3,"anchor":"Search"},{"type":"paragraph","inlineContent":[{"text":"Search fields now support (via new ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view-search"},{"text":"):","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"tokenized inputs and suggestions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"search scopes (filters)"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["NavigationStack {","  ...","    .searchable(text: $query, tokens: $tokens, scope: $scope) { token in","      Label(token.query, systemImage: token.systemImage)","    } scopes: {","      Text(\"In Person\").tag(AttendanceScope.inPerson)","      Text(\"Online\").tag(AttendanceScope.online)","    } suggestions: {","      suggestions","  }","}"],"syntax":"swift"},{"type":"heading","text":"Sharing","level":2,"anchor":"Sharing"},{"type":"heading","text":"Photos Picker","level":3,"anchor":"Photos-Picker"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"PhotosPicker"},{"type":"text","text":" view anywhere in app, presents picker UI"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"takes a binding to a selected ","type":"text"},{"type":"codeVoice","code":"PhotosPickerItem"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"filtering type of content and more customizable","type":"text"}]}]}]},{"type":"heading","text":"Sharing","level":3,"anchor":"Sharing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"watchOS supports ","type":"text"},{"type":"codeVoice","code":"ShareLink"},{"text":" view, provide content and preview","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"adapt to the ","type":"text"},{"code":".contextMenu","type":"codeVoice"},{"text":" they‚Äôre applied to","type":"text"}]}]}]},{"type":"heading","text":"Transferable","level":3,"anchor":"Transferable"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Makes drag & drop easy"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".dropDestination"},{"type":"text","text":" with "},{"type":"codeVoice","code":"payloadType"},{"type":"text","text":", comes with closure for received data"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"many standard types conform to "},{"code":"Transferable","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Implement in custom types by conforming to "},{"code":"representation: some TransferRepresentation","type":"codeVoice"}],"type":"paragraph"}]}]},{"type":"heading","text":"Graphics and layout","level":2,"anchor":"Graphics-and-layout"},{"type":"heading","text":"Shape Styles","level":3,"anchor":"Shape-Styles"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"new ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/color\/gradient","type":"reference"},{"text":" property on ","type":"text"},{"type":"codeVoice","code":"Color"},{"text":", to apply a subtle gradient derived from the color","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["...","  .backgroundStyle(.blue.gradient)"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"new "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle\/shadow(_:)-swift.method"},{"type":"text","text":" modifier for "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle"}]}]}]},{"type":"codeListing","code":["...","  .foregroundStyle(.white.shadow(.drop(radius: 1, y: 1.5)))"],"syntax":"swift"},{"type":"heading","text":"Text","level":3,"anchor":"Text"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Text"},{"text":" can now be beautifully animated between weights, styles, and layouts, just use ","type":"text"},{"type":"codeVoice","code":"withAnimation"}]},{"type":"heading","text":"Layout","level":3,"anchor":"Layout"},{"type":"heading","text":"Grid","level":4,"anchor":"Grid"},{"type":"paragraph","inlineContent":[{"type":"text","text":"New "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/grid"},{"type":"text","text":" container."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"arranges views in a two-dimensional grid"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"will measure its subviews up front to enable cells that span multiple columns and enable automatic alignments across rows and columns","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/grid","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"Grid"}],"overridingTitle":"Grid","type":"reference"},{"text":", ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/gridrow","isActive":true,"type":"reference"},{"text":" and associated modifiers to specify your layout","type":"text"}]}]}]},{"type":"codeListing","code":["struct IconGrid: View {","  var body: some View {","    Grid(horizontalSpacing: 16, verticalSpacing: 16) {","      ForEach(0..<3) { i in","        GridRow {","          ForEach(0..<5) { j in","            icons[i * 5 + j]","          }","        }","      }","    }","    .background(.black.opacity(0.8))","  }","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"built with composition in mind","type":"text"}]}]}]},{"type":"heading","text":"Layout","level":4,"anchor":"Layout"},{"type":"paragraph","inlineContent":[{"text":"For true custom SwiftUI layout √† la ","type":"text"},{"type":"codeVoice","code":"UICollectionViewLayout"},{"text":".","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"new "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout","isActive":true},{"type":"text","text":" protocol for even more customization"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Guest table party example:","type":"text"}]},{"type":"codeListing","code":["\/\/ MARK: Custom Table Layout","","private let tableSize = CGSize(width: 130, height: 90)","private let guestSize = CGSize(width: 40, height: 40)","","\/\/\/ Which of 6 tables this view represents","private struct TableViewLayoutKey: LayoutValueKey {","  static let defaultValue: Int? = nil","}","","extension View {","  fileprivate func tableViewLayoutKey(_ value: Int) -> some View  {","    return layoutValue(key: TableViewLayoutKey.self, value: value)","  }","}","","\/\/\/ Which of 36 guests this view represents","private struct GuestViewLayoutKey: LayoutValueKey {","  static let defaultValue: Int? = 0","}","","extension View {","","  \/\/\/ Guests 1 - 36","  fileprivate func guestViewLayoutKey(_ value: Int) -> some View  {","    return layoutValue(key: GuestViewLayoutKey.self, value: value)","  }","}","","let initials = [","\"Ju\", \"As\", \"Ma\", \"As\", \"Ly\", \"Ga\", \"Ni\", \"Ar\", \"Ca\", ","\"Do\", \"Je\", \"Ca\", \"Em\", \"Ma\", \"Ze\", \"Jo\", \"Da\", \"Sh\", ","\"Sa\", \"Pl\", \"Pa\", \"Sc\", \"Ma\", \"Je\", \"Li\", \"Ma\", \"Ta\", ","\"Je\", \"Cu\", \"Lu\", \"Ra\", \"Na\", \"Sa\", \"Pa\", \"Le\", \"Pi\",","]","","struct SeatingChartView: View {","","  \/\/\/ If true, the guests will be positioned in \"pods\" of tables. No table will touch another table. Otherwise","  \/\/\/ the guests will side in two longs rows.","  @State private var usePods = true","","  var body: some View {","    ZStack(alignment: .bottomTrailing) {","      GeometryReader { proxy in","        SeatingLayout(usePods: usePods).callAsFunction {","          TableView(tableNumber: 1)","          TableView(tableNumber: 2)","          TableView(tableNumber: 3)","          TableView(tableNumber: 4)","          TableView(tableNumber: 5)","          TableView(tableNumber: 6)","          ForEach(1..<37) { i in","            SeatedGuestOption2(guestNumber: i - 1)","          }","        }","        .animation(.default, value: proxy.size)","      }","      .background(.black.opacity(0.13))","      Picker(\"Arrangement\", selection: $usePods.animation()) {","        Text(\"Pods\").tag(true)","        Text(\"Rows  \").tag(false)","      }","      .fixedSize()","      .pickerStyle(.segmented)","      .padding()","    }","  }","}","","struct TableView: View {","  let tableNumber: Int","","  var body: some View {","    ZStack(alignment: .bottomTrailing) {","      HStack {","        Image(systemName: \"table.furniture\")","          .background(.quaternary.shadow(.inner(radius: 1, y: 1.5)),","                in: Circle().inset(by: -8))","          .padding(5)","        Text(\"Table \\(tableNumber)\")","      }","      .foregroundStyle(.secondary)","      .padding(8)","      .frame(width: tableSize.width, height: tableSize.height)","      #if os(macOS) || os(iOS)","      .background(.regularMaterial.shadow(.drop(radius: 1, y: 1.5)),","            in: RoundedRectangle(cornerRadius: 12, style: .continuous))","      #endif","    }","","    .tableViewLayoutKey(tableNumber)","  }","}","","private let colors: [Color] = [","  .red, .orange, .yellow, .green, .mint, .teal, .cyan, .blue,","  .indigo, .purple, .pink, .gray, .black, .white, .brown,","  .red, .orange, .yellow, .green, .mint, .teal, .cyan, .blue,","  .indigo, .purple, .pink, .gray, .black, .white, .brown, .red,","  .orange, .yellow, .green, .mint, .teal, .cyan","]","","struct SeatedGuest: View {","","  let guestNumber: Int","","  var body: some View {","    Image(systemName: \"person\")","      .resizable()","      .aspectRatio(contentMode: .fit)","      .padding(9)","      .background(in: Circle())","      .backgroundStyle(","        colors[guestNumber].gradient","      )","      .foregroundStyle(guestNumber == 13 ? .black : .white)","      .frame(width: 40, height: 40)","      .guestViewLayoutKey(guestNumber + 1)","  }","}","","struct SeatedGuestOption2: View {","  let guestNumber: Int","","  var body: some View {","    Circle()","      .stroke(colors[guestNumber], style: StrokeStyle(lineWidth: 3))","      .background(.white.gradient, in: Circle())","      .frame(width: guestSize.width, height: guestSize.height)","      .guestViewLayoutKey(guestNumber + 1)","      .overlay {","        Text(initials[guestNumber])","          .foregroundColor(.secondary)","          .font(.callout)","","      }","  }","}","","struct SeatingChartView_Previews: PreviewProvider {","  static var previews: some View {","    SeatingChartView()","      .frame(width: 600, height: 600)","  }","}","","struct SeatingLayout: Layout {","","  \/\/\/ If true, the guests will be positioned in \"pods\" of tables. No table will touch another table. Otherwise","  \/\/\/ the guests will side in two longs rows.","  let usePods: Bool","","  struct Cache {","    \/\/\/  The width proposed to the view. We assume a certain height, otherwise, overlapping views","    var width: CGFloat?","  }","","  func sizeThatFits(","    proposal: ProposedViewSize,","    subviews: LayoutSubviews,","    cache: inout Cache","  ) -> CGSize {","    cache.width = proposal.width","    return proposal.replacingUnspecifiedDimensions()","  }","","  func makeCache(subviews: Subviews) -> Cache { Cache() }","","  func placeSubviews(in bounds: CGRect,","             proposal: ProposedViewSize,","             subviews: Subviews,","             cache: inout Cache) {","    guard let width = cache.width else { return }","","    \/\/\/ Helper function: Place 6 guests around all edges of a table.","    func seat(_ guests: [LayoutSubview], around table: CGRect) {","      guests[0].place(","        at: .init(","          x: table.origin.x + 3 - guestSize.width,","          y: table.origin.y + (table.height \/ 2.0) - (guestSize.height \/ 2.0)),","        proposal: .infinity)","      guests[1].place(","        at: .init(","          x: table.origin.x + (table.width \/ 4.0) - guestSize.width \/ 2.0,","          y: table.origin.y + 5 - guestSize.height),","        proposal: .infinity)","      guests[2].place(","        at: .init(","          x: table.origin.x + table.width * 0.75 - guestSize.width \/ 2.0,","          y: table.origin.y + 5 - guestSize.height),","        proposal: .infinity)","      guests[3].place(","        at: .init(","          x: table.maxX - 5,","          y: table.origin.y + (table.height \/ 2.0) - (guestSize.height \/ 2.0)),","        proposal: .infinity)","      guests[4].place(","        at: .init(","          x: table.origin.x + table.width * 0.75 - guestSize.width \/ 2.0,","          y: table.maxY - 5),","        proposal: .infinity)","      guests[5].place(","        at: .init(","          x: table.origin.x + (table.width \/ 4.0) - guestSize.width \/ 2.0,","          y: table.maxY - 5),","        proposal: .infinity)","    }","","    \/\/\/ Helper function: Place 6 guests, dining hall style (not along the shorter sides of a table)","    func seat(_ guests: [LayoutSubview], along table: CGRect) {","      guests[0].place(","        at: .init(","          x: table.minX + tableSize.width \/ 3 - guestSize.width - 4,","          y: table.origin.y + 5 - guestSize.height),","        proposal: .infinity)","      guests[1].place(","        at: .init(","          x: table.minX + tableSize.width * 2\/3 - guestSize.width - 4,","          y: table.origin.y + 5 - guestSize.height),","        proposal: .infinity)","      guests[2].place(","        at: .init(","          x: table.minX + tableSize.width - guestSize.width - 4,","          y: table.origin.y + 5 - guestSize.height),","        proposal: .infinity)","      guests[3].place(","        at: .init(","          x: table.minX + tableSize.width \/ 3 - guestSize.width - 4,","          y: table.maxY - 5),","        proposal: .infinity)","      guests[4].place(","        at: .init(","          x: table.minX + tableSize.width * 2\/3 - guestSize.width - 4,","          y: table.maxY - 5),","        proposal: .infinity)","      guests[5].place(","        at: .init(","          x: table.minX + tableSize.width - guestSize.width - 4,","          y: table.maxY - 5),","        proposal: .infinity)","    }","","    \/\/ Get tables","    let table1 = subviews.first(where: { $0[TableViewLayoutKey.self] == 1 })!","    let table2 = subviews.first(where: { $0[TableViewLayoutKey.self] == 2 })!","    let table3 = subviews.first(where: { $0[TableViewLayoutKey.self] == 3 })!","    let table4 = subviews.first(where: { $0[TableViewLayoutKey.self] == 4 })!","    let table5 = subviews.first(where: { $0[TableViewLayoutKey.self] == 5 })!","    let table6 = subviews.first(where: { $0[TableViewLayoutKey.self] == 6 })!","","    \/\/ Get guests","    let table1Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 1 && guestNumber <= 6","      }","    let table2Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 7 && guestNumber <= 12","      }","    let table3Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 13 && guestNumber <= 18","      }","    let table4Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 19 && guestNumber <= 24","      }","    let table5Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 25 && guestNumber <= 30","      }","    let table6Guests = subviews","      .filter {","        guard let guestNumber = $0[GuestViewLayoutKey.self] else { return false }","        return guestNumber >= 31 && guestNumber <= 36","      }","","    if usePods {","      let table1Origin = CGPoint(x: 60, y: 120)","      let table2Origin = CGPoint(x: 200, y: 280)","      let table3Origin = CGPoint(x: 50, y: 450)","      let table4Origin = CGPoint(x: 300, y: 120)","      let table5Origin = CGPoint(x: 440, y: 280)","      let table6Origin = CGPoint(x: 290, y: 450)","      table1.place(at: table1Origin, proposal: .infinity)","      table2.place(at: table2Origin, proposal: .infinity)","      table3.place(at: table3Origin, proposal: .infinity)","      table4.place(at: table4Origin, proposal: .infinity)","      table5.place(at: table5Origin, proposal: .infinity)","      table6.place(at: table6Origin, proposal: .infinity)","      seat(table1Guests, around: CGRect(origin: table1Origin, size: tableSize))","      seat(table2Guests, around: CGRect(origin: table2Origin , size: tableSize))","      seat(table3Guests, around: CGRect(origin: table3Origin, size: tableSize))","      seat(table4Guests, around: CGRect(origin: table4Origin, size: tableSize))","      seat(table5Guests, around: CGRect(origin: table5Origin , size: tableSize))","      seat(table6Guests, around: CGRect(origin: table6Origin, size: tableSize))","    } else {","      let table1Origin = CGPoint(x: width \/ 2.0 - 6 - tableSize.width * 1.5, y: 130)","      let table2Origin = CGPoint(x: table1Origin.x + tableSize.width + 6, y: 130)","      let table3Origin = CGPoint(x: table2Origin.x + tableSize.width + 6, y: 130)","      let table4Origin = CGPoint(x: width \/ 2.0 - 6 - tableSize.width * 1.5, y: 360)","      let table5Origin = CGPoint(x: table1Origin.x + tableSize.width + 6, y: 360)","      let table6Origin = CGPoint(x: table2Origin.x + tableSize.width + 6, y: 360)","      table1.place(at: table1Origin, proposal: .infinity)","      table2.place(at: table2Origin, proposal: .infinity)","      table3.place(at: table3Origin, proposal: .infinity)","      table4.place(at: table4Origin, proposal: .infinity)","      table5.place(at: table5Origin, proposal: .infinity)","      table6.place(at: table6Origin, proposal: .infinity)","      seat(table1Guests, along: CGRect(origin: table1Origin, size: tableSize))","      seat(table2Guests, along: CGRect(origin: table2Origin , size: tableSize))","      seat(table3Guests, along: CGRect(origin: table3Origin, size: tableSize))","      seat(table4Guests, along: CGRect(origin: table4Origin, size: tableSize))","      seat(table5Guests, along: CGRect(origin: table5Origin , size: tableSize))","      seat(table6Guests, along: CGRect(origin: table6Origin, size: tableSize))","    }","  }","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"new "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/anylayout"},{"type":"text","text":" type to switch between layouts easily"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example switching between two layouts:"}]},{"type":"codeListing","code":["import SwiftUI","import GameplayKit","import Combine","","@main","struct InvitationApp: App {","  var body: some Scene {","    WindowGroup {","      PolygonDesignerView()","        .environmentObject(PolygonModel())","      #if os(iOS)","        .statusBar(hidden: true)","      #endif","        .edgesIgnoringSafeArea(.all)","    }","  }","}","","\/\/ MARK: Views","","\/\/\/ A view that arranges polygons in a grid, or a custom, scattered layout.","private struct DynamicPolygonView: View {","  @EnvironmentObject var model: PolygonModel","  @Binding var cycleLayouts: Bool","","  private var sideLength: Int {","    Int(CGFloat(model.polygonGeometries.count).squareRoot())","  }","","  \/\/\/ Timer whose ticking dictates how often to regenerate and animate-to a new scattered layout.","  \/\/\/ - Note: The layout will only transition if `cycleLayouts` is `true`.","  private let layoutChangingTimer = Timer","    .publish(every: 1.2, on: .current, in: .default).autoconnect()","","  \/\/\/ Animation used to transition layouts","  private let animation = Animation.easeInOut(duration: 1.3)","","  \/\/\/ Timer that ticks at 128 beats per minute, matching the beat of the song in the WWDC session.","  let musicBeatTimer = Timer","    .publish(every: 0.234378662, tolerance: 0,  on: .main, in: .default)","","  @State private var musicBeatTimerCancellable: (any Cancellable)? = nil","","  \/\/\/ Whether or not the font should be rendered heavy.","  @State private var heavy: Bool = false","","  @State private var scatteredLayout = newScatteredLayout(","    Date(timeIntervalSince1970: 0)","  )","","  \/\/\/ By providing a seed value, the `ScatteredLayout` struct will know when to bust its cache and","  \/\/\/ generate new layout data.","  private static func newScatteredLayout(_ seed: Date) -> ScatteredLayout {","    ScatteredLayout(count: PolygonModel.total,","            seed: seed.timeIntervalSinceReferenceDate,","            textAvoidanceRect: CGRect(","              x: 152,","              y: 245,","              width: 220,","              height: 40)","    )","  }","","  var body: some View {","    let layout = model.usesGridLayout","    ? AnyLayout(Grid(alignment: .center,","             horizontalSpacing: 0,","             verticalSpacing: 0))","    : AnyLayout(scatteredLayout)","","    ZStack(alignment: .center) {","      Label(title:  {","        Text(\"You're Invited\")","      }, icon: { Image(systemName: \"party.popper.fill\")})","      .font(.system(size:100).weight(heavy ? .black : .thin))","      .onTapGesture {","        musicBeatTimerCancellable = musicBeatTimer.connect()","      }","      .zIndex(-1)","","      layout {","        ForEach((0..<sideLength), id: \\.self) { row in","          GridRow { \/\/ GridRow is a no-op in non-Grid layouts","            ForEach((0..<sideLength), id: \\.self) { column in","              let polygon = model","                .polygonGeometries[sideLength * row + column]","              PolygonView(polygonGeometry: polygon)","                .polygonViewLayoutKey(polygon)","            }","          }","        }","      }","    }","    .drawingGroup()","    .frame(maxWidth: .infinity, maxHeight: .infinity)","    .onReceive(musicBeatTimer) { date in","      if heavy {","        \/\/ Transitioning to a thin font happens slowly","        withAnimation(.easeOut(duration: 0.468757324 - 0.1)) {","          heavy.toggle()","        }","      } else {","        \/\/ Transitioning to thick happens quickly, to give the","        \/\/ appearance of a \"strong\" downbeat","        withAnimation(.easeIn(duration: 0.1)) {","          heavy.toggle()","        }","      }","    }","    .onReceive(layoutChangingTimer) { date in","      guard cycleLayouts else { return }","      withAnimation(animation) {","        scatteredLayout = DynamicPolygonView.newScatteredLayout(date)","      }","","    }","  }","}","","private struct PolygonDesignerView: View {","  @EnvironmentObject var model: PolygonModel","  @State var cycleLayouts = false","  @State var hideDesignerView = true","","  var body: some View {","    ZStack(alignment: .bottom) {","      DynamicPolygonView(cycleLayouts: $cycleLayouts)","        .onTapGesture(count: 2) {","          withAnimation {","            hideDesignerView.toggle()","          }","        }","      ControlView(cycleLayouts: $cycleLayouts)","        .padding()","        .background(.thickMaterial)","        .offset(CGSize(width: 0, height: hideDesignerView ? 300 : 0))","    }","  }","}","","\/\/\/ Tunes the parameters of a `PolygonModel`","private struct ControlView: View {","","  \/\/\/ The instance `self` tunes the parameters of.","  @EnvironmentObject var model: PolygonModel","","  \/\/\/ Can be used by a parent view to cycle through instances of layouts.","  @Binding var cycleLayouts: Bool","","  var body: some View {","    VStack {","      Button(\"Reset\", action: model.reset)","      let layout = HStack()","      layout {","        Toggle(\"Tiled\", isOn: Binding(get: {","          model.tiled","        }, set: { tile in","          \/\/ After toggled, wait 5 seconds, then transition back to a","          \/\/ scattered layout","          DispatchQueue.main.asyncAfter(deadline: .now() + 5) {","            withAnimation(.linear(duration: 1.4)) {","              model.usesGridLayout = false","              model.drawAsRandomPolygons = true","            }","          }","","          withAnimation(.linear(duration: 1.8)) {","            model.usesGridLayout = tile","            model.drawAsRandomPolygons = !tile","          }","        }))","","        Toggle(\"Cycle Layouts\", isOn: $cycleLayouts)","      }","    }","    .padding(2)","  }","}","","\/\/ MARK: PolygonView","","\/\/\/ Wraps a ``Polygon`` shape applying a fill.","private struct PolygonView: View {","  var polygonGeometry: PolygonGeometry","","  var body: some View {","    Polygon(polygonGeometry: polygonGeometry)","      .fill(polygonGeometry.color)","  }","}","","\/\/\/ A Polygon shape that supports any number of sides as defined by `polygonGeometry`","private struct Polygon: Shape {","  var polygonGeometry: PolygonGeometry","","  typealias AnimatableData = AnimatableVector","","  var animatableData: AnimatableVector {","    get { polygonGeometry.vectorPath }","    set { polygonGeometry.points = newValue.points }","  }","","  func path(in rect: CGRect) -> Path {","    \/\/ Scale up the shape's path to fill as much space as it is given","    let path = polygonGeometry.path","    let boundingRect = path.boundingRect","","    let xScale = rect.width \/ boundingRect.width","    let yScale = rect.height \/ boundingRect.height","","    let translate = CGAffineTransform(","      translationX: -boundingRect.origin.x * xScale,","      y: -boundingRect.origin.y * yScale","    )","    let scale = CGAffineTransform(scaleX: xScale, y: yScale)","    return path.applying(scale.concatenating(translate))","  }","","  func sizeThatFits(_ proposal: ProposedViewSize) -> CGSize {","    if proposal == .infinity {","      \/\/ If proposed infinite space, use the preferred, absolute size.","      return CGSize(width: polygonGeometry.sideLength,","              height: polygonGeometry.sideLength)","    } else {","      \/\/ If we don't have infinite space, assume we've been given all the","      \/\/ space the parent view can afford, and take all of it.","      return proposal.replacingUnspecifiedDimensions()","    }","  }","}","","\/\/ MARK: ScatteredLayout","","private struct PolygonViewLayoutKey: LayoutValueKey {","  static let defaultValue: PolygonGeometry? = nil","}","","extension View {","  fileprivate func polygonViewLayoutKey(_ value: PolygonGeometry)","  -> some View {","    return layoutValue(key: PolygonViewLayoutKey.self, value: value)","  }","}","","\/\/\/ ScatteredLayout assumes a certain standard size and lays out its views","\/\/\/ (tagged with `PolygonViewLayoutKey` data) such that they don't collide","\/\/\/ within that size. As the size grows, the shapes stay the same size,","\/\/\/ but get farther or closer.","private struct ScatteredLayout: Layout {","","  \/\/\/ Cache data for a `ScatteredLayout`.","  struct Cache {","","    \/\/\/ Maps a `PolygonGeometry.id` to its position in a `standardSize`","    \/\/\/ coordinate space.","    var rects: [UUID: CGRect]","","    \/\/\/ Used as a cache buster.","    var seed: TimeInterval?","  }","","  \/\/\/ The smallest size a view using this layout can be.","  private let minimumBaseSize: CGSize","","  \/\/\/ The base coordinate system this view assumes when laying out.","  private let standardSize: CGSize = CGSize(width: 500, height: 500)","","  \/\/\/ Clients can pass a value here and polygons won't be placed in that rect.","  var textAvoidanceRect: CGRect = .zero","","  \/\/\/ If different, we've been requested to bust the cache, and create a new","  \/\/\/ one.","  \/\/\/ - Note the cache can persist across different instances of a","  \/\/\/  `ScatteredLayout`","  private let seed: TimeInterval","","  func sizeThatFits(","    proposal: ProposedViewSize,","    subviews: LayoutSubviews,","    cache: inout Cache","  ) -> CGSize {","    let proposedSize = proposal","      .replacingUnspecifiedDimensions(by: minimumBaseSize)","    return CGSize(","      width: proposedSize.width","        .clamped(","          to: minimumBaseSize.width..<CGFloat.greatestFiniteMagnitude","        ),","      height: proposedSize.height","        .clamped(","          to: minimumBaseSize.height..<CGFloat.greatestFiniteMagnitude","        )","    )","  }","","  init(count: Int, seed: TimeInterval, textAvoidanceRect: CGRect = .zero) {","    self.seed = seed","    minimumBaseSize = CGSize(width: CGFloat(count), height: CGFloat(count))","    self.textAvoidanceRect = textAvoidanceRect","  }","","  func makeCache(subviews: Subviews) -> Cache {","    var cache: Cache =  Cache(rects: [:], seed: self.seed)","    var placedPolygons: [CGRect] = []","","    for subview in subviews {","","      guard let polygon = subview[PolygonViewLayoutKey.self] else {","        \/\/ This is the title text view, skip it.","        continue","      }","","      var subviewsPreferredSize = subview.sizeThatFits(.infinity)","      var counter = 20","","      while counter > 0 {","        counter -= 1","        let randomX = CGFloat.random(in: 0..<standardSize.width)","        let randomY: CGFloat","        if randomX > textAvoidanceRect.minX","          && randomX < textAvoidanceRect.maxX {","          \/\/ Pick from either above or below the avoidance rect","          if Bool.random() {","            randomY = CGFloat.random(","              in: 0..<textAvoidanceRect.minY","            )","          } else {","            randomY = CGFloat.random(","              in: textAvoidanceRect.maxY..<standardSize.height","            )","          }","        } else {","          randomY = CGFloat.random(in: 0..<standardSize.height)","        }","","        let origin = CGPoint(x: randomX, y: randomY)","        let rect = CGRect(origin: origin, size: subviewsPreferredSize)","","        if placedPolygons.allSatisfy({ placed in","          !placed.intersects(rect)","        }) && !rect.intersects(textAvoidanceRect) {","          \/\/ The shape found a non-overlapping place to be. Lock in","          \/\/ it's position","          placedPolygons.append(rect)","          cache.rects[polygon.id] =","          CGRect(origin: origin,","               size: subviewsPreferredSize)","          break","        } else  {","          if (counter == 0) {","            if rect.intersects(textAvoidanceRect) {","              subviewsPreferredSize = .zero","            }","            placedPolygons.append(rect)","            cache.rects[polygon.id] =","            CGRect(origin: origin,","                 size: subviewsPreferredSize)","          }","        }","      }","    }","    return cache","  }","","  func placeSubviews(in bounds: CGRect,","             proposal: ProposedViewSize,","             subviews: Subviews,","             cache: inout Cache) {","    \/\/ We have the frame value cached (via makeCache())","    \/\/ for every view to be placed in a `standardSize` coordinate system.","    \/\/ Now we need to map that `standardSize` to the size was proposed.","    let proposedSize = proposal","      .replacingUnspecifiedDimensions(by: minimumBaseSize)","    let xProposedToBaseRatio = proposedSize.width \/ standardSize.width","    let yProposedToBaseRatio = proposedSize.height \/ standardSize.height","","    for subview in subviews {","      guard let uuid = subview[PolygonViewLayoutKey.self]?.id, let rect =","          cache.rects[uuid] else {","        let desiredSize = subview.sizeThatFits(.zero)","        let centered = desiredSize.centered(in: bounds)","        subview.place(","          at: centered.origin,","          proposal: ProposedViewSize(","            width: desiredSize.width,","            height: desiredSize.height","          )","        )","        continue","      }","","      let mappedPoint = CGPoint(x: rect.origin.x * xProposedToBaseRatio,","                    y: rect.origin.y * yProposedToBaseRatio)","","      subview.place(at: mappedPoint,","              proposal: ProposedViewSize(width: rect.size.width,","                           height:rect.size.height)","      )","    }","  }","","  func updateCache(_ cache: inout Cache, subviews: Subviews) {","","    \/\/ Bust the cache if we've been given a new seed value","    \/\/ or if our subviews have been swapped out from underneath us.","    if self.seed != cache.seed","      || !cache.rects.contains(where: { (key: UUID, value: CGRect) in","        subviews.first?[PolygonViewLayoutKey.self]?.id == key","      })  {","      cache = makeCache(subviews: subviews)","      return","    }","  }","","}","","\/\/\/ This struct facilitates animation of point-based `Path`s so long as said","\/\/\/ source and destination `Path` have an equal number of vertices.","private struct AnimatableVector: VectorArithmetic {","","  static var zero: AnimatableVector = AnimatableVector(points: [])","","  private(set) var points: [CGPoint]","","  var magnitudeSquared: Double {","    let squared = points.map { point in","      CGPoint(x: point.x * point.x, y: point.y * point.y)","    }","    let sumOfSquares = squared.map { point in \/\/ dot product?","      sqrt(point.x + point.y)","    }","    let sum = sumOfSquares.reduce(0, +)","    return Double(sum)","  }","","  \/\/\/ Facilitates a valid `.zero` value, no matter the dimension of the vector","  subscript(safe index: Int) -> CGPoint {","    return (self.points.count <= index) ? .zero : points[index]","  }","","  static func - (lhs: AnimatableVector, rhs: AnimatableVector)","  -> AnimatableVector {","    let negated = rhs.points.map { CGPoint(x: -$0.x, y: -$0.y) }","    return lhs + AnimatableVector(points: negated)","  }","","  static func + (lhs: AnimatableVector, rhs: AnimatableVector)","  -> AnimatableVector {","    var output: [CGPoint] = []","    for i in 0..<lhs.points.count {","      output.append(CGPoint(x: lhs[safe: i].x + rhs[safe: i].x,","                  y:lhs[safe: i].y + rhs[safe: i].y ))","    }","    return AnimatableVector(points: output)","  }","","  mutating func scale(by rhs: Double) {","    points = points.map { CGPoint(x: $0.x * CGFloat(rhs),","                    y: $0.y * CGFloat(rhs)) }","  }","}","","\/\/ MARK: Random Polygon Generation & Geometry","","private let mean: Float = 10","private let deviation: Float = 3","private let gaussian = GKGaussianDistribution(","  randomSource: GKARC4RandomSource(),","  mean: mean,","  deviation: deviation)","","\/\/\/ Factory type for creating points describing a random Polygon","private struct PolygonGeometry: Identifiable, Equatable, Hashable {","","  \/\/\/ The horizontal and vertical side lengths of the polygon's bounding box.","  let sideLength: CGFloat","","  \/\/\/ A constant count of the total points that comprise this","  \/\/\/ `PolygonGeometry`'s path. Clients can set `points` to a new value, but","  \/\/\/ the new value should have the same `count` for smooth `Path` animations","  let numberOfVertices: Int","","  \/\/\/ Supports animation of point-based `Path`s by providing an array of","  \/\/\/ points that can be interpolated.","  var vectorPath: AnimatableVector {","    AnimatableVector(points: points)","  }","","  \/\/\/ If `false`, this instance will present itself as a rectangular shape","  \/\/\/ (not necessarily with 4 vertices) that fills available space.","  private(set) var drawsAsPolygon: Bool = true","","  \/\/\/ Points describing the `Path` used to render `self`.","  var points: [CGPoint] {","    willSet {","      assert(points.count == polygonPathPoints.count)","    }","  }","","  \/\/\/ Delineate the path of the random polygon.","  private let polygonPathPoints: [CGPoint]","","  let color: Color = [","    Color(red: 0.73, green: 0.20, blue: 0.20),","    Color(red: 0.95, green: 0.66, blue: 0.24),","    Color(red: 0.14, green: 0.29, blue: 0.49),","    Color(red: 0.46, green: 0.76, blue: 0.67),","    Color(red: 0.30, green: 0.33, blue: 0.22),","    Color(red: 0.49, green: 0.55, blue: 0.64),","    Color(red: 0.92, green: 0.53, blue: 0.30),","    Color(red: 0.20, green: 0.45, blue: 0.55),","    Color(red: 0.41, green: 0.45, blue: 0.45),","    Color(red: 0.87, green: 0.67, blue: 0.61)","  ].randomElement()!","","  private var spikiness: CGFloat = 0.2","  private var irregularity: CGFloat = 0.2","","  let id = UUID()","","  \/\/\/ Owning `Shape` instances should use this to draw.","  var path: Path { Path(from: points) }","","  init(pointsVector: [CGPoint], sideLength: CGFloat) {","    self.numberOfVertices = pointsVector.count","    self.points = pointsVector","    self.polygonPathPoints = points","    self.sideLength = sideLength","  }","","  func drawn(asRandomizedPolygon: Bool) -> Self {","    var copy = self","    copy.drawsAsPolygon = asRandomizedPolygon","    copy.points = asRandomizedPolygon","    ? copy.polygonPathPoints","    : CGRect(x: 0, y: 0, width: 1, height: 1)","      .pointSequence(of: copy.numberOfVertices)","    return copy","  }","","  func hash(into hasher: inout Hasher) {","    hasher.combine(id)","  }","}","","\/\/\/ A namespace around functionality to generate a  path drawn in a 1x1 square","\/\/\/ with configurable \"irregularity\" and \"spikiness\".","\/\/\/ The closer both are to zero, the closer the generated polygon is to a","\/\/\/ [regular polygon](https:\/\/mathworld.wolfram.com\/RegularPolygon.html)","private enum UnitPolygonGeometryFactory {","","  \/\/\/ The maximum possible radius. A value of 0.5 restricts the algorithm","  \/\/\/ to the unit square.","  private static let maxRadius: CGFloat = 0.5","","  \/\/\/ A ‚Äî by no means definitive ‚Äî algorithm for creating an arbitrary","  \/\/\/ polygon of `vertexCount` vertices","  \/\/\/ - Parameters:","  \/\/\/   - vertexCount: How many vertices (and edges) the polygon will have","  \/\/\/   - irregularity: A subjective term for how \"irregular\" the polygon is.","  \/\/\/   A fully regular polygon has all equal sides, assuming 0 `spikinesss`.","  \/\/\/   - spikiness: A subjective term for how \"spiky\" the polygon is.","  \/\/\/   A polygon with high spikiness will have more vertices closer and","  \/\/\/   farther from where the vertex would be on a regular polygon.","  \/\/\/ - Returns: An array of points representing the point-based path of","  \/\/\/ the polygon","  static func random(vertexCount: Int,","             irregularity: CGFloat = 0.2,","             spikiness: CGFloat = 0.2)","  -> [CGPoint] {","","    let floatVertices = CGFloat(vertexCount)","","    \/\/ Irregularity is how much we're willing to allow the angular steps to","    \/\/ vary from \"perfect\". For example, in a regular (all sides equal)","    \/\/ six-sided polygon, each angular step is 2ùúã \/ 6. Irregularity","    \/\/ defines the range that value can take, centered around a mean of","    \/\/ 2ùúã \/ 6. We accept an irregularity between 0 and 1, and then","    \/\/ scale it for how much that represents out of a circle's radians.","    let scaledIrregularity = irregularity * 2.0 * CGFloat.pi \/ floatVertices","","    \/\/ Spikiness describes how often we want to see values that are very","    \/\/ far from where a vertex of a regular polygon would be. For example,","    \/\/ a high positive spikiness might push a vertex radially very far from","    \/\/ the center, leading to a big \"spike\". Meanwhile, a spikiness of 0","    \/\/ will yield more circular polygons.","    let denormalizedSpikiness = spikiness * maxRadius","","    let gaussian = GKGaussianDistribution(","      randomSource: GKARC4RandomSource(),","      mean: Float(maxRadius * 1024),","      deviation: Float(denormalizedSpikiness * 1024))","","    \/\/ Generate the angular steps","    var raidanAngleSteps: [CGFloat] = []","","    \/\/ Both of these measured in radians","    let minimumSliceWidth =","    (2.0 * CGFloat.pi \/ floatVertices) - scaledIrregularity","    let maximumSliceWidth =","    (2.0 * CGFloat.pi \/ floatVertices) + scaledIrregularity","","    var sum: CGFloat = 0","","    for _ in (0..<vertexCount) {","      let radians = CGFloat","        .random(in: minimumSliceWidth...maximumSliceWidth)","      raidanAngleSteps.append(radians)","      sum += radians","    }","","    \/\/ Re-divide these steps so the point 0 and n+1 are the same.","    \/\/ I.e. if the random angle generation from the above loop yielded","    \/\/ more or less than 2ùúã radians, reapportion those divisions to sum to","    \/\/ 2ùúã.","    let k = sum \/ (2 * CGFloat.pi)","    (0..<vertexCount).forEach { i in","      raidanAngleSteps[i] \/= k","    }","","    let maximumPossibleGaussianSample = CGFloat(","      gaussian.mean + Float(denormalizedSpikiness * 1024)*3","    )","","    \/\/ Finally, make all of the normalized points within a 1x1 square","    \/\/ Unlike the unit circle of traditional geometry, because (0, 0) is in","    \/\/ the top left, (0.5, 0.5) is in the middle. Thus, positively","    \/\/ incrementing the angle moves us clockwise around the circle","    var points: [CGPoint] = []","    let center = CGPoint(x: maxRadius, y: maxRadius)","    var cumulativeAngle: CGFloat = 0.0","    for i in (0..<Int(vertexCount)) {","","      \/\/ * 2 to keep the sample <= 0.5 (`maxRadius)","      let radiusForPoint = CGFloat(gaussian.nextInt())","      \/ (maximumPossibleGaussianSample * 2)","","      let x = center.x + radiusForPoint * cos(cumulativeAngle)","      let y = center.y + radiusForPoint * sin(cumulativeAngle)","      points.append(CGPoint(x: x, y: y))","","      cumulativeAngle += raidanAngleSteps[i]","    }","    return points","  }","}","","\/\/ MARK: Observable Polygon Model","","\/\/\/ A `PolygonModel` describes a collection of randomized ``Polygons`` that","\/\/\/ can be laid out by `AnyLayout` type.","private class PolygonModel: ObservableObject {","","  static let total = (maxSides - minSides + 1) * polygonsPerSideCount","","  \/\/\/ The minimum sides the randomly generated sides will have","  private static let minSides = 4","","  \/\/\/ The maximum sides the randomly generated sides will have","  private static let maxSides = 7","","  \/\/\/ The number of randomly generated polygons to make _per side length_.","  private static let polygonsPerSideCount = 32","","  \/\/\/ All `PolygonGeometry`s that are laid out with `scatteredLayout`","  @Published var polygonGeometries: [PolygonGeometry] = makeGeometries()","","  \/\/\/ If `true`, `self` is expressing a grid layout with rectangular tiles.","  var tiled: Bool { usesGridLayout && !drawAsRandomPolygons }","","  \/\/\/ If `true`, ignore `scatteredLayout` and instead use a `Grid` layout","  @Published var usesGridLayout: Bool = false","","  \/\/\/ If `true`, `polygonGeometries` draw themselves as randomized polygons.","  \/\/\/ If false, a rectangle that fills all available space.","  @Published var drawAsRandomPolygons: Bool = true {","    didSet {","      polygonGeometries = polygonGeometries.map {","        $0.drawn(asRandomizedPolygon: drawAsRandomPolygons)","      }","    }","  }","","  \/\/\/ Tunable by clients to experiment with different values.","  let spikiness: CGFloat = 0.2","  \/\/\/ Tunable by clients to experiment with different values.","  let irregularity: CGFloat = 0.2","","  \/\/\/ Creates many ``PolygonGeometry`` instances with the given parameters.","  \/\/\/ - Parameters:","  \/\/\/   - irregularity: A subjective term for how \"irregular\" the polygon is.","  \/\/\/   A fully regular polygon has all equal sides, assuming 0 `spikinesss`.","  \/\/\/   - spikiness: A subjective term for how \"spiky\" the polygon is.","  \/\/\/   A polygon with high spikiness will have more vertices closer and","  \/\/\/   farther from where the vertex would be on a regular polygon.","  \/\/\/ - Returns: An array of `n` polygons where `n` is defined by the","  \/\/\/  `PolygonModel` class.","  private static func makeGeometries(","    irregularity: CGFloat = 0.3,","    spikiness: CGFloat = 0.3) -> [PolygonGeometry] {","      var scales: Array<CGFloat> = polygonSizeRatios","        .reduce(into: []) { partialResult, sizeRatio in","          let (size, percentage) = sizeRatio","          let scalesToMake = Int(ceil(percentage * CGFloat(total)))","          partialResult.append(contentsOf: (0..<scalesToMake)","            .map { _ in CGFloat.random(in: size.sizeRange) })","        }.shuffled()","","      return (minSides...maxSides).flatMap { vertexCount in","        return (0..<polygonsPerSideCount).map { _ in","          let unitPolygon = UnitPolygonGeometryFactory","            .random(vertexCount: vertexCount,","                irregularity: irregularity,","                spikiness: spikiness)","          let polygonGeometry = PolygonGeometry(","            pointsVector: unitPolygon,","            sideLength: scales.removeFirst())","          return polygonGeometry","        }","      }.shuffled()","    }","","  \/\/\/ Complete remove and regenerate all model data.","  func reset() {","    polygonGeometries.removeAll(keepingCapacity: true)","    polygonGeometries = PolygonModel.makeGeometries(","      irregularity: irregularity,","      spikiness: spikiness","    )","  }","}","","private extension PolygonModel {","","  \/\/\/ Use a sampling of various sized polygons","  enum PieceSize: Hashable {","    case tiny","    case small","    case medium","    case large","","    \/\/\/ The range for the side length of the bounding rect of a polygon","    var sizeRange: ClosedRange<CGFloat> {","      switch self {","      case .tiny:","        return 16.0...25.0","      case .small:","        return 25.0...40.0","      case .medium:","        return 40.0...50.0","      case .large:","        return 50.0...65.0","      }","    }","  }","","  \/\/\/ This dictionary denotes the ratio of sizes to use.","  \/\/\/ - warning: Should sum to 100.","  private static let polygonSizeRatios: [PieceSize: CGFloat] =","  [","    .large: 0.15,","    .medium: 0.25,","    .small: 0.25,","    .tiny: 0.35","  ]","}","","\/\/ MARK: - Utility Extensions","","extension FloatingPoint {","","  \/\/\/ - returns an instance of `Self` clamped to the ``ClosedRange``.","  func clamped(to limits: ClosedRange<Self>) -> Self {","    return min(max(self, limits.lowerBound), limits.upperBound)","  }","","  \/\/\/ - returns an instance of `Self` clamped to the ``Range``.","  \/\/\/ - note the value returned will be less than the provided upper bound, as","  \/\/\/  is dictated by ``Range``.","  func clamped(to limits: Range<Self>) -> Self {","    return min(max(self, limits.lowerBound), limits.upperBound.nextDown)","  }","}","","extension CGRect {","","  \/\/\/ Creates a rectangular sequence of `vertexCount `points denoting a","  \/\/\/ rectangular path.","  \/\/\/ - note This is helpful for animating a `Path` composed of `vertexCount`","  \/\/\/ points into a ``Rectangle``.","  func pointSequence(of vertexCount: Int) -> [CGPoint] {","    \/\/ Start at a random corner. When many Polygons are using this","    \/\/ animation at once, if they all start at the same corner, an","    \/\/ unnatural uniformity of motion emerges.","    var startingPercent = [0, 0.25, 0.5, 0.75].randomElement()!","    var points: [CGPoint] = []","","    let extraPoints = vertexCount - 4","    let (groups, remainder) = extraPoints","      .quotientAndRemainder(dividingBy: 3)","","    for edge in 0...3 {","      points.append(pointAlongPerimeter(at: startingPercent))","      for i in (0..<(edge == 3 ? remainder : groups)) {","        points.append(pointAlongPerimeter(","          at: startingPercent + 0.25","          \/ CGFloat(groups + 1) * CGFloat(i)))","      }","      startingPercent += 0.25","      startingPercent.formTruncatingRemainder(dividingBy: 1)","    }","    assert(points.count == vertexCount)","    return points","  }","","  \/\/\/ Returns the ``CGPoint`` that is `percent` along the path of `self`,","  \/\/\/ with 0% mapping to the top-left corner, progressing clockwise.","  \/\/\/ E.g. 50% would map to the bottom right corner if and only if `self` is","  \/\/\/  a square.","  \/\/\/ - Parameters:","  \/\/\/   - percent: A percentage between `0.0` and `1.0`","  private func pointAlongPerimeter(at percent: CGFloat) -> CGPoint {","    let perimeter = size.width * 2 + size.height * 2","","    \/\/ Mark the four corners as percentages around the rect. For example,","    \/\/\/ these values for a square would be 25%, 50%, 75%, 100%","    let topRight = size.width \/ perimeter","    let bottomRight = topRight + (size.height \/ perimeter)","    let bottomLeft = bottomRight + (size.width \/ perimeter)","    let topLeft = 1.0","","    switch percent {","    case 0..<topRight:","      return CGPoint(","        x: percent \/ topRight * size.width,","        y: minY)","    case topRight..<bottomRight:","      return CGPoint(","        x: maxX,","        y: (percent - topRight)","        \/ (bottomRight - topRight) * size.height)","    case bottomRight..<bottomLeft:","      return CGPoint(","        x: maxX - ((percent - bottomRight) \/ (bottomLeft - bottomRight)","               * size.width),","        y: maxY)","    case bottomLeft...topLeft:","      return CGPoint(","        x: minX,","        y: maxY - (percent - bottomLeft) \/ (topLeft - bottomLeft)","        * size.height","      )","    default:","      preconditionFailure(\"Invalid percentage requested\")","    }","  }","}","","\/\/\/ Returns a new `CGRect` with the same size as `self`, but centered in `other`","\/\/\/ vertically, and horizontally.","extension CGSize {","  func centered(in other: CGRect) -> CGRect {","    CGRect(x: other.midX - width \/ 2.0,","         y: other.midY - height \/ 2.0,","         width: width,","         height: height)","  }","}","","extension Path {","  \/\/\/ Convenience for initializing a `Path` from an array of `CGPoint`s given","  \/\/\/ the first point element is the `Path`'s first point.","  init(from points: [CGPoint]) {","    self.init()","    self.addLines(points)","    self.closeSubpath()","  }","}"],"syntax":"swift"},{"type":"heading","text":"Written By","level":2,"anchor":"Written-By"},{"type":"row","columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4"}],"type":"paragraph"}],"size":1},{"content":[{"text":"Cihat G√ºnd√ºz","type":"heading","level":3,"anchor":"Cihat-G√ºnd√ºz"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","isActive":true,"type":"reference","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/Jeehut","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/fline.dev","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/Jeehut","isActive":true,"type":"reference"}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"row","columns":[{"content":[{"inlineContent":[{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/5277837?v=4","type":"image"}],"type":"paragraph"}],"size":1},{"content":[{"level":3,"type":"heading","anchor":"Federico-Zanetello","text":"Federico Zanetello"},{"inlineContent":[{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"reference"}]},{"type":"heading","text":"Related Sessions","level":2,"anchor":"Related-Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10009-Whats-new-in-iPad-app-design","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10054-The-SwiftUI-cookbook-for-navigation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10062-Meet-Transferable","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10093-Integrate-your-custom-collaboration-app-with-Messages","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10095-Enhance-collaboration-experiences-with-Messages","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10133-Build-a-productivity-app-for-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10136-Hello-Swift-Charts","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110343-SwiftUI-on-iPad-Add-toolbars-titles-and-more","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110371-Use-Xcode-to-develop-a-multiplatform-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110427-Whats-new-in-Xcode"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"overridingTitle":"Watch Video (33 min)","type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc22\/10052"}},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc22-10052-whats-new-in-swiftui"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10052-Whats-new-in-SwiftUI"},"metadata":{"role":"sampleCode","title":"What‚Äôs new in SwiftUI","roleHeading":"WWDC22","modules":[{"name":"WWDC Notes"}]},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"abstract":[{"text":"It‚Äôs a SwiftUI party ‚Äî and you‚Äôre invited! Join us as we share the latest updates and a glimpse into the future of UI framework design. Discover deep levels of customization, advanced techniques for layout, elegant strategies for sharing, and rock-solid structural approaches for designing an app top-to-bottom in SwiftUI. We‚Äôll also have some celebratory fun as we play with the latest graphical effects and explore APIs.","type":"text"}],"seeAlsoSections":[{"title":"Updated Tools & Frameworks","generated":true,"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10097-Whats-new-in-App-Clips","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10043-Whats-new-in-App-Store-Connect","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10074-Whats-new-in-AppKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110332-Whats-new-in-Create-ML","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10005-Whats-new-in-HealthKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10035-Whats-new-in-MapKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10008-Whats-new-in-Nearby-Interaction","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10089-Whats-new-in-PDFKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10157-Whats-new-in-SF-Symbols-4","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10048-Whats-new-in-Safari-and-WebKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110336-Whats-new-in-Screen-Time-API","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10140-Whats-new-in-SharePlay","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10039-Whats-new-in-StoreKit-testing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110368-Whats-new-in-SwiftDocC","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10090-Whats-new-in-TextKit-and-text-views","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10024-Whats-new-in-Vision","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10049-Whats-new-in-WKWebView","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110427-Whats-new-in-Xcode","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10045-Whats-new-in-managing-Apple-devices","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10023-Whats-new-in-the-Photos-picker","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10153-Whats-new-in-web-accessibility","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10149-Whats-new-in-AVQT","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10115-Whats-new-in-CloudKit-Console","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110345-Whats-new-in-Endpoint-Security","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10145-Whats-new-in-HLS-Interstitials","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10099-Whats-new-in-Safari-Web-Extensions","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10041-Whats-new-in-Wallet-and-Apple-Pay","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10009-Whats-new-in-iPad-app-design","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10109-Whats-new-in-notarization-for-Mac-apps","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10096-Whats-new-in-privacy"]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","references":{"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","identifier":"https:\/\/zntfdr.dev","type":"link","url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110354-Whats-new-in-Swift":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc22-110354-whats-new-in-swift","kind":"article","type":"topic","role":"sampleCode","title":"What‚Äôs new in Swift","abstract":[{"text":"Join us for an update on Swift. We‚Äôll take you through performance improvements, explore more secure and extensible Swift packages, and share advancements in Swift concurrency. We‚Äôll also introduce you to Swift Regex, better generics, and other tools built into the language to help you write more flexible & expressive code.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10153-Whats-new-in-web-accessibility":{"url":"\/documentation\/wwdcnotes\/wwdc22-10153-whats-new-in-web-accessibility","abstract":[{"text":"Discover techniques for building rich, accessible web apps with custom controls, SSML, and the dialog element. We‚Äôll discuss different assistive technologies and help you learn how to use them when testing the accessibility of your web apps.","type":"text"}],"role":"sampleCode","kind":"article","title":"What‚Äôs new in web accessibility","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10153-Whats-new-in-web-accessibility","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10095-Enhance-collaboration-experiences-with-Messages":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10095-Enhance-collaboration-experiences-with-Messages","abstract":[{"text":"Discover how you can help improve communication and collaboration in your app with Collaboration in Messages. Learn how to tie a document to Messages conversations for simple sharing and discussion. Explore how you can keep everyone in the conversation up to date on the latest activity in the document. And find out how you can add customizable UI in your app to manage collaboration details and connect documents to Messages conversations and FaceTime calls.","type":"text"}],"kind":"article","role":"sampleCode","type":"topic","title":"Enhance collaboration experiences with Messages","url":"\/documentation\/wwdcnotes\/wwdc22-10095-enhance-collaboration-experiences-with-messages"},"doc://WWDCNotes/documentation/WWDCNotes/Jeehut":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","abstract":[{"type":"text","text":"Spatial-first Indie Developer for Ô£ø Platforms. Actively contributing to Open Source since 2011!"}],"title":"Cihat G√ºnd√ºz (54 notes)","kind":"article","type":"topic","url":"\/documentation\/wwdcnotes\/jeehut"},"https://developer.apple.com/documentation/swiftui/color/gradient":{"titleInlineContent":[{"code":"gradient: AnyGradient","type":"codeVoice"}],"title":"gradient: AnyGradient","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/color\/gradient","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/color\/gradient"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10054-The-SwiftUI-cookbook-for-navigation":{"abstract":[{"text":"The recipe for a great app begins with a clear and robust navigation structure. Join the SwiftUI team in our proverbial coding kitchen and learn how you can cook up a great experience for your app. We‚Äôll introduce you to SwiftUI‚Äôs navigation stack and split view features, show you how you can link to specific areas of your app, and explore how you can quickly and easily restore navigational state.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10054-The-SwiftUI-cookbook-for-navigation","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-10054-the-swiftui-cookbook-for-navigation","type":"topic","kind":"article","title":"The SwiftUI cookbook for navigation"},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","identifier":"https:\/\/github.com\/zntfdr","type":"link","url":"https:\/\/github.com\/zntfdr"},"https://developer.apple.com/documentation/swiftui/presentedwindowcontent/presentationdetents(_:)":{"titleInlineContent":[{"code":"presentationDetents(_:)","type":"codeVoice"}],"title":"presentationDetents(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/presentedwindowcontent\/presentationdetents(_:)","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/presentedwindowcontent\/presentationdetents(_:)"},"https://developer.apple.com/documentation/swiftui/window":{"titleInlineContent":[{"code":"Window","type":"codeVoice"}],"title":"Window","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/window","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/window"},"https://developer.apple.com/documentation/swiftui/multidatepicker":{"titleInlineContent":[{"code":"MultiDatePicker","type":"codeVoice"}],"title":"MultiDatePicker","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/multidatepicker","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/multidatepicker"},"https://avatars.githubusercontent.com/u/5277837?v=4":{"variants":[{"traits":["1x","light"],"url":"https:\/\/avatars.githubusercontent.com\/u\/5277837?v=4"}],"identifier":"https:\/\/avatars.githubusercontent.com\/u\/5277837?v=4","alt":"Profile image of Federico Zanetello","type":"image"},"https://developer.apple.com/documentation/swiftui/shapestyle":{"titleInlineContent":[{"code":"ShapeStyle","type":"codeVoice"}],"title":"ShapeStyle","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"title":"Federico Zanetello (214 notes)","kind":"article","type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10093-Integrate-your-custom-collaboration-app-with-Messages":{"abstract":[{"text":"Discover how the SharedWithYou framework can augment your app‚Äôs collaboration infrastructure. We‚Äôll show you how to send secure invitations to collaborative content and synchronize participant changes. We‚Äôll also cover displaying content updates within the relevant conversation.","type":"text"}],"role":"sampleCode","title":"Integrate your custom collaboration app with Messages","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10093-integrate-your-custom-collaboration-app-with-messages","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10093-Integrate-your-custom-collaboration-app-with-Messages"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10041-Whats-new-in-Wallet-and-Apple-Pay":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10041-whats-new-in-wallet-and-apple-pay","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10041-Whats-new-in-Wallet-and-Apple-Pay","title":"What‚Äôs new in Wallet and Apple Pay","abstract":[{"text":"Discover the latest updates to Wallet & Apple Pay. We‚Äôll show you how to support Orders in Wallet for your apps and websites and securely validate someone‚Äôs age and identity with the Identity Verification API. We‚Äôll also explore PassKit support for SwiftUI, and discuss how you how you can improve your Apple Pay experience with Automatic Payments.","type":"text"}]},"https://developer.apple.com/documentation/swiftui/shapestyle/shadow(_:)-swift.method":{"titleInlineContent":[{"code":"shadow(_:)","type":"codeVoice"}],"title":"shadow(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle\/shadow(_:)-swift.method","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/shapestyle\/shadow(_:)-swift.method"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10096-Whats-new-in-privacy":{"title":"What‚Äôs new in privacy","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10096-whats-new-in-privacy","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10096-Whats-new-in-privacy","role":"sampleCode","abstract":[{"type":"text","text":"At Apple, we believe that privacy is a fundamental human right, and protecting people‚Äôs privacy is at the center of everything we do. Discover how our engineering teams build privacy into all of our products and developer frameworks, and learn about the technologies and patterns you can adopt in your apps to build trust and protect your customers."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10157-Whats-new-in-SF-Symbols-4":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10157-whats-new-in-sf-symbols-4","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10157-Whats-new-in-SF-Symbols-4","title":"What‚Äôs new in SF Symbols 4","abstract":[{"text":"Explore the latest updates to SF Symbols, Apple‚Äôs extensive library of iconography designed to integrate seamlessly with San Francisco, the system font for all Apple platforms. Discover the latest additions to the SF Symbols library and new categories in the app. Learn about the new Automatic behavior, which chooses the rendering mode that best highlights what‚Äôs unique about the symbol‚Äôs characteristics. See how to use the new Variable Color feature to make a symbol more dynamic. We‚Äôll also learn about a more efficient way of annotating symbols with the new unified approach.","type":"text"}]},"https://developer.apple.com/documentation/swiftui/gridrow":{"titleInlineContent":[{"code":"GridRow","type":"codeVoice"}],"title":"GridRow","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/gridrow","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/gridrow"},"https://github.com/Jeehut":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","identifier":"https:\/\/github.com\/Jeehut","type":"link","url":"https:\/\/github.com\/Jeehut"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10035-Whats-new-in-MapKit":{"title":"What‚Äôs new in MapKit","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10035-whats-new-in-mapkit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10035-Whats-new-in-MapKit","kind":"article","abstract":[{"text":"Come along with us as MapKit enters a new dimension. We‚Äôll show you how you can upgrade your app to use the latest map and support the highly-detailed 3D City Experience. Learn how you can visualize data using overlays while ensuring they integrate smoothly into the 3D map. We‚Äôll also cover how to create interactive and immersive experiences with Selectable Map Features and Look Around APIs.","type":"text"}],"role":"sampleCode"},"https://developer.apple.com/documentation/swiftui/scene/keyboardshortcut(_:)":{"titleInlineContent":[{"code":".keyboardShortcut(_:)","type":"codeVoice"}],"title":".keyboardShortcut(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/scene\/keyboardshortcut(_:)","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/scene\/keyboardshortcut(_:)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface":{"url":"\/documentation\/wwdcnotes\/wwdc22-10058-swiftui-on-ipad-organize-your-interface","title":"SwiftUI on iPad: Organize your interface","abstract":[{"text":"It‚Äôs time to supercharge the interface of your iPad app with SwiftUI lists and tables. We‚Äôll show how you can add selection interactions and context menus and help people who use your app be more productive. We‚Äôll also give you best practices on structuring your navigation and explore how you can avoid modality using split views to ensure a top-notch desktop-class iPad experience.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110345-Whats-new-in-Endpoint-Security":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110345-Whats-new-in-Endpoint-Security","abstract":[{"text":"Learn how you can build reliable endpoint security products like anti-virus software, endpoint detection and response, and data leakage prevention solutions for macOS. We‚Äôll take you through the latest enhancements to Endpoint Security APIs: Learn how you can support more security events and use advanced muting capabilities in your app. We‚Äôll also explore a standalone tool to help you perform introspection from the command line.","type":"text"}],"role":"sampleCode","title":"What‚Äôs new in Endpoint Security","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110345-whats-new-in-endpoint-security"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10048-Whats-new-in-Safari-and-WebKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10048-Whats-new-in-Safari-and-WebKit","title":"What‚Äôs new in Safari and WebKit","abstract":[{"text":"Explore the latest features in Safari and WebKit and learn how you can make better and more powerful websites. We‚Äôll take you on a tour through the latest updates to HTML, CSS enhancements, Web Inspector tooling, Web APIs, and more.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10048-whats-new-in-safari-and-webkit","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110368-Whats-new-in-SwiftDocC":{"abstract":[{"type":"text","text":"Join us for an exciting update on Swift-DocC and learn how you can write and share documentation for your own projects. We‚Äôll explore improvements to Swift-DocC navigation and share how you can compile documentation for application targets and Objective-C code. We‚Äôll also show you how to publish your content straight to hosting services like GitHub Pages."}],"type":"topic","title":"What‚Äôs new in Swift-DocC","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110368-Whats-new-in-SwiftDocC","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110368-whats-new-in-swiftdocc","kind":"article"},"https://developer.apple.com/wwdc22/10052":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc22\/10052","type":"download","url":"https:\/\/developer.apple.com\/wwdc22\/10052"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10043-Whats-new-in-App-Store-Connect":{"url":"\/documentation\/wwdcnotes\/wwdc22-10043-whats-new-in-app-store-connect","abstract":[{"text":"Discover the latest updates to App Store Connect, your suite of tools to create, manage, and submit apps on the App Store. Learn about enhancements to the submission experience ‚Äî including the ability to manage submissions in App Store Connect on iOS and iPadOS ‚Äî as well as the newest updates to the App Store Connect API and much more.","type":"text"}],"role":"sampleCode","kind":"article","title":"What‚Äôs new in App Store Connect","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10043-Whats-new-in-App-Store-Connect","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110336-Whats-new-in-Screen-Time-API":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110336-Whats-new-in-Screen-Time-API","title":"What‚Äôs new in Screen Time API","abstract":[{"text":"Find out how you can build apps that help people manage their relationship with their device ‚Äî all while putting privacy first. We‚Äôll take you through the Screen Time API and share how you can use features like core restrictions and device activity reports to create great experiences while providing measurable control for the device‚Äôs owner, parents, and guardians.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110336-whats-new-in-screen-time-api","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10133-Build-a-productivity-app-for-Apple-Watch":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10133-Build-a-productivity-app-for-Apple-Watch","title":"Build a productivity app for Apple Watch","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10133-build-a-productivity-app-for-apple-watch","abstract":[{"text":"Your wrist has never been more productive. Discover how you can use SwiftUI and system features to build a great productivity app for Apple Watch. We‚Äôll show you how you can design great work experiences for the wrist, and explore how you can get text input, display a basic chart, and share content with friends.","type":"text"}],"role":"sampleCode"},"https://avatars.githubusercontent.com/u/6942160?v=4":{"variants":[{"traits":["1x","light"],"url":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4"}],"identifier":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4","alt":"Profile image of Cihat G√ºnd√ºz","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10008-Whats-new-in-Nearby-Interaction":{"url":"\/documentation\/wwdcnotes\/wwdc22-10008-whats-new-in-nearby-interaction","abstract":[{"type":"text","text":"Discover how the Nearby Interaction framework can help you easily integrate Ultra Wideband (UWB) into your apps and hardware accessories. Learn how you can combine the visual-spatial power of ARKit with the radio sensitivity of the U1 chip to locate nearby stationary objects with precision. We‚Äôll also show you how you can create background interactions using UWB accessories paired via Bluetooth."}],"kind":"article","type":"topic","role":"sampleCode","title":"What‚Äôs new in Nearby Interaction","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10008-Whats-new-in-Nearby-Interaction"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10005-Whats-new-in-HealthKit":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10005-Whats-new-in-HealthKit","abstract":[{"type":"text","text":"Bring the latest HealthKit features to your health & fitness app. We‚Äôll show you how to capture more detailed sleep data through sleep stages, track swim-bike-run and interval workouts with the enhanced Workout API, and save vision prescriptions ‚Äî including an image of the physical prescription ‚Äî directly to HealthKit while preserving privacy."}],"role":"sampleCode","title":"What‚Äôs new in HealthKit","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10005-whats-new-in-healthkit"},"https://developer.apple.com/documentation/swiftui/environmentvalues/openwindow":{"titleInlineContent":[{"code":"openWindow","type":"codeVoice"}],"title":"openWindow","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentvalues\/openwindow","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentvalues\/openwindow"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10097-Whats-new-in-App-Clips":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10097-Whats-new-in-App-Clips","kind":"article","title":"What‚Äôs new in App Clips","url":"\/documentation\/wwdcnotes\/wwdc22-10097-whats-new-in-app-clips","type":"topic","abstract":[{"type":"text","text":"Explore the latest updates to App Clips! Discover how we‚Äôve made your App Clip even easier to build with improvements to the size limit as well as CloudKit and keychain usage. We‚Äôll also show you how to use our validation tool to verify your App Clip and automate workflows for your advanced App Clip experiences using App Store Connect."}]},"https://developer.apple.com/documentation/swiftui/layout":{"titleInlineContent":[{"code":"Layout","type":"codeVoice"}],"title":"Layout","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/layout"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10039-Whats-new-in-StoreKit-testing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10039-Whats-new-in-StoreKit-testing","title":"What‚Äôs new in StoreKit testing","url":"\/documentation\/wwdcnotes\/wwdc22-10039-whats-new-in-storekit-testing","kind":"article","type":"topic","abstract":[{"text":"Discover the latest tools to help you test your in-app purchases and subscriptions. We‚Äôll show you how to bring your products from App Store Connect into StoreKit Testing in Xcode, learn about improvements to the transaction manager, and explore your in-app purchase flow in Xcode Previews. We‚Äôll also take you through best practices when setting up an Apple ID for the sandbox environment, and show you how to create tests for refund requests, price increase consent, billing retry, and much more.","type":"text"}],"role":"sampleCode"},"https://fline.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","identifier":"https:\/\/fline.dev","type":"link","url":"https:\/\/fline.dev"},"https://developer.apple.com/documentation/swiftui/windowgroup/windowresizability(_:)":{"titleInlineContent":[{"code":"windowResizability(_:)","type":"codeVoice"}],"title":"windowResizability(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/windowresizability(_:)","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/windowresizability(_:)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110427-Whats-new-in-Xcode":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110427-Whats-new-in-Xcode","url":"\/documentation\/wwdcnotes\/wwdc22-110427-whats-new-in-xcode","kind":"article","type":"topic","role":"sampleCode","title":"What‚Äôs new in Xcode","abstract":[{"type":"text","text":"Discover the latest productivity and performance advancements in Xcode 14. We‚Äôll introduce you to the fully redesigned SwiftUI canvas experience, explore enhancements to code completion and navigation, and take you through performance improvements we‚Äôve made throughout the entire development process. We‚Äôll also show you how you can now read and respond to feedback on your TestFlight builds without ever leaving Xcode."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10056-Compose-custom-layouts-with-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc22-10056-compose-custom-layouts-with-swiftui","title":"Compose custom layouts with SwiftUI","abstract":[{"text":"SwiftUI now offers powerful tools to level up your layouts and arrange views for your app‚Äôs interface. We‚Äôll introduce you to the Grid container, which helps you create highly customizable, two-dimensional layouts, and show you how you can use the Layout protocol to build your own containers with completely custom behavior. We‚Äôll also explore how you can create seamless animated transitions between your layout types, and share tips and best practices for creating great interfaces.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","role":"sampleCode","type":"topic","kind":"article"},"https://developer.apple.com/documentation/swiftui/grid":{"titleInlineContent":[{"code":"Grid","type":"codeVoice"}],"title":"Grid","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/grid","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/grid"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10149-Whats-new-in-AVQT":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10149-Whats-new-in-AVQT","title":"What‚Äôs new in AVQT","abstract":[{"text":"Discover the latest updates and improvements to the Advanced Video Quality Tool (AVQT). We‚Äôll take you through the interactive reports feature and help you learn how to identify video quality-related issues. We‚Äôll also explore extended support for raw formats, show you how to evaluate specific scenes within a video, and explore how you can use AVQT for Linux to analyze videos on Linux servers and online in the cloud.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10149-whats-new-in-avqt","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110343-SwiftUI-on-iPad-Add-toolbars-titles-and-more":{"title":"SwiftUI on iPad: Add toolbars, titles, and more","url":"\/documentation\/wwdcnotes\/wwdc22-110343-swiftui-on-ipad-add-toolbars-titles-and-more","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110343-SwiftUI-on-iPad-Add-toolbars-titles-and-more","abstract":[{"text":"Get ready to tune up your iPad app‚Äôs toolbars with SwiftUI. We‚Äôll show you how you can structure toolbars to take advantage of the space available on iPad and help people maximize their productivity. We‚Äôll also take you through customization, explore the latest ways you can represent documents, and more.","type":"text"}],"type":"topic","role":"sampleCode"},"https://developer.apple.com/documentation/swiftui/view-search":{"titleInlineContent":[{"type":"text","text":"search modifiers"}],"title":"search modifiers","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view-search","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view-search"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10068-Whats-new-in-UIKit":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","abstract":[{"type":"text","text":"Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We‚Äôll take you through UI refinements, productivity updates, API enhancements, and more. We‚Äôll also help you explore improvements to performance, security, and privacy."}],"role":"sampleCode","title":"What‚Äôs new in UIKit","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10068-whats-new-in-uikit"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","title":"WWDC Notes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10115-Whats-new-in-CloudKit-Console":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10115-Whats-new-in-CloudKit-Console","abstract":[{"text":"We‚Äôll take you through the latest updates to CloudKit Console and discover how you can explore and debug your containers on the web like never before. Learn more about Act as iCloud, which helps you query records and view data from the perspective of another account. Discover how to share zones of records, and provide better collaboration between participants. And find out how to hide inactive containers. We‚Äôll also share a few tips on getting the most out of CloudKit Console.","type":"text"}],"role":"sampleCode","title":"What‚Äôs new in CloudKit Console","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10115-whats-new-in-cloudkit-console"},"https://developer.apple.com/documentation/swiftui/window/defaultposition(_:)":{"titleInlineContent":[{"code":"defaultPosition(_:)","type":"codeVoice"}],"title":"defaultPosition(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/window\/defaultposition(_:)","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/window\/defaultposition(_:)"},"https://developer.apple.com/documentation/swiftui/menubarextra":{"titleInlineContent":[{"code":"MenuBarExtra","type":"codeVoice"}],"title":"MenuBarExtra","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/menubarextra","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/menubarextra"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10099-Whats-new-in-Safari-Web-Extensions":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10099-Whats-new-in-Safari-Web-Extensions","abstract":[{"text":"Learn how you can use the latest improvements to Safari Web Extensions to create even better experiences for people browsing the web. We‚Äôll show you how to upgrade to manifest version 3, adopt the latest APIs for Web Extensions, and sync extensions across devices.","type":"text"}],"role":"sampleCode","title":"What‚Äôs new in Safari Web Extensions","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10099-whats-new-in-safari-web-extensions"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10009-Whats-new-in-iPad-app-design":{"abstract":[{"type":"text","text":"Discover the latest updates in iPad app design. We‚Äôll take you through improvements to search, navigation bars, edit menus, multi-selection, and more. Learn how you can make your app both more powerful and easier to use when you incorporate customizable toolbars, multi-column tables, and find and replace."}],"type":"topic","title":"What‚Äôs new in iPad app design","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10009-Whats-new-in-iPad-app-design","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-10009-whats-new-in-ipad-app-design","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10074-Whats-new-in-AppKit":{"abstract":[{"text":"Discover the latest advances in Mac app development using AppKit. We‚Äôll take you through the latest updates to SF Symbols, show you how you can elevate your interface with enhanced controls, and help you learn to coordinate your windows with Stage Manager. We‚Äôll also explore the latest sharing and collaboration features for macOS.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10074-whats-new-in-appkit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10074-Whats-new-in-AppKit","title":"What‚Äôs new in AppKit","role":"sampleCode","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10109-Whats-new-in-notarization-for-Mac-apps":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10109-Whats-new-in-notarization-for-Mac-apps","title":"What‚Äôs new in notarization for Mac apps","abstract":[{"text":"Notarization works in tandem with macOS to help people safely download software for their Mac outside of the App Store. Learn about the required transition from altool to notarytool and how the Xcode GUI can help you achieve better overall performance when notarizing your app. We‚Äôll also share information about APIs for interacting with the Notary service from any internet-connected machine.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10109-whats-new-in-notarization-for-mac-apps","type":"topic","role":"sampleCode"},"https://developer.apple.com/documentation/swiftui/anylayout":{"titleInlineContent":[{"code":"AnyLayout","type":"codeVoice"}],"title":"AnyLayout","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/anylayout","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/anylayout"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10049-Whats-new-in-WKWebView":{"abstract":[{"type":"text","text":"Explore the latest updates to WKWebView, our framework for incorporating web content into your app‚Äôs interface. We‚Äôll show you how to use the JavaScript fullscreen API, explore CSS viewport units, and learn more about find interactions. We‚Äôll also take you through refinements to content blocking controls, embedding encrypted media, and using the Web Inspector."}],"kind":"article","role":"sampleCode","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10049-whats-new-in-wkwebview","title":"What‚Äôs new in WKWebView","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10049-Whats-new-in-WKWebView"},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"link","url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110371-Use-Xcode-to-develop-a-multiplatform-app":{"type":"topic","role":"sampleCode","title":"Use Xcode to develop a multiplatform app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110371-Use-Xcode-to-develop-a-multiplatform-app","url":"\/documentation\/wwdcnotes\/wwdc22-110371-use-xcode-to-develop-a-multiplatform-app","abstract":[{"type":"text","text":"Learn how you can build apps for multiple Apple platforms using Xcode 14. We‚Äôll show you how to streamline app targets, maintain a common codebase, and share settings by default. We‚Äôll also explore how you can customize your app for each platform through conditionalizing your settings and code."}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10090-Whats-new-in-TextKit-and-text-views":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10090-Whats-new-in-TextKit-and-text-views","title":"What‚Äôs new in TextKit and text views","abstract":[{"text":"Discover the latest updates to TextKit and text views in UI frameworks. Explore layout refinements and API enhancements, learn how you can maintain compatibility across multiple OS versions, and find out how to modernize your app with TextKit 2.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10090-whats-new-in-textkit-and-text-views","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10062-Meet-Transferable":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10062-meet-transferable","abstract":[{"text":"Meet Transferable: a model-layer protocol that allows for effortless support for sharing, drag and drop, copy\/paste, and other features in your app.","type":"text"}],"role":"sampleCode","title":"Meet Transferable","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10062-Meet-Transferable","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10023-Whats-new-in-the-Photos-picker":{"abstract":[{"text":"PHPicker provides simple and secure integration between your app and the system Photos library. Learn how SwiftUI and Transferable can help you offer integration across iOS, iPadOS, macOS, and watchOS.","type":"text"}],"role":"sampleCode","kind":"article","title":"What‚Äôs new in the Photos picker","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-10023-whats-new-in-the-photos-picker","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10023-Whats-new-in-the-Photos-picker"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10089-Whats-new-in-PDFKit":{"url":"\/documentation\/wwdcnotes\/wwdc22-10089-whats-new-in-pdfkit","abstract":[{"type":"text","text":"Discover PDFKit ‚Äî a full-featured framework that helps your app view, edit, and save PDF documents. We‚Äôll take you through the latest features in PDFKit, including support for live text and forms, creating PDFs from images, building interactive overlays, and saving annotations."}],"kind":"article","type":"topic","role":"sampleCode","title":"What‚Äôs new in PDFKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10089-Whats-new-in-PDFKit"},"https://developer.apple.com/documentation/swiftui/windowgroup/defaultsize(_:)":{"titleInlineContent":[{"code":"defaultSize(_:)","type":"codeVoice"}],"title":"defaultSize(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/defaultsize(_:)","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/windowgroup\/defaultsize(_:)"},"https://x.com/Jeehut":{"titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"title":"X\/Twitter","identifier":"https:\/\/x.com\/Jeehut","type":"link","url":"https:\/\/x.com\/Jeehut"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"type":"topic","role":"collectionGroup","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC22","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","abstract":[{"text":"Xcode 14, Swift 5.7, iOS 16, macOS 13, tvOS 16, watchOS 9.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"WeatherKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ScreenCaptureKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Swift Regex","type":"codeVoice"},{"text":", and more.","type":"text"}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10136-Hello-Swift-Charts":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10136-Hello-Swift-Charts","url":"\/documentation\/wwdcnotes\/wwdc22-10136-hello-swift-charts","abstract":[{"text":"Say hello to Swift Charts ‚Äî a flexible framework that helps you create charts entirely in SwiftUI that look and feel right at home on all Apple platforms. Discover how you can use compositional syntax to make informative, delightful, and accessible charts with less code. We‚Äôll share the building blocks for making visualizations with Swift Charts, and explore how you can change your charts‚Äô design with a simple modifier. We‚Äôll also take you through the latest updates to Xcode Previews to help you chart a path toward an engaging experience.","type":"text"}],"role":"sampleCode","title":"Hello Swift Charts","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10140-Whats-new-in-SharePlay":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10140-Whats-new-in-SharePlay","abstract":[{"type":"text","text":"Join us as we share the latest updates to SharePlay. We‚Äôll show you how you can start SharePlay sessions right from your app, take you through improvements to APIs to create richer experiences, and check out enhancements to GroupSessionMessenger. We‚Äôll also explore best practices for adding SharePlay to your app."}],"role":"sampleCode","title":"What‚Äôs new in SharePlay","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10140-whats-new-in-shareplay"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10045-Whats-new-in-managing-Apple-devices":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10045-Whats-new-in-managing-Apple-devices","abstract":[{"type":"text","text":"Explore enhancements to device management across Apple platforms. Improve device deployment workflows using the latest version of Apple Configurator for iPhone. Learn about identity technologies and MDM protocol updates for macOS, iOS and iPadOS. We‚Äôll also share an exciting change in how we provide device management documentation."}],"role":"sampleCode","title":"What‚Äôs new in managing Apple devices","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10045-whats-new-in-managing-apple-devices"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110332-Whats-new-in-Create-ML":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110332-Whats-new-in-Create-ML","abstract":[{"type":"text","text":"Discover the latest updates to Create ML. We‚Äôll share improvements to Create ML‚Äôs evaluation tools that can help you understand how your custom models will perform on real-world data. Learn how you can check model performance on each type of image in your test data and identify problems within individual images to help you troubleshoot mistaken classifications, poorly labeled data, and other errors. We‚Äôll also show you how to test your model with iPhone and iPad in live preview using Continuity Camera, and share how you can take Action Classification even further with the new Repetition Counting capabilities of the Create ML Components framework."}],"role":"sampleCode","title":"What‚Äôs new in Create ML","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110332-whats-new-in-create-ml"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10145-Whats-new-in-HLS-Interstitials":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10145-Whats-new-in-HLS-Interstitials","title":"What‚Äôs new in HLS Interstitials","abstract":[{"text":"HLS Interstitials can help you create seamless transitions in video content between advertisements, other interstitials, and your HLS streams. Learn how you can optimize your ad inventory, fine-tune interstitial presentation with SNAP-IN\/OUT when using HLS, and more.","type":"text"}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10145-whats-new-in-hls-interstitials","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10024-Whats-new-in-Vision":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10024-Whats-new-in-Vision","abstract":[{"type":"text","text":"Learn about the latest updates to Vision APIs that help your apps recognize text, detect faces and face landmarks, and implement optical flow. We‚Äôll take you through the capabilities of optical flow for video-based apps, show you how to update your apps with revisions to the machine learning models that drive these APIs, and explore how you can visualize your Vision tasks with Quick Look Preview support in Xcode."}],"role":"sampleCode","title":"What‚Äôs new in Vision","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10024-whats-new-in-vision"}}}