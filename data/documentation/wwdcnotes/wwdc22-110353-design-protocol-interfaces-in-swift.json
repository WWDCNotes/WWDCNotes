{"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc22-110353-design-protocol-interfaces-in-swift"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110353-Design-protocol-interfaces-in-Swift","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how you can use Swift 5.7 to design advanced abstractions using protocols. We’ll show you how to use existential types, explore how you can separate implementation from interface with opaque result types, and share the same-type requirements that can help you identify and guarantee relationships between concrete types."}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Design protocol interfaces in Swift","role":"sampleCode","roleHeading":"WWDC22"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will use this protocol definition as an example:"}]},{"code":["protocol Animal {","  associatedtype CommodityType: Food","  associatedtype FeedType: AnimalFeed","","  func produce() -> CommodityType","  func eat(_: FeedType)","  var isHungry: Bool { get }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Understand-type-erasure","text":"Understand type erasure"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when you call a method returning an associated type on an existential type, the compiler will use type erasure to determine the result type of the call"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"type erasure replaces these associated types with corresponding existential types that have equivalent constraints","type":"text"}]}]}]},{"type":"heading","level":3,"anchor":"Type-erasure-semantics","text":"Type erasure semantics"},{"type":"heading","level":4,"anchor":"Producing-position","text":"Producing position"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"associatedtype","type":"codeVoice"},{"text":"s appearing in the result of a protocol method declaration are in ","type":"text"},{"text":"producing position","type":"text"},{"text":", because calling the method will produce a value of this type","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"e.g., the ","type":"text"},{"code":"produce()","type":"codeVoice"},{"text":" return type in the ","type":"text"},{"code":"Animal","type":"codeVoice"},{"text":" protocol definition above","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"The type "},{"type":"codeVoice","code":"any Food"},{"type":"text","text":" is called the "},{"type":"text","text":"upper bound"},{"type":"text","text":" of the associated "},{"type":"codeVoice","code":"CommodityType"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"the actual concrete type that is returned from "},{"code":"produce()","type":"codeVoice"},{"type":"text","text":" can safely convert to the upper bound:"}],"type":"paragraph"}]}]},{"code":["let animals: [any Animal] = [Cow()]","","animals.map { animal in","  animal.produce() \/\/ we're calling `produce()` on an `any Animal` that holds a `Cow` at runtime.","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":4,"anchor":"Consuming-position","text":"Consuming position"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"associatedtype","type":"codeVoice"},{"text":"s appearing in the parameter list of a protocol method declaration are in ","type":"text"},{"text":"consuming position","type":"text"},{"text":", because calling the method will produce a value of this type","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the upper bound cannot safely convert to the actual concrete type, because the concrete type is unknown"}]}]}]},{"code":["let animals = [Cow()]","","animals.map { animal in","  animal.eat(???) \/\/ given an arbitrary `any AnimalFeed`, there is no way to statically guarantee that it stores what Cow needs","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"type erasure does not allow us to work with associated types in consuming position","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"instead, you must unbox the existential "},{"code":"any","type":"codeVoice"},{"type":"text","text":" type by passing it to a function that takes an opaque "},{"code":"some","type":"codeVoice"},{"type":"text","text":" type"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"Hide-implementation-details","text":"Hide implementation details"},{"type":"heading","level":3,"anchor":"Constrained-opaque-result-type","text":"Constrained opaque result type"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"new in swift 5.7"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"written by applying type arguments in angle brackets after the protocol name - e.g., ","type":"text"},{"type":"codeVoice","code":"some Collection<any Animal>"}]}]}]},{"type":"heading","level":2,"anchor":"Identify-type-relationships","text":"Identify type relationships"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"every protocol has a "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type, which stands for the concrete conforming type"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"we can express the relationship between  "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":"s using a same-type requirement, written in a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A same-type requirement expresses a static guarantee that two different, possibly nested associated types must in fact be the same concrete type","type":"text"}],"type":"paragraph"}]}]},{"code":["protocol AnimalFeed{","  associatedtype CropType: Crop","    where CropType.FeedType == Self \/\/ 👈🏻 same-type requirement","  ","  static func grow() -> CropType","}","","protocol Crop {","  associatedtype FeedType: AnimalFeed","    where FeedType.CropType == Self \/\/ 👈🏻 same-type requirement","  func harvest() -> FeedType"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By understanding your data model, you can use same-type requirements to define equivalences between these different nested associated types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Generic code can then rely on these relationships when chaining together multiple calls to protocol requirements","type":"text"}]}]}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"level":3,"text":"Federico Zanetello","anchor":"Federico-Zanetello","type":"heading"},{"inlineContent":[{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10168-Generalize-APIs-with-parameter-packs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift"]},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"sampleCodeDownload":{"action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc22\/110353","overridingTitle":"Watch Video (25 min)"},"kind":"sampleDownload"},"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110352-Embrace-Swift-generics":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","abstract":[{"text":"Generics are a fundamental tool for writing abstract code in Swift. Learn how you can identify opportunities for abstraction as your code evolves, evaluate strategies for writing one piece of code with many behaviors, and discover language features in Swift 5.7 that can help you make generic code easier to write and understand.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-110352-embrace-swift-generics","role":"sampleCode","kind":"article","title":"Embrace Swift generics","type":"topic"},"zntfdr":{"type":"image","identifier":"zntfdr","alt":"Profile image of Federico Zanetello","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}]},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","type":"link","identifier":"https:\/\/github.com\/zntfdr","title":"GitHub"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","title":"WWDC Notes","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"kind":"symbol"},"WWDCNotes.png":{"type":"image","identifier":"WWDCNotes.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}]},"WWDC22-Icon.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC22-Icon.png"}],"type":"image","identifier":"WWDC22-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110354-Whats-new-in-Swift":{"title":"What’s new in Swift","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-110354-whats-new-in-swift","abstract":[{"text":"Join us for an update on Swift. We’ll take you through performance improvements, explore more secure and extensible Swift packages, and share advancements in Swift concurrency. We’ll also introduce you to Swift Regex, better generics, and other tools built into the language to help you write more flexible & expressive code.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","role":"collectionGroup","title":"WWDC22","type":"topic","abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WeatherKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"ScreenCaptureKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"Swift Regex"},{"type":"text","text":", and more."}],"images":[{"identifier":"WWDC22-Icon.png","type":"icon"},{"identifier":"WWDC22.jpeg","type":"card"}],"kind":"article"},"https://developer.apple.com/wwdc22/110353":{"url":"https:\/\/developer.apple.com\/wwdc22\/110353","type":"download","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc22\/110353"},"zntfdr.jpeg":{"type":"image","identifier":"zntfdr.jpeg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}]},"https://zntfdr.dev":{"url":"https:\/\/zntfdr.dev","type":"link","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"identifier":"https:\/\/zntfdr.dev"},"WWDC22.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC22.jpeg","traits":["1x","light"]}],"type":"image","identifier":"WWDC22.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10168-Generalize-APIs-with-parameter-packs":{"type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10168-Generalize-APIs-with-parameter-packs","url":"\/documentation\/wwdcnotes\/wwdc23-10168-generalize-apis-with-parameter-packs","abstract":[{"type":"text","text":"Swift parameter packs are a powerful tool to expand what is possible in your generic code while also enabling you to simplify common generic patterns. We’ll show you how to abstract over types as well as the number of arguments in generic code and simplify common generic patterns to avoid overloads."}],"kind":"article","title":"Generalize APIs with parameter packs"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","url":"\/documentation\/wwdcnotes\/zntfdr","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"kind":"article","role":"sampleCode","title":"Federico Zanetello (332 notes)","type":"topic","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}]}}}