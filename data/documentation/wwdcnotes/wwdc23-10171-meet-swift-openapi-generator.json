{"metadata":{"title":"Meet Swift OpenAPI Generator","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC23","role":"sampleCode"},"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10171-meet-swift-openapi-generator"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10171-Meet-Swift-OpenAPI-Generator","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"New Tools & Frameworks","generated":true,"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10082-Meet-ARKit-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10184-Meet-ActivityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10043-Meet-MapKit-for-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10191-Meet-Object-Capture-for-iOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10025-Meet-Push-Notifications-Console","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10083-Meet-Reality-Composer-Pro","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10099-Meet-RealityKit-Trace","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10279-Meet-Safari-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10013-Meet-StoreKit-for-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10109-Meet-SwiftUI-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111215-Meet-UIKit-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10039-Meet-device-management-for-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10268-Meet-mergeable-libraries","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10026-Meet-watchOS-10"]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"sampleCodeDownload":{"action":{"isActive":true,"overridingTitle":"Watch Video (21 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10171","type":"reference"},"kind":"sampleDownload"},"abstract":[{"text":"Discover how Swift OpenAPI Generator can help you work with HTTP server APIs whether you’re extending an iOS app or writing a server in Swift. We’ll show you how this package plugin can streamline your workflow and simplify your codebase by generating code from an OpenAPI document.","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Challenges-of-defining-an-API","text":"Challenges of defining an API"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10171-api-definition-challenges"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Most services have some kind of documentation, but hand-written can be outdated"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With access to source code, implementation can be used – but incomplete understanding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Support forums might help, but those who help might be underinformed"},{"type":"text","text":" "},{"text":"-> incomplete picture","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Exploring-OpenAPI","text":"Exploring OpenAPI"},{"items":[{"content":[{"inlineContent":[{"text":"Tried-and-tested Industry-standard","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"You declare your API in YAML or JSON","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Rich ecosystem of tooling"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Known for interactive documentation"}]}]},{"content":[{"inlineContent":[{"text":"Core motivation is code generation","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Without OpenAPI, creating query & interpreting the response can be complex","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Working with larger APIs detracts from the core logic of the app"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10171-openapi-tools"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example OpenAPI document:"}]},{"type":"codeListing","code":["openapi: \"3.0.3\"","info:","  title: \"GreetingService\"","  version: \"1.0.0\"","servers:","- url: \"http:\/\/localhost:8080\/api\"","  description: \"Production\"","paths:","  \/greet:","    get:","      operationId: \"getGreeting\"","      parameters:","      - name: \"name\"","        required: false","        in: \"query\"","        description: \"Personalizes the greeting.\"","        schema:","          type: \"string\"","      responses:","        \"200\":","          description: \"Returns a greeting\"","          content:","            application\/json:","              schema:","                $ref: \"#\/components\/schemas\/Greeting\" "],"syntax":"yaml"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the help of an OpenAPI Generator complex API handling can become as simple as this with safe types:"}]},{"type":"codeListing","code":["switch try await client.getGreeting(Operations.getGreeting.Input(query: Operations.getGreeting.Input.Query(name: \"Jane\"))) {","case .ok(let response):","\tswitch response.body {","\t\tcase .json(let greeting):","\t\tprint(greeting.message)","\t}","}"],"syntax":"Swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Swift OpenAPI Generator is a Swift package plugin, generates code at build time"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Always in sync with OpenAPI document, no need to commit code to source control"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10171-code-generation"}]},{"type":"heading","level":2,"anchor":"Making-API-calls-from-your-app","text":"Making API calls from your app"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use OpenAPI Generator, add package to your app from "},{"type":"codeVoice","code":"https:\/\/github.com\/apple\/swift-openapi-generator"}]}]},{"content":[{"inlineContent":[{"text":"Next, add also the package from ","type":"text"},{"code":"https:\/\/github.com\/apple\/swift-openapi-runtime","type":"codeVoice"},{"text":" to your app","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lastly, add also the package from "},{"code":"https:\/\/github.com\/apple\/swift-openapi-urlsession","type":"codeVoice"},{"type":"text","text":" for the code to be generated for "},{"code":"URLSession","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In “Build Phases”, in the “Run Build Tool Plug-Ins”, add "},{"type":"codeVoice","code":"OpenAPIGenerator"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10171-build-tool-plugins","type":"image"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The plugin expects 2 files in project: "},{"type":"codeVoice","code":"openapi-generator-config.yaml"},{"type":"text","text":" (config) and "},{"type":"codeVoice","code":"openapi.yaml"},{"type":"text","text":" (spec)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The config file specifies what code to generate, e.g. "},{"type":"codeVoice","code":"generate: [types, client]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In SwiftUI, import "},{"code":"OpenAPIRuntime","type":"codeVoice"},{"type":"text","text":" and "},{"code":"OpenAPIURLSession","type":"codeVoice"},{"type":"text","text":", then initialize a "},{"code":"Client(severURL: ..., transport: URLSessionTransport())","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Now you can call the API using ","type":"text"},{"type":"codeVoice","code":"try await client.getEmoji(Operations.getEmoji.Input())"},{"text":" or with whatever endpoints are defined in the spec","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The reponse of this call is an enum with all possible cases documented + content types -> forces us to handle all scenarios","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To also handle any behavior that is not documented, there’s "},{"type":"codeVoice","code":".undocumented(statusCode:_:)"},{"type":"text","text":" to handle it gracefully"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Adapting-as-the-API-evolves","text":"Adapting as the API evolves"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"For example, when adding a new parameter to the API document like ","type":"text"},{"type":"codeVoice","code":"count"}]}]},{"content":[{"inlineContent":[{"text":"The generated Swift code will force you to add the parameter in all places where needed, else Swift fails","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Testing-your-app-with-mocks","text":"Testing your app with mocks"},{"items":[{"content":[{"inlineContent":[{"text":"Define ","type":"text"},{"code":"MockClient: APIProtocol","type":"codeVoice"},{"text":", the compiler will give you errors and fix-its to fill in the APIs you need","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Make the view generic over ","type":"text"},{"code":"C: APIProtocol","type":"codeVoice"},{"type":"text","text":" like in "},{"type":"codeVoice","code":"struct ContentView<C: APIProtocol>: View"}]}]},{"content":[{"inlineContent":[{"text":"Update your ","type":"text"},{"type":"codeVoice","code":"client"},{"text":" property to use the generic type ","type":"text"},{"type":"codeVoice","code":"C"},{"text":" instead","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Define a new initializer where the client is passed ("},{"type":"codeVoice","code":"init(client: C)"},{"type":"text","text":") for dependency injection"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"where C == Client","type":"codeVoice"},{"type":"text","text":" on default initializer to use real server when app launched"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pass ","type":"text"},{"code":"MockClient()","type":"codeVoice"},{"text":" when previewing the UI in Xcode","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Server-development-in-Swift","text":"Server development in Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All the code needed to write a simple test server using the OpenAPI generator that handles the requests is this:"}]},{"type":"codeListing","code":["import Foundation","import OpenAPIRuntime","import OpenAPIVapor","import Vapor","","struct Handler: APIProtocol {","    func getEmoji(_ input: Operations.getEmoji.Input) async throws -> Operations.getEmoji.Output {","        let candidates = \"🐱😹😻🙀😿😽😸😺😾😼\"","        let chosen = String(candidates.randomElement()!)","        let count = input.query.count ?? 1","        let emojis = String(repeating: chosen, count: count)","        return .ok(Operations.getEmoji.Output.Ok(body: .text(emojis)))","    }","}","","@main","struct CatService {","    public static func main() throws {","        let app = Vapor.Application()","        let transport = VaporTransport(routesBuilder: app)","        let handler = Handler()","        try handler.registerHandlers(on: transport, serverURL: Servers.server1())","        try app.run()","    }","}"],"syntax":"Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The related "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" file of the server package looks like this:"}]},{"type":"codeListing","code":["\/\/ swift-tools-version: 5.8","import PackageDescription","","let package = Package(","    name: \"CatService\",","    platforms: [","        .macOS(.v13),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-generator\", .upToNextMinor(from: \"0.1.0\")),","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-runtime\", .upToNextMinor(from: \"0.1.0\")),","        .package(url: \"https:\/\/github.com\/swift-server\/swift-openapi-vapor\", .upToNextMinor(from: \"0.1.0\")),","        .package(url: \"https:\/\/github.com\/vapor\/vapor\", .upToNextMajor(from: \"4.69.2\")),","    ],","    targets: [","        .executableTarget(","            name: \"CatService\",","            dependencies: [","                .product(name: \"OpenAPIRuntime\", package: \"swift-openapi-runtime\"),","                .product(name: \"OpenAPIVapor\", package: \"swift-openapi-vapor\"),","                .product(name: \"Vapor\", package: \"vapor\"),","            ],","            resources: [.process(\"Resources\/cat.mp4\")],","            plugins: [.plugin(name: \"OpenAPIGenerator\", package: \"swift-openapi-generator\")]","        ),","    ]",")"],"syntax":"Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, on the "},{"code":"openapi-generator-config.yaml","type":"codeVoice"},{"type":"text","text":" file, instead of "},{"code":"client","type":"codeVoice"},{"type":"text","text":", add "},{"code":"server","type":"codeVoice"},{"type":"text","text":" for the right code to be generated (alongside "},{"code":"types","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like on the client side, when making changes to the API spec, like adding new endpoints, the server package build will fail and offer fix-its to add the missing parts."}]},{"type":"heading","level":2,"anchor":"Main-Takeaway","text":"Main Takeaway"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with defining the OpenAPI doc to use this kind of flow saving you time on both the client & server. This is called “Spec-Driven Development”."}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4","type":"image"}]}],"size":1},{"content":[{"anchor":"Cihat-Gündüz","type":"heading","text":"Cihat Gündüz","level":3},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","isActive":true,"type":"reference","overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/Jeehut","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/Jeehut","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/fline.dev","isActive":true,"type":"reference"}]}],"size":4}],"type":"row","numberOfColumns":5},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110359-Meet-Swift-Package-plugins","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development"],"type":"links","style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"references":{"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","title":"WWDC Notes","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","role":"collectionGroup","title":"WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14, tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"SwiftData","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10039-Meet-device-management-for-Apple-Watch":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10039-Meet-device-management-for-Apple-Watch","url":"\/documentation\/wwdcnotes\/wwdc23-10039-meet-device-management-for-apple-watch","role":"sampleCode","kind":"article","title":"Meet device management for Apple Watch","abstract":[{"text":"Organizations can now deploy and configure Apple Watch in addition to other Apple devices. Learn how to implement device management for watchOS to help organizations improve productivity, support wellness, and provide additional support for their employees.","type":"text"}]},"https://fline.dev":{"identifier":"https:\/\/fline.dev","type":"link","url":"https:\/\/fline.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110360-Use-Xcode-for-serverside-development":{"title":"Use Xcode for server-side development","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110360-use-xcode-for-serverside-development","abstract":[{"type":"text","text":"Discover how you can create, build, and deploy a Swift server app alongside your pre-existing Xcode projects within the same workspace. We’ll show you how to create your own local app and test endpoints using Xcode, and explore how you can structure and share code between server and client apps to ease your development process"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10146-Meet-Core-Location-for-spatial-computing":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10146-meet-core-location-for-spatial-computing","role":"sampleCode","kind":"article","title":"Meet Core Location for spatial computing","abstract":[{"text":"Discover how Core Location helps your app find its place in the world — literally. We’ll share how you can build a spatial computing app that uses a person’s location while respecting their privacy. You’ll also learn how your app can request location access and how Core Location adapts requests from compatible iPad and iPhone apps.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10032-Meet-Assistive-Access":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","url":"\/documentation\/wwdcnotes\/wwdc23-10032-meet-assistive-access","role":"sampleCode","kind":"article","title":"Meet Assistive Access","abstract":[{"text":"Learn how Assistive Access can help people with cognitive disabilities more easily use iPhone and iPad. Discover the design principles that guide Assistive Access and find out how the system experience adapts to lighten cognitive load. We’ll show you how Assistive Access works and what you can do to support this experience in your app.","type":"text"}]},"WWDC23-10171-build-tool-plugins":{"identifier":"WWDC23-10171-build-tool-plugins","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10171-build-tool-plugins.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10187-Meet-SwiftData":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData","url":"\/documentation\/wwdcnotes\/wwdc23-10187-meet-swiftdata","role":"sampleCode","kind":"article","title":"Meet SwiftData","abstract":[{"text":"SwiftData is a powerful and expressive persistence framework built for Swift. We’ll show you how you can model your data directly from Swift code, use SwiftData to work with your models, and integrate with SwiftUI.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10013-Meet-StoreKit-for-SwiftUI":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10013-Meet-StoreKit-for-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10013-meet-storekit-for-swiftui","role":"sampleCode","kind":"article","title":"Meet StoreKit for SwiftUI","abstract":[{"text":"Discover how you can use App Store product metadata and Xcode Previews to add in-app purchases to your app with just a few lines of code. Explore a new collection of UI components in StoreKit and learn how you can easily merchandise your products, present subscriptions in a way that helps users make informed decisions, and more.","type":"text"}]},"https://avatars.githubusercontent.com/u/6942160?v=4":{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4","type":"image","alt":"Profile image of Cihat Gündüz","variants":[{"url":"https:\/\/avatars.githubusercontent.com\/u\/6942160?v=4","traits":["1x","light"]}]},"https://developer.apple.com/wwdc23/10171":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10171","type":"download","url":"https:\/\/developer.apple.com\/wwdc23\/10171","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10147-Meet-Core-Location-Monitor":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor","url":"\/documentation\/wwdcnotes\/wwdc23-10147-meet-core-location-monitor","role":"sampleCode","abstract":[{"text":"Discover how Core Location Monitor can help you better understand location and beacon events in your app. Learn how to use Core Location Conditions to describe and track the state of events in your app, and find out how you can better respond to transitions in your apps through Swift semantics and improved reliability.","type":"text"}],"title":"Meet Core Location Monitor"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10043-Meet-MapKit-for-SwiftUI":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10043-Meet-MapKit-for-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10043-meet-mapkit-for-swiftui","role":"sampleCode","kind":"article","title":"Meet MapKit for SwiftUI","abstract":[{"text":"Discover how expanded SwiftUI support for MapKit has made it easier than ever for you to integrate Maps into your app. We’ll show you how to use SwiftUI to add annotations and overlays to a map, control the camera, and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10191-Meet-Object-Capture-for-iOS":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10191-Meet-Object-Capture-for-iOS","url":"\/documentation\/wwdcnotes\/wwdc23-10191-meet-object-capture-for-ios","role":"sampleCode","kind":"article","title":"Meet Object Capture for iOS","abstract":[{"text":"Discover how you can offer an end-to-end Object Capture experience directly in your iOS apps to help people turn their objects into ready-to-use 3D models. Learn how you can create a fully automated Object Capture scan flow with our sample app and how you can assist people in automatically capturing the best content for their model. We’ll also discuss LiDAR data and provide best practices for scanning objects.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10279-Meet-Safari-for-spatial-computing":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10279-Meet-Safari-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10279-meet-safari-for-spatial-computing","role":"sampleCode","kind":"article","title":"Meet Safari for spatial computing","abstract":[{"text":"Discover the web for visionOS and learn how people can experience your web content in a whole new way. Explore the unique input model powering this platform and learn how you can optimize your website for spatial computing. We’ll also share how emerging standards are helping shape 3D experiences for the web.","type":"text"}]},"https://github.com/Jeehut":{"url":"https:\/\/github.com\/Jeehut","title":"GitHub","identifier":"https:\/\/github.com\/Jeehut","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link"},"WWDC23-10171-code-generation":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10171-code-generation.png"}],"identifier":"WWDC23-10171-code-generation","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10082-Meet-ARKit-for-spatial-computing":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10082-Meet-ARKit-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10082-meet-arkit-for-spatial-computing","role":"sampleCode","kind":"article","title":"Meet ARKit for spatial computing","abstract":[{"text":"Discover how you can use ARKit’s tracking and scene understanding features to develop a whole new universe of immersive apps and games. Learn how visionOS and ARKit work together to help you create apps that understand a person’s surroundings — all while preserving privacy. Explore the latest updates to the ARKit API and follow along as we demonstrate how to take advantage of hand tracking and scene geometry in your apps.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10099-Meet-RealityKit-Trace":{"abstract":[{"type":"text","text":"Discover how you can use RealityKit Trace to improve the performance of your spatial computing apps. Explore performance profiling guidelines for this platform and learn how the RealityKit Trace template can help you optimize rendering for your apps. We’ll also provide guidance on profiling various types of content in your app to help pinpoint performance issues."}],"kind":"article","role":"sampleCode","title":"Meet RealityKit Trace","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10099-meet-realitykit-trace","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10099-Meet-RealityKit-Trace"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10268-Meet-mergeable-libraries":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10268-Meet-mergeable-libraries","url":"\/documentation\/wwdcnotes\/wwdc23-10268-meet-mergeable-libraries","role":"sampleCode","kind":"article","title":"Meet mergeable libraries","abstract":[{"text":"Discover how mergeable libraries combine the best parts of static and dynamic libraries to help improve your app’s productivity and runtime performance. Learn how you can enable faster development while shipping the smallest app. We’ll show you how to adopt mergeable libraries in Xcode 15 and share best practices for working with your code.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10184-Meet-ActivityKit":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10184-Meet-ActivityKit","url":"\/documentation\/wwdcnotes\/wwdc23-10184-meet-activitykit","role":"sampleCode","kind":"article","title":"Meet ActivityKit","abstract":[{"text":"Live Activities are a glanceable way for someone to keep track of the progress of a task within your app. We’ll teach you how you can create helpful experiences for the Lock Screen, the Dynamic Island, and StandBy. Learn how to update your app’s Live Activities, monitor activity state, and take advantage of WidgetKit and SwiftUI to build richer experiences.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10025-Meet-Push-Notifications-Console":{"abstract":[{"type":"text","text":"The Push Notifications Console is the best way to quickly test user notifications in your app. Learn how you can iterate on new ideas quickly by sending notifications directly from the console and analyze delivery logs to learn more about your pushes. We’ll also show you how to generate and validate tokens to successfully authenticate with Apple Push Notification service (APNs)."}],"kind":"article","role":"sampleCode","title":"Meet Push Notifications Console","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10025-meet-push-notifications-console","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10025-Meet-Push-Notifications-Console"},"doc://WWDCNotes/documentation/WWDCNotes/Jeehut":{"kind":"article","type":"topic","abstract":[{"text":"Spatial-first Indie Developer for  Platforms. Actively contributing to Open Source since 2011!","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","title":"Cihat Gündüz (54 notes)","role":"sampleCode","url":"\/documentation\/wwdcnotes\/jeehut"},"WWDC23-10171-openapi-tools":{"variants":[{"url":"\/images\/WWDC23-10171-openapi-tools.png","traits":["1x","light"]}],"identifier":"WWDC23-10171-openapi-tools","alt":"OpenAPI tools: Client code generation, API gateways, Data validation, Statis analysis, Fuzz testing, Middleware, Interactive documentation, API evolution, Graphical editors, Server stub generation, Mock testing, Specification generation, Documentation generation, Format conversion, Editor support, …","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10026-Meet-watchOS-10":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10026-Meet-watchOS-10","url":"\/documentation\/wwdcnotes\/wwdc23-10026-meet-watchos-10","role":"sampleCode","kind":"article","title":"Meet watchOS 10","abstract":[{"text":"Discover some of the most significant changes to Apple Watch since its introduction as we tour the redesigned user interface and the new Smart Stack. Learn how Apple designers approached the design of watchOS 10 as we explore layout, navigation, and visual style, and find out how you can apply them to create a great app for Apple Watch.","type":"text"}]},"WWDC23-10171-api-definition-challenges":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10171-api-definition-challenges.png"}],"identifier":"WWDC23-10171-api-definition-challenges","alt":"API definition: Serve URL, API endpoint, HTTP method, Path parameters, Query string, HTTP header fields, Content type, Request body, Status codes, Response body, Errors, Required parameters, Optional parameters, Encoding, Authorization, API version, …","type":"image"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","alt":null,"type":"image"},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10083-Meet-Reality-Composer-Pro":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10083-Meet-Reality-Composer-Pro","url":"\/documentation\/wwdcnotes\/wwdc23-10083-meet-reality-composer-pro","role":"sampleCode","kind":"article","title":"Meet Reality Composer Pro","abstract":[{"text":"Discover how to easily compose, edit, and preview 3D content with Reality Composer Pro. Follow along as we explore this developer tool by setting up a new project, composing scenes, adding particle emitters and audio, and even previewing content on device.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10109-Meet-SwiftUI-for-spatial-computing":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10109-Meet-SwiftUI-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10109-meet-swiftui-for-spatial-computing","role":"sampleCode","kind":"article","title":"Meet SwiftUI for spatial computing","abstract":[{"text":"Take a tour of the solar system with us and explore SwiftUI for visionOS! Discover how you can build an entirely new universe of apps with windows, volumes, and spaces. We’ll show you how to get started with SwiftUI on this platform as we build an astronomy app, add 3D content, and create a fully immersive experience to transport people to the stars.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-111215-Meet-UIKit-for-spatial-computing":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111215-Meet-UIKit-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-111215-meet-uikit-for-spatial-computing","role":"sampleCode","kind":"article","title":"Meet UIKit for spatial computing","abstract":[{"text":"Learn how to bring your UIKit app to visionOS. We’ll show you how to build for a new destination, explore APIs and best practices for spatial computing, and take your content into the third dimension when you use SwiftUI with UIKit in visionOS.","type":"text"}]},"https://x.com/Jeehut":{"url":"https:\/\/x.com\/Jeehut","title":"X\/Twitter","identifier":"https:\/\/x.com\/Jeehut","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110359-Meet-Swift-Package-plugins":{"url":"\/documentation\/wwdcnotes\/wwdc22-110359-meet-swift-package-plugins","title":"Meet Swift Package plugins","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110359-Meet-Swift-Package-plugins","abstract":[{"type":"text","text":"Discover how you can perform actions on Swift packages and Xcode projects with Swift package plugins. We’ll go over how these plugins work and explore how you can use them to generate source code and automate your development workflow."}],"kind":"article","role":"sampleCode","type":"topic"}}}