{"seeAlsoSections":[{"generated":true,"title":"Deep Dives into Topics","identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10239-Add-SharePlay-to-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10258-Animate-symbols-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10158-Animate-with-springs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10159-Beyond-scroll-views","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10028-Bring-widgets-to-life","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10027-Bring-widgets-to-new-places","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10093-Bring-your-Unity-VR-app-to-a-fully-immersive-space","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10023-Build-a-multidevice-workout-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10036-Build-accessible-apps-with-SwiftUI-and-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10154-Build-an-app-with-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10056-Build-better-documentbased-apps","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10016-Build-custom-workouts-with-WorkoutKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10096-Build-great-games-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10252-Build-programmatic-UI-with-Xcode-Previews","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10006-Build-robust-and-resumable-file-transfers","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10087-Build-spatial-SharePlay-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10080-Build-spatial-experiences-with-RealityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10029-Build-widgets-for-the-Smart-Stack-on-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10051-Create-a-great-ShazamKit-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10070-Create-a-great-spatial-playback-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10105-Create-a-more-responsive-camera-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10034-Create-accessible-spatial-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10257-Create-animated-symbols","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10088-Create-immersive-Unity-apps","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10278-Create-practical-workflows-in-Xcode-Cloud","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10244-Create-rich-documentation-with-SwiftDocC","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10007-Create-seamless-experiences-with-Virtualization","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10101-Customize-ondevice-speech-recognition","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10226-Debug-with-structured-logging","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10071-Deliver-video-content-for-spatial-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10263-Deploy-passkeys-at-work","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10193-Design-Shortcuts-for-Spotlight","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10138-Design-and-build-apps-for-watchOS-10","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10078-Design-considerations-for-vision-and-motion","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10073-Design-for-spatial-input","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10076-Design-for-spatial-user-interfaces","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10075-Design-spatial-SharePlay-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10309-Design-widgets-for-the-Smart-Stack-on-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10115-Design-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10045-Detect-animal-poses-in-Vision","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10203-Develop-your-first-immersive-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10052-Discover-Calendar-and-EventKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10256-Discover-Continuity-Camera-for-tvOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10089-Discover-Metal-for-immersive-apps","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10085-Discover-Quick-Look-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10155-Discover-String-Catalogs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10044-Discover-machine-learning-enhancements-in-Create-ML","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10196-Dive-deeper-into-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10254-Do-more-with-Managed-Apple-IDs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10110-Elevate-your-windowed-app-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10107-Embed-the-Photos-Picker-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10233-Enhance-your-apps-audio-experience-with-AirPods","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10094-Enhance-your-iPad-and-iPhone-apps-for-the-Shared-Space","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10091-Evolve-your-ARKit-app-for-spatial-experiences","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111241-Explore-3D-body-pose-and-person-segmentation-in-Vision","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10275-Explore-AirPlay-with-interstitials","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10012-Explore-App-Store-Connect-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10042-Explore-Natural-Language-multilingual-models","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10103-Explore-enhancements-to-App-Intents","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10192-Explore-enhancements-to-RoomPlan","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10271-Explore-immersive-sound-design","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10202-Explore-materials-in-Reality-Composer-Pro","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10122-Explore-media-formats-for-the-web","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10037-Explore-pie-charts-and-interactivity-in-Swift-Charts","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10095-Explore-rendering-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10142-Explore-testing-inapp-purchases","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10086-Explore-the-USD-ecosystem","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10033-Extend-Speech-Synthesis-with-personal-and-custom-voices","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10175-Fix-failures-faster-with-Xcode-test-reports","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10168-Generalize-APIs-with-parameter-packs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10260-Get-started-with-building-apps-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10060-Get-started-with-privacy-manifests","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10111-Go-beyond-the-window-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10161-Inspectors-in-SwiftUI-Discover-the-details","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10304-Integrate-with-motorized-iPhone-stands-using-DockKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10104-Integrate-your-media-app-with-HomePod","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10281-Keep-up-with-the-keyboard","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10176-Lift-subjects-from-images-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10229-Make-features-discoverable-with-TipKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10189-Migrate-to-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10172-Mix-Swift-and-C++","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10195-Model-your-schema-with-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10127-Optimize-GPU-renderers-with-Metal","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10100-Optimize-app-power-and-performance-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10050-Optimize-machine-learning-for-Metal-apps","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10035-Perform-accessibility-audits-for-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10072-Principles-of-spatial-design","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10266-Protect-your-Mac-app-with-environment-constraints","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10250-Prototype-with-Xcode-Playgrounds","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10002-Ready-set-relay-Protect-app-traffic-with-network-relays","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10262-Rediscover-Safari-developer-features","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10004-Reduce-network-delays-with-L4S","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10090-Run-your-iPad-and-iPhone-apps-in-the-Shared-Space","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10241-Share-files-with-SharePlay","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10224-Simplify-distribution-in-Xcode-and-Xcode-Cloud","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10137-Support-Cinematic-mode-videos-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10181-Support-HDR-images-in-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10188-Sync-to-iCloud-with-CKSyncEngine","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10113-Take-SwiftUI-to-the-next-dimension","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10162-The-SwiftUI-cookbook-for-focus","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10238-Tune-up-your-AirPlay-audio-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10057-Unleash-the-UIKit-trait-system","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10153-Unlock-the-power-of-grammatical-agreement","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10185-Update-Live-Activities-with-push-notifications","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10031-Update-your-app-for-watchOS-10","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10061-Verify-app-dependencies-with-digital-signatures","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10058-Whats-new-with-text-and-text-interactions","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10157-Wind-your-way-through-advanced-animations-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10273-Work-with-Reality-Composer-Pro-content-in-Xcode","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10128-Your-guide-to-Metal-ray-tracing"]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc23\/10166","overridingTitle":"Watch Video (33 min)","type":"reference"}},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10166-Write-Swift-macros","interfaceLanguage":"swift"},"kind":"article","abstract":[{"text":"Discover how you can use Swift macros to make your codebase more expressive and easier to read. Code along as we explore how macros can help you avoid writing repetitive code and find out how to use them in your app. We’ll share the building blocks of a macro, show you how to test it, and take you through how you can emit compilation errors from macros.","type":"text"}],"metadata":{"roleHeading":"WWDC23","role":"sampleCode","title":"Write Swift macros","modules":[{"name":"WWDC Notes"}]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Chapters","anchor":"Chapters"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812","type":"reference","isActive":true}]},{"type":"heading","level":3,"text":"ELI5 Summary of Macros:","anchor":"ELI5-Summary-of-Macros"},{"type":"paragraph","inlineContent":[{"text":"Imagine you’re baking a cake, and you need to sift flour. You have to get out your sifter, pour in the flour, turn the handle… and you have to do this every single time you need sifted flour. Now imagine you had a magical kitchen helper who could do this for you. All you’d have to say is “sift flour” and it’s done!","type":"text"},{"text":" ","type":"text"},{"text":"Swift macros are like that magical kitchen helper, but for your code. Instead of you having to write out the same lines of code over and over again, you just tell your macro (your kitchen helper) what to do. This might be something like “create a struct with these properties” or “set up a standard network request”.","type":"text"},{"text":" ","type":"text"},{"text":"You define how the macro works one time, and then you can use it whenever you need to. It’s a way to automate repetitive tasks and make your code easier to read and manage. This makes coding a lot faster and less prone to errors, especially as your projects get bigger and more complex.","type":"text"}]},{"type":"heading","level":1,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift macros allow to generate code at compile time, making codebases more expressive and easier to read."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example: Here there is a list of calculations that first-year students can use to practice their arithmetic skills. This is repetitive, redundant, and even error prone because nobody can guarantee that the result actually matches the calculation."}]},{"type":"codeListing","syntax":"swift","code":["let calculations = [","(1 + 1, \"1 + 1\"),","(2 + 3, \"2 + 3\"),","(7 - 3, \"7 - 3\"),","(5 - 2, \"5 - 2\"),","(3 * 2, \"3 * 2\"),","(3 * 5, \"3 * 5\"),","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With Swift 5.9 we can define a stringify macro to simplify this. This macro also happens to be the one that is included in Xcode’s template. The stringify macro only takes the calculation as a single parameter. At compile time it expands to the tuple that we saw before, guaranteeing that the calculation and the result match."}]},{"type":"codeListing","syntax":"swift","code":["let calculations = [","\t#stringify(1 + 1), ","\t#stringify(2 + 3), ","\t#stringify(7 - 3), ","\t#stringify(5 - 2), ","\t#stringify(3 * 2), ","\t#stringify(3 * 5),","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So how does this work?"}]},{"type":"codeListing","syntax":"swift","code":["@freestanding(expression)","macro stringify(_ value: Int) -> (Int, String)"]},{"type":"paragraph","inlineContent":[{"text":"The stringify macro takes an integer as the input parameter and outputs a tuple containing an the result, an integer, and the calculation– a string. If the arguments of the macro expression don’t match the macro’s parameters, or don’t type check by themselves, the compiler will emit an error without applying the macro expansion.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, passing a string literal to this macro, the compiler complains that ‘String’ is not convertible to expected argument type ‘Int’."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-example1","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"This is different to, for example, C macros, which are evaluated at the pre-processor stage before type-checking.","type":"text"},{"text":" ","type":"text"},{"text":"Also this macro is declared with the freestanding expression macro role. This means that we can use the macro wherever we can use an expression, and that it will be indicated by the hash character, like we see with #stringify.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Other kinds of macros are attached macros that can augment declarations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"After checking that all the arguments match the macro’s parameters, the compiler performs the macro expansion.","type":"text"}]},{"type":"heading","level":2,"text":"Macro plug-in","anchor":"Macro-plug-in"},{"type":"paragraph","inlineContent":[{"text":"To perform the expansion, each macro defines its implementation in a compiler plug-in. The compiler will send the source code of the entire macro expression to that plug-in.  The first thing that the macro plug-in does, is to parse the source code of the macro into a SwiftSyntax tree. This tree is a source-accurate, structural representation of the macro, and it will be the basis on which the macro operates. For example, our ‘stringify’ macro is represented in the tree as a macro expansion expression node. That expression has the macro name ‘stringify’. And it takes a single argument, which is the infix operator plus applied to 2 and 3.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro’s implementation is itself a program written in Swift and can perform any transformation to the syntax tree it wants. In this case, it generates a tuple like. It will then serialize the generated syntax tree into source code again and send it to the compiler, which will replace the macro expression by the expanded code."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro1","type":"image"}]},{"type":"heading","level":1,"text":"Create a macro","anchor":"Create-a-macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new macro template in Xcode defines the stringify macro. Let us walk through that template and explore the macro’s definition, how the expansion works, and how the macro can be tested."}]},{"type":"paragraph","inlineContent":[{"text":"To create the template, click File, New, Package, and select the Swift Macro template. Let’s call our first macro “WWDC”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here we have an invocation of the #stringify macro, similar to what we have seen before. It takes a parameter “a + b” and returns the result, as well as the code that produced it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To see what the macro expands to, right-click on it and select Expand Macro."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro3"}]},{"type":"paragraph","inlineContent":[{"text":"That’s exactly what we saw before.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro4","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But how is the macro defined? Let’s jump to its definition. (right click again, first manu item from top)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we have a slightly generalized version of our previous ‘stringify’ macro. Instead of taking an integer, this macro is generic and can receive any type T. The macro is declared as an external macro."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro5","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"This tells the compiler that to perform the expansion, it needs to look at the StringifyMacro type in the WWDCMacros module.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"How is that type defined?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"** command - shift - o \/ type “stringify” and select from search “StringifyMacro” **"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because stringify is declared as a freestanding expression macro, the StringifyMacro type needs to conform to the ExpressionMacro protocol.This protocol has a single requirement: The expansion function. It takes the syntax tree of the macro expression itself, as well as a context that can be used to communicate with the compiler."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The expansion function then returns the rewritten expression syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What does it do in the implementation?"}]},{"type":"paragraph","inlineContent":[{"text":"At first, it retrieves the single argument to the macro expression. It knows that this argument exists because stringify is declared as taking a single parameter and all arguments need to type-check before the macro expansion can be applied.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"It then uses string interpolation to create the syntax tree of a tuple. The first element is the argument itself and the second is a string literal containing the source code of the argument.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ StringifyMacro implementation","public struct StringifyMacro: ExpressionMacro {","\tpublic static func expansion(","\t\tof node: some FreestandingMacroExpansionSyntax, ","\t\tin context: some MacroExpansionContext","\t) -> ExprSyntax {","\t\tguard let argument = node.argumentList.first?.expression else {","\t\t\tfatalError \"compiler bug: the macro does not have any arguments\")","\t\t}","\t\t","\t\treturn \"(\\(argument), \\(literal: argument.description))\"","\t}","}"]},{"type":"paragraph","inlineContent":[{"text":"The function is not returning a string here. It is returning an expression syntax. The macro will automatically invoke the Swift parser to transform this literal into a syntax tree. And because it is using the literal interpolation style for the second argument, it will make sure that the literal’s contents are properly escaped.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because macros don’t have side effects and the source code of syntax trees is easy to compare, a great way to test them is to write unit tests. The macro template already comes with one."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ stringify test case","","final class WWDCTests: XCTestCase {","\tfunc testMacro() {","\t\tassertMacroExpansion(","\t\t\t\"\"\"","\t\t\t#stringify(a + b)","\t\t\t\"\"\",","\t\t\texpandedSource: \"\"\"","\t\t\t(a + b, \"a + b\")","\t\t\t\"\"\",","\t\t\tmacros: testMacros","\t\t)","\t}","}","","let testMacros: [String: Macro.Type] = [","\t\"stringify\": StringifyMacro.self","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test case uses the ‘assertMacroExpansion’ function from the SwiftSyntax package to verify that the ‘stringify’ macro expands correctly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It takes the ‘#stringify(a + b)’ expression, that we saw before, as input. and asserts that after the macro is expanded, it produces a tuple containing ‘a + b’ and the string literal ‘a + b’."}]},{"type":"paragraph","inlineContent":[{"text":"To tell the test case how to expand the macros, it passes the ‘testMacros’ parameter, which specifies that the macro ‘#stringify’ should be expanded using the ‘StringifyMacro’ type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro6"}]},{"type":"heading","anchor":"Swift-macro-template-recap","level":2,"text":"Swift macro template recap"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Macro declaration defines the macro’s signature","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Implementation operates on SwiftSyntax trees"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Easy to test"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Macro-roles","level":1,"text":"Macro roles"},{"type":"paragraph","inlineContent":[{"text":"A freestanding expression macro is spelled with a ","type":"text"},{"inlineContent":[{"text":"hash","type":"text"}],"type":"strong"},{"text":" and allows us to rewrite the entire macro expression. There’s also a freestanding declaration role that expands to a declaration instead of an expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The other kinds of macros are attached macros. These are spelled with an @, just like attributes, and allow the macro to augment the declaration they are attached to. For example, an attached member macro adds new members of the type it is attached to.","type":"text"}]},{"type":"table","rows":[[[{"inlineContent":[{"text":"Macro roles","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Description","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@freestanding(expression)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Creates a piece of code that returns a value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@freestanding(declaration)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Creates one or more declarations"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@attached(peer)"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Adds new declarations alongside the declaration it’s applied to","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@attached(accessor)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Adds accessors to a property"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@attached (memberAttribute)"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Adds attributes to the declarations in the tvpe\/extension it’s applied to","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@attached(member)"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Adds new declarations inside the type\/extension it’s applied to","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"@attached(conformance)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Adds conformances to the tvpe\/extension it’s applied to"}],"type":"paragraph"}]]],"alignments":["left","right"],"header":"row"},{"type":"paragraph","inlineContent":[{"text":"To learn more about these other roles, watch “Expand on Swift macros”:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167"}]},{"type":"paragraph","inlineContent":[{"text":"Example with the ski instructor app that allows to plan the tours for the students.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In addition to the Slope enum that contains all the slopes in the ski resort, there is also an EasySlope type that only contains slopes suitable for beginners. It has an initializer to convert a slope to an easy slope, if the slope is indeed easy, and a computed property to convert an easy slope back to a general slope.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Slopes in my favorite ski resort.","enum Slope {","\tcase beginnersParadise ","\tcase practiceRun ","\tcase livingRoom ","\tcase olympicRun ","\tcase blackBeauty"," }","","\/\/ Slopes suitable for beginners. Subset of 'Slopes'.","enum EasySlope {","\tcase beginnersParadise ","\tcase practiceRun","\t","\tinit?(_ slope: Slope) {","\t\tswitch slope {","\t\tcase .beginnersParadise: self = .beginnersParadise","\t\tcase .practiceRun: self = .practiceRun","\t\tdefault: return nil","\t\t}","\t}","\t","\tvar slope: Slope {","\t\tswitch self {","\t\t\tcase .beginnersParadise: return .beginnersParadise ","\t\t\tcase .practiceRun: return .practiceRun","\t\t}","\t}","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro7","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"While this provides great type safety, it is really repetitive. To add an easy slope, we need to add it to Slope…EasySlope, the initializer, and the computed property. Let’s see if we can improve things using a macro.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"What we want to do is to automatically generate the initializer and the computed property. How can we do this?","type":"text"}]},{"type":"heading","anchor":"The-Plan","level":3,"text":"The Plan"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"declare an attached member macro."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create empty macro implementation","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Next, create the compiler plug-in that contains the macro’s implementation. We will develop it in a test-driven way.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create test case"},{"type":"text","text":" "},{"type":"text","text":"Thus, we will leave its implementation empty until we write a test case for it."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Write macro implementation"},{"type":"text","text":" "},{"type":"text","text":"After we defined the macro’s behavior in a test case, we will write the implementation to match that test case."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Integrate macro into app","type":"text"},{"text":" ","type":"text"},{"text":"we will integrate the new macro into the app. We will remove the initializer and have the macro generate it for us.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To develop the macro, we work with the template that we created earlier."},{"type":"text","text":"\n"},{"type":"text","text":"Start by declaring a new attached member macro by using the ‘@attached(member)’ attribute and call it SlopeSubset because EasySlope is a subset of Slope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro also defines the names of the members it introduces."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Defines a subset of the 'Slope' enum","\/\/\/","\/\/\/ Generates an initializer that converts a 'Slope' to this type if the slope is","\/\/\/ declared in this subset, otherwise returns nil","\/\/\/","\/\/\/ - Important: All enum cases declared in this macro must also exist in the","\/\/\/ Slope enum.","@attached (member, names: named(init))","public macro SlopeSubset() = #externalMacro(module: \"WWDCMacros\", type: \"SlopeSubsetMacro\")"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro8","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this demo, we will see how to generate the initializer. Generating the computed property is very similar, because it’s also just a switch statement that switches over all the cases. With this declaration, we have defined the macro, but we have not implemented the expansion that it actually performs.  For this, our macro references the SlopeSubsetMacro type in the WWDCMacros module."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since SlopeSubset as an attached member macro, the corresponding implementation needs to conform to the MemberMacro protocol. This protocol has a single requirement: The ‘expansion’ function, similar to ExpressionMacro."}]},{"type":"codeListing","syntax":"swift","code":["import SwiftCompilerPlugin","import SwiftSyntax","import SwiftSyntaxBuilder","import SwiftSyntaxMacros","","\/\/\/ Implementation of the 'SlopeSubset macro.","public struct SlopeSubsetMacro: MemberMacro {","\t\/\/ members","}","","@main","struct WWDCPlugin: CompilerPlugin {","\tlet providingMacros: [Macro.Type] = [","\t\t...","","\t]","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro9","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘expansion’ function takes the attribute with which we apply the macro to a declaration, as well as the declaration that the macro is being applied to. In our case, this will be the EasySlope enum declaration."}]},{"type":"paragraph","inlineContent":[{"text":"The macro then returns the list of all the new members it wants to add to that declaration.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftCompilerPlugin","import SwiftSyntax","import SwiftSyntaxBuilder","import SwiftSyntaxMacros","","\/\/\/ Implementation of the 'SlopeSubset macro.","public struct SlopeSubsetMacro: MemberMacro {","\tpublic static func expansion(","\t\tof attribute: AttributeSyntax,","\t\tprovidingMembers0f deciaration: some DeclGroupSyntax,","\t\tin context: some MacroExpansionContext","\t) throws -> [DeclSyntax] {","\t\treturn []  \/\/ for now to test","\t}","}","","@main","struct WWDCPlugin: CompilerPlugin {","\tlet providingMacros: [Macro.Type] = [","\t\tSlopeSubsetMacro.self","\t]","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro10","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"start by writing a test case for it. So for now, let us just return an empty array, indicating that no new members should be added."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Make SlopeSubset visible to the compiler. For this, add it to the ‘providingMacros’ property."}]},{"type":"paragraph","inlineContent":[{"text":"We write a test case that we can rerun whenever we make changes to the macro, to make sure we are not introducing regressions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use the ‘assertMacroExpansion’ function to verify the macro’s behavior.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftSyntaxMacros","import SwiftSyntaxMacrosTestSupport","import XCTest","import WWDCMacros","","let testMacros: [String: Macro.Type] = [","\t\"SlopeSubset\" : SlopeSubsetMacro.self,","]","","final class WWDCTests: XCTestCase {","\tfunc testSlopeSubset () {","\t\tassertMacroExpansion (","\t\t\t\"\"\"","\t\t\t@SlopeSubset","\t\t\tenum EasySlope {","\t\t\tcase beginnersParadise ","\t\t\tcase practiceRun","\t\t\t}","\t\t\t\"\"\",expandedSource:","\t\t\t\"\"\"","","\t\t\tenum EasySlope {","\t\t\t\tcase beginnersParadise ","\t\t\t\tcase practiceRun","\t\t\t}","\t\t\t\"\"\", macros: testMacros)","\t}","}"]},{"type":"paragraph","inlineContent":[{"text":"What we want to test is what the macro generates when applied to the EasySlope type, so we use that as our test case’s input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And since the macro’s not doing anything yet, we just expect it to remove the attribute and not add any new members, so the expected expanded code is the same as the input, just without ‘@SlopeSubset’."}]},{"type":"paragraph","inlineContent":[{"text":"Let the test case know that it should expand the macro SlopeSubset using the SlopeSubsetMacro implementation. For that, we need to map the macro name to its implementing type in the ‘testMacros’ dictionary and pass that dictionary to the assertion function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Running the tests","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro11"}]},{"type":"paragraph","inlineContent":[{"text":"But is the macro actually generating the initializer and not just removing the attribute? We copy the code previously wrote by hand into the test case because that’s what we want the plug-in to generate.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And running the test again… …it fails because the macro doesn’t actually generate the initializer yet."}]},{"type":"codeListing","syntax":"swift","code":["\"\"\"","enum EasySlope {","\tcase beginnersParadise ","\tcase practiceRun","\tinit?(_ slope: Slope) {","\t\tswitch slope {","\t\tcase .beginnersParadise:","\t\t\tself = .beginnersParadise","\t\tcase .practiceRun:","\t\t\tself = .practiceRun","\t\tdefault:","\t\t\treturn nil","\t\t}","\t}","}","\"\"\""]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro12","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer switches over all the enum elements declared in the EasySlopes enum. So the first thing that we need to do is to retrieve these enum elements from the declaration. Since enum elements can only be declared inside enum declarations, we start by casting ‘declaration’ to an enum declaration."}]},{"type":"paragraph","inlineContent":[{"text":"If the macro is attached to a type that is not an enum, we should get an error. Add a TODO so that we don’t forget to do it later, and return an empty array for now.","type":"text"},{"text":"\n","type":"text"},{"text":"Next, we need to get all the elements that the enum declares. To figure out how to do that, we inspect the syntactic structure of our enum in the SwiftSyntax tree.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro13","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the macro’s implementation is just an ordinary Swift program, we can debug it in Xcode. For example, we can set a breakpoint inside the expansion function and run the test cases to hit that breakpoint."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro14"}]},{"type":"paragraph","inlineContent":[{"text":"We now have the debugger paused inside the macro’s implementation and ‘enumDecl’ is the EasySlopes enum. We can print it in the debugger by typing ‘po enumDecl’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro15","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The innermost nodes of the syntax tree represent the enum elements, the ‘beginnersParadise’, and ‘practiceRun’ slopes. To retrieve them, we need to follow the structure that is outlined to us in the syntax tree."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro16","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The enum declaration has a child called ‘memberBlock’. This member block contains both the braces and the actual members. So to access the members, we start with ‘enumDecl.memberBlock.members’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These members contain the actual declaration, as well as an optional semicolon. We are interested in the declarations, in particular those declarations that actually declare enum cases. Using compact map to get a list of all the member declarations that are enum cases. Each case declaration can declare multiple elements. To retrieve all of them, we can use ‘flatMap’."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Retrieving enum elements","let members = enumDecl.memberBlock.members","let caseDecls = members.compactMap { $0.decl.as(EnumCaseDec1Syntax.self) }","let elements = caseDecls.flatMap { $0.elements }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now we can start constructing the initializer."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Initializer to generate","","init?(_ slope: Slope) {","\tswitch slope {","\t\tcase beginnersParadise:","\t\t\tself = .beginnersParadise","\t\tcase .practiceRun:","\t\t\tself = .practiceRun ","\t\tdefault:","\t\t\treturn nil","\t}","}"]},{"type":"paragraph","inlineContent":[{"text":"The initializer declaration has a single item: A switch expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This switch expression contains a case for each element in the enum, as well as a default case that returns nil. We need to create syntax nodes for all of these.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Two great ways of finding the syntax nodes to create, are either by printing the syntax tree like we did before, or by reading SwiftSyntax’s documentation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-docs"}]},{"type":"paragraph","inlineContent":[{"text":"We start by constructing an InitializerDeclSyntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type can be constructed by building the body using a result builder and specifying the header– that is the ‘init’ keyword and all the parameters. This will allow us to use a for loop inside the result builder to iterate over all the elements, exactly what we need."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init"}]},{"type":"paragraph","inlineContent":[{"text":"Copy the init header from our test case.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the body, we need a switch expression. This type also has an initializer that takes a header and a result builder."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we iterate over all elements. For each element, we want to create a new case item, which we can construct using string interpolation just like we saw for ‘#stringify’. We also need to add a default case that returns nil."}]},{"type":"paragraph","inlineContent":[{"text":"And finally, return the initializer.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ...","","let initializer = try InitializerDeciSyntax(\"init?(_ slope: Slope)\") {","\ttry SwitchExprSyntax(\"switch slope\") {","\t\tfor element in elements {","\t\t\tSwitchCaseSyntax(","\t\t\t\t\"\"\"","\t\t\t\tcase .\\(element.identifier):","\t\t\t\t\tself = .\\(element.identifier)","\t\t\t\t\"\"\"","\t\t\t)","\t\t}","\t\tSwitchCaseSyntax(\"default: return nil\")","\t}","}","return [DecISyntax(initializer)]","","\/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init3"}]},{"type":"paragraph","inlineContent":[{"text":"To add the macro package to the Xcode project, we right-click on it and select “Add Package Dependencies” and select the local package that we just created.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init4","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"To be able to use the macro, we add the WWDC target as a dependency of the app.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init5"}]},{"type":"paragraph","inlineContent":[{"text":"Now import the WWDC module from the package and apply the SlopeSubset macro to the EasySlope type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If we build… …the compiler complains that the hand-written initializer is an invalid redeclaration. And that’s because the macro now generates it for us. So we can just delete it. So if we want to see what the macro actually generated, we can right-click on SlopeSubset and click Expand Macro.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init6"}]},{"type":"paragraph","inlineContent":[{"text":"And if I forgot what the macro does, we can also Option-click on it to read its documentation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init7"}]},{"type":"heading","anchor":"Write-macro-recap","level":2,"text":"Write macro recap"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Start with the Swift macro package template."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the debugger to explore the syntax node structure: stop the macro’s execution and print the syntax node inside the debugger. See which properties we need to access to get all the enum elements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Develop macro based on test cases"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add package to an Xcode project","type":"text"}]}]}]},{"type":"heading","anchor":"Diagnostics","level":1,"text":"Diagnostics"},{"type":"paragraph","inlineContent":[{"text":"But what happens if our macro is used in situations that it doesn’t support and generates code that does not compile.  We can emit error messages that inform our adopters about what’s going wrong.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"let’s go and fix the TODO we left in our codebase. When SlopeSubset is applied to a type that is not an enum, the macro should emit an error, saying that it is only applicable to enums.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"let’s start by adding a test case."}]},{"type":"codeListing","syntax":"swift","code":["func testSlopeSubsetOnStruct() throws {","\tassertMacroExpansion(","\t\t\"\"\"","\t\t@SlopeSubset","\t\tstruct Skier {","\t\t}","\t\t\"\"\",","\t\texpandedSource: \"\"\"","\t","\t\tstruct Skier {","\t\t}","\t\t\"\"\",","\t\tdiagnostics: [","\t\t\tDiagnosticSpec(message: \"@SlopeSubset can only be applied to an enum\", line: 1, column: 1)","\t\t], ","\t\tmacros: testMacros","\t)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This time, we are applying the SlopeSubset macro to a struct."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since there are no enum elements in the struct, we don’t expect the macro to generate an initializer. Instead, it should emit a diagnostic, that is an error, informing us that SlopeSubset can only be applied to an enum. If we run this test… …it fails because we are not outputting the error message yet. Let’s go to the compiler plug-in to do so now."}]},{"type":"paragraph","inlineContent":[{"text":"Macro errors can be represented by any type that conforms to the Swift Error protocol. I use an enum with a single case to describe the error message if SlopeSubset is applied to a type that’s not an enum.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["enum SlopeSubsetError: CustomStringConvertible, Error {","\tcase onlyApplicableToEnum","","\tvar description: String {","\t\tswitch self {","\t\tcase .onlyApplicableToEnum: return \"@SlopeSubset can only be applied to an enum\"","\t\t}","\t}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we throw the error from the expansion function, it will be shown at the attribute that calls the macro expansion."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init8"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to show the error message at a different location than the attribute, generate warnings, or even show Fix-Its in Xcode, there’s an ‘addDiagnostic’ method on the context parameter that allows to generate rich diagnostics."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, how does it look like in Xcode if we apply SlopeSubset to a struct?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Xcode shows the custom error message inline with all other compilation errors. That makes it easy for adopters of our macro to see what they are doing wrong."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init9","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have good error handling, go and generalize it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To specify the superset of the enum, that we have so far hard-coded as Slope, we add a generic parameter to the macro declaration."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init10"}]},{"type":"paragraph","inlineContent":[{"text":"And since the macro is now no longer specific to slopes, let’s rename it to EnumSubset by right clicking on SlopeSubset and selecting Refactor, Rename.","type":"text"},{"text":"\n","type":"text"},{"text":"(Rename all occurences inside string literals and comments by Command-clicking them.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init11","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We adjust our macro implementation to use the generic parameter, instead of the hard-coded Slopes type. If we print the attribute inside the debugger and inspect its layout, just like we did for ‘enumDecl’, we can see that we can retrieve the generic parameter by accessing the ‘argumentType’ of the first argument in the ‘genericArgumentClause’ of the attribute’s name. So now that we’ve retrieved the generic parameter, we can replace the so-far hardcoded Slope type by the variable ‘supersetType’."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init12"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Need a couple more changes, like renaming the initializer’s parameter, changing the macro implementation’s type name, and updating the documentation. For now, we make sure that our tests are still passing."}]},{"type":"paragraph","inlineContent":[{"text":"Since we made EnumSubset generic, we need to explicitly specify that EasySlope is a subset of Slope by passing slope as a generic parameter to the EnumSubset macro.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init13"}]},{"type":"heading","anchor":"Wrap-up","level":1,"text":"Wrap up"},{"type":"paragraph","inlineContent":[{"text":"The key benefits of using Swift macros are:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code Consistency: Since macros generate code, it ensures that similar code snippets throughout the program are consistent. This is especially important when working in large teams where ensuring code consistency can be a challenge."}]}]},{"content":[{"inlineContent":[{"text":"Time Saving: Macros can automate repetitive tasks in your codebase. This can save a lot of time, especially on larger projects.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Improved Readability and Maintainability: By abstracting away repetitive or complex code into a macro, the resulting code becomes easier to read and maintain.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reduced Errors: When repetitive code is generated by macros, it reduces the chance of introducing errors that can occur when manually writing similar code snippets."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In summary, while Swift macros might seem complex at first, especially for a new developer, they are a powerful tool to have in our programming toolkit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"They can make our code cleaner, more efficient, and less prone to errors."}]},{"type":"heading","anchor":"Resources","level":2,"text":"Resources"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030"},{"type":"text","text":""},{"type":"text","text":"\n"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166"}]},{"type":"heading","anchor":"Related-Videos","level":2,"text":"Related Videos"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"overridingTitle":"Expand on Swift macros","overridingTitleInlineContent":[{"type":"text","text":"Expand on Swift macros"}],"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164","isActive":true,"type":"reference"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165","isActive":true,"type":"reference"}]},{"type":"heading","anchor":"Written-By","level":2,"text":"Written By"},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/avatars.githubusercontent.com\/u\/44718879?v=4"}]}]},{"size":4,"content":[{"type":"heading","anchor":"John-Baer","level":3,"text":"John Baer"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/JohnBaer3","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/JohnBaer3","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/","isActive":true,"type":"reference"}]}]}]},{"numberOfColumns":5,"type":"row","columns":[{"content":[{"inlineContent":[{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/29355828?v=4","type":"image"}],"type":"paragraph"}],"size":1},{"content":[{"type":"heading","level":3,"text":"laurent b","anchor":"laurent-b"},{"type":"paragraph","inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/multitudes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/wrmultitudes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/laurentbrusa.hashnode.dev\/","isActive":true,"type":"reference"}]}],"size":4}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"type":"heading","anchor":"Related-Sessions","level":2,"text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10165-Whats-new-in-Xcode-15","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10166-write-swift-macros"]}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10159-Beyond-scroll-views":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10159-Beyond-scroll-views","kind":"article","title":"Beyond scroll views","url":"\/documentation\/wwdcnotes\/wwdc23-10159-beyond-scroll-views","type":"topic","abstract":[{"type":"text","text":"Find out how you can take your scroll views to the next level with the latest APIs in SwiftUI. We’ll show you how to customize scroll views like never before. Explore the relationship between safe areas and a scroll view’s margins, learn how to interact with the content offset of a scroll view, and discover how you can add a bit of flair to your content with scroll transitions."}],"role":"sampleCode"},"WWDC23-10166-init4":{"identifier":"WWDC23-10166-init4","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init4.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10035-Perform-accessibility-audits-for-your-app":{"title":"Perform accessibility audits for your app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10035-Perform-accessibility-audits-for-your-app","type":"topic","role":"sampleCode","abstract":[{"text":"Discover how you can test your app for accessibility with every build. Learn how to perform automated audits for accessibility using XCTest and find out how to interpret the results. We’ll also share enhancements to the accessibility API that can help you improve UI test coverage.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10035-perform-accessibility-audits-for-your-app","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10004-Reduce-network-delays-with-L4S":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10004-Reduce-network-delays-with-L4S","kind":"article","title":"Reduce network delays with L4S","url":"\/documentation\/wwdcnotes\/wwdc23-10004-reduce-network-delays-with-l4s","type":"topic","abstract":[{"type":"text","text":"Streaming video, multiplayer games, and other real-time experiences depend on responsive, low latency networking. Learn how Low Latency, Low Loss, Scalable throughput (L4S) can reduce network delays and improve the overall experience in your app. We’ll show you how to set up and test your app, network, and server with L4S."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10180-Discover-streamlined-location-updates":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates","kind":"article","title":"Discover streamlined location updates","url":"\/documentation\/wwdcnotes\/wwdc23-10180-discover-streamlined-location-updates","type":"topic","abstract":[{"type":"text","text":"Move into the future with Core Location! Meet the CLLocationUpdate class, designed for modern Swift concurrency, and learn how it simplifies getting location updates. We’ll show you how this class works with your apps when they run in the foreground or background and share some best practices."}],"role":"sampleCode"},"https://developer.apple.com/wwdc23/10166":{"checksum":null,"url":"https:\/\/developer.apple.com\/wwdc23\/10166","identifier":"https:\/\/developer.apple.com\/wwdc23\/10166","type":"download"},"WWDC23-10166-init10":{"identifier":"WWDC23-10166-init10","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init10.jpg","traits":["1x","light"]}]},"https://laurentbrusa.hashnode.dev/":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","url":"https:\/\/laurentbrusa.hashnode.dev\/","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"role":"collection","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","url":"\/documentation\/wwdcnotes","type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10167-Expand-on-Swift-macros":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","kind":"article","title":"Expand on Swift macros","url":"\/documentation\/wwdcnotes\/wwdc23-10167-expand-on-swift-macros","type":"topic","abstract":[{"text":"Discover how Swift macros can help you reduce boilerplate in your codebase and adopt complex features more easily. Learn how macros can analyze code, emit rich compiler errors to guide developers towards correct usage, and generate new code that is automatically incorporated back into your project. We’ll also take you through important concepts like macro roles, compiler plugins, and syntax trees.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10056-Build-better-documentbased-apps":{"url":"\/documentation\/wwdcnotes\/wwdc23-10056-build-better-documentbased-apps","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10056-Build-better-documentbased-apps","kind":"article","abstract":[{"type":"text","text":"Discover how you can use the latest features in iPadOS to improve your document-based apps. We’ll show you how to take advantage of UIDocument as well as existing desktop-class iPad and document-based APIs to add new features in your app. Find out how to convert data models to UIDocument, present documents with UIDocumentViewController, learn how to migrate your apps to the latest APIs, and explore best practices."}],"title":"Build better document-based apps"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10076-Design-for-spatial-user-interfaces":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10076-Design-for-spatial-user-interfaces","abstract":[{"text":"Learn how to design great interfaces for spatial computing apps. We’ll share how your existing screen-based knowledge easily translates into creating great experiences for visionOS. Explore guidelines for UI components, materials, and typography and find out how you can design experiences that are familiar, legible, and easy to use.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10076-design-for-spatial-user-interfaces","title":"Design for spatial user interfaces","kind":"article","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10192-Explore-enhancements-to-RoomPlan":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10192-Explore-enhancements-to-RoomPlan","abstract":[{"type":"text","text":"Join us for an exciting update to RoomPlan as we explore MultiRoom support and enhancements to room representations. Learn how you can scan areas with more detail, capture multiple rooms, and merge individual scans into one larger structure. We’ll also share workflows and best practices when working with RoomPlan results that you want to combine into your existing 3D model library."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10192-explore-enhancements-to-roomplan","type":"topic","kind":"article","title":"Explore enhancements to RoomPlan"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10256-Discover-Continuity-Camera-for-tvOS":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10256-Discover-Continuity-Camera-for-tvOS","kind":"article","title":"Discover Continuity Camera for tvOS","url":"\/documentation\/wwdcnotes\/wwdc23-10256-discover-continuity-camera-for-tvos","type":"topic","abstract":[{"text":"Discover how you can bring AVFoundation, AVFAudio, and AudioToolbox to your apps on tvOS and create camera and microphone experiences for the living room. Find out how to support tvOS in your existing iOS camera experience with the Device Discovery API, build apps that use iPhone as a webcam or FaceTime source, and explore special considerations when developing for tvOS. We’ll also show you how to enable audio recording for tvOS, and how to use echo cancellation to create great voice-driven experiences.","type":"text"}],"role":"sampleCode"},"WWDC23-10166-macro5":{"identifier":"WWDC23-10166-macro5","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro5.jpg","traits":["1x","light"]}]},"WWDC23-10166-init12":{"identifier":"WWDC23-10166-init12","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init12.jpg","traits":["1x","light"]}]},"WWDC23-10166-init2":{"identifier":"WWDC23-10166-init2","alt":"creating init","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init2.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10172-Mix-Swift-and-C++":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10172-Mix-Swift-and-C++","kind":"article","title":"Mix Swift and C++","url":"\/documentation\/wwdcnotes\/wwdc23-10172-mix-swift-and-c++","type":"topic","abstract":[{"type":"text","text":"Learn how you can use Swift in your C++ and Objective-C++ projects to make your code safer, faster, and easier to develop. We’ll show you how to use C++ and Swift APIs to incrementally incorporate Swift into your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts","kind":"article","title":"Spotlight your app with App Shortcuts","url":"\/documentation\/wwdcnotes\/wwdc23-10102-spotlight-your-app-with-app-shortcuts","type":"topic","abstract":[{"type":"text","text":"Discover how to use App Shortcuts to surface frequently used features from your app in Spotlight or through Siri. Find out how to configure search results for your app and learn best practices for creating great App Shortcuts. We’ll also show you how to build great visual and voice experiences and extend to other Apple devices like Apple Watch and HomePod."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10006-Build-robust-and-resumable-file-transfers":{"type":"topic","abstract":[{"type":"text","text":"Find out how URLSession can help your apps transfer large files and recover from network interruptions. Learn how to pause and resume HTTP file transfers and support resumable uploads, and explore best practices for using URLSession to transfer files even when your app is suspended in the background."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10006-Build-robust-and-resumable-file-transfers","url":"\/documentation\/wwdcnotes\/wwdc23-10006-build-robust-and-resumable-file-transfers","title":"Build robust and resumable file transfers","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10115-Design-with-SwiftUI":{"role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Discover how SwiftUI can help you quickly iterate and explore design ideas. Learn from Apple designers as they share how working with SwiftUI influenced the design of the Maps app in watchOS 10 and other elements of their work, and find out how you can incorporate these workflows in your own process."}],"url":"\/documentation\/wwdcnotes\/wwdc23-10115-design-with-swiftui","kind":"article","title":"Design with SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10115-Design-with-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10057-Unleash-the-UIKit-trait-system":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10057-Unleash-the-UIKit-trait-system","kind":"article","title":"Unleash the UIKit trait system","url":"\/documentation\/wwdcnotes\/wwdc23-10057-unleash-the-uikit-trait-system","type":"topic","abstract":[{"type":"text","text":"Discover powerful enhancements to the trait system in UIKit. Learn how you can define custom traits to add your own data to UITraitCollection, modify the data propagated to view controllers and views with trait override APIs, and adopt APIs to improve flexibility and performance. We’ll also show you how to bridge UIKit traits with SwiftUI environment keys to seamlessly access data from both UIKit and SwiftUI components in your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10101-Customize-ondevice-speech-recognition":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10101-Customize-ondevice-speech-recognition","title":"Customize on-device speech recognition","url":"\/documentation\/wwdcnotes\/wwdc23-10101-customize-ondevice-speech-recognition","abstract":[{"text":"Find out how you can improve on-device speech recognition in your app by customizing the underlying model with additional vocabulary. We’ll share how speech recognition works on device and show you how to boost specific words and phrases for more predictable transcription. Learn how you can provide specific pronunciations for words and use template support to quickly generate a full set of custom phrases — all at runtime.","type":"text"}],"role":"sampleCode","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10258-Animate-symbols-in-your-app":{"type":"topic","role":"sampleCode","title":"Animate symbols in your app","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10258-animate-symbols-in-your-app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10258-Animate-symbols-in-your-app","abstract":[{"text":"Bring delight to your app with animated symbols. Explore the new Symbols framework, which features a unified API to create and configure symbol effects. Learn how SwiftUI, AppKit, and UIKit make it easy to animate symbols in user interfaces. Discover tips and tricks to seamlessly integrate the new animations alongside other app content. To get the most from this session, we recommend first watching “What’s new in SF Symbols 5.”","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10137-Support-Cinematic-mode-videos-in-your-app":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10137-Support-Cinematic-mode-videos-in-your-app","kind":"article","title":"Support Cinematic mode videos in your app","url":"\/documentation\/wwdcnotes\/wwdc23-10137-support-cinematic-mode-videos-in-your-app","type":"topic","abstract":[{"type":"text","text":"Discover how the Cinematic Camera API helps your app work with Cinematic mode videos captured in the Camera app. We’ll share the fundamentals — including Decision layers — that make up Cinematic mode video, show you how to access and update Decisions in your app, and help you save and load those changes."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10157-Wind-your-way-through-advanced-animations-in-SwiftUI":{"title":"Wind your way through advanced animations in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10157-wind-your-way-through-advanced-animations-in-swiftui","kind":"article","abstract":[{"type":"text","text":"Discover how you can take animation to the next level with the latest updates to SwiftUI. Join us as we wind our way through animation and build out multiple steps, use keyframes to add coordinated multi-track animated effects, and combine APIs in unique ways to make your app spring to life."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10157-Wind-your-way-through-advanced-animations-in-SwiftUI","type":"topic","role":"sampleCode"},"WWDC23-10166-init9":{"identifier":"WWDC23-10166-init9","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init9.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro9":{"identifier":"WWDC23-10166-macro9","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro9.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10128-Your-guide-to-Metal-ray-tracing":{"type":"topic","title":"Your guide to Metal ray tracing","url":"\/documentation\/wwdcnotes\/wwdc23-10128-your-guide-to-metal-ray-tracing","abstract":[{"text":"Discover how you can enhance the visual quality of your games and apps with Metal ray tracing. We’ll take you through the fundamentals of the Metal ray tracing API. Explore the latest enhancements and techniques that will enable you to create larger and more complex scenes, reduce memory usage and build times, and efficiently render visual content like hair and fur.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10128-Your-guide-to-Metal-ray-tracing","role":"sampleCode"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}]},"WWDC23-10166-macro12":{"identifier":"WWDC23-10166-macro12","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro12.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10125-Bring-your-game-to-Mac-Part-3-Render-with-Metal","kind":"article","title":"Bring your game to Mac, Part 3: Render with Metal","url":"\/documentation\/wwdcnotes\/wwdc23-10125-bring-your-game-to-mac-part-3-render-with-metal","type":"topic","abstract":[{"type":"text","text":"Discover how you can support Metal in your rendering code as we close out our three-part series on bringing your game to Mac. Once you’ve evaluated your existing Windows binary with the game porting toolkit and brought your HLSL shaders over to Metal, learn how you can optimally implement the features that high-end, modern games require. We’ll show you how to manage GPU resource bindings, residency, and synchronization. Find out how to optimize GPU commands submission, render rich visuals with MetalFX Upscaling, and more."}],"role":"sampleCode"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=650":{"titleInlineContent":[{"type":"text","text":"10:50 - Macro roles"}],"title":"10:50 - Macro roles","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650","type":"link"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=75":{"titleInlineContent":[{"type":"text","text":"1:15 - Overview"}],"title":"1:15 - Overview","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10103-Explore-enhancements-to-App-Intents":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10103-Explore-enhancements-to-App-Intents","kind":"article","title":"Explore enhancements to App Intents","url":"\/documentation\/wwdcnotes\/wwdc23-10103-explore-enhancements-to-app-intents","type":"topic","abstract":[{"type":"text","text":"Bring your widgets to life with App Intents! Explore the latest updates and learn how you can take advantage of dynamic options and user interactivity to build better experiences for your App Shortcuts. We’ll share how you can integrate with Apple Pay, structure your code more efficiently, and take your Shortcuts app integration to the next level."}],"role":"sampleCode"},"WWDC23-10166-macro11":{"identifier":"WWDC23-10166-macro11","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro11.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=310":{"titleInlineContent":[{"type":"text","text":"5:10 - Create a macro using Xcode’s macro template"}],"title":"5:10 - Create a macro using Xcode’s macro template","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10165-Whats-new-in-Xcode-15":{"title":"What’s new in Xcode 15","url":"\/documentation\/wwdcnotes\/wwdc23-10165-whats-new-in-xcode-15","role":"sampleCode","abstract":[{"text":"Discover the latest productivity and performance improvements in Xcode 15. Explore enhancements to code completion and Xcode Previews, learn about the test navigator and test report, and find out more about the streamlined distribution process. We’ll also highlight improved navigation, source control management, and debugging.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10165-Whats-new-in-Xcode-15","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10107-Embed-the-Photos-Picker-in-your-app":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10107-Embed-the-Photos-Picker-in-your-app","kind":"article","title":"Embed the Photos Picker in your app","url":"\/documentation\/wwdcnotes\/wwdc23-10107-embed-the-photos-picker-in-your-app","type":"topic","abstract":[{"type":"text","text":"Discover how you can simply, safely, and securely access the Photos Library in your app. Learn how to get started with the embedded picker and explore the options menu and HDR still image support. We’ll also show you how to take advantage of UI customization options to help the picker blend into your existing interface."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10091-Evolve-your-ARKit-app-for-spatial-experiences":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10091-Evolve-your-ARKit-app-for-spatial-experiences","abstract":[{"type":"text","text":"Discover how you can bring your app’s AR experience to visionOS. Learn how ARKit and RealityKit have evolved for spatial computing: We’ll highlight conceptual and API changes for those coming from iPadOS and iOS and guide you to sessions with more details to help you bring your AR experience to this platform."}],"url":"\/documentation\/wwdcnotes\/wwdc23-10091-evolve-your-arkit-app-for-spatial-experiences","title":"Evolve your ARKit app for spatial experiences","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10181-Support-HDR-images-in-your-app":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10181-Support-HDR-images-in-your-app","kind":"article","title":"Support HDR images in your app","url":"\/documentation\/wwdcnotes\/wwdc23-10181-support-hdr-images-in-your-app","type":"topic","abstract":[{"type":"text","text":"Learn how to identify, load, display, and create High Dynamic Range (HDR) still images in your app. Explore common HDR concepts and find out about the latest updates to the ISO specification. Learn how to identify and display HDR images with SwiftUI and UIKit, create them from ProRAW and RAW captures, and display them in CALayers. We’ll also take you through CoreGraphics support for ISO HDR and share best practices for HDR adoption."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10127-Optimize-GPU-renderers-with-Metal":{"role":"sampleCode","type":"topic","kind":"article","title":"Optimize GPU renderers with Metal","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10127-Optimize-GPU-renderers-with-Metal","url":"\/documentation\/wwdcnotes\/wwdc23-10127-optimize-gpu-renderers-with-metal","abstract":[{"text":"Discover how to optimize your GPU renderer using the latest Metal features and best practices. We’ll show you how to use function specialization and parallel shader compilation to maintain responsive authoring workflows and the fastest rendering speeds, and help you tune your compute shaders for optimal performance.","type":"text"}]},"WWDC23-10166-init13":{"identifier":"WWDC23-10166-init13","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init13.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10224-Simplify-distribution-in-Xcode-and-Xcode-Cloud":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10224-Simplify-distribution-in-Xcode-and-Xcode-Cloud","kind":"article","title":"Simplify distribution in Xcode and Xcode Cloud","url":"\/documentation\/wwdcnotes\/wwdc23-10224-simplify-distribution-in-xcode-and-xcode-cloud","type":"topic","abstract":[{"type":"text","text":"Discover how to share your app using Xcode’s streamlined distribution, which allows you to submit your app to TestFlight or the App Store with one click. We’ll also show you how to use Xcode Cloud to simplify your distribution process by automatically including notes for testers in TestFlight, and use post-action to automatically notarize your Mac apps."}],"role":"sampleCode"},"WWDC23-10166-macro16":{"identifier":"WWDC23-10166-macro16","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro16.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1812":{"titleInlineContent":[{"type":"text","text":"30:12 - Generalize SlopeSubset to a generic EnumSubset macro"}],"title":"30:12 - Generalize SlopeSubset to a generic EnumSubset macro","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10088-Create-immersive-Unity-apps":{"type":"topic","role":"sampleCode","title":"Create immersive Unity apps","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10088-create-immersive-unity-apps","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10088-Create-immersive-Unity-apps","abstract":[{"text":"Explore how you can use Unity to create engaging and immersive experiences for visionOS. We’ll share how Unity integrates seamlessly with Apple frameworks, take you through the tools you can use to build natively for the platform, and show you how volume cameras can bring your existing scenes into visionOS windows, volumes, and spaces.","type":"text"}]},"https://github.com/JohnBaer3":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","url":"https:\/\/github.com\/JohnBaer3","identifier":"https:\/\/github.com\/JohnBaer3","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10168-Generalize-APIs-with-parameter-packs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10168-Generalize-APIs-with-parameter-packs","kind":"article","title":"Generalize APIs with parameter packs","url":"\/documentation\/wwdcnotes\/wwdc23-10168-generalize-apis-with-parameter-packs","type":"topic","abstract":[{"type":"text","text":"Swift parameter packs are a powerful tool to expand what is possible in your generic code while also enabling you to simplify common generic patterns. We’ll show you how to abstract over types as well as the number of arguments in generic code and simplify common generic patterns to avoid overloads."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10110-Elevate-your-windowed-app-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10110-Elevate-your-windowed-app-for-spatial-computing","kind":"article","title":"Elevate your windowed app for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10110-elevate-your-windowed-app-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"Discover how you can bring your multiplatform SwiftUI app to visionOS and the Shared Space. We’ll show you how to add the visionOS destination to an existing app and view your app in the Simulator. Explore how your SwiftUI code automatically adapts to support the unique context and presentation of the visionOS platform. Learn how you can update custom views, improve your app’s UI, and add features and controls specific to this platform."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10161-Inspectors-in-SwiftUI-Discover-the-details":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10161-Inspectors-in-SwiftUI-Discover-the-details","kind":"article","title":"Inspectors in SwiftUI: Discover the details","url":"\/documentation\/wwdcnotes\/wwdc23-10161-inspectors-in-swiftui-discover-the-details","type":"topic","abstract":[{"type":"text","text":"Meet Inspectors — a structural API that can help bring a new level of detail to your apps. We’ll take you through the fundamentals of the API and show you how to adopt it. Learn about the latest updates to sheet presentation customizations and find out how you can combine the two to create perfect presentation experiences."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10072-Principles-of-spatial-design":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10072-principles-of-spatial-design","kind":"article","abstract":[{"type":"text","text":"Discover the fundamentals of spatial design. Learn how to design with depth, scale, windows, and immersion, and apply best practices for creating comfortable, human-centered experiences that transform reality. Find out how you can use these spatial design principles to extend your existing app or bring a new idea to life."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10072-Principles-of-spatial-design","title":"Principles of spatial design"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10075-Design-spatial-SharePlay-experiences":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10075-Design-spatial-SharePlay-experiences","abstract":[{"type":"text","text":"Explore the types of shared activities you can create in your visionOS apps and find out how your apps can use Spatial Persona templates to support meaningful interactions between people. Discover how to design your UI around a shared context, handle immersive content in a shared activity, and more."}],"url":"\/documentation\/wwdcnotes\/wwdc23-10075-design-spatial-shareplay-experiences","title":"Design spatial SharePlay experiences","role":"sampleCode"},"WWDC23-10166-macro7":{"identifier":"WWDC23-10166-macro7","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro7.jpg","traits":["1x","light"]}]},"WWDC23-10166-init11":{"identifier":"WWDC23-10166-init11","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init11.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10123-Bring-your-game-to-Mac-Part-1-Make-a-game-plan","kind":"article","title":"Bring your game to Mac, Part 1: Make a game plan","url":"\/documentation\/wwdcnotes\/wwdc23-10123-bring-your-game-to-mac-part-1-make-a-game-plan","type":"topic","abstract":[{"type":"text","text":"Bring modern, high-end games to Mac and iPad with the powerful features of Metal and Apple silicon. Discover the game porting toolkit and learn how it can help you evaluate your existing Windows game for graphics feature compatibility and performance. We’ll share best practices and technical resources for handling audio, input, and advanced display features."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10089-Discover-Metal-for-immersive-apps":{"url":"\/documentation\/wwdcnotes\/wwdc23-10089-discover-metal-for-immersive-apps","abstract":[{"type":"text","text":"Find out how you can use Metal to render fully immersive experiences for visionOS. We’ll show you how to set up a rendering session on the platform and create a basic render loop, and share how you can make your experience interactive by incorporating spatial input."}],"role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10089-Discover-Metal-for-immersive-apps","title":"Discover Metal for immersive apps"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10176-Lift-subjects-from-images-in-your-app":{"type":"topic","role":"sampleCode","title":"Lift subjects from images in your app","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10176-lift-subjects-from-images-in-your-app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10176-Lift-subjects-from-images-in-your-app","abstract":[{"text":"Discover how you can easily pull the subject of an image from its background in your apps. Learn how to lift the primary subject or to access the subject at a given point with VisionKit. We’ll also share how you can lift subjects using Vision and combine that with lower-level frameworks like Core Image to create fun image effects and more complex compositing pipelines.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10195-Model-your-schema-with-SwiftData":{"type":"topic","role":"sampleCode","title":"Model your schema with SwiftData","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10195-model-your-schema-with-swiftdata","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10195-Model-your-schema-with-SwiftData","abstract":[{"text":"Learn how to use schema macros and migration plans with SwiftData to build more complex features for your app. We’ll show you how to fine-tune your persistence with @Attribute and @Relationship options. Learn how to exclude properties from your data model with @Transient and migrate from one version of your schema to the next with ease.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10050-Optimize-machine-learning-for-Metal-apps":{"type":"topic","role":"sampleCode","title":"Optimize machine learning for Metal apps","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10050-optimize-machine-learning-for-metal-apps","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10050-Optimize-machine-learning-for-Metal-apps","abstract":[{"text":"Discover the latest enhancements to accelerated ML training in Metal. Find out about updates to PyTorch and TensorFlow, and learn about Metal acceleration for JAX. We’ll show you how MPS Graph can support faster ML inference when you use both the GPU and Apple Neural Engine, and share how the same API can rapidly integrate your Core ML and ONNX models.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10036-Build-accessible-apps-with-SwiftUI-and-UIKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10036-Build-accessible-apps-with-SwiftUI-and-UIKit","kind":"article","title":"Build accessible apps with SwiftUI and UIKit","url":"\/documentation\/wwdcnotes\/wwdc23-10036-build-accessible-apps-with-swiftui-and-uikit","type":"topic","abstract":[{"type":"text","text":"Discover how advancements in UI frameworks make it easier to build rich, accessible experiences. Find out how technologies like VoiceOver can better interact with your app’s interface through accessibility traits and actions. We’ll share the latest updates to SwiftUI that help you refine your accessibility experience and show you how to keep accessibility information up-to-date in your UIKit apps."}],"role":"sampleCode"},"WWDC23-10166-macro8":{"identifier":"WWDC23-10166-macro8","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro8.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10226-Debug-with-structured-logging":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10226-Debug-with-structured-logging","title":"Debug with structured logging","abstract":[{"text":"Discover the debug console in Xcode 15 and learn how you can improve your diagnostic experience through logging. Explore how you can navigate your logs easily and efficiently using advanced filtering and improved visualization. We’ll also show you how to use the dwim-print command to evaluate expressions in your code while debugging.","type":"text"}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10226-debug-with-structured-logging","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10160-Demystify-SwiftUI-performance":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance","kind":"article","title":"Demystify SwiftUI performance","url":"\/documentation\/wwdcnotes\/wwdc23-10160-demystify-swiftui-performance","type":"topic","abstract":[{"type":"text","text":"Learn how you can build a mental model for performance in SwiftUI and write faster, more efficient code. We’ll share some of the common causes behind performance issues and help you triage hangs and hitches in SwiftUI to create more responsive views in your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10238-Tune-up-your-AirPlay-audio-experience":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10238-Tune-up-your-AirPlay-audio-experience","title":"Tune up your AirPlay audio experience","abstract":[{"text":"Learn how you can upgrade your app’s AirPlay audio experience to be more robust and responsive. We’ll show you how to adopt enhanced audio buffering with AVQueuePlayer, explore alternatives when building a custom player in your app, and share best practices.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10238-tune-up-your-airplay-audio-experience","role":"sampleCode","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10153-Unlock-the-power-of-grammatical-agreement":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10153-Unlock-the-power-of-grammatical-agreement","kind":"article","title":"Unlock the power of grammatical agreement","url":"\/documentation\/wwdcnotes\/wwdc23-10153-unlock-the-power-of-grammatical-agreement","type":"topic","abstract":[{"type":"text","text":"Discover how you can use automatic grammatical agreement in your apps and games to create inclusive and more natural-sounding expressions. We’ll share best practices for working with Foundation, showcase examples in multiple languages, and demonstrate how to use these APIs to enhance the user experience for your apps."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10061-Verify-app-dependencies-with-digital-signatures":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10061-Verify-app-dependencies-with-digital-signatures","kind":"article","title":"Verify app dependencies with digital signatures","url":"\/documentation\/wwdcnotes\/wwdc23-10061-verify-app-dependencies-with-digital-signatures","type":"topic","abstract":[{"type":"text","text":"Discover how you can help secure your app’s dependencies. We’ll show you how Xcode can automatically verify any signed XCFrameworks you include within a project. Learn how code signatures work, the benefits they provide to help protect your software supply chain, and how SDK developers can sign their XCFrameworks to help keep your apps secure."}],"role":"sampleCode"},"WWDC23-10166-init8":{"identifier":"WWDC23-10166-init8","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init8.jpg","traits":["1x","light"]}]},"WWDC23-10166-docs":{"identifier":"WWDC23-10166-docs","alt":"Reading the swift syntax docs","type":"image","variants":[{"url":"\/images\/WWDC23-10166-docs.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10165":{"titleInlineContent":[{"type":"text","text":"What’s new in Xcode 15"}],"title":"What’s new in Xcode 15","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165","type":"link"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1217":{"titleInlineContent":[{"type":"text","text":"20:17 - Inspect the syntax tree structure in the debugger"}],"title":"20:17 - Inspect the syntax tree structure in the debugger","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217","type":"link"},"https://developer.apple.com/forums/tags/wwdc2023-10166":{"titleInlineContent":[{"type":"text","text":"Search the forums for tag wwdc2023-10166"}],"title":"Search the forums for tag wwdc2023-10166","url":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166","identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166","type":"link"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1475":{"titleInlineContent":[{"type":"text","text":"24:35 - Add a macro to an Xcode project"}],"title":"24:35 - Add a macro to an Xcode project","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10309-Design-widgets-for-the-Smart-Stack-on-Apple-Watch":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10309-Design-widgets-for-the-Smart-Stack-on-Apple-Watch","kind":"article","title":"Design widgets for the Smart Stack on Apple Watch","url":"\/documentation\/wwdcnotes\/wwdc23-10309-design-widgets-for-the-smart-stack-on-apple-watch","type":"topic","abstract":[{"type":"text","text":"Bring your widgets to watchOS with the new Smart Stack. We’ll show you how to use standard design layouts, color and iconography, and signal-based relevancy to ensure your app’s widgets are glanceable, distinctive and smart."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10070-Create-a-great-spatial-playback-experience":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10070-Create-a-great-spatial-playback-experience","kind":"article","title":"Create a great spatial playback experience","url":"\/documentation\/wwdcnotes\/wwdc23-10070-create-a-great-spatial-playback-experience","type":"topic","abstract":[{"type":"text","text":"Get ready to support video in your visionOS app! Take a tour of the frameworks and APIs that power video playback and learn how you can update your app to play 3D content. We’ll also share tips for customizing playback to create a more immersive watching experience."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10124-Bring-your-game-to-Mac-Part-2-Compile-your-shaders","kind":"article","title":"Bring your game to Mac, Part 2: Compile your shaders","url":"\/documentation\/wwdcnotes\/wwdc23-10124-bring-your-game-to-mac-part-2-compile-your-shaders","type":"topic","abstract":[{"type":"text","text":"Discover how the Metal shader converter streamlines the process of bringing your HLSL shaders to Metal as we continue our three-part series on bringing your game to Mac. Find out how to build a fast, end-to-end shader pipeline from DXIL that supports all shader stages and allows you to leverage the advanced features of Apple GPUs. We’ll also show you how to reduce app launch time and stutters by generating GPU binaries with the offline compiler."}],"role":"sampleCode"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=700":{"titleInlineContent":[{"type":"text","text":"11:40 - Write a SlopeSubset macro to define an enum subset"}],"title":"11:40 - Write a SlopeSubset macro to define an enum subset","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10185-Update-Live-Activities-with-push-notifications":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10185-Update-Live-Activities-with-push-notifications","kind":"article","title":"Update Live Activities with push notifications","url":"\/documentation\/wwdcnotes\/wwdc23-10185-update-live-activities-with-push-notifications","type":"topic","abstract":[{"type":"text","text":"Discover how you can remotely update Live Activities in your app when you push content through Apple Push Notification service (APNs). We’ll show you how to configure your first Live Activity push locally so you can quickly iterate on your implementation. Learn best practices for determining your push priority and configuring alerting updates, and explore how to further improve your Live Activities with relevance score and stale date."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction","kind":"article","title":"Improve Core ML integration with async prediction","url":"\/documentation\/wwdcnotes\/wwdc23-10049-improve-core-ml-integration-with-async-prediction","type":"topic","abstract":[{"type":"text","text":"Learn how to speed up machine learning features in your app with the latest Core ML execution engine improvements and find out how aggressive asset caching can help with inference and faster model loads. We’ll show you some of the latest options for async prediction and discuss considerations for balancing performance with overall memory usage to help you create a highly responsive app. Discover APIs to help you understand and maximize hardware utilization for your models."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10034-Create-accessible-spatial-experiences":{"url":"\/documentation\/wwdcnotes\/wwdc23-10034-create-accessible-spatial-experiences","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10034-Create-accessible-spatial-experiences","abstract":[{"type":"text","text":"Learn how you can make spatial computing apps that work well for everyone. Like all Apple platforms, visionOS is designed for accessibility: We’ll share how we’ve reimagined assistive technologies like VoiceOver and Pointer Control and designed features like Dwell Control to help people interact in the way that works best for them. Learn best practices for vision, motor, cognitive, and hearing accessibility and help everyone enjoy immersive experiences for visionOS."}],"title":"Create accessible spatial experiences","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10250-Prototype-with-Xcode-Playgrounds":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10250-Prototype-with-Xcode-Playgrounds","kind":"article","title":"Prototype with Xcode Playgrounds","url":"\/documentation\/wwdcnotes\/wwdc23-10250-prototype-with-xcode-playgrounds","type":"topic","abstract":[{"type":"text","text":"Speed up feature development by prototyping new code with Xcode Playgrounds, eliminating the need to keep rebuilding and relaunching your project to verify your changes. We’ll show you how using a playground in your project or package can help you try out your code in various scenarios and take a close look at the returned values, including complex structures and user interface elements, so you can quickly iterate on a feature before integrating it into your project."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10254-Do-more-with-Managed-Apple-IDs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10254-Do-more-with-Managed-Apple-IDs","kind":"article","title":"Do more with Managed Apple IDs","url":"\/documentation\/wwdcnotes\/wwdc23-10254-do-more-with-managed-apple-ids","type":"topic","abstract":[{"type":"text","text":"Explore the latest updates to Managed Apple IDs and learn how you can use them in your organization. Take advantage of additional apps and services available to Managed Apple IDs, discover the Account-Driven Device Enrollment flow, and find out how to use access management controls to limit the devices and Apple services that Managed Apple IDs can access. We’ll also show you how to federate with your identity provider to automate creation and sync with your directory."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10175-Fix-failures-faster-with-Xcode-test-reports":{"url":"\/documentation\/wwdcnotes\/wwdc23-10175-fix-failures-faster-with-xcode-test-reports","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10175-Fix-failures-faster-with-Xcode-test-reports","kind":"article","abstract":[{"type":"text","text":"Discover how you can find, debug, and fix test failures faster with the test report in Xcode and Xcode Cloud. Learn how Xcode identifies failure patterns to help you find the right place to start investigating. We’ll also show you how to use the UI automation explorer and video recordings to understand the events that led up to your UI test failure."}],"title":"Fix failures faster with Xcode test reports"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1625":{"titleInlineContent":[{"type":"text","text":"27:05 - Emit error messages from a macro"}],"title":"27:05 - Emit error messages from a macro","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625","type":"link"},"WWDC23-10166-macro2":{"identifier":"WWDC23-10166-macro2","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro2.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10081-Enhance-your-spatial-computing-app-with-RealityKit","kind":"article","title":"Enhance your spatial computing app with RealityKit","url":"\/documentation\/wwdcnotes\/wwdc23-10081-enhance-your-spatial-computing-app-with-realitykit","type":"topic","abstract":[{"type":"text","text":"Go beyond the window and learn how you can bring engaging and immersive 3D content to your apps with RealityKit. Discover how SwiftUI scenes work in tandem with RealityView and how you can embed your content into an entity hierarchy. We’ll also explore how you can blend virtual content and the real world using anchors, bring particle effects into your apps, add video content, and create more immersive experiences with portals."}],"role":"sampleCode"},"WWDC23-10166-example1":{"identifier":"WWDC23-10166-example1","alt":"Example of repetitive code","type":"image","variants":[{"url":"\/images\/WWDC23-10166-example1.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-111241-Explore-3D-body-pose-and-person-segmentation-in-Vision":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111241-Explore-3D-body-pose-and-person-segmentation-in-Vision","kind":"article","title":"Explore 3D body pose and person segmentation in Vision","url":"\/documentation\/wwdcnotes\/wwdc23-111241-explore-3d-body-pose-and-person-segmentation-in-vision","type":"topic","abstract":[{"type":"text","text":"Discover how to build person-centric features with Vision. Learn how to detect human body poses and measure individual joint locations in 3D space. We’ll also show you how to take advantage of person segmentation APIs to distinguish and segment up to four individuals in an image."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10094-Enhance-your-iPad-and-iPhone-apps-for-the-Shared-Space":{"type":"topic","role":"sampleCode","title":"Enhance your iPad and iPhone apps for the Shared Space","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10094-enhance-your-ipad-and-iphone-apps-for-the-shared-space","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10094-Enhance-your-iPad-and-iPhone-apps-for-the-Shared-Space","abstract":[{"text":"Get ready to enhance your iPad and iPhone apps for the Shared Space! We’ll show you how to optimize your experience to make it feel great on visionOS and explore Designed for iPad app interaction, visual treatments, and media.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10060-Get-started-with-privacy-manifests":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10060-Get-started-with-privacy-manifests","kind":"article","title":"Get started with privacy manifests","url":"\/documentation\/wwdcnotes\/wwdc23-10060-get-started-with-privacy-manifests","type":"topic","abstract":[{"type":"text","text":"Meet privacy manifests: a new tool that helps you accurately identify the privacy practices of your app’s dependencies. Find out how third-party SDK developers can use these manifests to share privacy practices for their frameworks. We’ll also share how Xcode can produce a full privacy report to help you more easily represent the privacy practices of all the code in your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10104-Integrate-your-media-app-with-HomePod":{"url":"\/documentation\/wwdcnotes\/wwdc23-10104-integrate-your-media-app-with-homepod","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10104-Integrate-your-media-app-with-HomePod","kind":"article","abstract":[{"type":"text","text":"Learn how people can interact with your media app directly from HomePod. We’ll show you how to add a media intent to your iPhone or iPad app and help people stream your content to a HomePod speaker over AirPlay simply by using their voice. Explore implementation details and get tips and best practices on how to create a great experience for music, audiobooks, podcasts, meditations, or other media types."}],"title":"Integrate your media app with HomePod"},"https://developer.apple.com/videos/play/wwdc2023/10149":{"titleInlineContent":[{"type":"text","text":"Discover Observation in SwiftUI"}],"title":"Discover Observation in SwiftUI","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10162-The-SwiftUI-cookbook-for-focus":{"kind":"article","abstract":[{"type":"text","text":"The SwiftUI team is back in the coding “kitchen” with powerful tools to shape your app’s focus experience. Join us and learn about the staple ingredients that support focus-driven interactions in your app. Discover focus interactions for custom views, find out about key-press handlers for keyboard input, and learn how to support movement and hierarchy with focus sections. We’ll also go through some tasty recipes for common focus patterns in your app."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10162-The-SwiftUI-cookbook-for-focus","url":"\/documentation\/wwdcnotes\/wwdc23-10162-the-swiftui-cookbook-for-focus","title":"The SwiftUI cookbook for focus","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems":{"type":"topic","role":"sampleCode","title":"Optimize CarPlay for vehicle systems","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10150-optimize-carplay-for-vehicle-systems","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems","abstract":[{"text":"Discover how you can integrate CarPlay into modern vehicle systems. We’ll show you how to adjust CarPlay for any high-resolution display — regardless of configuration or size. Learn how you can use CarPlay-supplied metadata and video streams to show information on additional displays, and find out how advances in wireless connectivity, audio, and video encoding can help prepare your vehicle system for the next generation of CarPlay.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"type":"topic","role":"collectionGroup","title":"WWDC23","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14, tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"SwiftData","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10080-Build-spatial-experiences-with-RealityKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10080-Build-spatial-experiences-with-RealityKit","kind":"article","title":"Build spatial experiences with RealityKit","url":"\/documentation\/wwdcnotes\/wwdc23-10080-build-spatial-experiences-with-realitykit","type":"topic","abstract":[{"type":"text","text":"Discover how RealityKit can bring your apps into a new dimension. Get started with RealityKit entities, components, and systems, and learn how you can add 3D models and effects to your app on visionOS. We’ll also take you through the RealityView API and demonstrate how to add 3D objects to windows, volumes, and spaces to make your apps more immersive. And we’ll explore combining RealityKit with spatial input, animation, and spatial audio."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10154-Build-an-app-with-SwiftData":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10154-Build-an-app-with-SwiftData","kind":"article","title":"Build an app with SwiftData","url":"\/documentation\/wwdcnotes\/wwdc23-10154-build-an-app-with-swiftdata","type":"topic","abstract":[{"type":"text","text":"Discover how SwiftData can help you persist data in your app. Code along with us as we bring SwiftData to a multi-platform SwiftUI app. Learn how to convert existing model classes into SwiftData models, set up the environment, reflect model layer changes in UI, and build document-based applications backed by SwiftData storage."}],"role":"sampleCode"},"WWDC23-10166-macro6":{"identifier":"WWDC23-10166-macro6","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro6.jpg","traits":["1x","light"]}]},"https://developer.apple.com/videos/play/wwdc2023/10167":{"titleInlineContent":[{"type":"text","text":"Expand on Swift macros"}],"title":"Expand on Swift macros","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10273-Work-with-Reality-Composer-Pro-content-in-Xcode":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10273-Work-with-Reality-Composer-Pro-content-in-Xcode","kind":"article","title":"Work with Reality Composer Pro content in Xcode","url":"\/documentation\/wwdcnotes\/wwdc23-10273-work-with-reality-composer-pro-content-in-xcode","type":"topic","abstract":[{"type":"text","text":"Learn how to bring content from Reality Composer Pro to life in Xcode. We’ll show you how to load 3D scenes into Xcode, integrate your content with your code, and add interactivity to your app. We’ll also share best practices and tips for using these tools together in your development workflow."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10203-Develop-your-first-immersive-app":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10203-Develop-your-first-immersive-app","kind":"article","title":"Develop your first immersive app","url":"\/documentation\/wwdcnotes\/wwdc23-10203-develop-your-first-immersive-app","type":"topic","abstract":[{"type":"text","text":"Find out how you can build immersive apps for visionOS using Xcode and Reality Composer Pro. We’ll show you how to get started with a new visionOS project, use Xcode Previews for your SwiftUI development, and take advantage of RealityKit and RealityView to render 3D content."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10042-Explore-Natural-Language-multilingual-models":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10042-Explore-Natural-Language-multilingual-models","kind":"article","title":"Explore Natural Language multilingual models","url":"\/documentation\/wwdcnotes\/wwdc23-10042-explore-natural-language-multilingual-models","type":"topic","abstract":[{"type":"text","text":"Learn how to create custom Natural Language models for text classification and word tagging using multilingual, transformer-based embeddings. We’ll show you how to train with less data and support up to 27 different languages across three scripts. Find out how to use these embeddings to fine-tune complex models trained in PyTorch and TensorFlow."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10233-Enhance-your-apps-audio-experience-with-AirPods":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10233-Enhance-your-apps-audio-experience-with-AirPods","kind":"article","title":"Enhance your app’s audio experience with AirPods","url":"\/documentation\/wwdcnotes\/wwdc23-10233-enhance-your-apps-audio-experience-with-airpods","type":"topic","abstract":[{"type":"text","text":"Discover how you can create transformative audio experiences in your app using AirPods. Learn how to incorporate AirPods Automatic Switching, use AVAudioApplication to support Mute Control, and take advantage of Spatial Audio to create immersive soundscapes in your app or game."}],"role":"sampleCode"},"WWDC23-10166-init5":{"identifier":"WWDC23-10166-init5","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init5.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10087-Build-spatial-SharePlay-experiences":{"type":"topic","abstract":[{"type":"text","text":"Discover how you can use the GroupActivities framework to build unique sharing and collaboration experiences for visionOS. We’ll introduce you to SharePlay on this platform, learn how to create experiences that make people feel present as if they were in the same space, and explore how immersive apps can respect shared context between participants."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10087-Build-spatial-SharePlay-experiences","url":"\/documentation\/wwdcnotes\/wwdc23-10087-build-spatial-shareplay-experiences","title":"Build spatial SharePlay experiences","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10196-Dive-deeper-into-SwiftData":{"url":"\/documentation\/wwdcnotes\/wwdc23-10196-dive-deeper-into-swiftdata","abstract":[{"type":"text","text":"Learn how you can harness the power of SwiftData in your app. Find out how ModelContext and ModelContainer work together to persist your app’s data. We’ll show you how to track and make your changes manually and use SwiftData at scale with FetchDescriptor, SortDescriptor, and enumerate."}],"role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10196-Dive-deeper-into-SwiftData","title":"Dive deeper into SwiftData"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10016-Build-custom-workouts-with-WorkoutKit":{"role":"sampleCode","type":"topic","kind":"article","title":"Build custom workouts with WorkoutKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10016-Build-custom-workouts-with-WorkoutKit","url":"\/documentation\/wwdcnotes\/wwdc23-10016-build-custom-workouts-with-workoutkit","abstract":[{"text":"WorkoutKit makes it easy to create, preview, and schedule planned workouts for the Workout app on Apple Watch. Learn how to build custom intervals, create alerts, and use the built-in preview UI to send your own workout routines to Apple Watch.","type":"text"}]},"WWDC23-10166-macro13":{"identifier":"WWDC23-10166-macro13","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro13.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10033-Extend-Speech-Synthesis-with-personal-and-custom-voices":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10033-Extend-Speech-Synthesis-with-personal-and-custom-voices","kind":"article","title":"Extend Speech Synthesis with personal and custom voices","url":"\/documentation\/wwdcnotes\/wwdc23-10033-extend-speech-synthesis-with-personal-and-custom-voices","type":"topic","abstract":[{"type":"text","text":"Bring the latest advancements in Speech Synthesis to your apps. Learn how you can integrate your custom speech synthesizer and voices into iOS and macOS. We’ll show you how SSML is used to generate expressive speech synthesis, and explore how Personal Voice can enable your augmentative and assistive communication app to speak on a person’s behalf in an authentic way."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10085-Discover-Quick-Look-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10085-Discover-Quick-Look-for-spatial-computing","kind":"article","title":"Discover Quick Look for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10085-discover-quick-look-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"Learn how to use Quick Look on visionOS to add powerful previews for 3D content, spatial images and videos, and much more. We’ll show you the different ways that the system presents these experiences, demonstrate how someone can drag and drop Quick Look content from an app or website to create a separate window with that content, and explore how you can present Quick Look directly within an app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10142-Explore-testing-inapp-purchases":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10142-Explore-testing-inapp-purchases","kind":"article","title":"Explore testing in-app purchases","url":"\/documentation\/wwdcnotes\/wwdc23-10142-explore-testing-inapp-purchases","type":"topic","abstract":[{"type":"text","text":"Learn how you can test in-app purchases throughout development with StoreKit Testing in Xcode, App Store sandbox, and TestFlight. Explore how each tool functions and how you can combine them to build the right workflow for testing your apps and games. We’ll also share a sneak preview of how you can test Family Sharing for in-app purchases & subscriptions in the App Store sandbox."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10193-Design-Shortcuts-for-Spotlight":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10193-Design-Shortcuts-for-Spotlight","kind":"article","title":"Design Shortcuts for Spotlight","url":"\/documentation\/wwdcnotes\/wwdc23-10193-design-shortcuts-for-spotlight","type":"topic","abstract":[{"type":"text","text":"Learn about the latest updates to the visual language of App Shortcuts and find out how to design your shortcut to appear as a top hit in Spotlight. We’ll share how shortcuts can appear on iOS or iPadOS, and show you how to customize the visual appearance of a shortcut, personalize its order, select its correct behavior, and increase discoverability."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10090-Run-your-iPad-and-iPhone-apps-in-the-Shared-Space":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10090-Run-your-iPad-and-iPhone-apps-in-the-Shared-Space","kind":"article","title":"Run your iPad and iPhone apps in the Shared Space","url":"\/documentation\/wwdcnotes\/wwdc23-10090-run-your-ipad-and-iphone-apps-in-the-shared-space","type":"topic","abstract":[{"type":"text","text":"Discover how you can run your existing iPad and iPhone apps on Vision Pro. Learn how iPadOS and iOS apps operate on this platform, find out about the Designed for iPad experience, and explore the paths available for enhancing your app experience on visionOS."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10073-Design-for-spatial-input":{"type":"topic","role":"sampleCode","abstract":[{"text":"Learn how to design great interactions for eyes and hands. We’ll share the design principles for spatial input, explore best practices around input methods, and help you create spatial experiences that are comfortable, intuitive, and satisfying.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10073-design-for-spatial-input","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10073-Design-for-spatial-input","title":"Design for spatial input"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10202-Explore-materials-in-Reality-Composer-Pro":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10202-Explore-materials-in-Reality-Composer-Pro","kind":"article","title":"Explore materials in Reality Composer Pro","url":"\/documentation\/wwdcnotes\/wwdc23-10202-explore-materials-in-reality-composer-pro","type":"topic","abstract":[{"type":"text","text":"Learn how Reality Composer Pro can help you alter the appearance of your 3D objects using RealityKit materials. We’ll introduce you to MaterialX and physically-based (PBR) shaders, show you how to design dynamic materials using the shader graph editor, and explore adding custom inputs to a material so that you can control it in your visionOS app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10266-Protect-your-Mac-app-with-environment-constraints":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10266-Protect-your-Mac-app-with-environment-constraints","kind":"article","title":"Protect your Mac app with environment constraints","url":"\/documentation\/wwdcnotes\/wwdc23-10266-protect-your-mac-app-with-environment-constraints","type":"topic","abstract":[{"type":"text","text":"Learn how to improve the security of your Mac app by adopting environment constraints. We’ll show you how to set limits on how processes are launched, make sure your Launch Agents and Launch Daemons aren’t tampered with, and prevent unwanted code from running in your address space."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10248-Analyze-hangs-with-Instruments":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","kind":"article","title":"Analyze hangs with Instruments","url":"\/documentation\/wwdcnotes\/wwdc23-10248-analyze-hangs-with-instruments","type":"topic","abstract":[{"type":"text","text":"User interface elements often mimic real-world interactions, including real-time responses. Apps with a noticeable delay in user interaction — a hang — can break that illusion and create frustration. We’ll show you how to use Instruments to analyze, understand, and fix hangs in your apps on all Apple platforms. Discover how you can efficiently navigate an Instruments trace document, interpret trace data, and record additional profiling data to better understand your specific hang."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10229-Make-features-discoverable-with-TipKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10229-Make-features-discoverable-with-TipKit","kind":"article","title":"Make features discoverable with TipKit","url":"\/documentation\/wwdcnotes\/wwdc23-10229-make-features-discoverable-with-tipkit","type":"topic","abstract":[{"type":"text","text":"Teach people how to use your app with TipKit! Learn how you can create effective educational moments through tips. We’ll share how you can build eligibility rules to reach the ideal audience, control tip frequency, and strategies for testing to ensure successful interactions."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10051-Create-a-great-ShazamKit-experience":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10051-Create-a-great-ShazamKit-experience","kind":"article","title":"Create a great ShazamKit experience","url":"\/documentation\/wwdcnotes\/wwdc23-10051-create-a-great-shazamkit-experience","type":"topic","abstract":[{"type":"text","text":"Discover how your app can offer a great audio matching experience with the latest updates to ShazamKit. We’ll take you through matching features, updates to audio recognition, and interactions with the Shazam library. Learn tips and best practices for using ShazamKit in your audio apps."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10052-Discover-Calendar-and-EventKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10052-Discover-Calendar-and-EventKit","role":"sampleCode","title":"Discover Calendar and EventKit","url":"\/documentation\/wwdcnotes\/wwdc23-10052-discover-calendar-and-eventkit","abstract":[{"type":"text","text":"Discover how you can bring Calendar into your app and help people better manage their time. Find out how to create new events from your app, fetch events, and implement a virtual conference extension. We’ll also take you through some of the changes to calendar access levels that help your app stay connected without compromising the privacy of someone’s calendar data."}],"kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10271-Explore-immersive-sound-design":{"url":"\/documentation\/wwdcnotes\/wwdc23-10271-explore-immersive-sound-design","abstract":[{"type":"text","text":"Discover how you can use sound to enhance the experience of your visionOS apps and games. Learn how Apple designers select sounds and build soundscapes to create textural, immersive experiences. We’ll share how you can enrich basic interactions in your app with sound when you place audio cues spatially, vary repetitive sounds, and build moments of sonic delight into your app."}],"role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10271-Explore-immersive-sound-design","title":"Explore immersive sound design","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10155-Discover-String-Catalogs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10155-Discover-String-Catalogs","kind":"article","title":"Discover String Catalogs","url":"\/documentation\/wwdcnotes\/wwdc23-10155-discover-string-catalogs","type":"topic","abstract":[{"type":"text","text":"Discover how Xcode 15 makes it easy to localize your app by managing all of your strings in one place. We’ll show you how to extract, edit, export, and build strings in your project using String Catalogs. We’ll also share how you can adopt String Catalogs in existing projects at your own pace by choosing which files to migrate."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10028-Bring-widgets-to-life":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10028-Bring-widgets-to-life","kind":"article","title":"Bring widgets to life","url":"\/documentation\/wwdcnotes\/wwdc23-10028-bring-widgets-to-life","type":"topic","abstract":[{"type":"text","text":"Learn how to make animated and interactive widgets for your apps and games. We’ll show you how to tweak animations for entry transitions and add interactivity using SwiftUI Button and Toggle so that you can create powerful moments right from the Home Screen and Lock Screen."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10278-Create-practical-workflows-in-Xcode-Cloud":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10278-Create-practical-workflows-in-Xcode-Cloud","kind":"article","title":"Create practical workflows in Xcode Cloud","url":"\/documentation\/wwdcnotes\/wwdc23-10278-create-practical-workflows-in-xcode-cloud","type":"topic","abstract":[{"type":"text","text":"Learn how Xcode Cloud can help teams of all shapes and sizes in their development process. We’ll share different ways to configure actions to help you create simple yet powerful workflows, and show you how to extend Xcode Cloud when you integrate with additional tools."}],"role":"sampleCode"},"WWDC23-10166-macro1":{"identifier":"WWDC23-10166-macro1","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro1.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro3":{"identifier":"WWDC23-10166-macro3","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro3.jpg","traits":["1x","light"]}]},"WWDC23-10166-init":{"identifier":"WWDC23-10166-init","alt":"creating init","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro15":{"identifier":"WWDC23-10166-macro15","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro15.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro14":{"identifier":"WWDC23-10166-macro14","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro14.jpg","traits":["1x","light"]}]},"https://":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","url":"https:\/\/","identifier":"https:\/\/","type":"link"},"https://github.com/multitudes":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","url":"https:\/\/github.com\/multitudes","identifier":"https:\/\/github.com\/multitudes","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10188-Sync-to-iCloud-with-CKSyncEngine":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10188-Sync-to-iCloud-with-CKSyncEngine","kind":"article","title":"Sync to iCloud with CKSyncEngine","url":"\/documentation\/wwdcnotes\/wwdc23-10188-sync-to-icloud-with-cksyncengine","type":"topic","abstract":[{"type":"text","text":"Discover how CKSyncEngine can help you sync people’s CloudKit data to iCloud. Learn how you can reduce the amount of code in your app when you let the system handle scheduling for your sync operations. We’ll share how you can automatically benefit from enhanced performance as CloudKit evolves, explore testing for your sync implementation, and more."}],"role":"sampleCode"},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"link"},"https://developer.apple.com/forums/create/question?&tag1=235&tag2=662030":{"titleInlineContent":[{"type":"text","text":"Have a question? Ask with tag wwdc2023-10166"}],"title":"Have a question? Ask with tag wwdc2023-10166","url":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030","identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030","type":"link"},"WWDC23-10166-init3":{"identifier":"WWDC23-10166-init3","alt":"creating init","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init3.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10078-Design-considerations-for-vision-and-motion":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10078-Design-considerations-for-vision-and-motion","kind":"article","title":"Design considerations for vision and motion","url":"\/documentation\/wwdcnotes\/wwdc23-10078-design-considerations-for-vision-and-motion","type":"topic","abstract":[{"type":"text","text":"Learn how to design engaging immersive experiences for visionOS that respect the limitations of human vision and motion perception. We’ll show you how you can use depth cues, contrast, focus, and motion to keep people comfortable as they enjoy your apps and games."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10029-Build-widgets-for-the-Smart-Stack-on-Apple-Watch":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10029-Build-widgets-for-the-Smart-Stack-on-Apple-Watch","kind":"article","title":"Build widgets for the Smart Stack on Apple Watch","url":"\/documentation\/wwdcnotes\/wwdc23-10029-build-widgets-for-the-smart-stack-on-apple-watch","type":"topic","abstract":[{"type":"text","text":"Follow along as we build a widget for the Smart Stack on watchOS 10 using the latest SwiftUI and WidgetKit APIs. Learn tips, techniques, and best practices for creating widgets that show relevant information on Apple Watch."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10045-Detect-animal-poses-in-Vision":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10045-Detect-animal-poses-in-Vision","kind":"article","title":"Detect animal poses in Vision","url":"\/documentation\/wwdcnotes\/wwdc23-10045-detect-animal-poses-in-vision","type":"topic","abstract":[{"type":"text","text":"Go beyond detecting cats and dogs in images. We’ll show you how to use Vision to detect the individual joints and poses of these animals as well — all in real time — and share how you can enable exciting features like animal tracking for a camera app, creative embellishment on an animal photo, and more. We’ll also explore other important enhancements to Vision and share best practices."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10093-Bring-your-Unity-VR-app-to-a-fully-immersive-space":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10093-Bring-your-Unity-VR-app-to-a-fully-immersive-space","kind":"article","title":"Bring your Unity VR app to a fully immersive space","url":"\/documentation\/wwdcnotes\/wwdc23-10093-bring-your-unity-vr-app-to-a-fully-immersive-space","type":"topic","abstract":[{"type":"text","text":"Discover how you can bring your existing Unity VR apps and games to visionOS. We’ll explore workflows that can help you get started and show you how to build for eyes and hands in your apps and games with the Unity Input System. Learn about Unity’s XR Interaction Toolkit, tips for foveated rendering, and best practices."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10252-Build-programmatic-UI-with-Xcode-Previews":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10252-Build-programmatic-UI-with-Xcode-Previews","kind":"article","title":"Build programmatic UI with Xcode Previews","url":"\/documentation\/wwdcnotes\/wwdc23-10252-build-programmatic-ui-with-xcode-previews","type":"topic","abstract":[{"type":"text","text":"Learn how you can use the #Preview macro on Xcode 15 to quickly iterate on your UI code written in SwiftUI, UIKit, or AppKit. Explore a collage of unique workflows for interacting with views right in the canvas, find out how to view multiple variations of UI simultaneously, and discover how you can travel through your widget’s timeline in seconds to test the transitions between entries. We’ll also show you how to add previews to libraries, provide sample assets, and preview your views in your physical devices to leverage their capabilities and existing data."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10058-Whats-new-with-text-and-text-interactions":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10058-Whats-new-with-text-and-text-interactions","abstract":[{"type":"text","text":"Text is an absolutely critical component of every app. Discover the latest features and enhancements for creating rich text experiences on Apple platforms. We’ll show you how to take advantage of common text elements and create entirely custom interactions for your app. Learn about updates to dictation, text loupe, and text selection, and explore improvements to text clipping, line wrapping, and hyphenation."}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10058-whats-new-with-text-and-text-interactions","type":"topic","kind":"article","title":"What’s new with text and text interactions"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10263-Deploy-passkeys-at-work":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10263-Deploy-passkeys-at-work","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10263-deploy-passkeys-at-work","abstract":[{"type":"text","text":"Discover how you can take advantage of passkeys in managed environments at work. We’ll explore how passkeys can work well in enterprise environments through Managed Apple ID support for iCloud Keychain. We’ll also share how administrators can manage passkeys for specific devices using Access Management controls in Apple Business Manager and Apple School Manager."}],"role":"sampleCode","title":"Deploy passkeys at work"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10164-Whats-new-in-Swift":{"title":"What’s new in Swift","url":"\/documentation\/wwdcnotes\/wwdc23-10164-whats-new-in-swift","role":"sampleCode","abstract":[{"text":"Join us for an update on Swift. We’ll show you how APIs are becoming more extensible and expressive with features like parameter packs and macros. We’ll also take you through improvements to interoperability and share how we’re expanding Swift’s performance and safety benefits everywhere from Foundation to large-scale distributed programs on the server.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10037-Explore-pie-charts-and-interactivity-in-Swift-Charts":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10037-Explore-pie-charts-and-interactivity-in-Swift-Charts","kind":"article","title":"Explore pie charts and interactivity in Swift Charts","url":"\/documentation\/wwdcnotes\/wwdc23-10037-explore-pie-charts-and-interactivity-in-swift-charts","type":"topic","abstract":[{"type":"text","text":"Swift Charts has come full circle: Get ready to bake up pie and donut charts in your app with the latest improvements to the framework. Learn how to make your charts scrollable, explore the chart selection API for revealing additional details in your data, and find out how enabling additional interactivity can make your charts even more delightful."}],"role":"sampleCode"},"https://avatars.githubusercontent.com/u/29355828?v=4":{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/29355828?v=4","alt":"Profile image of laurent b","type":"image","variants":[{"url":"https:\/\/avatars.githubusercontent.com\/u\/29355828?v=4","traits":["1x","light"]}]},"https://x.com/wrmultitudes":{"titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"title":"X\/Twitter","url":"https:\/\/x.com\/wrmultitudes","identifier":"https:\/\/x.com\/wrmultitudes","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10086-Explore-the-USD-ecosystem":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10086-Explore-the-USD-ecosystem","kind":"article","title":"Explore the USD ecosystem","url":"\/documentation\/wwdcnotes\/wwdc23-10086-explore-the-usd-ecosystem","type":"topic","abstract":[{"type":"text","text":"Discover the latest updates to Universal Scene Description (USD) on Apple platforms and learn how you can deliver great 3D content for your apps, games, and websites. Get to know USD for visionOS, explore MaterialX shaders and color management, and find out about some of the other improvements to the USD ecosystem."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10257-Create-animated-symbols":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10257-Create-animated-symbols","title":"Create animated symbols","abstract":[{"text":"Discover animation presets and learn how to use them with SF Symbols and custom symbols. We’ll show you how to experiment with different options and configurations to find the perfect animation for your app. Learn how to update custom symbols for animation using annotation features, find out how to modify your custom symbols with symbol components, and explore the redesigned export process to help keep symbols looking great on all platforms.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10257-create-animated-symbols","role":"sampleCode","kind":"article","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10244-Create-rich-documentation-with-SwiftDocC":{"role":"sampleCode","type":"topic","kind":"article","title":"Create rich documentation with Swift-DocC","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10244-Create-rich-documentation-with-SwiftDocC","url":"\/documentation\/wwdcnotes\/wwdc23-10244-create-rich-documentation-with-swiftdocc","abstract":[{"text":"Learn how you can take advantage of the latest features in Swift-DocC to create rich and detailed documentation for your app or framework. We’ll show you how to use the Xcode 15 Documentation Preview editor to efficiently iterate on your existing project’s documentation, and explore expanded authoring capabilities like grid-based layouts, video support, and custom themes.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10100-Optimize-app-power-and-performance-for-spatial-computing":{"type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10100-optimize-app-power-and-performance-for-spatial-computing","abstract":[{"text":"Learn how you can create powerful apps and games for visionOS by optimizing for performance and efficiency. We’ll cover the unique power characteristics of the platform, explore building a performance plan, and share some of the tools and strategies to test and optimize your apps.","type":"text"}],"title":"Optimize app power and performance for spatial computing","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10100-Optimize-app-power-and-performance-for-spatial-computing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10105-Create-a-more-responsive-camera-experience":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10105-Create-a-more-responsive-camera-experience","kind":"article","title":"Create a more responsive camera experience","url":"\/documentation\/wwdcnotes\/wwdc23-10105-create-a-more-responsive-camera-experience","type":"topic","abstract":[{"type":"text","text":"Discover how AVCapture and PhotoKit can help you create more responsive and delightful apps. Learn about the camera capture process and find out how deferred photo processing can help create the best quality photo. We’ll show you how zero shutter lag uses time travel to capture the perfect action photo, dive into building a responsive capture pipeline, and share how you can adopt the Video Effects API to recognize pre-defined gestures that trigger real-time video effects."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10275-Explore-AirPlay-with-interstitials":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10275-Explore-AirPlay-with-interstitials","kind":"article","title":"Explore AirPlay with interstitials","url":"\/documentation\/wwdcnotes\/wwdc23-10275-explore-airplay-with-interstitials","type":"topic","abstract":[{"type":"text","text":"Learn how you can use HLS Interstitials with AirPlay to create seamless transitions for your video content between advertisements. We’ll share best practices and tips for creating a great experience when sharing content from Apple devices to popular smart TVs."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10239-Add-SharePlay-to-your-app":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10239-Add-SharePlay-to-your-app","kind":"article","title":"Add SharePlay to your app","url":"\/documentation\/wwdcnotes\/wwdc23-10239-add-shareplay-to-your-app","type":"topic","abstract":[{"type":"text","text":"Discover how your app can take advantage of SharePlay to turn any activity into a shareable experience with friends! We’ll share the latest updates to SharePlay, explore the benefits of creating shared activities, dive into some exciting use cases, and take you through best practices to create engaging and fun moments of connection in your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression","kind":"article","title":"Use Core ML Tools for machine learning model compression","url":"\/documentation\/wwdcnotes\/wwdc23-10047-use-core-ml-tools-for-machine-learning-model-compression","type":"topic","abstract":[{"type":"text","text":"Discover how to reduce the footprint of machine learning models in your app with Core ML Tools. Learn how to use techniques like palettization, pruning, and quantization to dramatically reduce model size while still achieving great accuracy. Explore comparisons between compression during the training stages and on fully trained models, and learn how compressed models can run even faster when your app takes full advantage of the Apple Neural Engine."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10138-Design-and-build-apps-for-watchOS-10":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10138-Design-and-build-apps-for-watchOS-10","kind":"article","title":"Design and build apps for watchOS 10","url":"\/documentation\/wwdcnotes\/wwdc23-10138-design-and-build-apps-for-watchos-10","type":"topic","abstract":[{"type":"text","text":"Dive into the details of watchOS design principles and learn how to apply them in your app using SwiftUI. We’ll show you how to build an app for the redesigned user interface to surface timely information, communicate focused content at a glance, and make navigation consistent and predictable."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10095-Explore-rendering-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10095-Explore-rendering-for-spatial-computing","kind":"article","title":"Explore rendering for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10095-explore-rendering-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"Find out how you can take control of RealityKit rendering to improve the look and feel of your apps and games on visionOS. Discover how you can customize lighting, add grounding shadows, and control tone mapping for your content. We’ll also go over best practices for two key treatments on the platform: rasterization rate maps and dynamic content scaling."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10096-Build-great-games-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10096-Build-great-games-for-spatial-computing","kind":"article","title":"Build great games for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10096-build-great-games-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"Find out how you can develop great gaming experiences for visionOS. We’ll share some of the key building blocks that help you create games for this platform, explore how your experiences can fluidly move between levels of immersion, and provide a roadmap for exploring ARKit, RealityKit, Reality Composer Pro, Unity, Metal, and Compositor."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10113-Take-SwiftUI-to-the-next-dimension":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10113-Take-SwiftUI-to-the-next-dimension","kind":"article","title":"Take SwiftUI to the next dimension","url":"\/documentation\/wwdcnotes\/wwdc23-10113-take-swiftui-to-the-next-dimension","type":"topic","abstract":[{"type":"text","text":"Get ready to add depth and dimension to your visionOS apps. Find out how to bring three-dimensional objects to your app using volumes, get to know the Model 3D API, and learn how to position and animate content. We’ll also show you how to use UI attachments in RealityView and support gestures in your content."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10002-Ready-set-relay-Protect-app-traffic-with-network-relays":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10002-Ready-set-relay-Protect-app-traffic-with-network-relays","kind":"article","title":"Ready, set, relay: Protect app traffic with network relays","url":"\/documentation\/wwdcnotes\/wwdc23-10002-ready-set-relay-protect-app-traffic-with-network-relays","type":"topic","abstract":[{"type":"text","text":"Learn how relays can make your app’s network traffic more private and secure without the overhead of a VPN. We’ll show you how to integrate relay servers in your own app and explore how enterprise networks can use relays to securely access internal resources."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10189-Migrate-to-SwiftData":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10189-Migrate-to-SwiftData","kind":"article","title":"Migrate to SwiftData","url":"\/documentation\/wwdcnotes\/wwdc23-10189-migrate-to-swiftdata","type":"topic","abstract":[{"type":"text","text":"Discover how you can start using SwiftData in your apps. We’ll show you how to use Xcode to generate model classes from your existing Core Data object models, use SwiftData alongside your previous implementation, or even completely replace your existing solution."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10122-Explore-media-formats-for-the-web":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10122-Explore-media-formats-for-the-web","kind":"article","title":"Explore media formats for the web","url":"\/documentation\/wwdcnotes\/wwdc23-10122-explore-media-formats-for-the-web","type":"topic","abstract":[{"type":"text","text":"Learn about the latest image formats and video technologies supported in Safari 17. Discover how you can use JPEG XL, AVIF, and HEIC in your websites and experiences and learn how they differ from previous formats. We’ll also show you how the Managed Media Source API draws less power than Media Source Extensions (MSE) and explore how you can use it to more efficiently manage streaming video over 5G."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10012-Explore-App-Store-Connect-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10012-Explore-App-Store-Connect-for-spatial-computing","kind":"article","title":"Explore App Store Connect for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10012-explore-app-store-connect-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"App Store Connect provides the tools you need to test, submit, and manage your visionOS apps on the App Store. Explore basics and best practices for deploying your first spatial computing app, adding support for visionOS to an existing app, and managing compatibility. We’ll also show you how TestFlight for visionOS can help you test your apps and collect valuable feedback as you iterate."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10304-Integrate-with-motorized-iPhone-stands-using-DockKit":{"url":"\/documentation\/wwdcnotes\/wwdc23-10304-integrate-with-motorized-iphone-stands-using-dockkit","abstract":[{"type":"text","text":"Discover how you can create incredible photo and video experiences in your camera app when integrating with DockKit-compatible motorized stands. We’ll show how your app can automatically track subjects in live video across a 360-degree field of view, take direct control of the stand to customize framing, directly control the motors, and provide your own inference model for tracking other objects. Finally, we’ll demonstrate how to create a sense of emotion through dynamic device animations."}],"role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10304-Integrate-with-motorized-iPhone-stands-using-DockKit","title":"Integrate with motorized iPhone stands using DockKit"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10007-Create-seamless-experiences-with-Virtualization":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Discover the latest updates to the Virtualization framework. We’ll show you how to configure a virtual machine (VM) to automatically resize its display, take you through saving and restoring a running VM, and explore storage and performance options for Virtualization apps running on the desktop or in the data center."}],"title":"Create seamless experiences with Virtualization","url":"\/documentation\/wwdcnotes\/wwdc23-10007-create-seamless-experiences-with-virtualization","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10007-Create-seamless-experiences-with-Virtualization","role":"sampleCode"},"https://avatars.githubusercontent.com/u/44718879?v=4":{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/44718879?v=4","alt":"Profile image of John Baer","type":"image","variants":[{"url":"https:\/\/avatars.githubusercontent.com\/u\/44718879?v=4","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10158-Animate-with-springs":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10158-Animate-with-springs","kind":"article","title":"Animate with springs","url":"\/documentation\/wwdcnotes\/wwdc23-10158-animate-with-springs","type":"topic","abstract":[{"type":"text","text":"Discover how you can bring life to your app with animation! We’ll show you how to create amazing animations when you take advantage of springs and help you learn how to use them in your app."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10281-Keep-up-with-the-keyboard":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10281-Keep-up-with-the-keyboard","kind":"article","title":"Keep up with the keyboard","url":"\/documentation\/wwdcnotes\/wwdc23-10281-keep-up-with-the-keyboard","type":"topic","abstract":[{"type":"text","text":"Each year, the keyboard evolves to support an increasing range of languages, sizes, and features. Discover how you can design your app to keep up with the keyboard, regardless of how it appears on a device. We’ll show you how to create frictionless text entry and share important architectural changes to help you understand how the keyboard works within the system."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10111-Go-beyond-the-window-with-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10111-Go-beyond-the-window-with-SwiftUI","kind":"article","title":"Go beyond the window with SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10111-go-beyond-the-window-with-swiftui","type":"topic","abstract":[{"type":"text","text":"Get ready to launch into space — a new SwiftUI scene type that can help you make great immersive experiences for visionOS. We’ll show you how to create a new scene with ImmersiveSpace, place 3D content, and integrate RealityView. Explore how you can use the immersionStyle scene modifier to increase the level of immersion in an app and learn best practices for managing spaces, adding virtual hands with ARKit, adding support for SharePlay, and building an “out of this world” experience!"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10031-Update-your-app-for-watchOS-10":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10031-Update-your-app-for-watchOS-10","kind":"article","title":"Update your app for watchOS 10","url":"\/documentation\/wwdcnotes\/wwdc23-10031-update-your-app-for-watchos-10","type":"topic","abstract":[{"type":"text","text":"Join us as we update an Apple Watch app to take advantage of the latest features in watchOS 10. In this code-along, we’ll show you how to use the latest SwiftUI APIs to maximize glanceability and reorient app navigation around the Digital Crown."}],"role":"sampleCode"},"https://developer.apple.com/videos/play/wwdc2023/10164":{"titleInlineContent":[{"type":"text","text":"What’s new in Swift"}],"title":"What’s new in Swift","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","abstract":[{"type":"text","text":"student at 42Berlin 🐬 | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️"}],"url":"\/documentation\/wwdcnotes\/multitudes","type":"topic","title":"laurent b (32 notes)","kind":"article","role":"sampleCode"},"WWDC23-10166-macro":{"identifier":"WWDC23-10166-macro","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro10":{"identifier":"WWDC23-10166-macro10","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro10.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10044-Discover-machine-learning-enhancements-in-Create-ML":{"type":"topic","abstract":[{"type":"text","text":"Find out how Create ML can help you do even more with machine learning models. Learn about the latest updates to image understanding and text-based tasks with multilingual BERT embeddings. Discover how easy it is to train models that can understand the content of images using multi-label classification. We’ll also share information about interactive model evaluation and the latest APIs for custom training data augmentations."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10044-Discover-machine-learning-enhancements-in-Create-ML","url":"\/documentation\/wwdcnotes\/wwdc23-10044-discover-machine-learning-enhancements-in-create-ml","title":"Discover machine learning enhancements in Create ML","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10241-Share-files-with-SharePlay":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10241-Share-files-with-SharePlay","kind":"article","title":"Share files with SharePlay","url":"\/documentation\/wwdcnotes\/wwdc23-10241-share-files-with-shareplay","type":"topic","abstract":[{"type":"text","text":"Discover how to work with files and attachments in a SharePlay activity. We’ll explain how to use the GroupSessionJournal API to sync large amounts of data faster and show you how to adopt it in a demo of the sample app DrawTogether."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10023-Build-a-multidevice-workout-app":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10023-Build-a-multidevice-workout-app","title":"Build a multi-device workout app","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10023-build-a-multidevice-workout-app","abstract":[{"text":"Learn how you can get iPhone involved in your Apple Watch-based workout apps with HealthKit. We’ll show you how to mirror workouts between devices and take a ride with cycling data types. Plus, get to know HealthKit for iPad.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10262-Rediscover-Safari-developer-features":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10262-Rediscover-Safari-developer-features","kind":"article","title":"Rediscover Safari developer features","url":"\/documentation\/wwdcnotes\/wwdc23-10262-rediscover-safari-developer-features","type":"topic","abstract":[{"type":"text","text":"Get ready to explore Safari’s rich set of tools for web developers and designers. Learn how you can inspect web content, find out about Responsive Design Mode and WebDriver, and get started with simulators and devices. We’ll also show you how to pair with Vision Pro, make content inspectable in your apps, and use Open with Simulator in Responsive Design Mode to help you test your websites on any device."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10170-Beyond-the-basics-of-structured-concurrency":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency","kind":"article","title":"Beyond the basics of structured concurrency","url":"\/documentation\/wwdcnotes\/wwdc23-10170-beyond-the-basics-of-structured-concurrency","type":"topic","abstract":[{"type":"text","text":"It’s all about the task tree: Find out how structured concurrency can help your apps manage automatic task cancellation, task priority propagation, and useful task-local value patterns. Learn how to manage resources in your app with useful patterns and the latest task group APIs. We’ll show you how you can leverage the power of the task tree and task-local values to gain insight into distributed systems."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10260-Get-started-with-building-apps-for-spatial-computing":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10260-Get-started-with-building-apps-for-spatial-computing","kind":"article","title":"Get started with building apps for spatial computing","url":"\/documentation\/wwdcnotes\/wwdc23-10260-get-started-with-building-apps-for-spatial-computing","type":"topic","abstract":[{"type":"text","text":"Get ready to develop apps and games for visionOS! Discover the fundamental building blocks that make up spatial computing — windows, volumes, and spaces — and find out how you can use these elements to build engaging and immersive experiences."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/JohnBaer3":{"type":"topic","url":"\/documentation\/wwdcnotes\/johnbaer3","kind":"article","title":"John Baer (2 notes)","abstract":[{"type":"text","text":"No Bio on GitHub"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/JohnBaer3","role":"sampleCode"},"WWDC23-10166-init6":{"identifier":"WWDC23-10166-init6","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init6.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10156-Explore-SwiftUI-animation":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10156-Explore-SwiftUI-animation","kind":"article","title":"Explore SwiftUI animation","url":"\/documentation\/wwdcnotes\/wwdc23-10156-explore-swiftui-animation","type":"topic","abstract":[{"type":"text","text":"Explore SwiftUI’s powerful animation capabilities and find out how these features work together to produce impressive visual effects. Learn how SwiftUI refreshes the rendering of a view, determines what to animate, interpolates values over time, and propagates context for the current transaction."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10071-Deliver-video-content-for-spatial-experiences":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10071-Deliver-video-content-for-spatial-experiences","kind":"article","title":"Deliver video content for spatial experiences","url":"\/documentation\/wwdcnotes\/wwdc23-10071-deliver-video-content-for-spatial-experiences","type":"topic","abstract":[{"type":"text","text":"Learn how to prepare and deliver video content for visionOS using HTTP Live Streaming (HLS). Discover the current HLS delivery process for media and explore how you can expand your delivery pipeline to support 3D content. Get up to speed with tips and techniques for spatial media streaming and adapting your existing caption production workflows for 3D. And find out how to share audio tracks across video variants and add spatial audio to make your video content more immersive."}],"role":"sampleCode"},"WWDC23-10166-init7":{"identifier":"WWDC23-10166-init7","alt":"add our macro package to my Xcode project","type":"image","variants":[{"url":"\/images\/WWDC23-10166-init7.jpg","traits":["1x","light"]}]},"WWDC23-10166-macro4":{"identifier":"WWDC23-10166-macro4","alt":"Example of macro expansion","type":"image","variants":[{"url":"\/images\/WWDC23-10166-macro4.jpg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10149-Discover-Observation-in-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI","kind":"article","title":"Discover Observation in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10149-discover-observation-in-swiftui","type":"topic","abstract":[{"type":"text","text":"Simplify your SwiftUI data models with Observation. We’ll share how the Observable macro can help you simplify models and improve your app’s performance. Get to know Observation, learn the fundamentals of the macro, and find out how to migrate from ObservableObject to Observable."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10027-Bring-widgets-to-new-places":{"title":"Bring widgets to new places","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10027-Bring-widgets-to-new-places","type":"topic","role":"sampleCode","abstract":[{"text":"The widget ecosystem is expanding: Discover how you can use the latest WidgetKit APIs to make your widget look great everywhere. We’ll show you how to identify your widget’s background, adjust layout dynamically, and prepare colors for vibrant rendering so that your widget can sit seamlessly in any environment.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10027-bring-widgets-to-new-places","kind":"article"}}}