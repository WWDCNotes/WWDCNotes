{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10166-write-swift-macros"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Chapters","level":2,"type":"heading","anchor":"Chapters"},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":"\n"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812","isActive":true,"type":"reference"}],"type":"paragraph"},{"text":"ELI5 Summary of Macros:","level":3,"type":"heading","anchor":"ELI5-Summary-of-Macros"},{"inlineContent":[{"type":"text","text":"Imagine you’re baking a cake, and you need to sift flour. You have to get out your sifter, pour in the flour, turn the handle… and you have to do this every single time you need sifted flour. Now imagine you had a magical kitchen helper who could do this for you. All you’d have to say is “sift flour” and it’s done!"},{"type":"text","text":" "},{"type":"text","text":"Swift macros are like that magical kitchen helper, but for your code. Instead of you having to write out the same lines of code over and over again, you just tell your macro (your kitchen helper) what to do. This might be something like “create a struct with these properties” or “set up a standard network request”."},{"type":"text","text":" "},{"type":"text","text":"You define how the macro works one time, and then you can use it whenever you need to. It’s a way to automate repetitive tasks and make your code easier to read and manage. This makes coding a lot faster and less prone to errors, especially as your projects get bigger and more complex."}],"type":"paragraph"},{"text":"Overview","level":1,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Swift macros allow to generate code at compile time, making codebases more expressive and easier to read.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example: Here there is a list of calculations that first-year students can use to practice their arithmetic skills. This is repetitive, redundant, and even error prone because nobody can guarantee that the result actually matches the calculation."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let calculations = [","(1 + 1, \"1 + 1\"),","(2 + 3, \"2 + 3\"),","(7 - 3, \"7 - 3\"),","(5 - 2, \"5 - 2\"),","(3 * 2, \"3 * 2\"),","(3 * 5, \"3 * 5\"),","]"]},{"inlineContent":[{"type":"text","text":"With Swift 5.9 we can define a stringify macro to simplify this. This macro also happens to be the one that is included in Xcode’s template. The stringify macro only takes the calculation as a single parameter. At compile time it expands to the tuple that we saw before, guaranteeing that the calculation and the result match."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let calculations = [","\t#stringify(1 + 1), ","\t#stringify(2 + 3), ","\t#stringify(7 - 3), ","\t#stringify(5 - 2), ","\t#stringify(3 * 2), ","\t#stringify(3 * 5),","]"]},{"inlineContent":[{"type":"text","text":"So how does this work?"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@freestanding(expression)","macro stringify(_ value: Int) -> (Int, String)"]},{"inlineContent":[{"type":"text","text":"The stringify macro takes an integer as the input parameter and outputs a tuple containing an the result, an integer, and the calculation– a string. If the arguments of the macro expression don’t match the macro’s parameters, or don’t type check by themselves, the compiler will emit an error without applying the macro expansion."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, passing a string literal to this macro, the compiler complains that ‘String’ is not convertible to expected argument type ‘Int’."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"WWDC23-10166-example1"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is different to, for example, C macros, which are evaluated at the pre-processor stage before type-checking."},{"type":"text","text":" "},{"type":"text","text":"Also this macro is declared with the freestanding expression macro role. This means that we can use the macro wherever we can use an expression, and that it will be indicated by the hash character, like we see with #stringify."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Other kinds of macros are attached macros that can augment declarations."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"After checking that all the arguments match the macro’s parameters, the compiler performs the macro expansion."}],"type":"paragraph"},{"text":"Macro plug-in","level":2,"type":"heading","anchor":"Macro-plug-in"},{"inlineContent":[{"type":"text","text":"To perform the expansion, each macro defines its implementation in a compiler plug-in. The compiler will send the source code of the entire macro expression to that plug-in.  The first thing that the macro plug-in does, is to parse the source code of the macro into a SwiftSyntax tree. This tree is a source-accurate, structural representation of the macro, and it will be the basis on which the macro operates. For example, our ‘stringify’ macro is represented in the tree as a macro expansion expression node. That expression has the macro name ‘stringify’. And it takes a single argument, which is the infix operator plus applied to 2 and 3."}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC23-10166-macro","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"The macro’s implementation is itself a program written in Swift and can perform any transformation to the syntax tree it wants. In this case, it generates a tuple like. It will then serialize the generated syntax tree into source code again and send it to the compiler, which will replace the macro expression by the expanded code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC23-10166-macro1","type":"image"}],"type":"paragraph"},{"text":"Create a macro","level":1,"type":"heading","anchor":"Create-a-macro"},{"inlineContent":[{"type":"text","text":"The new macro template in Xcode defines the stringify macro. Let us walk through that template and explore the macro’s definition, how the expansion works, and how the macro can be tested."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create the template, click File, New, Package, and select the Swift Macro template. Let’s call our first macro “WWDC”."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here we have an invocation of the #stringify macro, similar to what we have seen before. It takes a parameter “a + b” and returns the result, as well as the code that produced it."}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC23-10166-macro2","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To see what the macro expands to, right-click on it and select Expand Macro."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro3"}],"type":"paragraph"},{"inlineContent":[{"text":"That’s exactly what we saw before.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC23-10166-macro4","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"But how is the macro defined? Let’s jump to its definition. (right click again, first manu item from top).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here we have a slightly generalized version of our previous ‘stringify’ macro. Instead of taking an integer, this macro is generic and can receive any type T. The macro is declared as an external macro.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC23-10166-macro5","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"This tells the compiler that to perform the expansion, it needs to look at the StringifyMacro type in the WWDCMacros module.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"How is that type defined?"}],"type":"paragraph"},{"inlineContent":[{"text":"** command - shift - o \/ type “stringify” and select from search “StringifyMacro” **","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because stringify is declared as a freestanding expression macro, the StringifyMacro type needs to conform to the ExpressionMacro protocol.This protocol has a single requirement: The expansion function. It takes the syntax tree of the macro expression itself, as well as a context that can be used to communicate with the compiler."}],"type":"paragraph"},{"inlineContent":[{"text":"The expansion function then returns the rewritten expression syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"What does it do in the implementation?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"At first, it retrieves the single argument to the macro expression. It knows that this argument exists because stringify is declared as taking a single parameter and all arguments need to type-check before the macro expansion can be applied.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then uses string interpolation to create the syntax tree of a tuple. The first element is the argument itself and the second is a string literal containing the source code of the argument."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ StringifyMacro implementation","public struct StringifyMacro: ExpressionMacro {","\tpublic static func expansion(","\t\tof node: some FreestandingMacroExpansionSyntax, ","\t\tin context: some MacroExpansionContext","\t) -> ExprSyntax {","\t\tguard let argument = node.argumentList.first?.expression else {","\t\t\tfatalError \"compiler bug: the macro does not have any arguments\")","\t\t}","\t\t","\t\treturn \"(\\(argument), \\(literal: argument.description))\"","\t}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function is not returning a string here. It is returning an expression syntax. The macro will automatically invoke the Swift parser to transform this literal into a syntax tree. And because it is using the literal interpolation style for the second argument, it will make sure that the literal’s contents are properly escaped."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because macros don’t have side effects and the source code of syntax trees is easy to compare, a great way to test them is to write unit tests. The macro template already comes with one."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ stringify test case","","final class WWDCTests: XCTestCase {","\tfunc testMacro() {","\t\tassertMacroExpansion(","\t\t\t\"\"\"","\t\t\t#stringify(a + b)","\t\t\t\"\"\",","\t\t\texpandedSource: \"\"\"","\t\t\t(a + b, \"a + b\")","\t\t\t\"\"\",","\t\t\tmacros: testMacros","\t\t)","\t}","}","","let testMacros: [String: Macro.Type] = [","\t\"stringify\": StringifyMacro.self","]"]},{"type":"paragraph","inlineContent":[{"text":"This test case uses the ‘assertMacroExpansion’ function from the SwiftSyntax package to verify that the ‘stringify’ macro expands correctly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It takes the ‘#stringify(a + b)’ expression, that we saw before, as input. and asserts that after the macro is expanded, it produces a tuple containing ‘a + b’ and the string literal ‘a + b’."}]},{"type":"paragraph","inlineContent":[{"text":"To tell the test case how to expand the macros, it passes the ‘testMacros’ parameter, which specifies that the macro ‘#stringify’ should be expanded using the ‘StringifyMacro’ type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro6","type":"image"}]},{"type":"heading","level":2,"anchor":"Swift-macro-template-recap","text":"Swift macro template recap"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Macro declaration defines the macro’s signature","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Implementation operates on SwiftSyntax trees"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Easy to test","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":1,"anchor":"Macro-roles","text":"Macro roles"},{"type":"paragraph","inlineContent":[{"text":"A freestanding expression macro is spelled with a ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"hash"}]},{"text":" and allows us to rewrite the entire macro expression. There’s also a freestanding declaration role that expands to a declaration instead of an expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other kinds of macros are attached macros. These are spelled with an @, just like attributes, and allow the macro to augment the declaration they are attached to. For example, an attached member macro adds new members of the type it is attached to."}]},{"alignments":["left","right"],"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Macro roles","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Description"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"@freestanding(expression)"}]}],[{"type":"paragraph","inlineContent":[{"text":"Creates a piece of code that returns a value","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"@freestanding(declaration)"}]}],[{"type":"paragraph","inlineContent":[{"text":"Creates one or more declarations","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"@attached(peer)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds new declarations alongside the declaration it’s applied to"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"@attached(accessor)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds accessors to a property"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"@attached (memberAttribute)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds attributes to the declarations in the tvpe\/extension it’s applied to"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"@attached(member)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds new declarations inside the type\/extension it’s applied to"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"@attached(conformance)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adds conformances to the tvpe\/extension it’s applied to"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"To learn more about these other roles, watch “Expand on Swift macros”:","type":"text"}]},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167"}]},{"type":"paragraph","inlineContent":[{"text":"Example with the ski instructor app that allows to plan the tours for the students.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In addition to the Slope enum that contains all the slopes in the ski resort, there is also an EasySlope type that only contains slopes suitable for beginners. It has an initializer to convert a slope to an easy slope, if the slope is indeed easy, and a computed property to convert an easy slope back to a general slope.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Slopes in my favorite ski resort.","enum Slope {","\tcase beginnersParadise ","\tcase practiceRun ","\tcase livingRoom ","\tcase olympicRun ","\tcase blackBeauty"," }","","\/\/ Slopes suitable for beginners. Subset of 'Slopes'.","enum EasySlope {","\tcase beginnersParadise ","\tcase practiceRun","\t","\tinit?(_ slope: Slope) {","\t\tswitch slope {","\t\tcase .beginnersParadise: self = .beginnersParadise","\t\tcase .practiceRun: self = .practiceRun","\t\tdefault: return nil","\t\t}","\t}","\t","\tvar slope: Slope {","\t\tswitch self {","\t\t\tcase .beginnersParadise: return .beginnersParadise ","\t\t\tcase .practiceRun: return .practiceRun","\t\t}","\t}","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro7","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"While this provides great type safety, it is really repetitive. To add an easy slope, we need to add it to Slope…EasySlope, the initializer, and the computed property. Let’s see if we can improve things using a macro.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What we want to do is to automatically generate the initializer and the computed property. How can we do this?"}]},{"type":"heading","level":3,"anchor":"The-Plan","text":"The Plan"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"declare an attached member macro.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create empty macro implementation"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, create the compiler plug-in that contains the macro’s implementation. We will develop it in a test-driven way."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Create test case"},{"type":"text","text":" "},{"type":"text","text":"Thus, we will leave its implementation empty until we write a test case for it."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write macro implementation"},{"type":"text","text":" "},{"type":"text","text":"After we defined the macro’s behavior in a test case, we will write the implementation to match that test case."}]}]},{"content":[{"inlineContent":[{"text":"Integrate macro into app","type":"text"},{"text":" ","type":"text"},{"text":"we will integrate the new macro into the app. We will remove the initializer and have the macro generate it for us.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To develop the macro, we work with the template that we created earlier."},{"type":"text","text":"\n"},{"type":"text","text":"Start by declaring a new attached member macro by using the ‘@attached(member)’ attribute and call it SlopeSubset because EasySlope is a subset of Slope."}]},{"type":"paragraph","inlineContent":[{"text":"The macro also defines the names of the members it introduces.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Defines a subset of the 'Slope' enum","\/\/\/","\/\/\/ Generates an initializer that converts a 'Slope' to this type if the slope is","\/\/\/ declared in this subset, otherwise returns nil","\/\/\/","\/\/\/ - Important: All enum cases declared in this macro must also exist in the","\/\/\/ Slope enum.","@attached (member, names: named(init))","public macro SlopeSubset() = #externalMacro(module: \"WWDCMacros\", type: \"SlopeSubsetMacro\")"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro8","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"In this demo, we will see how to generate the initializer. Generating the computed property is very similar, because it’s also just a switch statement that switches over all the cases. With this declaration, we have defined the macro, but we have not implemented the expansion that it actually performs.  For this, our macro references the SlopeSubsetMacro type in the WWDCMacros module.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since SlopeSubset as an attached member macro, the corresponding implementation needs to conform to the MemberMacro protocol. This protocol has a single requirement: The ‘expansion’ function, similar to ExpressionMacro."}]},{"syntax":"swift","type":"codeListing","code":["import SwiftCompilerPlugin","import SwiftSyntax","import SwiftSyntaxBuilder","import SwiftSyntaxMacros","","\/\/\/ Implementation of the 'SlopeSubset macro.","public struct SlopeSubsetMacro: MemberMacro {","\t\/\/ members","}","","@main","struct WWDCPlugin: CompilerPlugin {","\tlet providingMacros: [Macro.Type] = [","\t\t...","","\t]","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro9"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ‘expansion’ function takes the attribute with which we apply the macro to a declaration, as well as the declaration that the macro is being applied to. In our case, this will be the EasySlope enum declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro then returns the list of all the new members it wants to add to that declaration."}]},{"syntax":"swift","type":"codeListing","code":["import SwiftCompilerPlugin","import SwiftSyntax","import SwiftSyntaxBuilder","import SwiftSyntaxMacros","","\/\/\/ Implementation of the 'SlopeSubset macro.","public struct SlopeSubsetMacro: MemberMacro {","\tpublic static func expansion(","\t\tof attribute: AttributeSyntax,","\t\tprovidingMembers0f deciaration: some DeclGroupSyntax,","\t\tin context: some MacroExpansionContext","\t) throws -> [DeclSyntax] {","\t\treturn []  \/\/ for now to test","\t}","}","","@main","struct WWDCPlugin: CompilerPlugin {","\tlet providingMacros: [Macro.Type] = [","\t\tSlopeSubsetMacro.self","\t]","}"]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro10","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"start by writing a test case for it. So for now, let us just return an empty array, indicating that no new members should be added.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Make SlopeSubset visible to the compiler. For this, add it to the ‘providingMacros’ property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We write a test case that we can rerun whenever we make changes to the macro, to make sure we are not introducing regressions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the ‘assertMacroExpansion’ function to verify the macro’s behavior."}]},{"syntax":"swift","type":"codeListing","code":["import SwiftSyntaxMacros","import SwiftSyntaxMacrosTestSupport","import XCTest","import WWDCMacros","","let testMacros: [String: Macro.Type] = [","\t\"SlopeSubset\" : SlopeSubsetMacro.self,","]","","final class WWDCTests: XCTestCase {","\tfunc testSlopeSubset () {","\t\tassertMacroExpansion (","\t\t\t\"\"\"","\t\t\t@SlopeSubset","\t\t\tenum EasySlope {","\t\t\tcase beginnersParadise ","\t\t\tcase practiceRun","\t\t\t}","\t\t\t\"\"\",expandedSource:","\t\t\t\"\"\"","","\t\t\tenum EasySlope {","\t\t\t\tcase beginnersParadise ","\t\t\t\tcase practiceRun","\t\t\t}","\t\t\t\"\"\", macros: testMacros)","\t}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What we want to test is what the macro generates when applied to the EasySlope type, so we use that as our test case’s input."}]},{"type":"paragraph","inlineContent":[{"text":"And since the macro’s not doing anything yet, we just expect it to remove the attribute and not add any new members, so the expected expanded code is the same as the input, just without ‘@SlopeSubset’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let the test case know that it should expand the macro SlopeSubset using the SlopeSubsetMacro implementation. For that, we need to map the macro name to its implementing type in the ‘testMacros’ dictionary and pass that dictionary to the assertion function."}]},{"type":"paragraph","inlineContent":[{"text":"Running the tests","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro11","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But is the macro actually generating the initializer and not just removing the attribute? We copy the code previously wrote by hand into the test case because that’s what we want the plug-in to generate."}]},{"type":"paragraph","inlineContent":[{"text":"And running the test again… …it fails because the macro doesn’t actually generate the initializer yet.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\"\"\"","enum EasySlope {","\tcase beginnersParadise ","\tcase practiceRun","\tinit?(_ slope: Slope) {","\t\tswitch slope {","\t\tcase .beginnersParadise:","\t\t\tself = .beginnersParadise","\t\tcase .practiceRun:","\t\t\tself = .practiceRun","\t\tdefault:","\t\t\treturn nil","\t\t}","\t}","}","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro12"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer switches over all the enum elements declared in the EasySlopes enum. So the first thing that we need to do is to retrieve these enum elements from the declaration. Since enum elements can only be declared inside enum declarations, we start by casting ‘declaration’ to an enum declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the macro is attached to a type that is not an enum, we should get an error. Add a TODO so that we don’t forget to do it later, and return an empty array for now."},{"type":"text","text":"\n"},{"type":"text","text":"Next, we need to get all the elements that the enum declares. To figure out how to do that, we inspect the syntactic structure of our enum in the SwiftSyntax tree."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-macro13"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the macro’s implementation is just an ordinary Swift program, we can debug it in Xcode. For example, we can set a breakpoint inside the expansion function and run the test cases to hit that breakpoint."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro14","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have the debugger paused inside the macro’s implementation and ‘enumDecl’ is the EasySlopes enum. We can print it in the debugger by typing ‘po enumDecl’."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro15","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The innermost nodes of the syntax tree represent the enum elements, the ‘beginnersParadise’, and ‘practiceRun’ slopes. To retrieve them, we need to follow the structure that is outlined to us in the syntax tree.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-macro16","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enum declaration has a child called ‘memberBlock’. This member block contains both the braces and the actual members. So to access the members, we start with ‘enumDecl.memberBlock.members’."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These members contain the actual declaration, as well as an optional semicolon. We are interested in the declarations, in particular those declarations that actually declare enum cases. Using compact map to get a list of all the member declarations that are enum cases. Each case declaration can declare multiple elements. To retrieve all of them, we can use ‘flatMap’."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Retrieving enum elements","let members = enumDecl.memberBlock.members","let caseDecls = members.compactMap { $0.decl.as(EnumCaseDec1Syntax.self) }","let elements = caseDecls.flatMap { $0.elements }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now we can start constructing the initializer."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Initializer to generate","","init?(_ slope: Slope) {","\tswitch slope {","\t\tcase beginnersParadise:","\t\t\tself = .beginnersParadise","\t\tcase .practiceRun:","\t\t\tself = .practiceRun ","\t\tdefault:","\t\t\treturn nil","\t}","}"]},{"type":"paragraph","inlineContent":[{"text":"The initializer declaration has a single item: A switch expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This switch expression contains a case for each element in the enum, as well as a default case that returns nil. We need to create syntax nodes for all of these.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Two great ways of finding the syntax nodes to create, are either by printing the syntax tree like we did before, or by reading SwiftSyntax’s documentation."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-docs","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We start by constructing an InitializerDeclSyntax."}]},{"type":"paragraph","inlineContent":[{"text":"This type can be constructed by building the body using a result builder and specifying the header– that is the ‘init’ keyword and all the parameters. This will allow us to use a for loop inside the result builder to iterate over all the elements, exactly what we need.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Copy the init header from our test case."}]},{"type":"paragraph","inlineContent":[{"text":"Inside the body, we need a switch expression. This type also has an initializer that takes a header and a result builder.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init2","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we iterate over all elements. For each element, we want to create a new case item, which we can construct using string interpolation just like we saw for ‘#stringify’. We also need to add a default case that returns nil."}]},{"type":"paragraph","inlineContent":[{"text":"And finally, return the initializer.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ...","","let initializer = try InitializerDeciSyntax(\"init?(_ slope: Slope)\") {","\ttry SwitchExprSyntax(\"switch slope\") {","\t\tfor element in elements {","\t\t\tSwitchCaseSyntax(","\t\t\t\t\"\"\"","\t\t\t\tcase .\\(element.identifier):","\t\t\t\t\tself = .\\(element.identifier)","\t\t\t\t\"\"\"","\t\t\t)","\t\t}","\t\tSwitchCaseSyntax(\"default: return nil\")","\t}","}","return [DecISyntax(initializer)]","","\/\/ ..."]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init3","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add the macro package to the Xcode project, we right-click on it and select “Add Package Dependencies” and select the local package that we just created."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to use the macro, we add the WWDC target as a dependency of the app."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init5","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now import the WWDC module from the package and apply the SlopeSubset macro to the EasySlope type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we build… …the compiler complains that the hand-written initializer is an invalid redeclaration. And that’s because the macro now generates it for us. So we can just delete it. So if we want to see what the macro actually generated, we can right-click on SlopeSubset and click Expand Macro."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init6"}]},{"type":"paragraph","inlineContent":[{"text":"And if I forgot what the macro does, we can also Option-click on it to read its documentation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init7"}]},{"type":"heading","level":2,"anchor":"Write-macro-recap","text":"Write macro recap"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Start with the Swift macro package template.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the debugger to explore the syntax node structure: stop the macro’s execution and print the syntax node inside the debugger. See which properties we need to access to get all the enum elements."}]}]},{"content":[{"inlineContent":[{"text":"Develop macro based on test cases","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add package to an Xcode project"}]}]}]},{"type":"heading","level":1,"anchor":"Diagnostics","text":"Diagnostics"},{"type":"paragraph","inlineContent":[{"text":"But what happens if our macro is used in situations that it doesn’t support and generates code that does not compile.  We can emit error messages that inform our adopters about what’s going wrong.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"let’s go and fix the TODO we left in our codebase. When SlopeSubset is applied to a type that is not an enum, the macro should emit an error, saying that it is only applicable to enums."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"let’s start by adding a test case."}]},{"syntax":"swift","type":"codeListing","code":["func testSlopeSubsetOnStruct() throws {","\tassertMacroExpansion(","\t\t\"\"\"","\t\t@SlopeSubset","\t\tstruct Skier {","\t\t}","\t\t\"\"\",","\t\texpandedSource: \"\"\"","\t","\t\tstruct Skier {","\t\t}","\t\t\"\"\",","\t\tdiagnostics: [","\t\t\tDiagnosticSpec(message: \"@SlopeSubset can only be applied to an enum\", line: 1, column: 1)","\t\t], ","\t\tmacros: testMacros","\t)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This time, we are applying the SlopeSubset macro to a struct."}]},{"type":"paragraph","inlineContent":[{"text":"Since there are no enum elements in the struct, we don’t expect the macro to generate an initializer. Instead, it should emit a diagnostic, that is an error, informing us that SlopeSubset can only be applied to an enum. If we run this test… …it fails because we are not outputting the error message yet. Let’s go to the compiler plug-in to do so now.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Macro errors can be represented by any type that conforms to the Swift Error protocol. I use an enum with a single case to describe the error message if SlopeSubset is applied to a type that’s not an enum."}]},{"syntax":"swift","type":"codeListing","code":["enum SlopeSubsetError: CustomStringConvertible, Error {","\tcase onlyApplicableToEnum","","\tvar description: String {","\t\tswitch self {","\t\tcase .onlyApplicableToEnum: return \"@SlopeSubset can only be applied to an enum\"","\t\t}","\t}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we throw the error from the expansion function, it will be shown at the attribute that calls the macro expansion."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init8","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"If we want to show the error message at a different location than the attribute, generate warnings, or even show Fix-Its in Xcode, there’s an ‘addDiagnostic’ method on the context parameter that allows to generate rich diagnostics.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, how does it look like in Xcode if we apply SlopeSubset to a struct?"}]},{"type":"paragraph","inlineContent":[{"text":"Xcode shows the custom error message inline with all other compilation errors. That makes it easy for adopters of our macro to see what they are doing wrong.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init9"}]},{"type":"paragraph","inlineContent":[{"text":"Now that we have good error handling, go and generalize it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To specify the superset of the enum, that we have so far hard-coded as Slope, we add a generic parameter to the macro declaration.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init10"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And since the macro is now no longer specific to slopes, let’s rename it to EnumSubset by right clicking on SlopeSubset and selecting Refactor, Rename."},{"type":"text","text":"\n"},{"type":"text","text":"(Rename all occurences inside string literals and comments by Command-clicking them.)"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10166-init11","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"We adjust our macro implementation to use the generic parameter, instead of the hard-coded Slopes type. If we print the attribute inside the debugger and inspect its layout, just like we did for ‘enumDecl’, we can see that we can retrieve the generic parameter by accessing the ‘argumentType’ of the first argument in the ‘genericArgumentClause’ of the attribute’s name. So now that we’ve retrieved the generic parameter, we can replace the so-far hardcoded Slope type by the variable ‘supersetType’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init12"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Need a couple more changes, like renaming the initializer’s parameter, changing the macro implementation’s type name, and updating the documentation. For now, we make sure that our tests are still passing."}]},{"type":"paragraph","inlineContent":[{"text":"Since we made EnumSubset generic, we need to explicitly specify that EasySlope is a subset of Slope by passing slope as a generic parameter to the EnumSubset macro.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10166-init13"}]},{"type":"heading","level":1,"anchor":"Wrap-up","text":"Wrap up"},{"type":"paragraph","inlineContent":[{"text":"The key benefits of using Swift macros are:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Code Consistency: Since macros generate code, it ensures that similar code snippets throughout the program are consistent. This is especially important when working in large teams where ensuring code consistency can be a challenge.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Time Saving: Macros can automate repetitive tasks in your codebase. This can save a lot of time, especially on larger projects."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Improved Readability and Maintainability: By abstracting away repetitive or complex code into a macro, the resulting code becomes easier to read and maintain.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Reduced Errors: When repetitive code is generated by macros, it reduces the chance of introducing errors that can occur when manually writing similar code snippets.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In summary, while Swift macros might seem complex at first, especially for a new developer, they are a powerful tool to have in our programming toolkit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"They can make our code cleaner, more efficient, and less prone to errors."}]},{"type":"heading","level":2,"anchor":"Resources","text":"Resources"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166","type":"reference","isActive":true}]},{"type":"heading","level":2,"anchor":"Related-Videos","text":"Related Videos"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167","type":"reference","overridingTitle":"Expand on Swift macros","overridingTitleInlineContent":[{"text":"Expand on Swift macros","type":"text"}],"isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165","type":"reference","isActive":true}]},{"type":"heading","level":2,"anchor":"Written-By","text":"Written By"},{"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"JohnBaer3"}]}],"size":1},{"content":[{"text":"John Baer","type":"heading","level":3,"anchor":"John-Baer"},{"inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/JohnBaer3","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/JohnBaer3","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/","type":"reference","isActive":true}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"multitudes"}]}],"size":1},{"content":[{"level":3,"type":"heading","anchor":"laurent-b","text":"laurent b"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/multitudes","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/x.com\/wrmultitudes","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","isActive":true}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"reference"}]},{"type":"heading","level":2,"anchor":"Related-Sessions","text":"Related Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10165-Whats-new-in-Xcode-15","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10166-Write-Swift-macros","interfaceLanguage":"swift"},"sections":[],"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC23","role":"sampleCode","title":"Write Swift macros"},"abstract":[{"text":"Discover how you can use Swift macros to make your codebase more expressive and easier to read. Code along as we explore how macros can help you avoid writing repetitive code and find out how to use them in your app. We’ll share the building blocks of a macro, show you how to test it, and take you through how you can emit compilation errors from macros.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"kind":"article","sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc23\/10166","overridingTitle":"Watch Video (33 min)"}},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1625":{"title":"27:05 - Emit error messages from a macro","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625","type":"link","titleInlineContent":[{"text":"27:05 - Emit error messages from a macro","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1625"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=75":{"title":"1:15 - Overview","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75","type":"link","titleInlineContent":[{"text":"1:15 - Overview","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=75"},"WWDC23-10166-macro1":{"identifier":"WWDC23-10166-macro1","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro1.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-init2":{"identifier":"WWDC23-10166-init2","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init2.jpg"}],"alt":"creating init","type":"image"},"WWDC23-10166-macro13":{"identifier":"WWDC23-10166-macro13","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro13.jpg"}],"alt":"Example of macro expansion","type":"image"},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","type":"link","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"},"WWDC23-Icon.png":{"identifier":"WWDC23-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-Icon.png"}],"alt":null,"type":"image"},"WWDC23-10166-macro11":{"identifier":"WWDC23-10166-macro11","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro11.jpg"}],"alt":"Example of macro expansion","type":"image"},"JohnBaer3.jpeg":{"identifier":"JohnBaer3.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/JohnBaer3.jpeg"}],"alt":null,"type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=650":{"title":"10:50 - Macro roles","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650","type":"link","titleInlineContent":[{"text":"10:50 - Macro roles","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=650"},"WWDC23-10166-macro16":{"identifier":"WWDC23-10166-macro16","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro16.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-init":{"identifier":"WWDC23-10166-init","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init.jpg"}],"alt":"creating init","type":"image"},"WWDC23-10166-init9":{"identifier":"WWDC23-10166-init9","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init9.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10164-Whats-new-in-Swift":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10164-whats-new-in-swift","title":"What’s new in Swift","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10164-Whats-new-in-Swift","kind":"article","abstract":[{"text":"Join us for an update on Swift. We’ll show you how APIs are becoming more extensible and expressive with features like parameter packs and macros. We’ll also take you through improvements to interoperability and share how we’re expanding Swift’s performance and safety benefits everywhere from Foundation to large-scale distributed programs on the server.","type":"text"}]},"https://laurentbrusa.hashnode.dev/":{"title":"Blog","identifier":"https:\/\/laurentbrusa.hashnode.dev\/","type":"link","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/laurentbrusa.hashnode.dev\/"},"https://developer.apple.com/videos/play/wwdc2023/10167":{"title":"Expand on Swift macros","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167","type":"link","titleInlineContent":[{"text":"Expand on Swift macros","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10167"},"https://developer.apple.com/wwdc23/10166":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10166","checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc23\/10166"},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"kind":"article","abstract":[{"type":"text","text":"student at 42Berlin 🐬 | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️"}],"url":"\/documentation\/wwdcnotes\/multitudes","title":"laurent b (33 notes)","images":[{"type":"card","identifier":"multitudes.jpeg"},{"identifier":"multitudes.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/JohnBaer3":{"title":"John Baer (2 notes)","abstract":[{"type":"text","text":"No Bio on GitHub"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/JohnBaer3","url":"\/documentation\/wwdcnotes\/johnbaer3","kind":"article","images":[{"type":"card","identifier":"JohnBaer3.jpeg"},{"type":"icon","identifier":"JohnBaer3.jpeg"}],"role":"sampleCode","type":"topic"},"WWDC23-10166-init13":{"identifier":"WWDC23-10166-init13","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init13.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"WWDC23-10166-init10":{"identifier":"WWDC23-10166-init10","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init10.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10165-Whats-new-in-Xcode-15":{"title":"What’s new in Xcode 15","url":"\/documentation\/wwdcnotes\/wwdc23-10165-whats-new-in-xcode-15","kind":"article","type":"topic","role":"sampleCode","abstract":[{"text":"Discover the latest productivity and performance improvements in Xcode 15. Explore enhancements to code completion and Xcode Previews, learn about the test navigator and test report, and find out more about the streamlined distribution process. We’ll also highlight improved navigation, source control management, and debugging.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10165-Whats-new-in-Xcode-15"},"https://x.com/wrmultitudes":{"title":"X\/Twitter","identifier":"https:\/\/x.com\/wrmultitudes","type":"link","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"url":"https:\/\/x.com\/wrmultitudes"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"type":"image"},"WWDC23-10166-macro10":{"identifier":"WWDC23-10166-macro10","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro10.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-init3":{"identifier":"WWDC23-10166-init3","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init3.jpg"}],"alt":"creating init","type":"image"},"WWDC23-10166-init12":{"identifier":"WWDC23-10166-init12","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init12.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10165":{"title":"What’s new in Xcode 15","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165","type":"link","titleInlineContent":[{"text":"What’s new in Xcode 15","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10165"},"WWDC23-10166-macro14":{"identifier":"WWDC23-10166-macro14","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro14.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-macro5":{"identifier":"WWDC23-10166-macro5","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro5.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-init4":{"identifier":"WWDC23-10166-init4","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init4.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"JohnBaer3":{"identifier":"JohnBaer3","variants":[{"traits":["1x","light"],"url":"\/images\/JohnBaer3.jpeg"}],"alt":"Profile image of John Baer","type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10149":{"title":"Discover Observation in SwiftUI","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149","type":"link","titleInlineContent":[{"text":"Discover Observation in SwiftUI","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10149"},"https://github.com/JohnBaer3":{"title":"GitHub","identifier":"https:\/\/github.com\/JohnBaer3","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/JohnBaer3"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=310":{"title":"5:10 - Create a macro using Xcode’s macro template","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310","type":"link","titleInlineContent":[{"text":"5:10 - Create a macro using Xcode’s macro template","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=310"},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","title":"WWDC Notes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"kind":"symbol","url":"\/documentation\/wwdcnotes","role":"collection"},"WWDC23-10166-docs":{"identifier":"WWDC23-10166-docs","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-docs.jpg"}],"alt":"Reading the swift syntax docs","type":"image"},"WWDC23-10166-macro8":{"identifier":"WWDC23-10166-macro8","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro8.jpg"}],"alt":"Example of macro expansion","type":"image"},"multitudes":{"identifier":"multitudes","variants":[{"traits":["1x","light"],"url":"\/images\/multitudes.jpeg"}],"alt":"Profile image of laurent b","type":"image"},"WWDC23-10166-init11":{"identifier":"WWDC23-10166-init11","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init11.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"WWDC23-10166-init6":{"identifier":"WWDC23-10166-init6","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init6.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"https://developer.apple.com/forums/tags/wwdc2023-10166":{"title":"Search the forums for tag wwdc2023-10166","identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166","type":"link","titleInlineContent":[{"text":"Search the forums for tag wwdc2023-10166","type":"text"}],"url":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10166"},"multitudes.jpeg":{"identifier":"multitudes.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/multitudes.jpeg"}],"alt":null,"type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1812":{"title":"30:12 - Generalize SlopeSubset to a generic EnumSubset macro","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812","type":"link","titleInlineContent":[{"text":"30:12 - Generalize SlopeSubset to a generic EnumSubset macro","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1812"},"WWDC23-10166-init7":{"identifier":"WWDC23-10166-init7","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init7.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"WWDC23-10166-macro6":{"identifier":"WWDC23-10166-macro6","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro6.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-macro":{"identifier":"WWDC23-10166-macro","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro.jpg"}],"alt":"Example of macro expansion","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10167-Expand-on-Swift-macros":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10167-expand-on-swift-macros","role":"sampleCode","title":"Expand on Swift macros","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","abstract":[{"text":"Discover how Swift macros can help you reduce boilerplate in your codebase and adopt complex features more easily. Learn how macros can analyze code, emit rich compiler errors to guide developers towards correct usage, and generate new code that is automatically incorporated back into your project. We’ll also take you through important concepts like macro roles, compiler plugins, and syntax trees.","type":"text"}],"kind":"article"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=700":{"title":"11:40 - Write a SlopeSubset macro to define an enum subset","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700","type":"link","titleInlineContent":[{"text":"11:40 - Write a SlopeSubset macro to define an enum subset","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=700"},"WWDC23-10166-macro12":{"identifier":"WWDC23-10166-macro12","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro12.jpg"}],"alt":"Example of macro expansion","type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10164":{"title":"What’s new in Swift","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164","type":"link","titleInlineContent":[{"text":"What’s new in Swift","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10164"},"WWDC23-10166-macro3":{"identifier":"WWDC23-10166-macro3","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro3.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-macro4":{"identifier":"WWDC23-10166-macro4","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro4.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-init8":{"identifier":"WWDC23-10166-init8","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init8.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1217":{"title":"20:17 - Inspect the syntax tree structure in the debugger","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217","type":"link","titleInlineContent":[{"text":"20:17 - Inspect the syntax tree structure in the debugger","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1217"},"WWDC23-10166-macro7":{"identifier":"WWDC23-10166-macro7","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro7.jpg"}],"alt":"Example of macro expansion","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10149-Discover-Observation-in-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc23-10149-discover-observation-in-swiftui","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10149-Discover-Observation-in-SwiftUI","abstract":[{"text":"Simplify your SwiftUI data models with Observation. We’ll share how the Observable macro can help you simplify models and improve your app’s performance. Get to know Observation, learn the fundamentals of the macro, and find out how to migrate from ObservableObject to Observable.","type":"text"}],"kind":"article","title":"Discover Observation in SwiftUI"},"WWDC23-10166-example1":{"identifier":"WWDC23-10166-example1","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-example1.jpg"}],"alt":"Example of repetitive code","type":"image"},"WWDC23-10166-macro9":{"identifier":"WWDC23-10166-macro9","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro9.jpg"}],"alt":"Example of macro expansion","type":"image"},"WWDC23-10166-macro2":{"identifier":"WWDC23-10166-macro2","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro2.jpg"}],"alt":"Example of macro expansion","type":"image"},"https://developer.apple.com/videos/play/wwdc2023/10166/?time=1475":{"title":"24:35 - Add a macro to an Xcode project","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475","type":"link","titleInlineContent":[{"text":"24:35 - Add a macro to an Xcode project","type":"text"}],"url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10166\/?time=1475"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"SwiftData","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"title":"WWDC23","images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23","role":"collectionGroup"},"WWDC23.jpeg":{"identifier":"WWDC23.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23.jpeg"}],"alt":null,"type":"image"},"WWDC23-10166-macro15":{"identifier":"WWDC23-10166-macro15","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-macro15.jpg"}],"alt":"Example of macro expansion","type":"image"},"https://":{"title":"Blog","identifier":"https:\/\/","type":"link","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/"},"WWDC23-10166-init5":{"identifier":"WWDC23-10166-init5","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10166-init5.jpg"}],"alt":"add our macro package to my Xcode project","type":"image"},"https://developer.apple.com/forums/create/question?&tag1=235&tag2=662030":{"title":"Have a question? Ask with tag wwdc2023-10166","identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030","type":"link","titleInlineContent":[{"text":"Have a question? Ask with tag wwdc2023-10166","type":"text"}],"url":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=235&tag2=662030"},"https://github.com/multitudes":{"title":"GitHub","identifier":"https:\/\/github.com\/multitudes","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/multitudes"}}}