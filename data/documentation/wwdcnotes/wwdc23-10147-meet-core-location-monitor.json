{"abstract":[{"type":"text","text":"Discover how Core Location Monitor can help you better understand location and beacon events in your app. Learn how to use Core Location Conditions to describe and track the state of events in your app, and find out how you can better respond to transitions in your apps through Swift semantics and improved reliability."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"kind":"article","sections":[],"metadata":{"title":"Meet Core Location Monitor","roleHeading":"WWDC23","role":"sampleCode","modules":[{"name":"WWDC Notes"}]},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"code":["let self.monitor = await CLMonitor(\"iHeartMonitor\")","","\/\/Add a condition for monitoring","await self.monitor.add(aCondition, identifier: \"Work\")","","\/\/Receive and respond to events","Task {","  for try await event in self.monitor.events {","    takeAction(on: event)","  }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Monitor-Overview","level":3,"type":"heading","text":"Monitor Overview"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When creating a "},{"type":"codeVoice","code":"CLMonitor"},{"type":"text","text":", only one instance with a given name can be opened at a time"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"let self.monitor = await CLMonitor(\"iHeartMonitor\")"},{"type":"text","text":" will either return existing instance or generate a new one"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"anchor":"Supported-Conditions","level":3,"type":"heading","text":"Supported Conditions"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Add a condition to a CLMonitor instance for monitoring and associate it with an identifier using the "},{"type":"codeVoice","code":"add"},{"type":"text","text":" method"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Example: “Work” uniquely identifies the record of a condition that is satisfied when the user is at work. The record object and its contents will be accessible by this identifier and the condition will be monitored until it is removed.","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You can remove the monitoring condition and corresponding record by calling ","type":"text"},{"code":"remove","type":"codeVoice"},{"text":" with the same identifier","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Two types of conditions supported on iOS:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"CircularGeographicCondition","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Defined by a center and a radius. Only events reported inside of the circle condition are considered “satisfied”","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["    \/\/ Circular geographic condition","    let center = CLLocationCoordinate2D(latitude: 37.33467, longitude: -122.00898)","    let appleParkCondition = CLMonitor.CircularGeographicCondition(","      center: center,","      radius: 100.0","    )"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"text":"BeaconIdentityCondition","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Condition satisfied if someone approaches a site of interest"},{"type":"text","text":" "},{"type":"text","text":"Definedby a UUID, major number and minor number"},{"type":"text","text":" "},{"type":"text","text":"Can use wildcards or ommitting numbers to filter beacons"},{"type":"text","text":" "},{"type":"text","text":"Example conditions for:"}]},{"items":[{"content":[{"inlineContent":[{"text":"If you want to determine is someone is near any of your sites, all sites can simply use the same UUID","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to know if someone is near a specific site, all sites can use the same UUID, but you can give each site a different major number for identification"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["        let condition1 = CLMonitor.BeaconIdentityCondition(","        uuid: myDevCentersUUID,","        major: texasDevCenter","        )","        let condition1 = CLMonitor.BeaconIdentityCondition(","        uuid: myDevCentersUUID,","        major: arizonaDevCenter","        )"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If you want to know if someone is near a specific area of a site","type":"text"}]}]}],"type":"unorderedList"},{"code":["let condition1 = CLMonitor.BeaconIdentityCondition(","  uuid: myDevCentersUUID,","  major: texasDevCenter,","  minor: cafeteria",")","let condition1 = CLMonitor.BeaconIdentityCondition(","  uuid: myDevCentersUUID,","  major: texasDevCenter,","  minor: parkingLot",")"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Optionally, you can add a condition with a default state ("},{"type":"codeVoice","code":".satisfied"},{"type":"text","text":", "},{"type":"codeVoice","code":".unsatisfied"},{"type":"text","text":") if you know where most common usage will occur. CLMonitor will override the state if it’s incorrect during usage."}]}]}],"type":"unorderedList"},{"code":["await self.monitor.add(","  appleParkCondition,","  identifier: \"appleParkCondition\",","  assuming: .unsatisfied",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"For more information on how Beacons work, please refer to ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons","isActive":true,"type":"reference"}]}],"type":"paragraph"},{"anchor":"Inspecting-Records","level":3,"type":"heading","text":"Inspecting Records"},{"inlineContent":[{"type":"image","identifier":"WWDC23-10147-CLMonitorInspectingRecords"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After fetching the record for a condition you’ll receive the "},{"code":"lastEvent","type":"codeVoice"},{"type":"text","text":" and the "},{"code":"state","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Why is a "},{"type":"codeVoice","code":"Condition?"},{"type":"text","text":" also returned inside of the event record for a Condition?"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"This is called a “refinement” for BeaconIdentityCondition. If a condition with major and minor wildcarded becomes satisfied, that event will be delivered with the refinement populated. That refinement condition will carry the UUID but also the major and minor information of the observed beacon."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["\/\/ Inspecting a record and its contents","\/\/ Get record","let monitoredRecord = await self.monitor.record(for: \"appleParkCondition\")","\/\/ Monitored condition","let condition = monitoredRecord?.condition","\/\/ Get last event","let lastEvent = monitoredRecord?.lastEvent","\/\/ Get last state","let lastState = lastEvent?.state"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To check all monitored conditions:","type":"text"}],"type":"paragraph"},{"code":["\/\/ Get all monitored identifiers","for anIdentifier in await self.monitor.identifiers {","  \/\/ Get record","  if let monitoredRecord = await self.monitor.record(for: anIdentifier) {","    ...","  }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Handling-Events","level":3,"type":"heading","text":"Handling Events"},{"inlineContent":[{"type":"text","text":"When Core Location observes a state for a monitored condition which differs from the state reported in the lastEvent, then Core Location will deliver a new event through the events async sequence property on your monitor which resumes the awaiting loop."}],"type":"paragraph"},{"code":["\/\/ Receiving events","Task{","  for try await event in self.monitor.events {","    switch (event.state){","    case satisfied:","      print (\"\\(event.identifier) is satisfied\" )","    case unsatisfied:","      print (\"\\(event.identifier) is unsatisfied\")","    case unknown:","      print(\"\\(event.identifier) is unknown\")","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Best-Practices","level":3,"type":"heading","text":"Best Practices"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Keep CLMonitor instances unique, don’t try to create duplicates with the same name","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Task and await your events","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Core Location will launch your app in the background (if it was terminated) as long as it is authorized to receive user location. That means your app needs to reinit monitor and await events whenever it is launched.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Using duplicate CLMonitors in widgets and plug-ins will launch your app and cause issues in states and conditions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Try not to maintain condition states in your own data store, instead act on them as they arrive from CLMonitor to avoid them getting out of sync","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Written-By","level":2,"type":"heading","text":"Written By"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"trav-ma"}]}]},{"size":4,"content":[{"text":"Travis Ma","level":3,"type":"heading","anchor":"Travis-Ma"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"isActive":true,"overridingTitle":"Contributed Notes","type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/trav-ma"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/trav-ma"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.travisma.me"}],"type":"paragraph"}]}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"anchor":"Related-Sessions","level":2,"type":"heading","text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10147","type":"reference","overridingTitle":"Watch Video (16 min)","isActive":true}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10147-meet-core-location-monitor"]}],"references":{"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","role":"collection","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"trav-ma.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/trav-ma.jpeg","traits":["1x","light"]}],"identifier":"trav-ma.jpeg","type":"image"},"https://www.travisma.me":{"titleInlineContent":[{"text":"Blog","type":"text"}],"type":"link","identifier":"https:\/\/www.travisma.me","title":"Blog","url":"https:\/\/www.travisma.me"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10146-Meet-Core-Location-for-spatial-computing":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10146-meet-core-location-for-spatial-computing","role":"sampleCode","abstract":[{"text":"Discover how Core Location helps your app find its place in the world — literally. We’ll share how you can build a spatial computing app that uses a person’s location while respecting their privacy. You’ll also learn how your app can request location access and how Core Location adapts requests from compatible iPad and iPhone apps.","type":"text"}],"title":"Meet Core Location for spatial computing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10180-Discover-streamlined-location-updates":{"type":"topic","title":"Discover streamlined location updates","url":"\/documentation\/wwdcnotes\/wwdc23-10180-discover-streamlined-location-updates","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates","role":"sampleCode","kind":"article","abstract":[{"text":"Move into the future with Core Location! Meet the CLLocationUpdate class, designed for modern Swift concurrency, and learn how it simplifies getting location updates. We’ll show you how this class works with your apps when they run in the foreground or background and share some best practices.","type":"text"}]},"https://developer.apple.com/wwdc23/10147":{"identifier":"https:\/\/developer.apple.com\/wwdc23\/10147","url":"https:\/\/developer.apple.com\/wwdc23\/10147","checksum":null,"type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/trav-ma":{"url":"\/documentation\/wwdcnotes\/trav-ma","abstract":[{"type":"text","text":"Software Development Manager for IQVIA’s Mobile team in Arizona."}],"type":"topic","role":"sampleCode","title":"Travis Ma (5 notes)","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/trav-ma","images":[{"type":"card","identifier":"trav-ma.jpeg"},{"type":"icon","identifier":"trav-ma.jpeg"}]},"https://github.com/trav-ma":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/trav-ma","title":"GitHub","identifier":"https:\/\/github.com\/trav-ma","type":"link"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","type":"image","alt":null},"WWDC23-10147-CLMonitorInspectingRecords":{"type":"image","identifier":"WWDC23-10147-CLMonitorInspectingRecords","alt":"CLMonitor Inspecting Records","variants":[{"url":"\/images\/WWDCNotes\/WWDC23-10147-CLMonitorInspectingRecords.jpg","traits":["1x","light"]}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"WWDC23.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC23.jpeg","traits":["1x","light"]}],"identifier":"WWDC23.jpeg","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"kind":"article","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"title":"WWDC23","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23","role":"collectionGroup","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"},"https://developer.apple.com/documentation/corelocation/ranging_for_beacons":{"titleInlineContent":[{"text":"Ranging for Beacons","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons","title":"Ranging for Beacons","url":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons"},"WWDC23-Icon.png":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC23-Icon.png","traits":["1x","light"]}],"identifier":"WWDC23-Icon.png","type":"image"},"trav-ma":{"variants":[{"url":"\/images\/WWDCNotes\/trav-ma.jpeg","traits":["1x","light"]}],"identifier":"trav-ma","type":"image","alt":"Profile image of Travis Ma"}}}