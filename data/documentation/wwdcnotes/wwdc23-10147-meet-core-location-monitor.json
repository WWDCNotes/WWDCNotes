{"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc23\/10147","isActive":true,"overridingTitle":"Watch Video (16 min)"}},"sections":[],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"abstract":[{"type":"text","text":"Discover how Core Location Monitor can help you better understand location and beacon events in your app. Learn how to use Core Location Conditions to describe and track the state of events in your app, and find out how you can better respond to transitions in your apps through Swift semantics and improved reliability."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10147-meet-core-location-monitor"]}],"seeAlsoSections":[{"title":"New Tools & Frameworks","generated":true,"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10082-Meet-ARKit-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10184-Meet-ActivityKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10043-Meet-MapKit-for-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10191-Meet-Object-Capture-for-iOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10025-Meet-Push-Notifications-Console","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10083-Meet-Reality-Composer-Pro","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10099-Meet-RealityKit-Trace","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10279-Meet-Safari-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10013-Meet-StoreKit-for-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10171-Meet-Swift-OpenAPI-Generator","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10109-Meet-SwiftUI-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111215-Meet-UIKit-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10039-Meet-device-management-for-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10268-Meet-mergeable-libraries","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10026-Meet-watchOS-10"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"codeListing","syntax":"swift","code":["let self.monitor = await CLMonitor(\"iHeartMonitor\")","","\/\/Add a condition for monitoring","await self.monitor.add(aCondition, identifier: \"Work\")","","\/\/Receive and respond to events","Task {","  for try await event in self.monitor.events {","    takeAction(on: event)","  }","}"]},{"type":"heading","level":3,"anchor":"Monitor-Overview","text":"Monitor Overview"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When creating a ","type":"text"},{"code":"CLMonitor","type":"codeVoice"},{"text":", only one instance with a given name can be opened at a time","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"let self.monitor = await CLMonitor(\"iHeartMonitor\")","type":"codeVoice"},{"type":"text","text":" will either return existing instance or generate a new one"}]}]}]}]}],"type":"unorderedList"},{"anchor":"Supported-Conditions","level":3,"type":"heading","text":"Supported Conditions"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a condition to a CLMonitor instance for monitoring and associate it with an identifier using the ","type":"text"},{"code":"add","type":"codeVoice"},{"type":"text","text":" method"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Example: “Work” uniquely identifies the record of a condition that is satisfied when the user is at work. The record object and its contents will be accessible by this identifier and the condition will be monitored until it is removed.","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You can remove the monitoring condition and corresponding record by calling ","type":"text"},{"type":"codeVoice","code":"remove"},{"text":" with the same identifier","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two types of conditions supported on iOS:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CircularGeographicCondition"}]},{"items":[{"content":[{"inlineContent":[{"text":"Defined by a center and a radius. Only events reported inside of the circle condition are considered “satisfied”","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]}]}],"type":"unorderedList"},{"code":["    \/\/ Circular geographic condition","    let center = CLLocationCoordinate2D(latitude: 37.33467, longitude: -122.00898)","    let appleParkCondition = CLMonitor.CircularGeographicCondition(","      center: center,","      radius: 100.0","    )"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"BeaconIdentityCondition","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Condition satisfied if someone approaches a site of interest","type":"text"},{"text":" ","type":"text"},{"text":"Definedby a UUID, major number and minor number","type":"text"},{"text":" ","type":"text"},{"text":"Can use wildcards or ommitting numbers to filter beacons","type":"text"},{"text":" ","type":"text"},{"text":"Example conditions for:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to determine is someone is near any of your sites, all sites can simply use the same UUID"}]}]},{"content":[{"inlineContent":[{"text":"If you want to know if someone is near a specific site, all sites can use the same UUID, but you can give each site a different major number for identification","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]}]}],"type":"unorderedList"},{"code":["        let condition1 = CLMonitor.BeaconIdentityCondition(","        uuid: myDevCentersUUID,","        major: texasDevCenter","        )","        let condition1 = CLMonitor.BeaconIdentityCondition(","        uuid: myDevCentersUUID,","        major: arizonaDevCenter","        )"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If you want to know if someone is near a specific area of a site"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["let condition1 = CLMonitor.BeaconIdentityCondition(","  uuid: myDevCentersUUID,","  major: texasDevCenter,","  minor: cafeteria",")","let condition1 = CLMonitor.BeaconIdentityCondition(","  uuid: myDevCentersUUID,","  major: texasDevCenter,","  minor: parkingLot",")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Optionally, you can add a condition with a default state ("},{"code":".satisfied","type":"codeVoice"},{"type":"text","text":", "},{"code":".unsatisfied","type":"codeVoice"},{"type":"text","text":") if you know where most common usage will occur. CLMonitor will override the state if it’s incorrect during usage."}]}]}],"type":"unorderedList"},{"code":["await self.monitor.add(","  appleParkCondition,","  identifier: \"appleParkCondition\",","  assuming: .unsatisfied",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"For more information on how Beacons work, please refer to "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons","isActive":true}]}],"type":"paragraph"},{"anchor":"Inspecting-Records","level":3,"type":"heading","text":"Inspecting Records"},{"inlineContent":[{"identifier":"WWDC23-10147-CLMonitorInspectingRecords","type":"image"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After fetching the record for a condition you’ll receive the "},{"code":"lastEvent","type":"codeVoice"},{"type":"text","text":" and the "},{"code":"state","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Why is a ","type":"text"},{"code":"Condition?","type":"codeVoice"},{"text":" also returned inside of the event record for a Condition?","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"This is called a “refinement” for BeaconIdentityCondition. If a condition with major and minor wildcarded becomes satisfied, that event will be delivered with the refinement populated. That refinement condition will carry the UUID but also the major and minor information of the observed beacon."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["\/\/ Inspecting a record and its contents","\/\/ Get record","let monitoredRecord = await self.monitor.record(for: \"appleParkCondition\")","\/\/ Monitored condition","let condition = monitoredRecord?.condition","\/\/ Get last event","let lastEvent = monitoredRecord?.lastEvent","\/\/ Get last state","let lastState = lastEvent?.state"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To check all monitored conditions:"}],"type":"paragraph"},{"code":["\/\/ Get all monitored identifiers","for anIdentifier in await self.monitor.identifiers {","  \/\/ Get record","  if let monitoredRecord = await self.monitor.record(for: anIdentifier) {","    ...","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Handling-Events","level":3,"type":"heading","text":"Handling Events"},{"inlineContent":[{"text":"When Core Location observes a state for a monitored condition which differs from the state reported in the lastEvent, then Core Location will deliver a new event through the events async sequence property on your monitor which resumes the awaiting loop.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Receiving events","Task{","  for try await event in self.monitor.events {","    switch (event.state){","    case satisfied:","      print (\"\\(event.identifier) is satisfied\" )","    case unsatisfied:","      print (\"\\(event.identifier) is unsatisfied\")","    case unknown:","      print(\"\\(event.identifier) is unknown\")","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Best-Practices","level":3,"type":"heading","text":"Best Practices"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Keep CLMonitor instances unique, don’t try to create duplicates with the same name"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Task and await your events","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Core Location will launch your app in the background (if it was terminated) as long as it is authorized to receive user location. That means your app needs to reinit monitor and await events whenever it is launched.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Using duplicate CLMonitors in widgets and plug-ins will launch your app and cause issues in states and conditions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Try not to maintain condition states in your own data store, instead act on them as they arrive from CLMonitor to avoid them getting out of sync","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Written-By","level":2,"type":"heading","text":"Written By"},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/475976?v=4","type":"image"}]}],"size":1},{"content":[{"text":"Travis Ma","level":3,"anchor":"Travis-Ma","type":"heading"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/trav-ma","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"reference","identifier":"www.travisma.me","isActive":true}],"type":"paragraph"}],"size":4}],"numberOfColumns":5,"type":"row"},{"anchor":"Related-Sessions","level":2,"type":"heading","text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates"]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC23","title":"Meet Core Location Monitor","role":"sampleCode"},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10013-Meet-StoreKit-for-SwiftUI":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10013-Meet-StoreKit-for-SwiftUI","abstract":[{"type":"text","text":"Discover how you can use App Store product metadata and Xcode Previews to add in-app purchases to your app with just a few lines of code. Explore a new collection of UI components in StoreKit and learn how you can easily merchandise your products, present subscriptions in a way that helps users make informed decisions, and more."}],"title":"Meet StoreKit for SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10013-meet-storekit-for-swiftui","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","title":"WWDC Notes","url":"\/documentation\/wwdcnotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}]},"https://avatars.githubusercontent.com/u/475976?v=4":{"variants":[{"traits":["1x","light"],"url":"https:\/\/avatars.githubusercontent.com\/u\/475976?v=4"}],"identifier":"https:\/\/avatars.githubusercontent.com\/u\/475976?v=4","type":"image","alt":"Profile image of Travis Ma"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10099-Meet-RealityKit-Trace":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10099-Meet-RealityKit-Trace","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10099-meet-realitykit-trace","role":"sampleCode","title":"Meet RealityKit Trace","abstract":[{"type":"text","text":"Discover how you can use RealityKit Trace to improve the performance of your spatial computing apps. Explore performance profiling guidelines for this platform and learn how the RealityKit Trace template can help you optimize rendering for your apps. We’ll also provide guidance on profiling various types of content in your app to help pinpoint performance issues."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10184-Meet-ActivityKit":{"url":"\/documentation\/wwdcnotes\/wwdc23-10184-meet-activitykit","type":"topic","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10184-Meet-ActivityKit","title":"Meet ActivityKit","abstract":[{"type":"text","text":"Live Activities are a glanceable way for someone to keep track of the progress of a task within your app. We’ll teach you how you can create helpful experiences for the Lock Screen, the Dynamic Island, and StandBy. Learn how to update your app’s Live Activities, monitor activity state, and take advantage of WidgetKit and SwiftUI to build richer experiences."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10026-Meet-watchOS-10":{"role":"sampleCode","type":"topic","title":"Meet watchOS 10","url":"\/documentation\/wwdcnotes\/wwdc23-10026-meet-watchos-10","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10026-Meet-watchOS-10","abstract":[{"type":"text","text":"Discover some of the most significant changes to Apple Watch since its introduction as we tour the redesigned user interface and the new Smart Stack. Learn how Apple designers approached the design of watchOS 10 as we explore layout, navigation, and visual style, and find out how you can apply them to create a great app for Apple Watch."}]},"WWDC23-10147-CLMonitorInspectingRecords":{"identifier":"WWDC23-10147-CLMonitorInspectingRecords","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10147-CLMonitorInspectingRecords.jpg"}],"type":"image","alt":"CLMonitor Inspecting Records"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10032-Meet-Assistive-Access":{"title":"Meet Assistive Access","abstract":[{"text":"Learn how Assistive Access can help people with cognitive disabilities more easily use iPhone and iPad. Discover the design principles that guide Assistive Access and find out how the system experience adapts to lighten cognitive load. We’ll show you how Assistive Access works and what you can do to support this experience in your app.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10032-Meet-Assistive-Access","url":"\/documentation\/wwdcnotes\/wwdc23-10032-meet-assistive-access","role":"sampleCode","type":"topic","kind":"article"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/trav-ma":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/trav-ma","type":"topic","url":"\/documentation\/wwdcnotes\/trav-ma","role":"sampleCode","title":"Travis Ma (5 notes)","abstract":[{"text":"Software Development Manager for IQVIA’s Mobile team in Arizona.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10043-Meet-MapKit-for-SwiftUI":{"title":"Meet MapKit for SwiftUI","abstract":[{"text":"Discover how expanded SwiftUI support for MapKit has made it easier than ever for you to integrate Maps into your app. We’ll show you how to use SwiftUI to add annotations and overlays to a map, control the camera, and more.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10043-Meet-MapKit-for-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc23-10043-meet-mapkit-for-swiftui","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14, tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"SwiftData","type":"codeVoice"},{"type":"text","text":", "},{"code":"Observation","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit","type":"codeVoice"},{"type":"text","text":" views, and more."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"role":"collectionGroup","title":"WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10109-Meet-SwiftUI-for-spatial-computing":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10109-Meet-SwiftUI-for-spatial-computing","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10109-meet-swiftui-for-spatial-computing","role":"sampleCode","title":"Meet SwiftUI for spatial computing","abstract":[{"text":"Take a tour of the solar system with us and explore SwiftUI for visionOS! Discover how you can build an entirely new universe of apps with windows, volumes, and spaces. We’ll show you how to get started with SwiftUI on this platform as we build an astronomy app, add 3D content, and create a fully immersive experience to transport people to the stars.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10025-Meet-Push-Notifications-Console":{"title":"Meet Push Notifications Console","abstract":[{"text":"The Push Notifications Console is the best way to quickly test user notifications in your app. Learn how you can iterate on new ideas quickly by sending notifications directly from the console and analyze delivery logs to learn more about your pushes. We’ll also show you how to generate and validate tokens to successfully authenticate with Apple Push Notification service (APNs).","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10025-Meet-Push-Notifications-Console","url":"\/documentation\/wwdcnotes\/wwdc23-10025-meet-push-notifications-console","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10039-Meet-device-management-for-Apple-Watch":{"abstract":[{"text":"Organizations can now deploy and configure Apple Watch in addition to other Apple devices. Learn how to implement device management for watchOS to help organizations improve productivity, support wellness, and provide additional support for their employees.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10039-Meet-device-management-for-Apple-Watch","url":"\/documentation\/wwdcnotes\/wwdc23-10039-meet-device-management-for-apple-watch","type":"topic","role":"sampleCode","kind":"article","title":"Meet device management for Apple Watch"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10082-Meet-ARKit-for-spatial-computing":{"title":"Meet ARKit for spatial computing","abstract":[{"text":"Discover how you can use ARKit’s tracking and scene understanding features to develop a whole new universe of immersive apps and games. Learn how visionOS and ARKit work together to help you create apps that understand a person’s surroundings — all while preserving privacy. Explore the latest updates to the ARKit API and follow along as we demonstrate how to take advantage of hand tracking and scene geometry in your apps.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10082-Meet-ARKit-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10082-meet-arkit-for-spatial-computing","role":"sampleCode","type":"topic","kind":"article"},"www.travisma.me":{"identifier":"www.travisma.me","title":"Blog","type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"www.travisma.me"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10146-Meet-Core-Location-for-spatial-computing":{"url":"\/documentation\/wwdcnotes\/wwdc23-10146-meet-core-location-for-spatial-computing","kind":"article","title":"Meet Core Location for spatial computing","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","abstract":[{"type":"text","text":"Discover how Core Location helps your app find its place in the world — literally. We’ll share how you can build a spatial computing app that uses a person’s location while respecting their privacy. You’ll also learn how your app can request location access and how Core Location adapts requests from compatible iPad and iPhone apps."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10171-Meet-Swift-OpenAPI-Generator":{"title":"Meet Swift OpenAPI Generator","abstract":[{"text":"Discover how Swift OpenAPI Generator can help you work with HTTP server APIs whether you’re extending an iOS app or writing a server in Swift. We’ll show you how this package plugin can streamline your workflow and simplify your codebase by generating code from an OpenAPI document.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10171-Meet-Swift-OpenAPI-Generator","url":"\/documentation\/wwdcnotes\/wwdc23-10171-meet-swift-openapi-generator","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10187-Meet-SwiftData":{"title":"Meet SwiftData","abstract":[{"text":"SwiftData is a powerful and expressive persistence framework built for Swift. We’ll show you how you can model your data directly from Swift code, use SwiftData to work with your models, and integrate with SwiftUI.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10187-Meet-SwiftData","url":"\/documentation\/wwdcnotes\/wwdc23-10187-meet-swiftdata","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10268-Meet-mergeable-libraries":{"title":"Meet mergeable libraries","abstract":[{"text":"Discover how mergeable libraries combine the best parts of static and dynamic libraries to help improve your app’s productivity and runtime performance. Learn how you can enable faster development while shipping the smallest app. We’ll show you how to adopt mergeable libraries in Xcode 15 and share best practices for working with your code.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10268-Meet-mergeable-libraries","url":"\/documentation\/wwdcnotes\/wwdc23-10268-meet-mergeable-libraries","role":"sampleCode","type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10083-Meet-Reality-Composer-Pro":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10083-Meet-Reality-Composer-Pro","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10083-meet-reality-composer-pro","role":"sampleCode","title":"Meet Reality Composer Pro","abstract":[{"text":"Discover how to easily compose, edit, and preview 3D content with Reality Composer Pro. Follow along as we explore this developer tool by setting up a new project, composing scenes, adding particle emitters and audio, and even previewing content on device.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10180-Discover-streamlined-location-updates":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates","role":"sampleCode","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10180-discover-streamlined-location-updates","type":"topic","title":"Discover streamlined location updates","abstract":[{"text":"Move into the future with Core Location! Meet the CLLocationUpdate class, designed for modern Swift concurrency, and learn how it simplifies getting location updates. We’ll show you how this class works with your apps when they run in the foreground or background and share some best practices.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10191-Meet-Object-Capture-for-iOS":{"title":"Meet Object Capture for iOS","abstract":[{"text":"Discover how you can offer an end-to-end Object Capture experience directly in your iOS apps to help people turn their objects into ready-to-use 3D models. Learn how you can create a fully automated Object Capture scan flow with our sample app and how you can assist people in automatically capturing the best content for their model. We’ll also discuss LiDAR data and provide best practices for scanning objects.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10191-Meet-Object-Capture-for-iOS","url":"\/documentation\/wwdcnotes\/wwdc23-10191-meet-object-capture-for-ios","role":"sampleCode","type":"topic","kind":"article"},"https://developer.apple.com/documentation/corelocation/ranging_for_beacons":{"title":"Ranging for Beacons","url":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/ranging_for_beacons","titleInlineContent":[{"type":"text","text":"Ranging for Beacons"}],"type":"link"},"https://developer.apple.com/wwdc23/10147":{"url":"https:\/\/developer.apple.com\/wwdc23\/10147","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc23\/10147","type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-111215-Meet-UIKit-for-spatial-computing":{"url":"\/documentation\/wwdcnotes\/wwdc23-111215-meet-uikit-for-spatial-computing","type":"topic","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-111215-Meet-UIKit-for-spatial-computing","title":"Meet UIKit for spatial computing","abstract":[{"type":"text","text":"Learn how to bring your UIKit app to visionOS. We’ll show you how to build for a new destination, explore APIs and best practices for spatial computing, and take your content into the third dimension when you use SwiftUI with UIKit in visionOS."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10279-Meet-Safari-for-spatial-computing":{"title":"Meet Safari for spatial computing","abstract":[{"text":"Discover the web for visionOS and learn how people can experience your web content in a whole new way. Explore the unique input model powering this platform and learn how you can optimize your website for spatial computing. We’ll also share how emerging standards are helping shape 3D experiences for the web.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10279-Meet-Safari-for-spatial-computing","url":"\/documentation\/wwdcnotes\/wwdc23-10279-meet-safari-for-spatial-computing","role":"sampleCode","type":"topic","kind":"article"}}}