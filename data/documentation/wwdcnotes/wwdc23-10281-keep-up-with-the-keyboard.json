{"metadata":{"role":"sampleCode","roleHeading":"WWDC23","modules":[{"name":"WWDC Notes"}],"title":"Keep up with the keyboard"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10281-Keep-up-with-the-keyboard"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10281-keep-up-with-the-keyboard"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"sections":[],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Speaker: Spencer Lewson, Keyboard Engineer"}]},{"type":"heading","anchor":"Out-of-process-keyboard","level":2,"text":"Out of process keyboard"},{"inlineContent":[{"type":"text","text":"Taking the keyboard out of the app process:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"improves privacy and security"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"improves memory management as there is now only one keyboard"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"allows for new exciting functionality in the future"}]}]}],"type":"unorderedList"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Prior to iOS 17, the keyboard’s views and logic were executing within your apps process. But new on iPhone on iOS 17, the keyboard has been moved to its own process, running almost completely outside your app.","type":"text"}]}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"For the majority of apps, these changes are completely transparent and require no adoption from you. Though, aspects of this new asynchronous approach now exist throughout the entire keyboard and can introduce some slight differences in timing."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So if your app is especially sensitive to the timing of text entry, selection changes, or any other text related operations, you should keep this new architecture in mind."}],"type":"paragraph"}]},{"level":2,"type":"heading","text":"Design for the keyboard","anchor":"Design-for-the-keyboard"},{"inlineContent":[{"type":"text","text":"With Stage Manager, now you can always just move up your views, the height of the keyboard."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Keyboard Layout Guide","anchor":"Keyboard-Layout-Guide"},{"inlineContent":[{"type":"text","text":"Align to the "},{"code":"keyboardLayoutGuide","type":"codeVoice"},{"type":"text","text":" to automatically adjust for the keyboard:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["view.keyboardLayoutGuide.topAnchor.constraint(equalTo: textView.bottomAnchor).isActive = true"]},{"level":4,"type":"heading","text":"Default behaviors","anchor":"Default-behaviors"},{"items":[{"content":[{"inlineContent":[{"text":"Follows the keyboard when onscreen and docked","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Uses bottom safe area when offscreen or undocked","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Follows "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dismiss"}]},{"type":"text","text":" gesture when it intersects"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"See more in the session “Your Guide to Keyboard Layout” from WWDC21.","type":"text"}]}],"type":"paragraph"},{"level":4,"type":"heading","text":"Customizing the guide","anchor":"Customizing-the-guide"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"followsUndockedKeyboard"},{"type":"text","text":" (defaults to false): Set to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" to always follow the keyboard when undocked from the bottom."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"NEW"}],"type":"strong"},{"text":" ","type":"text"},{"code":"usesBottomSafeArea","type":"codeVoice"},{"text":" (defaults to true): Set to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" to avoid using the bottom safe area when undocked or offscreen.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"NEW"}],"type":"strong"},{"text":" ","type":"text"},{"code":"keyboardDismissPadding","type":"codeVoice"},{"text":": Used to add padding above the keyboard for the ","type":"text"},{"inlineContent":[{"text":"scroll to dismiss","type":"text"}],"type":"emphasis"},{"text":" gesture.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Example of using "},{"type":"codeVoice","code":"usesBottomSafeArea"},{"type":"text","text":" to create keyboard and text view aligned with safe area:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["view.keyboardLayoutGuide.usesBottomSafeArea = false","textField.topAnchor.constraint(equalToSystemSpacingBelow: backdrop.topAnchor, multiplier: 1.0).isActive = true","view.keyboardLayoutGuide.topAnchor.constraint(greaterThanOrEqualToSystemSpacingBelow: textField.bottomAnchor, multiplier: 1.0).isActive = true","view.keyboardLayoutGuide.topAnchor.constraint(equalTo: backdrop.bottomAnchor).isActive = true","view.safeAreaLayoutGuide.bottomAnchor.constraint(greaterThanOrEqualTo: textField.bottomAnchor).isActive = true"]},{"inlineContent":[{"type":"text","text":"Example of using "},{"type":"codeVoice","code":"keyboardDismissPadding"},{"type":"text","text":" to start the "},{"type":"emphasis","inlineContent":[{"text":"keyboard dismiss gesture","type":"text"}]},{"type":"text","text":" when the touch intersects with the textfield:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var dismissPadding = aboveKeyboardView.bounds.size.height","view.keyboardLayoutGuide.keyboardDismissPadding = dismissPadding"]},{"level":3,"type":"heading","text":"SwiftUI","anchor":"SwiftUI"},{"inlineContent":[{"type":"text","text":"Most of the stuff around keyboards are automatically handled by SwiftUI."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Notifications","anchor":"Notifications"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before SwiftUI and keyboard layout guide, the only way to integrate your keyboard into your application was to listen for a set of keyboard notifications– willShow, didShow, willHide, didHide– and then manually adjust your layout based on the frame and animation information in the notification."}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can still be used"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With Stage Manager it doesn’t always work 100 % of the time"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With the new out of process keyboard, the timings can be different and notifications can be delayed"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["func handleWillShowOrHideKeyboardNotification(notification: NSNotification) {","    \/\/ Retrieve the UIScreen object from the notification (Added iOS 16.1)","    guard let screen = notification.object as? UIScreen else { return }","","    \/\/ Determine if the notification’s screen corresponds to your view’s screen","    guard(screen.isEqual(view.window?.screen)) else { return }","","    \/\/ Calculate intersection with keyboard","    let endFrameKey = UIResponder.keyboardFrameEndUserInfoKey","","    \/\/ Get the ending screen position of the keyboard","    guard let keyboardFrameEnd = userInfo[endFrameKey] as? CGRect else { return }","","    let fromCoordinateSpace: UICoordinateSpace = screen.coordinateSpace","    let toCoordinateSpace: UICoordinateSpace = view","","    \/\/ Convert from the screen coordinate space to your local coordinate space","    let convertedKeyboardFrameEnd = fromCoordinateSpace.convert(keyboardFrameEnd, to: toCoordinateSpace)","","    \/\/ Calculate offset for view adjustment","    var bottomOffset = view.safeAreaInsets.bottom","            ","    \/\/ Get the intersection between the keyboard's frame and the view's bounds","    let viewIntersection = view.bounds.intersection(convertedKeyboardFrameEnd)","            ","    \/\/ Check whether the keyboard intersects your view before adjusting your offset.","    if !viewIntersection.isEmpty {","        \/\/ Set the offset to the height of the intersection","        bottomOffset = viewIntersection.size.height","    }","","    \/\/ Use the new offset to adjust your UI","    movingBottomConstraint.constant = bottomOffset","  ","    \/\/ Adjust view layouts and animate using information in notification","    ...","}"]},{"level":2,"type":"heading","text":"New text entry APIs","anchor":"New-text-entry-APIs"},{"level":3,"type":"heading","text":"Inline predictions (new in iOS 17)","anchor":"Inline-predictions-new-in-iOS-17"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"English langugage keyboard will suggest text inline","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Generated using contextual information in the text field"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"See more in the session “What’s new in text and text interactions”."}]}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@MainActor public protocol UITextInputTraits : NSObjectProtocol {","    \/\/ Controls whether inline text prediction is enabled or disabled during typing","    @available(iOS, introduced: 17.0)","    optional var inlinePredictionType: UITextInlinePredictionType { get set }","}","","public enum UITextInlinePredictionType : Int, @unchecked Sendable {","    case `default` = 0","    case no = 1","    case yes = 2","}","","let textView = UITextView(frame: frame)","textView.inlinePredictionType = .yes"]},{"level":2,"type":"heading","text":"Written By","anchor":"Written-By"},{"numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"MortenGregersen","type":"image"}]}],"size":1},{"content":[{"anchor":"Morten-Bjerg-Gregersen","level":3,"type":"heading","text":"Morten Bjerg Gregersen"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/MortenGregersen","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"http:\/\/atterdagapps.com","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/x.com\/mortengregersen","type":"reference","isActive":true}],"type":"paragraph"}],"size":4}],"type":"row"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10058-Whats-new-with-text-and-text-interactions","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10259-Your-guide-to-keyboard-layout"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"kind":"article","abstract":[{"text":"Each year, the keyboard evolves to support an increasing range of languages, sizes, and features. Discover how you can design your app to keep up with the keyboard, regardless of how it appears on a device. We’ll show you how to create frictionless text entry and share important architectural changes to help you understand how the keyboard works within the system.","type":"text"}],"sampleCodeDownload":{"action":{"isActive":true,"overridingTitle":"Watch Video (15 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10281","type":"reference"},"kind":"sampleDownload"},"references":{"doc://WWDCNotes/documentation/WWDCNotes/MortenGregersen":{"title":"Morten Bjerg Gregersen (21 notes)","kind":"article","url":"\/documentation\/wwdcnotes\/mortengregersen","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/MortenGregersen","abstract":[{"type":"text","text":"Hi 👋 I am Morten - I live in Denmark 🇩🇰"}],"images":[{"identifier":"MortenGregersen.jpeg","type":"card"},{"identifier":"MortenGregersen.jpeg","type":"icon"}]},"https://developer.apple.com/wwdc23/10281":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc23\/10281","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc23\/10281"},"https://github.com/MortenGregersen":{"type":"link","identifier":"https:\/\/github.com\/MortenGregersen","title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/MortenGregersen"},"MortenGregersen.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MortenGregersen.jpeg"}],"alt":null,"identifier":"MortenGregersen.jpeg"},"http://atterdagapps.com":{"type":"link","identifier":"http:\/\/atterdagapps.com","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"http:\/\/atterdagapps.com"},"https://x.com/mortengregersen":{"type":"link","identifier":"https:\/\/x.com\/mortengregersen","title":"X\/Twitter","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"url":"https:\/\/x.com\/mortengregersen"},"WWDCNotes.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"identifier":"WWDCNotes.png"},"WWDC23.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23.jpeg"}],"alt":null,"identifier":"WWDC23.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","type":"topic","kind":"symbol"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"text":", ","type":"text"},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"role":"collectionGroup","kind":"article","type":"topic","title":"WWDC23","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23"},"WWDC23-Icon.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-Icon.png"}],"alt":null,"identifier":"WWDC23-Icon.png"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10259-Your-guide-to-keyboard-layout":{"title":"Your guide to keyboard layout","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10259-Your-guide-to-keyboard-layout","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10259-your-guide-to-keyboard-layout","type":"topic","abstract":[{"type":"text","text":"Discover how you can use the Keyboard Layout Guide to manage how keyboards work within your iOS or iPadOS app. Learn how you can avoid writing lengthy code blocks when you use UIKeyboardLayoutGuide and UITrackingLayoutGuide to integrate the keyboard into your interface, helping people have a smoother, more enjoyable experience whenever they use the on-screen keyboard within your app."}],"role":"sampleCode"},"MortenGregersen":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MortenGregersen.jpeg"}],"alt":"Profile image of Morten Bjerg Gregersen","identifier":"MortenGregersen"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10058-Whats-new-with-text-and-text-interactions":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10058-Whats-new-with-text-and-text-interactions","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10058-whats-new-with-text-and-text-interactions","kind":"article","abstract":[{"type":"text","text":"Text is an absolutely critical component of every app. Discover the latest features and enhancements for creating rich text experiences on Apple platforms. We’ll show you how to take advantage of common text elements and create entirely custom interactions for your app. Learn about updates to dictation, text loupe, and text selection, and explore improvements to text clipping, line wrapping, and hyphenation."}],"title":"What’s new with text and text interactions"}}}