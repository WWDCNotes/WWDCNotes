{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110356-Meet-distributed-actors-in-Swift","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc22-110356-meet-distributed-actors-in-swift"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"Discover distributed actors — an extension of Swift’s actor model that simplifies development of distributed systems. We’ll explore how distributed actor isolation and location transparency can help you avoid the accidental complexity of networking, serialization, and other transport concerns when working with distributed apps and systems."}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"metadata":{"role":"sampleCode","roleHeading":"WWDC22","modules":[{"name":"WWDC Notes"}],"title":"Meet distributed actors in Swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/tictacfish_implementing_a_game_using_distributed_actors"}]}],"type":"aside","name":"Note","style":"note"},{"anchor":"Introduction","text":"Introduction","level":2,"type":"heading"},{"inlineContent":[{"text":"Swift Actors","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"designed to protect you from low-level data races in the same process"}]}]},{"content":[{"inlineContent":[{"text":"compile-time enforced actor isolation checks","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Distributed actors"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"designed to protect you from low-level data races across multiple processes"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"e.g., communication among multiple devices or servers in a cluster","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Distributed-actors","text":"Distributed actors","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By using distributed actors, we’re able to establish a channel between two processes and send messages between them"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Distributed actors still isolate their state and still can only communicate using asynchronous messages"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It’s ok to have multiple distributed actors in the same process"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Distributed actors are just actors, but can participate in remote interactions whenever necessary"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Distributed actors always belong to some distributed actor system, which handles all the serialization and networking necessary to perform remote calls"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Every distributed actor is assigned an ","type":"text"},{"type":"codeVoice","code":"id"},{"text":", uniquely identify said actor in the entire distributed actor system that it is part of.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"id","type":"codeVoice"},{"type":"text","text":"s are assigned by the distributed actor system as the actor is initialized, and later managed by that system (we cannot declare or assign the "},{"code":"id","type":"codeVoice"},{"type":"text","text":" property manually)"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Location transparency:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"ability to be potentially remote without having to change how we interact with such distributed actor","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"regardless where a distributed actor is located, we can interact with it the same way","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"allows us to transparently move our actors, without having to change their implementation"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Road-to-distributed-actors","text":"Road to distributed actors","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Pick a local actor that you’d like to move to distribute actor","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Turn it into a (still local) distributed actor"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the distributed actor "},{"code":"ActorSystem","type":"codeVoice"},{"type":"text","text":" to be remote"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Setup server side app"}]}]}],"type":"orderedList"},{"anchor":"Example","text":"Example","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Pick a local actor that you’d like to move to distribute actor","type":"text"}]}]}],"type":"orderedList"},{"code":["public actor BotPlayer: Identifiable {","  nonisolated public let id: ActorIdentity = .random","  ","  var ai: RandomPlayerBotAI","  var gameState: GameState","  ","  public init(team: CharacterTeam) {","    self.gameState = .init()","    self.ai = RandomPlayerBotAI(playerID: self.id, team: team)","  }","  ","  public func makeMove() throws -> GameMove {","    return try ai.decideNextMove(given: &gameState)","  }","  ","  public func opponentMoved(_ move: GameMove) async throws {","    try gameState.mark(move)","  }","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Turn it into a (still local) distributed actor"}],"type":"paragraph"}]}],"start":2,"type":"orderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"import the ","type":"text"},{"code":"Distributed","type":"codeVoice"},{"text":" module (","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/distributed"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"add the ","type":"text"},{"type":"codeVoice","code":"distributed"},{"text":" keyword in front of the ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" keyword, this way your actor will:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"conform to ","type":"text"},{"code":"DistributedActor","type":"codeVoice"},{"text":" protocol","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"enable a number of additional compile time checks"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler will asks as to declare which "},{"code":"ActorSystem","type":"codeVoice"},{"type":"text","text":" our distributed actor can be used with"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"we can use one of the systems that come with the "},{"type":"codeVoice","code":"Distributed"},{"type":"text","text":" module, such as "},{"type":"codeVoice","code":"LocalTestingDistributedActor"},{"type":"text","text":", or define our own"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"we can declare a module-wide ","type":"text"},{"code":"DefaultDistributedActorSystem","type":"codeVoice"},{"text":" typealias (used by all distributed actors), or an ","type":"text"},{"code":"ActorSystem","type":"codeVoice"},{"text":" typealias in the body of the specific actor","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"each "},{"type":"codeVoice","code":"distributed actor"},{"type":"text","text":" needs to declare an "},{"type":"codeVoice","code":"actorSystem"},{"type":"text","text":" compiler synthesized property - accept an actor system in the initializer, and pass it through to the property"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"add the "},{"type":"codeVoice","code":"distributed"},{"type":"text","text":" keyboard to instance methods that you’d like to expose for remote calls"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"ensure that all ","type":"text"},{"code":"distributed","type":"codeVoice"},{"text":" methods parameters and return values conform to the serialization requirement of the actor system (e.g., ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"code":["import Distributed \/\/ 👈🏻 import the distributed module","","\/\/         👇🏻 add distributed attribute","public distributed actor BotPlayer: Identifiable {","  typealias ActorSystem = LocalTestingDistributedActorSystem \/\/ 👈🏻 declare the ActorSystem this actor belongs to","  ","  var ai: RandomPlayerBotAI","  var gameState: GameState","  ","  \/\/                                  👇🏻 accept the actorSystem during init","  public init(team: CharacterTeam, actorSystem: ActorSystem) {","    self.actorSystem = actorSystem \/\/ 👈🏻 set compiler synthesized property","    self.gameState = .init()","    self.ai = RandomPlayerBotAI(playerID: self.id, team: team)","  }","  ","  \/\/        👇🏻 add distributed keyword to instance methods that can be called remotely","  public distributed func makeMove() throws -> GameMove {","    return try ai.decideNextMove(given: &gameState)","  }","  ","  public distributed func opponentMoved(_ move: GameMove) async throws {","    try gameState.mark(move)","  }","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Move the distributed actor "},{"code":"ActorSystem","type":"codeVoice"},{"type":"text","text":" to be remote"}],"type":"paragraph"}]}],"start":3,"type":"orderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This step requires you to define your own "},{"type":"codeVoice","code":"ActorSystem"},{"type":"text","text":", which will be used in both your app and your server"}]}]},{"content":[{"inlineContent":[{"text":"see ","type":"text"},{"overridingTitle":"sample app","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/tictacfish_implementing_a_game_using_distributed_actors","isActive":true,"overridingTitleInlineContent":[{"text":"sample app","type":"text"}],"type":"reference"},{"text":" for a ","type":"text"},{"code":"SampleWebSocketActorSystem","type":"codeVoice"},{"text":" example","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Setup server side app"}]}]}],"start":4,"type":"orderedList"},{"code":["import Distributed","import TicTacFishShared","","\/\/\/ Stand alone server-side swift application, running our SampleWebSocketActorSystem in server mode.","@main","struct Boot {","  ","  static func main() {","    let system = try! SampleWebSocketActorSystem(mode: .serverOnly(host: \"localhost\", port: 8888))","    ","    \/\/       👇🏻 this is a pattern in sample app, not an API","    system.registerOnDemandResolveHandler { id in","      \/\/ We create new BotPlayers \"ad-hoc\" as they are requested for.","      \/\/ Subsequent resolves are able to resolve the same instance.","      if system.isBotID(id) {","        return system.makeActorWithID(id) {","          OnlineBotPlayer(team: .rodents, actorSystem: system)","        }","      }","      ","      return nil \/\/ unable to create-on-demand for given id","    }","    ","    print(\"========================================================\")","    print(\"=== TicTacFish Server Running on: ws:\/\/\\(system.host):\\(system.port) ==\")","    print(\"========================================================\")","    ","    try await server.terminated \/\/ waits effectively forever (until we shut down the system)","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Cluster-Actor-System","text":"Cluster Actor System","level":3,"type":"heading"},{"inlineContent":[{"text":"Apple has made available a reference, server-side focused, ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-distributed-actors","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Written-By","text":"Written By","level":2,"type":"heading"},{"columns":[{"size":1,"content":[{"inlineContent":[{"identifier":"zntfdr","type":"image"}],"type":"paragraph"}]},{"size":4,"content":[{"type":"heading","text":"Federico Zanetello","anchor":"Federico-Zanetello","level":3},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/github.com\/zntfdr","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/zntfdr.dev","type":"reference"}]}]}],"type":"row","numberOfColumns":5},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","text":"Related Sessions","level":2,"type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-713-Advances-in-Networking-Part-2"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc22\/110356","overridingTitle":"Watch Video (25 min)"},"kind":"sampleDownload"},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110360-Use-Xcode-for-serverside-development":{"url":"\/documentation\/wwdcnotes\/wwdc22-110360-use-xcode-for-serverside-development","title":"Use Xcode for server-side development","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","type":"topic","role":"sampleCode","kind":"article","abstract":[{"text":"Discover how you can create, build, and deploy a Swift server app alongside your pre-existing Xcode projects within the same workspace. We’ll show you how to create your own local app and test endpoints using Xcode, and explore how you can structure and share code between server and client apps to ease your development process","type":"text"}]},"https://developer.apple.com/documentation/swift/tictacfish_implementing_a_game_using_distributed_actors":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/tictacfish_implementing_a_game_using_distributed_actors","title":"Sample app","url":"https:\/\/developer.apple.com\/documentation\/swift\/tictacfish_implementing_a_game_using_distributed_actors","type":"link","titleInlineContent":[{"text":"Sample app","type":"text"}]},"WWDC22.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC22.jpeg"}],"identifier":"WWDC22.jpeg","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-713-Advances-in-Networking-Part-2":{"title":"Advances in Networking, Part 2","abstract":[{"type":"text","text":"Take your networking apps to the next level with advances in Bonjour, custom message framing handlers, and the latest in security. You’ll also learn how to understand your networking performance by collecting metrics, and how best to use the modern networking frameworks on Apple platforms."}],"url":"\/documentation\/wwdcnotes\/wwdc19-713-advances-in-networking-part-2","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-713-Advances-in-Networking-Part-2","role":"sampleCode"},"https://developer.apple.com/wwdc22/110356":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/110356","url":"https:\/\/developer.apple.com\/wwdc22\/110356","type":"download","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC Notes","role":"collection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"title":"Eliminate data races using Swift Concurrency","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency","type":"topic","abstract":[{"type":"text","text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system."}]},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"title":"Federico Zanetello (332 notes)","role":"sampleCode"},"https://developer.apple.com/documentation/distributed":{"title":"api docs","url":"https:\/\/developer.apple.com\/documentation\/distributed","identifier":"https:\/\/developer.apple.com\/documentation\/distributed","type":"link","titleInlineContent":[{"text":"api docs","type":"text"}]},"https://github.com/apple/swift-distributed-actors":{"title":"cluster actor system implementation","url":"https:\/\/github.com\/apple\/swift-distributed-actors","identifier":"https:\/\/github.com\/apple\/swift-distributed-actors","type":"link","titleInlineContent":[{"text":"cluster actor system implementation","type":"text"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"zntfdr":{"alt":"Profile image of Federico Zanetello","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr","type":"image"},"WWDCNotes.png":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","type":"image"},"https://github.com/zntfdr":{"title":"GitHub","url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"WeatherKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ScreenCaptureKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Swift Regex","type":"codeVoice"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","title":"WWDC22","role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC22-Icon.png"},{"type":"card","identifier":"WWDC22.jpeg"}],"type":"topic","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110354-Whats-new-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc22-110354-whats-new-in-swift","title":"What’s new in Swift","abstract":[{"type":"text","text":"Join us for an update on Swift. We’ll take you through performance improvements, explore more secure and extensible Swift packages, and share advancements in Swift concurrency. We’ll also introduce you to Swift Regex, better generics, and other tools built into the language to help you write more flexible & expressive code."}],"role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift"},"https://zntfdr.dev":{"title":"Blog","url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev","type":"link","titleInlineContent":[{"text":"Blog","type":"text"}]},"zntfdr.jpeg":{"alt":null,"variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg","type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"abstract":[{"text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug.","type":"text"}],"kind":"article","title":"Protect mutable state with Swift actors","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","type":"topic","role":"sampleCode"},"WWDC22-Icon.png":{"alt":null,"variants":[{"url":"\/images\/WWDC22-Icon.png","traits":["1x","light"]}],"identifier":"WWDC22-Icon.png","type":"image"}}}