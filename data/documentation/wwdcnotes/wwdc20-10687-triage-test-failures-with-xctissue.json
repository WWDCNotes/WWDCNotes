{"kind":"article","metadata":{"role":"sampleCode","roleHeading":"WWDC20","modules":[{"name":"WWDC Notes"}],"title":"Triage test failures with XCTIssue"},"sections":[],"abstract":[{"type":"text","text":"Put your test failures to work: Learn how to triage and diagnose uncaught issues in your app using the latest testing APIs in Xcode. We’ll show you how to help ease your testing workflow and put failures into context to help you deliver the best quality product."}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10687-Triage-test-failures-with-XCTIssue","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc20-10687-triage-test-failures-with-xctissue"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintaining any active project requires investigating test failures, either locally or in Continuous Integration (CI). Investigating test failures requires answering the following questions:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"What failed?","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"How did it fail?"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Why did it fail?"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Where","type":"text"}],"type":"strong"},{"text":" did it fail?","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Xcode 12 makes answering these questions more efficient. This talk covers the following 4 topics:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Swift errors in tests"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Rich failure objects","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Failure call stacks","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Advanced workflows"}],"type":"paragraph"}]}]},{"anchor":"Presenting-Test-Failures-in-Xcode-12","type":"heading","text":"Presenting Test Failures in Xcode 12","level":2},{"anchor":"Issue-Navigator","type":"heading","text":"Issue Navigator","level":3},{"type":"paragraph","inlineContent":[{"text":"This is an example of a test failure. Notice how the annotation is gray. This indicates that the failure happened underneath the indicated line. On the left, the issue navigator shows a call stack under the failed test.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10687-gray_line","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Clicking on a frame takes the source editor to that location. Now, the annotation is red because this is the actual source of the error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10687-error_source"}]},{"anchor":"Test-Report","type":"heading","text":"Test Report","level":3},{"type":"paragraph","inlineContent":[{"text":"The Test Report is another way to explore test failures, and is especially useful when working with the results of a CI failure.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, we can see a list of failing tests, each with a call stack. When you hover over a stack frame, you can see two buttons to the right. The Jump button, indicated with an arrow, jumps to the source of the error. The second button, called the Assistant button, is new in Xcode 12. This does the same thing as the Jump button, but opens a secondary editor next to the Test Report so you don’t have to go back and forth. Clicking on a different stack frame changes the secondary editor immediately."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10687-assistant_button","type":"image"}]},{"anchor":"1-Using-Swift-Errors-in-your-tests","type":"heading","text":"1. Using Swift Errors in your tests","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"XCTest makes it possible for test functions to throw. When a test does throw, the error is used to formulate the error message."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means you can replace boilerplate like this in your tests…"}]},{"type":"codeListing","syntax":"swift","code":["func testExample() {","  do {","    try codeThatThrows()","  } catch {","    XCTFail(\"\\(error)\")","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"…with this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func testExample() throws {","  try codeThatThrows()","}"]},{"type":"paragraph","inlineContent":[{"text":"However, until recently, these failures could not provide the source code location for thrown errors in tests. That has now been fixed with the Swift runtime improvements in the following platforms:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"iOS and tvOS 13.4"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"macOS 10.15.4"}]}]}]},{"anchor":"Throwing-from-setUp-and-tearDown","type":"heading","text":"Throwing from setUp and tearDown","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar improvements have also been brought to "},{"type":"codeVoice","code":"setUp()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tearDown()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10687-throwing_setup_teardown"}]},{"anchor":"2-Rich-Failure-Objects","type":"heading","text":"2. Rich Failure Objects","level":2},{"type":"paragraph","inlineContent":[{"text":"XCTest has always recorded test failures as 4 discrete values:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Failure message","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"File path"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Line number where the failure was recorded"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"“Expected” flag to indicate if the failure was expected.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These values were passed into the "},{"type":"codeVoice","code":"recordFailure"},{"type":"text","text":" API, which ensures that failures are logged and routed to Xcode for display:"}]},{"type":"codeListing","syntax":"swift","code":["open class XCTestCase: XCTest {","","  open func recordFailure(","    withDescription: String,","    inFile: String,","    atLine: Int,","    expected: Bool","  )","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode 12, these values have been encapsulated into a new struct "},{"type":"codeVoice","code":"XCTIssue"},{"type":"text","text":". This new type also adds:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Distinct types","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Detailed description","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Associated error"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Attachments","type":"text"}]}]}]},{"anchor":"XCTAttachment","type":"heading","text":"`XCTAttachment`","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can capture arbitrary data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add this attachment to the test itself or an ","type":"text"},{"code":"XCTActivity","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"XCTIssue","type":"codeVoice"},{"text":" supports attachments, which allows customized diagnostics for test failures.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Recording-XCTIssues","type":"heading","text":"Recording `XCTIssue`s","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a new API on "},{"type":"codeVoice","code":"XCTestCase"},{"type":"text","text":" for recording test failures, which is called by all types of asserts. The old "},{"type":"codeVoice","code":"recordFailure"},{"type":"text","text":" API has been deprecated."}]},{"type":"codeListing","syntax":"swift","code":["open class XCTestCase: XCTest {","","  open func record(_ issue: XCTIssue)","","}"]},{"anchor":"Modifying-issues","type":"heading","text":"Modifying issues","level":3},{"type":"paragraph","inlineContent":[{"text":"In Swift, issues are immutable or mutable depending on your use of ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"var"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let issue = XCTIssue(...)  \/\/ immutable","","var issue = XCTIssue(...)  \/\/ mutable"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C, there is a special subclass for mutable issues which conforms to "},{"type":"codeVoice","code":"NSMutableCopy"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"objectivec","code":["XCTIssue *issue = [[XCTIssue alloc] init ...];  \/\/ immutable","","XCTMutableIssue *mutableIssue = [issue mutableCopy];  \/\/ mutable"]},{"anchor":"3-Failures-and-Source-Code","type":"heading","text":"3. Failures and Source Code","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the most important questions to answer about a test failure is “where did it happen?”."}]},{"anchor":"Before-XCTIssue","type":"heading","text":"Before `XCTIssue`","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Core test failure data always included file path and line number, which is great for simple tests. This is not enough for functions that are shared by more than one test."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are two tests calling the same shared function:"}]},{"type":"codeListing","syntax":"swift","code":["func testThingA() throws {","  let thing = Thing(\"a\")","  try assertProperties(for: thing)","}","","func testThingB() throws {","  let thing = Thing(\"b\")","  try assertProperties(for: thing)","}","","\/\/ Shared function","func assertProperties(for thing: Thing) throws {","  XCTAssertNotNil(thing.name)","  XCTAssertNotNil(thing.order)","}"]},{"type":"paragraph","inlineContent":[{"text":"Before, the test method would be marked as failing even though the failure occurred somewhere else. This has no further information to help the developer figure out ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"where"}]},{"text":" the failure happened.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10687-shared_failure"}]},{"type":"paragraph","inlineContent":[{"text":"This can be mitigated if the helper functions captures information from where it was invoked and explicitly uses that information in its assertion calls. However, if the helper has more than 1 assertion, there is now a different ambiguity: which assertion failed in the helper?","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10687-capture_helper","type":"image"}]},{"anchor":"Now-with-XCTIssue","type":"heading","text":"Now with `XCTIssue`","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"codeVoice","code":"XCTIssue"},{"type":"text","text":" captures and symbolicates call stacks"}],"type":"strong"},{"type":"text","text":" so the point of failure is more clear. Here, the same code now has a gray annotation to demonstrate that the failure happens lower in the call stack, and a red annotation where the failure actually occurs."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10687-failure_with_xctissue"}]},{"type":"paragraph","inlineContent":[{"text":"Most importantly, no extra effort was required to get this information.","type":"text"}]},{"anchor":"4-Advanced-Workflows-with-new-APIs","type":"heading","text":"4. Advanced Workflows with new APIs","level":2},{"anchor":"Advanced-Workflow-1-Custom-Assertions","type":"heading","text":"Advanced Workflow 1: Custom Assertions","level":3},{"type":"paragraph","inlineContent":[{"text":"You can make your own assertions by creating ","type":"text"},{"type":"codeVoice","code":"XCTIssue"},{"text":" directly and then ","type":"text"},{"type":"codeVoice","code":"record(_ issue:)"},{"text":". In this example, the custom assertion validates some data and then includes the failure as an attachment to the issue that it records.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func assertSomething(","  about data: Data,","  file: StaticString = #filePath,","  line: UInt = #line",") {","  \/\/ Call out to custom validation function.","  guard !isValid(data) else { return }","","  \/\/ Create issue, declare with `var` for mutability.","  var issue = XCTIssue(type: .assertionFailure, compactDescription: \"Invalid data\")","","  \/\/ Attach the invalid data.","  issue.add(XCTAttachment(data: data))","","  \/\/ Capture the call site location as the point of failure.","  let location = XCTSourceCodeLocation(filepath: file, lineNumber: line)","  issue.sourceCodeContext = XCTSourceCodeContext(location: location)","","  \/\/ Record the issue.","  self.record(issue)","}"]},{"anchor":"Advanced-Workflow-2-Overriding-record-issue","type":"heading","text":"Advanced Workflow 2: Overriding `record(_ issue:)`","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can observe, suppress, or modify failures recorded in your test class. This method is the funnel point through which all issues pass, so overrides have total control over the output of the test class."}]},{"anchor":"Example-1-Overriding-for-Observation","type":"heading","text":"Example 1: Overriding for Observation","level":4},{"type":"codeListing","syntax":"swift","code":["override func record(_ issue: XCTIssue) {","  \/\/ Observe, introspect, log, etc:","  if shouldLog(issue) {","    print(\"I just observed an issue!\")","  }","","  \/\/ Don't forget to call super!","  super.record(issue)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use "},{"code":"XCTestObservationCenter","type":"codeVoice"},{"type":"text","text":", but this approach is more useful if you only want to observe failures in one class."}]},{"type":"paragraph","inlineContent":[{"text":"If your override does ","type":"text"},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"text":" call ","type":"text"},{"type":"codeVoice","code":"super"},{"text":", you will have suppressed the issue. It will not continue along the recording chain, and nothing will be sent to Xcode.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["override func record(_ issue: XCTIssue) {","  \/\/ If you don't want to record it, just return.","  if shouldSuppress(issue) {","    return","  }","","  \/\/ Otherwise, pass it to `super`.","  super.record(issue)","}"]},{"anchor":"Example-2-Overriding-for-Modification","type":"heading","text":"Example 2: Overriding for Modification","level":4},{"type":"paragraph","inlineContent":[{"text":"This is the most common reason for overriding because you can add attachments, which can be great diagnostic aids.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["override func record(_ issue: XCTIssue) {","  \/\/ Redeclare using `var` to enable mutation.","  var issue = issue","","  \/\/ Add a simple attachment.","  issue.add(XCTAttachment(string: \"hello\"))","","  \/\/ Pass it to `super`.","  super.record(issue)","}"]},{"anchor":"Wrap-Up","type":"heading","text":"Wrap Up","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Triaging test failures is important!"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Call stacks help answer “where?”","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This helps support more natural factoring of test code, such as code reuse and other best practices","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"text":"Attachments improve “how?” and “why?”","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Written-By","type":"heading","text":"Written By","level":2},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"skhillon"}],"type":"paragraph"}]},{"size":4,"content":[{"level":3,"text":"Sarthak Khillon","anchor":"Sarthak-Khillon","type":"heading"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","overridingTitle":"Contributed Notes","isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/skhillon","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/SarthakKhillon","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10077-Eliminate-animation-hitches-with-XCTest","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10091-Write-tests-to-fail","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10164-XCTSkip-your-tests","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10221-Get-your-test-results-faster"]},{"type":"small","inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10687","type":"reference","overridingTitle":"Watch Video (12 min)"}},"references":{"skhillon":{"type":"image","identifier":"skhillon","alt":"Profile image of Sarthak Khillon","variants":[{"url":"\/images\/WWDCNotes\/skhillon.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10221-Get-your-test-results-faster":{"abstract":[{"type":"text","text":"Improve your testing suite to speed up your feedback loop and get fixes in faster. Learn more about the latest improvements to testing in Xcode, including how to leverage test plans, Xcodebuild updates, and APIs to eliminate never-ending and badly-behaved tests. We’ll explore Test Timeouts and Execution Time Allowances in XCTest, examine device parallelization, and detail recommended practices for balancing performance with clear fault localization."}],"type":"topic","title":"Get your test results faster","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10221-Get-your-test-results-faster","url":"\/documentation\/wwdcnotes\/wwdc20-10221-get-your-test-results-faster","kind":"article","role":"sampleCode"},"WWDC20-Icon.png":{"identifier":"WWDC20-Icon.png","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-Icon.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://www.linkedin.com/in/sarthakkhillon/":{"title":"Blog","url":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","type":"link","titleInlineContent":[{"type":"text","text":"Blog"}]},"WWDC20-10687-assistant_button":{"type":"image","identifier":"WWDC20-10687-assistant_button","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-assistant_button.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10091-Write-tests-to-fail":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10091-Write-tests-to-fail","abstract":[{"type":"text","text":"Plan for failure: Design great tests to help you find and diagnose even the toughest bugs. Learn how to improve your automated tests with XCTest to find hidden issues in even the best code. We’ll explain how to prepare your tests for failure to make triaging issues easier, letting you solve interface issues and deliver fixes quickly."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc20-10091-write-tests-to-fail","type":"topic","title":"Write tests to fail"},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","kind":"symbol"},"WWDC20-10687-throwing_setup_teardown":{"identifier":"WWDC20-10687-throwing_setup_teardown","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-throwing_setup_teardown.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/skhillon":{"role":"sampleCode","kind":"article","images":[{"identifier":"skhillon.jpeg","type":"card"},{"identifier":"skhillon.jpeg","type":"icon"}],"title":"Sarthak Khillon (19 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","type":"topic","abstract":[{"type":"text","text":"No Bio on GitHub"}],"url":"\/documentation\/wwdcnotes\/skhillon"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10077-Eliminate-animation-hitches-with-XCTest":{"abstract":[{"text":"Animations can dramatically enhance the user experience of your app, provide a sense of direct manipulation, and help people to better understand the results of their actions. Animation hitches can break that experience. Discover how to use XCTest to detect interruptions to smooth scrolling and animations, and learn how to catch regressions before they affect the people relying on your app.","type":"text"}],"kind":"article","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10077-Eliminate-animation-hitches-with-XCTest","title":"Eliminate animation hitches with XCTest","url":"\/documentation\/wwdcnotes\/wwdc20-10077-eliminate-animation-hitches-with-xctest"},"WWDC20.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20.jpeg"}],"identifier":"WWDC20.jpeg","type":"image","alt":null},"WWDC20-10687-capture_helper":{"type":"image","identifier":"WWDC20-10687-capture_helper","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-capture_helper.png","traits":["1x","light"]}]},"WWDC20-10687-failure_with_xctissue":{"identifier":"WWDC20-10687-failure_with_xctissue","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-failure_with_xctissue.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://github.com/skhillon":{"title":"GitHub","url":"https:\/\/github.com\/skhillon","identifier":"https:\/\/github.com\/skhillon","type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"https://x.com/SarthakKhillon":{"identifier":"https:\/\/x.com\/SarthakKhillon","title":"X\/Twitter","url":"https:\/\/x.com\/SarthakKhillon","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WidgetKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit Testing"},{"type":"text","text":", and more."}],"images":[{"type":"icon","identifier":"WWDC20-Icon.png"},{"type":"card","identifier":"WWDC20.jpeg"}],"url":"\/documentation\/wwdcnotes\/wwdc20","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","title":"WWDC20","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10164-XCTSkip-your-tests":{"abstract":[{"text":"Get the test results that matter — and skip the ones that don’t. Discover how you can implement XCTSkip to conditionally avoid tests at runtime. We’ll take you through how to return this new test result and better document tests beyond pass and fail within your test bundle.","type":"text"}],"type":"topic","title":"XCTSkip your tests","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10164-XCTSkip-your-tests","url":"\/documentation\/wwdcnotes\/wwdc20-10164-xctskip-your-tests","kind":"article","role":"sampleCode"},"WWDC20-10687-gray_line":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10687-gray_line.png"}],"identifier":"WWDC20-10687-gray_line","type":"image","alt":null},"WWDC20-10687-error_source":{"type":"image","identifier":"WWDC20-10687-error_source","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-error_source.png","traits":["1x","light"]}]},"WWDC20-10687-shared_failure":{"identifier":"WWDC20-10687-shared_failure","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10687-shared_failure.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://developer.apple.com/wwdc20/10687":{"url":"https:\/\/developer.apple.com\/wwdc20\/10687","identifier":"https:\/\/developer.apple.com\/wwdc20\/10687","checksum":null,"type":"download"},"skhillon.jpeg":{"type":"image","identifier":"skhillon.jpeg","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/skhillon.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests":{"title":"Handle interruptions and alerts in UI tests","role":"sampleCode","abstract":[{"text":"Learn how to anticipate potential interruptions to your app’s interface and build smart tests to identify them. UI interruptions often appear indeterminately, typically during onboarding or first launch, which can make them hard to track down. Learn how to understand interruptions, write stronger tests with UI interruption handlers, and manage expected alerts.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc20-10220-handle-interruptions-and-alerts-in-ui-tests","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10220-Handle-interruptions-and-alerts-in-UI-tests"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png","type":"image","alt":null}}}