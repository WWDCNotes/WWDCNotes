{"kind":"article","sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"overridingTitle":"Watch Video (37 min)","identifier":"https:\/\/developer.apple.com\/wwdc18\/417","type":"reference"}},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-417-Testing-Tips-and-Tricks"},"metadata":{"roleHeading":"WWDC18","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Testing Tips & Tricks"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18"]]},"abstract":[{"text":"Testing is an essential tool to consistently verify your code works correctly, but often your code has dependencies that are out of your control. Discover techniques for making hard-to-test code testable on Apple platforms using XCTest. Learn a variety of tips for writing higher-quality tests that run fast and require less maintenance.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The usual reminder about the “Pyramid of Tests”, three kinds of tests (from small to big, fast to slow):"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unit: test specific functions\/methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integration: test classes\/methods interaction"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"End-To-End (System Tests, UI): test the user final experience","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"code":"NotificationCenter","type":"codeVoice"},{"text":" can use different environments (kind of like ","type":"text"},{"code":"UserDefaults","type":"codeVoice"},{"text":" have different groups): you should avoid using the default notification center in your tests as this may affect other parts of the code (the test is therefore NOT isolated). To make things testable you should inject the ","type":"text"},{"code":"notificationCenter","type":"codeVoice"},{"text":" in all your methods, going from this:","type":"text"}],"type":"paragraph"}]}]},{"code":["class Points0fInterestTableViewController { ","  var observer: AnyObject? ","","  init() { ","    let name = CurrentLocationProvider.authChangedNotification","    observer = NotificationCenter.default.addObserver(","      forName: name, ","      object: nil, ","      queue: .main","    ) { [weak self] _ in ","      self?.handleAuthChanged()","    }","  }","","  var didHandleNotification = false ","","  func handleAuthChanged() { ","    didHandleNotification = true ","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To this:","type":"text"}]},{"code":["class Points0fInterestTableViewController { ","  let notificationCenter: NotificationCenter","  var observer: AnyObject? ","  ","  init(notificationCenter: NotificationCenter) {","    self.notificationCenter = notificationCenter","    let name = CurrentLocationProvider.authChangedNotification","    observer = notificationCenter.addObserver(","      forName:name, ","      object: nil, ","      queue: .main","    ) { [weak self] _ in ","      self?.handleAuthChanged() ","    }","  }","","  var didHandleNotification = false ","","  func handleAuthChanged() { ","    didHandleNotification = true ","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add a default value so you need to change the parameter only in the tests:"}]}]}]},{"code":["class PointsofInterestTableViewController {","  let notificationCenter: NotificationCenter ","  var observer: AnyObject? ","","  init(notificationCenter: NotificationCenter = .default) { ","    self.notificationCenter = notificationCenter","    let name = CurrentLocationProvider.authChangedNotification","    observer = notificationCenter.addObserver(","      forName: name,","      object: nil,","      queue: .main","    ) { [weak self] _ in","      self?.handleAuthChanged() ","    }","  }","","  var didHandleNotification = false ","","  func handleAuthChanged() { ","    didHandleNotification = true ","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When creating mocks, beside relying as much as possible on protocols, another neat thing your mock classes\/struct should have is the possibility to overwrite some of their methods, so every test can change the behaviour of the mock accordingly on what you’re trying to test","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To make tests run even faster, you can try to skip some setups in your app launch by adding an environment variable or a launch argument in your schema:","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC18-417-setup1","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then use it in your app:"}]},{"code":["func application (_ application: UIApplication, didFinishLaunchingWithOptions opts: ...) -> Bool {","  let isUnitTesting = ProcessInfo.processInfo.environment[\"IS_UNIT_TESTING\"] == \"1\"","","  if isUnitTesting == false { ","    \/\/ Do UI-related setup, which can be skipped when testing ","  }","","  return true","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello","level":3},{"inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/zntfdr","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/zntfdr.dev","type":"reference"}],"type":"paragraph"}],"size":4}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-403-Whats-New-in-Testing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-407-Practical-Approaches-to-Great-App-Performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-414-Engineering-for-Testability","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-406-UI-Testing-in-Xcode"],"type":"links","style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc18-417-testing-tips-and-tricks"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"WWDC18.jpeg":{"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC18.jpeg","traits":["1x","light"]}],"alt":null,"identifier":"WWDC18.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"url":"\/documentation\/wwdcnotes\/zntfdr","type":"topic","title":"Federico Zanetello (332 notes)"},"https://github.com/zntfdr":{"title":"GitHub","url":"https:\/\/github.com\/zntfdr","type":"link","identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}]},"https://zntfdr.dev":{"type":"link","title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110361-Author-fast-and-reliable-tests-for-Xcode-Cloud","title":"Author fast and reliable tests for Xcode Cloud","url":"\/documentation\/wwdcnotes\/wwdc22-110361-author-fast-and-reliable-tests-for-xcode-cloud","kind":"article","type":"topic","abstract":[{"text":"Discover how you can create effective testing plans for Xcode Cloud, Apple’s continuous integration and continuous delivery service. We’ll show you how testing can be an essential tool to consistently verify your code works correctly. Learn how you can author fast, reliable, and efficient tests for Xcode Cloud, avoid irrelevant failures, and verify your code changes quickly.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10142-Build-scalable-enterprise-app-suites":{"title":"Build scalable enterprise app suites","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","url":"\/documentation\/wwdcnotes\/wwdc20-10142-build-scalable-enterprise-app-suites","abstract":[{"text":"Learn how to build focused enterprise apps that work well together. In this session, we’ll introduce you to Apple Retail’s suite of enterprise apps, which help employees interact with customers, track operations, manage stores, and stay connected. Discover how Apple Retail created a unified set of apps by adopting Swift Packages and testing for app scalability. And explore how managing apps in production with configurations can help tailor app suites to different regions and locations.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-403-Whats-New-in-Testing":{"kind":"article","type":"topic","title":"What’s New in Testing","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-403-Whats-New-in-Testing","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc18-403-whats-new-in-testing","abstract":[{"type":"text","text":"Hear about exciting improvements to code coverage, including how you can build your own automation on top of Xcode’s coverage reports. Learn how to dramatically speed up the execution of your tests by leveraging distributed parallel testing, new in Xcode 10."}]},"https://developer.apple.com/wwdc18/417":{"type":"download","url":"https:\/\/developer.apple.com\/wwdc18\/417","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc18\/417"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18":{"kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC18-Icon.png"},{"type":"card","identifier":"WWDC18.jpeg"}],"abstract":[{"type":"text","text":"Xcode 10, Swift 4.2, iOS 12, macOS 10.14 (Mojave), tvOS 12, watchOS 5."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18","url":"\/documentation\/wwdcnotes\/wwdc18","title":"WWDC18"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-406-UI-Testing-in-Xcode":{"abstract":[{"type":"text","text":"Xcode 7 introduces new UI testing features fully integrated into the IDE. Learn about the new APIs and how UI testing fits in with existing testing features in Xcode. See how to get started by recording your app, and how to efficiently craft and maintain UI tests."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc15-406-ui-testing-in-xcode","role":"sampleCode","title":"UI Testing in Xcode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-406-UI-Testing-in-Xcode"},"zntfdr.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","identifier":"zntfdr.jpeg","alt":null},"WWDCNotes.png":{"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-407-Practical-Approaches-to-Great-App-Performance":{"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-407-Practical-Approaches-to-Great-App-Performance","abstract":[{"type":"text","text":"All apps benefit from a focus on performance and an increase in overall responsiveness. This information packed session gives you strategies for fixing performance problems using Instruments and other tools. Additionally, get practical advice based on experience in tuning Apple’s own apps including Xcode and Photos on iOS."}],"url":"\/documentation\/wwdcnotes\/wwdc18-407-practical-approaches-to-great-app-performance","type":"topic","title":"Practical Approaches to Great App Performance"},"WWDC18-Icon.png":{"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC18-Icon.png","traits":["1x","light"]}],"identifier":"WWDC18-Icon.png","alt":null},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC17-414-Engineering-for-Testability":{"abstract":[{"type":"text","text":"Unit testing is an essential tool to consistently verify your code works correctly. Discover techniques for designing the code of your app so that it can be easily tested. Find out the best practices for developing a test suite that evolves with your app and scales as your app grows."}],"title":"Engineering for Testability","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc17-414-engineering-for-testability","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-414-Engineering-for-Testability"},"zntfdr":{"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image","identifier":"zntfdr","alt":"Profile image of Federico Zanetello"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","url":"\/documentation\/wwdcnotes","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"title":"WWDC Notes","images":[{"type":"icon","identifier":"WWDCNotes.png"}]},"WWDC18-417-setup1":{"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC18-417-setup1.png","traits":["1x","light"]}],"alt":null,"identifier":"WWDC18-417-setup1"}}}