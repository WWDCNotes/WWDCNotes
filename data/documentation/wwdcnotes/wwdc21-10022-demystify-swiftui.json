{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10022-demystify-swiftui"]}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Three key aspects on how SwiftUI sees your views:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identity - how SwiftUI recognizes view to be the same or distinct, across multiple updates of your app"}]}]},{"content":[{"inlineContent":[{"text":"Lifetime - how SwiftUI tracks the existence of views and data over time","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Dependencies - how SwiftUI understands when your views need to be updated and why","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Together, these three concepts inform how SwiftUI decides what needs to change, how, and when, resulting in the dynamic user interface you see onscreen."}]},{"type":"heading","text":"View identity","level":2,"anchor":"View-identity"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Views that share the same identity represent different states of the same conceptual UI element."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take two views from two different screen states:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"are those views the same view in a different state?"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"or are those two completely distinct views?"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The answer changes how our interface transitions from one state to another:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"if they’re the same view, SwiftUI will apply the new state to that view, for example by moving that view from one location to the other"}]}]},{"content":[{"inlineContent":[{"text":"if they’re distinct, that means a change of state will make them transition independently, such as fading in and out","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Connecting views across different states is important, because that’s how SwiftUI understands how to transition between them."}]},{"type":"paragraph","inlineContent":[{"text":"SwiftUI types of identity:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Explicit identity - defined by using custom or data-driven identifiers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structural identity - defined by the view type and position in the view hierarchy"}]}]}]},{"level":3,"text":"Explicit identity","anchor":"Explicit-identity","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"ForEach","type":"codeVoice"},{"type":"text","text":"’s (and "},{"code":"List","type":"codeVoice"},{"type":"text","text":"’s)  "},{"code":"id","type":"codeVoice"},{"type":"text","text":" parameter is a form of explicit identity:"}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["ForEach(..., id: \\.someProperty) { ... }"],"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"the "},{"code":"id(_:)","type":"codeVoice"},{"type":"text","text":" modifier also provides a form of explicit identity:"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","code":["Header().id(headerIdentifier)"],"type":"codeListing"},{"inlineContent":[{"text":"We don’t have to explicitly identify every view, just the ones we need to refer to elsewhere in the code, for example in a ","type":"text"},{"type":"codeVoice","code":"ScrollViewReader"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Structural identity","anchor":"Structural-identity","type":"heading","level":3},{"inlineContent":[{"text":"Every view has an identity, even if it’s not explicit:","type":"text"},{"text":"\n","type":"text"},{"text":"SwiftUI uses the structure of your view hierarchy to generate implicit identities for your views so you don’t have to.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some View {","  if condition {","      viewA","    } else {","      viewB","    }","  }","}"],"syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"viewA"},{"type":"text","text":" is the “true” view"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"viewB"},{"type":"text","text":" is the “false” view"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This works only if SwiftUI can statically guarantee that these views stay where they are and never swap places:","type":"text"},{"text":"\n","type":"text"},{"text":"SwiftUI accomplishes this by looking at the type structure of your view hierarchy.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"some View"},{"text":" is a placeholder that represents our view static composite type:","type":"text"},{"text":"\n","type":"text"},{"text":"for the example above, the real type is ","type":"text"},{"type":"codeVoice","code":"_ConditionalContent<ViewAType, ViewBType>"},{"text":", which is what SwiftUI uses to identify the “true” and “false” view.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"From SwiftUI point of view, the "},{"code":"if-else","type":"codeVoice"},{"type":"text","text":" statement represents two different views with distinct identities."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To make those views the same identity, we’d need to apply the condition in other ways, for example via an inert view modifier:"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some View {","  sharedView","    .background(condition ? Color.green : Color.green)","}"],"syntax":"swift"},{"inlineContent":[{"text":"By default, try to preserve identity and provide more fluid transitions:","type":"text"},{"text":"\n","type":"text"},{"text":"this also helps preserve your view’s lifetime and state.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"AnyView"},{"type":"text","text":" makes it hard for SwiftUI to optimize and identify each view, avoid it as much as possible, use "},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":" if needed."}],"type":"paragraph"},{"text":"How view identity is related to their lifetime and state","anchor":"How-view-identity-is-related-to-their-lifetime-and-state","type":"heading","level":2},{"inlineContent":[{"text":"During its lifetime, a view can change its state, view identity connects these different state values as a single entity.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"E.g.:"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some View {","  ViewA(value: 1)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"later on we change the value to 2"}],"type":"paragraph"},{"type":"codeListing","code":["var body: some View {","  ViewA(value: 2)","}"],"syntax":"swift"},{"inlineContent":[{"text":"When we change that value from ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"2","type":"codeVoice"},{"text":", SwiftUI will keep around a copy of the old view value to perform a comparison and know if the view has changed. After that, the old value is destroyed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The view value is different from the view identity:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"View values are ephemeral and you should not rely on their lifetime"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"What you can control is their identity","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Over time, driven by updates, new values for the view are created (like when we moved from ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"2","type":"codeVoice"},{"text":" above), but from SwiftUI’s perspective, these represent the same view.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"lifetime of a view: duration of the identity associated with that view"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The state of a view is associated with its lifetime: "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" are the persistent storage associated with your view’s identity."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"At the beginning of a view’s identity, when it’s created for the first time, SwiftUI is going to allocate storage in memory for State and StateObject using their initial values."}],"type":"paragraph"},{"text":"How SwiftUI updates your view","anchor":"How-SwiftUI-updates-your-view","type":"heading","level":2},{"inlineContent":[{"text":"All view properties are dependencies of a view","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyView: View {","  @Binding var isOn = false \/\/ this is a dependency","  var name: String          \/\/ this is a dependency","","  var body: some View {","    ...","  }","}"],"syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"A dependency is just an input to the view."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When a dependency changes, the view is "},{"type":"strong","inlineContent":[{"type":"text","text":"required"}]},{"type":"text","text":" to produce a new body"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Each view has its own dependencies, multiple views can depend on the same dependency source:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"SwiftUI maintains a dependency graph of all these dependencies.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"when any dependency changes, SwiftUI will call each view’s body, producing a new body value, for all views depending on that dependency","type":"text"}]}]}],"type":"unorderedList"},{"text":"Written By","anchor":"Written-By","type":"heading","level":2},{"type":"row","columns":[{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}]},{"size":4,"content":[{"level":3,"type":"heading","anchor":"Federico-Zanetello","text":"Federico Zanetello"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","type":"reference","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}]}]}],"numberOfColumns":5},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}],"type":"paragraph"},{"text":"Related Sessions","anchor":"Related-Sessions","type":"heading","level":2},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10119-SwiftUI-Accessibility-Beyond-the-basics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10040-Data-Essentials-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"Watch Video (40 min)","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10022"}},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Peek behind the curtain into the core tenets of SwiftUI philosophy: Identity, Lifetime, and Dependencies. Find out about common patterns, learn the principles that drive the framework, and discover how you can use them to guarantee correctness and performance for your app."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10022-Demystify-SwiftUI"},"metadata":{"role":"sampleCode","title":"Demystify SwiftUI","roleHeading":"WWDC21","modules":[{"name":"WWDC Notes"}]},"kind":"article","sections":[],"references":{"zntfdr.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","identifier":"zntfdr.jpeg","alt":null},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"type":"image","identifier":"WWDCNotes.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-216-SwiftUI-Essentials":{"title":"SwiftUI Essentials","abstract":[{"text":"Take your first deep-dive into building an app with SwiftUI. Learn about Views and how they work. From basic controls to sophisticated containers like lists and navigation stacks, SwiftUI enables the creation of great user interfaces, faster and more easily. See how basic controls like Button are both simple yet versatile. Discover how to compose these pieces into larger, full-featured user interfaces that facilitate building great apps with SwiftUI. Build your SwiftUI skills as you learn the essentials of Apple’s new declarative framework.","type":"text"}],"type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc19-216-swiftui-essentials"},"https://github.com/zntfdr":{"type":"link","identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","url":"https:\/\/github.com\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"url":"\/documentation\/wwdcnotes\/wwdc21","kind":"article","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"code":"DocC","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit 2","type":"codeVoice"},{"text":", and more.","type":"text"}],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","title":"WWDC21"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","role":"collection","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10018-Whats-new-in-SwiftUI":{"role":"sampleCode","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10018-whats-new-in-swiftui","abstract":[{"type":"text","text":"There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","title":"What’s new in SwiftUI","kind":"article"},"WWDC21.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC21.jpeg"}],"type":"image","identifier":"WWDC21.jpeg","alt":null},"zntfdr":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","identifier":"zntfdr","alt":"Profile image of Federico Zanetello"},"WWDC21-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC21-Icon.png"}],"type":"image","identifier":"WWDC21-Icon.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface":{"abstract":[{"type":"text","text":"It’s time to supercharge the interface of your iPad app with SwiftUI lists and tables. We’ll show how you can add selection interactions and context menus and help people who use your app be more productive. We’ll also give you best practices on structuring your navigation and explore how you can avoid modality using split views to ensure a top-notch desktop-class iPad experience."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10058-SwiftUI-on-iPad-Organize-your-interface","title":"SwiftUI on iPad: Organize your interface","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc22-10058-swiftui-on-ipad-organize-your-interface"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10040-Data-Essentials-in-SwiftUI":{"kind":"article","abstract":[{"text":"Data is a complex part of any app, but SwiftUI makes it easy to ensure a smooth, data-driven experience from prototyping to production. Discover @State and @Binding, two powerful tools that can preserve and seamlessly update your Source of Truth. We’ll also show you how ObservableObject lets you connect your views to your data model. Learn about some tricky challenges and cool new ways to solve them — directly from the experts!","type":"text"}],"title":"Data Essentials in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc20-10040-data-essentials-in-swiftui","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10040-Data-Essentials-in-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10160-Demystify-SwiftUI-performance":{"abstract":[{"text":"Learn how you can build a mental model for performance in SwiftUI and write faster, more efficient code. We’ll share some of the common causes behind performance issues and help you triage hangs and hitches in SwiftUI to create more responsive views in your app.","type":"text"}],"kind":"article","title":"Demystify SwiftUI performance","url":"\/documentation\/wwdcnotes\/wwdc23-10160-demystify-swiftui-performance","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10160-Demystify-SwiftUI-performance"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10019-Discover-concurrency-in-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","abstract":[{"text":"Discover how you can use Swift’s concurrency features to build even better SwiftUI apps. We’ll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we’ll take you through the process of enabling additional asynchronous flows in your custom views.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10019-discover-concurrency-in-swiftui","role":"sampleCode","title":"Discover concurrency in SwiftUI","kind":"article"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10119-SwiftUI-Accessibility-Beyond-the-basics":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10119-SwiftUI-Accessibility-Beyond-the-basics","title":"SwiftUI Accessibility: Beyond the basics","url":"\/documentation\/wwdcnotes\/wwdc21-10119-swiftui-accessibility-beyond-the-basics","abstract":[{"text":"Go beyond the basics to deliver an exceptional accessibility experience. Learn how to use the new SwiftUI Previews in Xcode to explore the latest accessibility APIs and create fantastic, accessible apps for everyone. Find out how you can customize the automatic accessibility built into SwiftUI to make your own custom controls accessible. Explore best practices and identify where to improve your app’s navigation experience using grouping and focus. And help supercharge navigation for VoiceOver users with the addition of rotors.","type":"text"}],"type":"topic","kind":"article","role":"sampleCode"},"https://zntfdr.dev":{"type":"link","identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","url":"https:\/\/zntfdr.dev"},"https://developer.apple.com/wwdc21/10022":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10022","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc21\/10022"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","title":"Federico Zanetello (332 notes)","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"url":"\/documentation\/wwdcnotes\/zntfdr","kind":"article","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"role":"sampleCode","type":"topic"}}}