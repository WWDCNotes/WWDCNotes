{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10054-Whats-new-in-AppKit","interfaceLanguage":"swift"},"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"Watch Video (21 min)","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10054"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10054-whats-new-in-appkit"]}],"kind":"article","metadata":{"title":"What’s new in AppKit","role":"sampleCode","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC21"},"abstract":[{"text":"Explore the latest advancements in Mac app development with AppKit. We’ll show how you can enhance your app’s design with new control features and SF Symbols 3, build powerful text experiences using TextKit 2, and harness the latest Swift features in your app.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Design & control updates","anchor":"Design--control-updates"},{"inlineContent":[{"type":"text","text":"There are design updates for some system controls:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"popovers appear with an animation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"sliders smoothly glide into position when clicked"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"smaller things like increased spacing between table sections or slightly wider toolbar buttons"}]}]}]},{"anchor":"Control-tinting","level":4,"text":"Control tinting","type":"heading"},{"inlineContent":[{"text":"Individual controls like buttons, segmented controls or sliders can have a custom tint. You can set it using these properties:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsbutton\/2561000-bezelcolor"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nssegmentedcontrol\/2561002-selectedsegmentbezelcolor"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsslider\/2560999-trackfillcolor","isActive":true}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"These properties have been introduced in macOS Sierra for Touch Bar controls; in macOS Monterey they’re functional also for normal app controls.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This is useful for specific controls that need to have some kind of semantically meaningful color - e.g. a green “Accept Call” and a red “End Call” buttons in a video call app.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Avoid confusion with the default button if there is one in the same view, since it will also be colorful. Also, make sure to indicate purpose with more than just the color (using a clear label or an icon), since some of your users may not be able to distinguish buttons by color."}],"type":"paragraph"},{"anchor":"Push-buttons","level":4,"text":"Push buttons","type":"heading"},{"inlineContent":[{"text":"Push buttons no longer highlight using the accent color on click - they behave just like e.g. segmented controls in macOS Big Sur. This means you shouldn’t make assumptions about how the highlight state looks (e.g. drawing white text over a button that should be blue when pressed, but will now be light gray).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Instead, check the interior background style ","type":"text"},{"type":"codeVoice","code":"NSButtonCell.interiorBackgroundStyle"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normal"},{"type":"text","text":" = colorless state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".emphasized","type":"codeVoice"},{"text":" = colorful state","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"The old “regular square button” aka “bevel button” has now been refreshed as “Flexible push style button” and can be used as a variable height push button. It supports the same kind of configuration as a regular push button, so it can serve as a default button and can be tinted. Its corner radius and padding now match other button styles, and it can contain larger icons or multi-line text."}],"type":"paragraph"},{"inlineContent":[{"text":"The vast majority of buttons should still use the standard fixed height push button - the variable height button is meant for special cases.","type":"text"}],"type":"paragraph"},{"anchor":"Localizing-keyboard-shortcuts","level":2,"text":"Localizing keyboard shortcuts","type":"heading"},{"inlineContent":[{"type":"text","text":"Some keyboard shortcuts should be localized for different keyboard layouts, because in some layouts they may be hard or impossible to type, or it may make sense to adapt them for right-to-left languages. E.g. "},{"type":"codeVoice","code":"Cmd + \\"},{"type":"text","text":" is not possible to type on the Japanese keyboard, which doesn’t have a backslash key."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"AppKit can now handle this for you. In macOS Monterey, the system automatically remaps such shortcuts to different ones that are more natural on the given keyboard layout. Also, shortcuts like "},{"type":"codeVoice","code":"Cmd + ["},{"type":"text","text":" and "},{"type":"codeVoice","code":"Cmd + ]"},{"type":"text","text":" to go back and forward will be swapped in right-to-left languages (this applies to brackets, braces, parentheses and arrow keys)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can opt out of this behavior using:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787555-allowsautomatickeyequivalentmirr"},{"type":"text","text":" - for directional keys like brackets"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787554-allowsautomatickeyequivalentloca"},{"type":"text","text":" - turns off all key localization, including mirroring"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"If you really don’t want to use this feature at all, you can also disable it completely in your app by implementing the ","type":"text"},{"type":"codeVoice","code":"NSApplicationDelegate"},{"text":" method: ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsapplicationdelegate\/3787553-applicationshouldautomaticallylo\/","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Update-to-SF-Symbols","level":2,"text":"Update to SF Symbols","type":"heading"},{"inlineContent":[{"type":"text","text":"There is a new version available - SF Symbols 3:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"it expands capabilities of the SF Symbols app"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"some symbols now have multiple layers that can be individually colored"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"there is an updated format for custom symbols - it allows you to annotate distinct layers within an image","type":"text"}]}]}]},{"inlineContent":[{"text":"Big Sur had two coloring modes for symbols:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"traditional monochrome template style, drawing the whole symbol using one accent color"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"a multicolor style that uses multiple colors that are predefined in the symbol itself"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"SF Symbols 3 in macOS Monterey adds two new rendering modes:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“hierarchical” - uses a single tint color, but draws different layers of the image in an emphasized or deemphasized way (lighter or darker than the base color)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“palette” - lets you assign each layer any custom color independently"}]}]}]},{"inlineContent":[{"type":"text","text":"APIs for the new rendering modes:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["NSImage.SymbolConfiguration(hierarchicalColor: .red)","NSImage.SymbolConfiguration(paletteColors: […])","NSImage.SymbolConfiguration.preferringMulticolor()"]},{"anchor":"Symbol-variants","level":4,"text":"Symbol variants","type":"heading"},{"inlineContent":[{"type":"text","text":"There are also new APIs for mapping between symbol variants, e.g. outline heart symbol ⭤ filled heart symbol, or variants with circles etc. This is useful e.g. when you’re building a picker control that uses outline icons for unselected states and filled variants of the same icons for the selected item."}],"type":"paragraph"},{"inlineContent":[{"text":"To convert between variants, call e.g.:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["baseImage.image(with: .fill)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There are constants for each kind of symbol variant, and you can combine multiple variants together (e.g. circle + fill).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See “Design and build SF Symbols” for more info."}]},{"type":"heading","text":"TextKit 2","anchor":"TextKit-2","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"macOS Monterey brings a huge update to the text system. TextKit is a great text engine with a long track record, used across all Apple systems. However, TextKit is a "},{"type":"emphasis","inlineContent":[{"text":"linear","type":"text"}]},{"type":"text","text":" text layout engine, which means it typesets a block of text from the beginning to the end. There are a lot of use cases where a "},{"type":"emphasis","inlineContent":[{"text":"non-linear","type":"text"}]},{"type":"text","text":" layout engine is more useful."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TextKit 2 always uses a non-linear layout system. This means it can perform layout on a more granular level, which allows it to avoid some unnecessary work. For example, when you’re looking at a middle fragment of a long document, a linear layout system needs to process all text from the beginning up to the given fragment in order to render it; a non-linear system can start at the nearest start of a paragraph."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The non-linear layout system also makes it easier to mix text with non-text elements, and improves performance for large documents."}]},{"type":"paragraph","inlineContent":[{"text":"TextKit 2 provides a lot of customization points, which allow you to extend its behavior. The new version coexists with TextKit 1, you can choose which engine to use for each view.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TextKit 2 has actually already been used in some system apps and controls in Big Sur."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See “"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10061\/","isActive":true},{"type":"text","text":"” for more info."}]},{"type":"heading","text":"New Swift features","anchor":"New-Swift-features","level":2},{"type":"paragraph","inlineContent":[{"text":"Swift 5.5 introduces some important new features for managing concurrency: async\/await and actors.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In AppKit, many asynchronous methods that return value through a completion handler now have variants that work with async\/await:"}]},{"syntax":"swift","type":"codeListing","code":["@IBAction func pickColor(_ sender: Any?) {","  async {","    guard let color = await NSColorSampler().sample() else { return }","    textField.textColor = color","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The actor model is a great fit for a UI framework like AppKit where most APIs should be called on a single main thread. The macOS SDK now has a "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" property wrapper that marks all types that have to be accessed from the main thread. Classes such as "},{"type":"codeVoice","code":"NSView"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSView\/WindowController"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSApplication"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSCell"},{"type":"text","text":", "},{"type":"codeVoice","code":"NSDocument"},{"type":"text","text":" etc. are now marked with "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Code running in the main actor can freely call methods on other main actor types. However, code that isn’t running on the main thread needs to use async\/await to run code on a ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" type. This is enforced at the compiler level, which lets you avoid common errors that happen when mixing concurrency with UI code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See “","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10132\/"},{"text":"” and “","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10133"},{"text":"” for more info.","type":"text"}]},{"level":4,"anchor":"AttributedString","type":"heading","text":"AttributedString"},{"type":"paragraph","inlineContent":[{"text":"Swift 5.5 also adds a new value type ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring\/"},{"text":". It has type-safe attributes and a more swifty API for reading & writing attributes. You can easily convert between ","type":"text"},{"type":"codeVoice","code":"AttributedString"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"NSAttributedString"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See “","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/212\/","type":"reference"},{"text":"” for more info.","type":"text"}]},{"level":4,"anchor":"Updating-NSViews","type":"heading","text":"Updating NSViews"},{"type":"paragraph","inlineContent":[{"text":"There is a new Swift property wrapper which should reduce boilerplate around view properties.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s say we have a custom view class like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class BadgeView: NSView {","  var fillColor: NSColor","  var shadow: NSShadow","  var scaling: NSImageScaling","  …","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These properties will usually need to have a didSet which updates properties like "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1483360-needsdisplay\/"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1526912-needslayout"},{"type":"text","text":" when they’re modified:"}]},{"syntax":"swift","type":"codeListing","code":["var fillColor: NSColor {","  didSet { needsDisplay = true }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"type":"codeVoice","code":"@Invalidating"},{"type":"text","text":" attribute in "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview"},{"type":"text","text":" lets you easily specify which other view properties should be updated when the given property is modified:"}]},{"syntax":"swift","type":"codeListing","code":["@Invalidating(.display) var fillColor: NSColor"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Properties that can be invalidated include: display, layout, constraints, intrinsic content size, restorable state. The marked property needs to be "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/equatable\/","isActive":true},{"type":"text","text":", since AppKit checks if the value was actually changed before triggering a view update."}]},{"type":"paragraph","inlineContent":[{"text":"You can extend the invalidation system by conforming to ","type":"text"},{"type":"codeVoice","code":"NSViewInvalidating"},{"text":" protocol.","type":"text"}]},{"level":2,"anchor":"Shortcuts","type":"heading","text":"Shortcuts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS Shortcuts are now available on the Mac."}]},{"type":"paragraph","inlineContent":[{"text":"Shortcuts appear in all the places where you can access services today - if your app supports services, it will also support Shortcuts. AppKit decides which shortcuts are available at the given place by checking the responder chain - it asks each responder whether it can provide or receive the type of data used by each shortcut. The types of data are represented by ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nspasteboard\/pasteboardtype"},{"text":" (usually a UTI).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To support shortcuts in a given responder object, implement the method:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func validRequestor(forSendType sendType: NSPasteboard.PasteboardType?,","                              returnType: NSPasteboard.PasteboardType?) -> Any"]},{"type":"paragraph","inlineContent":[{"text":"In that method return an instance of a type implementing ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsservicesmenurequestor\/","type":"reference"},{"text":" (usually the same object):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["protocol NSServicesMenuRequestor {","  func writeSelection(to pasteboard: NSPasteboard,","                              types: [NSPasteboard.PasteboardType]) -> Bool","","  func readSelection(from pasteboard: NSPasteboard) -> Bool","}"]},{"level":2,"anchor":"Siri-Intents","type":"heading","text":"Siri Intents"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use Siri Intents in a Mac app by adding an Intents Extension. You can also return an intents handler from the application delegate:"}]},{"syntax":"swift","type":"codeListing","code":["protocol NSApplicationDelegate {","  optional func application(_ application: NSApplication,","                        handlerFor intent: INIntent) -> Any?","}"]},{"type":"paragraph","inlineContent":[{"text":"The returned object should conform to an appropriate intent handler protocol, depending on the intent type.","type":"text"}]},{"level":2,"anchor":"Written-By","type":"heading","text":"Written By"},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/avatars.githubusercontent.com\/u\/28465?v=4","type":"image"}]}]},{"size":4,"content":[{"type":"heading","level":3,"anchor":"Kuba-Suder","text":"Kuba Suder"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/mackuba","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/mackuba"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/mackuba.eu"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/x.com\/kuba_suder"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"level":2,"anchor":"Related-Sessions","type":"heading","text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10061-Meet-TextKit-2","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10349-SF-Symbols-in-SwiftUI"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10290-Whats-new-in-AVKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10115-Whats-new-in-App-Analytics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10012-Whats-new-in-App-Clips","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10086-Whats-new-in-CloudKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10052-Whats-new-in-Mac-Catalyst","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10059-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10092-Whats-new-in-Wallet-and-Apple-Pay","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10002-Whats-new-in-watchOS-8","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10146-Whats-new-in-AVFoundation","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10066-Whats-new-in-Game-Center-Widgets-friends-and-multiplayer-improvements","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10097-Whats-new-in-SF-Symbols","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10047-Whats-new-in-camera-capture","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10130-Whats-new-in-managing-Apple-devices"],"title":"Updated Tools & Frameworks","generated":true}],"references":{"https://x.com/kuba_suder":{"identifier":"https:\/\/x.com\/kuba_suder","type":"link","url":"https:\/\/x.com\/kuba_suder","title":"X\/Twitter","titleInlineContent":[{"text":"X\/Twitter","type":"text"}]},"https://developer.apple.com/wwdc21/10054":{"url":"https:\/\/developer.apple.com\/wwdc21\/10054","identifier":"https:\/\/developer.apple.com\/wwdc21\/10054","type":"download","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10018-Whats-new-in-SwiftUI":{"role":"sampleCode","type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","title":"What’s new in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc21-10018-whats-new-in-swiftui","abstract":[{"text":"There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10061-Meet-TextKit-2":{"kind":"article","abstract":[{"type":"text","text":"Meet TextKit 2: Apple’s next-generation text engine, redesigned for improved correctness, safety, and performance. Discover how TextKit 2 can help you provide a better text experience for international audiences, create more diverse layouts by mixing text content with visual content, and ensure smooth scrolling performance. We’ll introduce the latest APIs, dive into some practical examples, and provide guidance for modernizing your apps."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10061-Meet-TextKit-2","url":"\/documentation\/wwdcnotes\/wwdc21-10061-meet-textkit-2","title":"Meet TextKit 2","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10097-Whats-new-in-SF-Symbols":{"title":"What’s new in SF Symbols","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10097-Whats-new-in-SF-Symbols","url":"\/documentation\/wwdcnotes\/wwdc21-10097-whats-new-in-sf-symbols","abstract":[{"text":"Explore the latest updates to SF Symbols, Apple’s iconography library. Designed to integrate seamlessly with San Francisco — the system font for Apple platforms — SF Symbols can help you create beautiful and consistent iconography for your app while supporting accessibility features like Dynamic Type and Bold Text. Discover the latest additions to the SF Symbols library, localization enhancements, and how you can more easily customize the color of a symbol to integrate it within your app’s own color palette. We’ll also show you how you can design and annotate custom symbols to support Monochrome, Hierarchical, Palette, and Multicolor rendering modes.","type":"text"}],"role":"sampleCode","type":"topic"},"https://developer.apple.com/documentation/appkit/nsview":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview","type":"link","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview","title":"NSView","titleInlineContent":[{"code":"NSView","type":"codeVoice"}]},"https://mackuba.eu":{"identifier":"https:\/\/mackuba.eu","titleInlineContent":[{"text":"Blog","type":"text"}],"type":"link","title":"Blog","url":"https:\/\/mackuba.eu"},"https://developer.apple.com/videos/play/wwdc2017/212/":{"titleInlineContent":[{"text":"What’s new in Foundation","type":"text"}],"title":"What’s new in Foundation","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/212\/","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2017\/212\/","type":"link"},"https://developer.apple.com/documentation/swift/equatable/":{"titleInlineContent":[{"code":"Equatable","type":"codeVoice"}],"title":"Equatable","url":"https:\/\/developer.apple.com\/documentation\/swift\/equatable\/","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/equatable\/"},"https://developer.apple.com/documentation/foundation/attributedstring/":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring\/","type":"link","url":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring\/","title":"AttributedString","titleInlineContent":[{"code":"AttributedString","type":"codeVoice"}]},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"kind":"article","type":"topic","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","title":"Protect mutable state with Swift actors","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","abstract":[{"type":"text","text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10047-Whats-new-in-camera-capture":{"kind":"article","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10047-whats-new-in-camera-capture","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10047-Whats-new-in-camera-capture","abstract":[{"type":"text","text":"Learn how you can interact with Video Effects in Control Center including Center Stage, Portrait mode, and Mic modes. We’ll show you how to detect when these features have been enabled for your app and explore ways to adopt custom interfaces to make them controllable from within your app. Discover how to enable 10-bit HDR video capture and take advantage of minimum-focus-distance reporting for improved camera capture experiences. Explore support for IOSurface compression and delivering optimal performance in camera capture."}],"role":"sampleCode","title":"What’s new in camera capture"},"https://developer.apple.com/documentation/appkit/nssegmentedcontrol/2561002-selectedsegmentbezelcolor":{"titleInlineContent":[{"code":"NSSegmentedControl.selectedSegmentBezelColor","type":"codeVoice"}],"title":"NSSegmentedControl.selectedSegmentBezelColor","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nssegmentedcontrol\/2561002-selectedsegmentbezelcolor","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nssegmentedcontrol\/2561002-selectedsegmentbezelcolor","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/mackuba":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/mackuba","kind":"article","title":"Kuba Suder (7 notes)","abstract":[{"type":"text","text":"Independent Mac & iOS developer. Sometimes freelancing, mostly working on my own stuff these days."}],"url":"\/documentation\/wwdcnotes\/mackuba","role":"sampleCode"},"https://developer.apple.com/documentation/appkit/nsbutton/2561000-bezelcolor":{"titleInlineContent":[{"code":"NSButton.bezelColor","type":"codeVoice"}],"title":"NSButton.bezelColor","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsbutton\/2561000-bezelcolor","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsbutton\/2561000-bezelcolor"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"abstract":[{"text":"Xcode 13, Swift 5.5, iOS 15, macOS 12, tvOS 15, watchOS 8.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"MusicKit"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DocC"},{"text":", ","type":"text"},{"type":"codeVoice","code":"StoreKit 2"},{"text":", and more.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","type":"topic","kind":"article","title":"WWDC21","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collectionGroup"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10059-Whats-new-in-UIKit":{"kind":"article","abstract":[{"type":"text","text":"Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We’ll take you through UI refinements, productivity updates, and API enhancements, and help you explore performance improvements and security & privacy features."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10059-Whats-new-in-UIKit","url":"\/documentation\/wwdcnotes\/wwdc21-10059-whats-new-in-uikit","title":"What’s new in UIKit","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10086-Whats-new-in-CloudKit":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10086-Whats-new-in-CloudKit","url":"\/documentation\/wwdcnotes\/wwdc21-10086-whats-new-in-cloudkit","title":"What’s new in CloudKit","kind":"article","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"CloudKit provides a secure, convenient, and reliable cloud database for your apps — and it’s only getting better. Discover how you can unravel your threads with support for async\/await and convenience API additions. We’ll also show you how to encourage collaboration between people using your app through sharing entire record zones of data, and explore how to adopt CloudKit features like encrypted values and help protect sensitive data within your app."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10092-Whats-new-in-Wallet-and-Apple-Pay":{"title":"What’s new in Wallet and Apple Pay","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10092-Whats-new-in-Wallet-and-Apple-Pay","url":"\/documentation\/wwdcnotes\/wwdc21-10092-whats-new-in-wallet-and-apple-pay","abstract":[{"text":"Discover the redesigned Apple Pay for in-app and web payments and learn how you can incorporate the latest APIs into your app or website. Learn how to add features to your app like coupon codes, improved shipping information, and improvements to the payment detail display screen. And explore changes to Wallet passes, including auto-expiry and multi-pass support for the web.","type":"text"}],"role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10130-Whats-new-in-managing-Apple-devices":{"title":"What’s new in managing Apple devices","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10130-Whats-new-in-managing-Apple-devices","url":"\/documentation\/wwdcnotes\/wwdc21-10130-whats-new-in-managing-apple-devices","abstract":[{"text":"Discover the latest advancements in key device management capabilities for your organization or MDM solution. Explore the refreshed device management Settings on iOS and iPadOS, an all-new return to service functionality for macOS, and other updates to device management across Apple platforms.","type":"text"}],"role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10146-Whats-new-in-AVFoundation":{"abstract":[{"type":"text","text":"Discover the latest updates to AVFoundation, Apple’s framework for inspecting, playing, and authoring audiovisual presentations. We’ll explore how you can use AVFoundation to query attributes of audiovisual assets, further customize your custom video compositions with timed metadata, and author caption files."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10146-whats-new-in-avfoundation","type":"topic","title":"What’s new in AVFoundation","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10146-Whats-new-in-AVFoundation","kind":"article","role":"sampleCode"},"https://developer.apple.com/documentation/appkit/nspasteboard/pasteboardtype":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nspasteboard\/pasteboardtype","type":"link","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nspasteboard\/pasteboardtype","title":"NSPasteboard.PasteboardType","titleInlineContent":[{"code":"NSPasteboard.PasteboardType","type":"codeVoice"}]},"https://developer.apple.com/documentation/appkit/nsview/1526912-needslayout":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1526912-needslayout","titleInlineContent":[{"code":"needsLayout","type":"codeVoice"}],"type":"link","title":"needsLayout","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1526912-needslayout"},"https://developer.apple.com/documentation/appkit/nsmenuitem/3787555-allowsautomatickeyequivalentmirr":{"titleInlineContent":[{"code":"NSMenuItem.allowsAutomaticKeyEquivalentMirroring","type":"codeVoice"}],"title":"NSMenuItem.allowsAutomaticKeyEquivalentMirroring","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787555-allowsautomatickeyequivalentmirr","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787555-allowsautomatickeyequivalentmirr","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10349-SF-Symbols-in-SwiftUI":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10349-sf-symbols-in-swiftui","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10349-SF-Symbols-in-SwiftUI","type":"topic","abstract":[{"text":"Discover how you can incorporate SF Symbols into your SwiftUI app. We’ll explore basic techniques for presenting symbols, customizing their size, and showing different variants. We’ll also take you through the latest updates to symbol colorization and help you pick the right tool for your app’s needs.","type":"text"}],"title":"SF Symbols in SwiftUI"},"https://avatars.githubusercontent.com/u/28465?v=4":{"variants":[{"traits":["1x","light"],"url":"https:\/\/avatars.githubusercontent.com\/u\/28465?v=4"}],"type":"image","alt":"Profile image of Kuba Suder","identifier":"https:\/\/avatars.githubusercontent.com\/u\/28465?v=4"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10012-Whats-new-in-App-Clips":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10012-Whats-new-in-App-Clips","abstract":[{"type":"text","text":"Discover how App Clips can elevate quick and focused experiences for specific tasks, the moment your customer needs them. We’ll take you through some of the latest improvements to App Clips, including launching an experience directly from an app, testing your App Clip locally, and creating App Clip Codes to make it easy to access your experience in the real world. We’ll also share some great examples of App Clips from our developer community that provide innovative ways to interact with people and beautiful designs."}],"title":"What’s new in App Clips","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10012-whats-new-in-app-clips"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10052-Whats-new-in-Mac-Catalyst":{"title":"What’s new in Mac Catalyst","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10052-Whats-new-in-Mac-Catalyst","url":"\/documentation\/wwdcnotes\/wwdc21-10052-whats-new-in-mac-catalyst","abstract":[{"text":"Discover the latest updates to Mac Catalyst and find out how you can make your app feel even more at home on macOS. Learn about a variety of new and enhanced UIKit APIs that let you customize your Mac Catalyst app to take advantage of behaviors unique to macOS.","type":"text"}],"role":"sampleCode","type":"topic"},"https://developer.apple.com/documentation/appkit/nsview/1483360-needsdisplay/":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1483360-needsdisplay\/","type":"link","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsview\/1483360-needsdisplay\/","title":"needsDisplay","titleInlineContent":[{"code":"needsDisplay","type":"codeVoice"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10290-Whats-new-in-AVKit":{"title":"What’s new in AVKit","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10290-Whats-new-in-AVKit","url":"\/documentation\/wwdcnotes\/wwdc21-10290-whats-new-in-avkit","abstract":[{"text":"Learn about enhancements to Picture in Picture and full screen improvements on macOS. Explore the new content source API, and learn how AVPictureInPictureController supports AVSampleBufferDisplayLayer, as well as recommended steps for an app to provide a seamless full screen experience on macOS or in a Mac Catalyst app.","type":"text"}],"role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10002-Whats-new-in-watchOS-8":{"title":"What’s new in watchOS 8","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10002-Whats-new-in-watchOS-8","url":"\/documentation\/wwdcnotes\/wwdc21-10002-whats-new-in-watchos-8","abstract":[{"text":"watchOS 8 brings all-new opportunities to keep people up to date on their watch face. With new APIs for the Always-On Retina display and updating complications from Bluetooth devices and background delivery of HealthKit data, it’s never been easier to keep your app up to date. Learn about region-based user notifications to leverage location in your app. Explore all the new enhancements to SwiftUI and watchOS that will get you excited to build your next Watch app.","type":"text"}],"role":"sampleCode","type":"topic"},"https://developer.apple.com/documentation/appkit/nsslider/2560999-trackfillcolor":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsslider\/2560999-trackfillcolor","titleInlineContent":[{"code":"NSSlider.trackFillColor","type":"codeVoice"}],"type":"link","title":"NSSlider.trackFillColor","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsslider\/2560999-trackfillcolor"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10109-Whats-new-in-Foundation":{"role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation","url":"\/documentation\/wwdcnotes\/wwdc21-10109-whats-new-in-foundation","title":"What’s new in Foundation","abstract":[{"type":"text","text":"Discover how the latest updates to Foundation can help you improve your app’s localization and internationalization support. Find out about the new AttributedString, designed specifically for Swift, and learn how you can use Markdown to apply style to your localized strings. Explore the grammar agreement engine, which automatically fixes up localized strings so they match grammatical gender and pluralization. And we’ll take you through improvements to date and number formatting that simplify complex requirements while also improving performance."}],"kind":"article"},"https://developer.apple.com/videos/play/wwdc2021/10133":{"titleInlineContent":[{"text":"Protect mutable state with Swift actors","type":"text"}],"title":"Protect mutable state with Swift actors","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10133","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10133","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10115-Whats-new-in-App-Analytics":{"title":"What’s new in App Analytics","role":"sampleCode","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10115-whats-new-in-app-analytics","abstract":[{"text":"App Analytics helps you maximize your opportunity on the App Store by providing privacy-friendly insights about your app. Learn about four new ways to grow your business, including information about custom product pages, in-app events, product page optimization, and new metrics about transactions on the store.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10115-Whats-new-in-App-Analytics"},"https://github.com/mackuba":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","url":"https:\/\/github.com\/mackuba","type":"link","identifier":"https:\/\/github.com\/mackuba"},"https://developer.apple.com/videos/play/wwdc2021/10061/":{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10061\/","type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10061\/","title":"Meet TextKit 2","titleInlineContent":[{"text":"Meet TextKit 2","type":"text"}]},"https://developer.apple.com/documentation/appkit/nsservicesmenurequestor/":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsservicesmenurequestor\/","titleInlineContent":[{"code":"NSServicesMenuRequestor","type":"codeVoice"}],"type":"link","title":"NSServicesMenuRequestor","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsservicesmenurequestor\/"},"https://developer.apple.com/documentation/appkit/nsapplicationdelegate/3787553-applicationshouldautomaticallylo/":{"titleInlineContent":[{"code":"applicationShouldAutomaticallyLocalizeKeyEquivalents(_:)","type":"codeVoice"}],"title":"applicationShouldAutomaticallyLocalizeKeyEquivalents(_:)","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsapplicationdelegate\/3787553-applicationshouldautomaticallylo\/","identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsapplicationdelegate\/3787553-applicationshouldautomaticallylo\/","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","kind":"symbol","title":"WWDC Notes","role":"collection"},"https://developer.apple.com/videos/play/wwdc2021/10132/":{"titleInlineContent":[{"text":"Meet async\/await in Swift","type":"text"}],"title":"Meet async\/await in Swift","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10132\/","type":"link","identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2021\/10132\/"},"https://developer.apple.com/documentation/appkit/nsmenuitem/3787554-allowsautomatickeyequivalentloca":{"identifier":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787554-allowsautomatickeyequivalentloca","type":"link","url":"https:\/\/developer.apple.com\/documentation\/appkit\/nsmenuitem\/3787554-allowsautomatickeyequivalentloca","title":"NSMenuItem.allowsAutomaticKeyEquivalentLocalization","titleInlineContent":[{"code":"NSMenuItem.allowsAutomaticKeyEquivalentLocalization","type":"codeVoice"}]},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10066-Whats-new-in-Game-Center-Widgets-friends-and-multiplayer-improvements":{"abstract":[{"type":"text","text":"Power up your online gaming experience with GameKit and adopt features like multiplayer, leaderboards, and achievements in your game. We’ll take you through the latest improvements to Game Center, including player matching and multiplayer APIs, and explore how you can boost discovery of your game."}],"type":"topic","role":"sampleCode","title":"What’s new in Game Center: Widgets, friends, and multiplayer improvements","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10066-Whats-new-in-Game-Center-Widgets-friends-and-multiplayer-improvements","url":"\/documentation\/wwdcnotes\/wwdc21-10066-whats-new-in-game-center-widgets-friends-and-multiplayer-improvements"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"kind":"article","abstract":[{"type":"text","text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","title":"Meet async\/await in Swift","role":"sampleCode"}}}