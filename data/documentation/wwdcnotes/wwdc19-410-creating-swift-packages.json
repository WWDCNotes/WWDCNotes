{"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"roleHeading":"WWDC19","role":"sampleCode","title":"Creating Swift Packages","modules":[{"name":"WWDC Notes"}]},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc19-410-creating-swift-packages"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"anchor":"Semantic-Versioning","text":"Semantic Versioning","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Apple is really pushing us to use semantic versioning","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"x.x.x-alpha.1","type":"codeVoice"},{"text":" ","type":"text"},{"code":"x.x.x-beta.2","type":"codeVoice"},{"text":" for pre-releases","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Package-Manifest-File","text":"Package Manifest File","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The core of a package is the Package Manifest File (which is always a ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" file in the project root):","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ swift-tools-version:5.1 ","import PackageDescription ","","let package = Package(","\tname: \"MyPackage\" ",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ï¿¼"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The first line of the package declares the minimum version of the swift compiler required to build this package.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"We can use SPM with older versions of iOS, not only iOS 13 ðŸŽ‰","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The import declares that weâ€™re going to use the swift package APIs in this file. This is a library provided by Xcode which contains the APIs used in the manifest file.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Then we have a package initializer which is the real deal: it contains the package name, and more."}],"type":"paragraph"}]}]},{"anchor":"Package-Targets","text":"Package Targets","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Targets are the basic building blocks of a package. A target can define a module or a test suite."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Targets can depend on other targets in the same package, and on products in packages which this package depends on."}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ swift-tools-version:5.1 ","import PackageDescription ","","let package = Package(","\tname: \"MyPackage\", ","\ttargets: [ ","    .target(name: \"MyTarget\"),","  ]",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Each target has its own subfolder in the Sources folder, if we donâ€™t like this default path, we can specify another path ourselves like this:","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":[".target(name: \"FloatingPanel\", path: \"Framework\/Sources\"),"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This path is crucial because Xcode will use it to read all the source files in there, itâ€™s basically where Xcode looks at when it wants to compile your package (we donâ€™t need to list one by one all the files, but just tell Xcode this path).","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Test targets are declared in a similar way:","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ swift-tools-version:5.1 ","import PackageDescription ","","let package = Package(","\tname: \"MyPackage\", ","\ttargets: [ ","    .target(name: \"MyTarget\"),","    .testTarget( ","      name: \"MyTargetTests\", ","      dependencies:  [\"MyTarget\"]","    ),","  ]",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Note how we declare a dependency of one target to another."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Test targets by default fall into a "},{"type":"codeVoice","code":"Tests"},{"type":"text","text":" folder instead of the "},{"type":"codeVoice","code":"Sources"},{"type":"text","text":" folder."}],"type":"paragraph"}]}]},{"anchor":"Products","text":"Products","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Products define the executables and libraries produced by a package, and make them visible to other packages.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Products are used to export target from a package so other packages can use them."}]}]}]},{"type":"codeListing","syntax":"swift","code":["let package = Package(","\tname: \"MyPackage\",","\tproducts: [","\t\t.library (","\t\t\tname: \"MyProduct\",","\t\t\ttargets: [\"MyTarget\"]","\t\t),","\t],","\t...",")"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"By default all the packages are static, if we want to load them at run time, we need to specify their type to dynamic:","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":[".library( ","  name: \"LegacyMenuDownloader\",","  type: .dynamic, ","  targets: [\"LegacyMenuDownloader\"]","),"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In case our package has dependencies, we will declare them like this:"}]}]}]},{"type":"codeListing","syntax":"swift","code":["let package = Package(","\tname: \"MenuDownloader\",","\tproducts: [...], ","  dependencies: [ ","    .package (url: \"https:\/\/github.com\/jpsim\/Yams\", .upToNextMajor(from: \"2.0.0\")),","  ], ","  targets: [...]",")"]},{"type":"paragraph","inlineContent":[{"text":"ï¿¼","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Beside versions, we can also declare branches and specific commits as well:","type":"text"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Branch-based requirement. ",".package(url: \"https:\/\/github.com\/jpsim\/Yams\", .branch(\"main\"))","","\/\/ Revision-based requirement. ","package(ur1: \"https:\/\/github.com\/jpsim\/Yams\", revision(\"85cfe06\"))"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Note that these two last requirements (branch\/revision)  are not allowed in public packages, we must use the version requirement instead."}],"type":"paragraph"}]}]},{"anchor":"Platform-Availability","text":"Platform Availability","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Minimum versions that support SPM:","type":"text"},{"text":" ","type":"text"},{"identifier":"WWDC19-410-os","type":"image"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can declare in our package the version required by our package:"}]}]}]},{"type":"codeListing","syntax":"swift","code":["let package = Package(","\tname: \"MyPackage\",","\tplatforms: [","\t.macOS(.v10_15), .iOS(.v13)","\t],","\t...",")"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Note how this does not restrict the usage of the package only on those platforms: this parameter tells which platform minimum version is required for that specific version in order to run."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Package dependencies are locked from editing (you canâ€™t edit your dependencies): however, once you have a local copy of the dependency in your project, that copy overrides the remote dependency and you can edit it.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Limits","text":"Limits","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Currently SPM supports source code and unit tests, no images or other resources."}],"type":"paragraph"}]}]},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}]},{"size":4,"content":[{"type":"heading","level":3,"anchor":"Federico-Zanetello","text":"Federico Zanetello"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","type":"reference","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"isActive":true,"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/zntfdr","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/zntfdr.dev","type":"reference","isActive":true}]}]}],"numberOfColumns":5,"type":"row"},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110401-Create-Swift-Package-plugins","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10197-Discover-and-curate-Swift-Packages-using-Collections","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10147-Distribute-binary-frameworks-as-Swift-packages","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10169-Swift-packages-Resources-and-localization","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-408-Adopting-Swift-Packages-in-Xcode","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-416-Binary-Frameworks-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-411-Getting-to-Know-Swift-Package-Manager"],"style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright Â© 2012 â€“ 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"kind":"article","identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-410-Creating-Swift-Packages","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Whether you want to publish code to share with the community, or you just want a convenient way to organize the code in your apps, Swift packages are here to help. Learn how to create local packages for your own development, how to customize your package via the manifest file, and how to go about publishing a package for others to use."}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc19\/410","overridingTitle":"Watch Video (31 min)","isActive":true,"type":"reference"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19"]]},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10142-Build-scalable-enterprise-app-suites":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10142-Build-scalable-enterprise-app-suites","kind":"article","role":"sampleCode","type":"topic","abstract":[{"text":"Learn how to build focused enterprise apps that work well together. In this session, weâ€™ll introduce you to Apple Retailâ€™s suite of enterprise apps, which help employees interact with customers, track operations, manage stores, and stay connected. Discover how Apple Retail created a unified set of apps by adopting Swift Packages and testing for app scalability. And explore how managing apps in production with configurations can help tailor app suites to different regions and locations.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc20-10142-build-scalable-enterprise-app-suites","title":"Build scalable enterprise app suites"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110401-Create-Swift-Package-plugins":{"url":"\/documentation\/wwdcnotes\/wwdc22-110401-create-swift-package-plugins","kind":"article","title":"Create Swift Package plugins","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110401-Create-Swift-Package-plugins","type":"topic","abstract":[{"type":"text","text":"Tailor your development workflow and learn how to write your own package plugins in Swift. Weâ€™ll show you how you can extend Xcodeâ€™s functionality by using the PackagePlugin API to generate source code or automate release tasks and share best practices for creating great plugins."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc19","images":[{"identifier":"WWDC19-Icon.png","type":"icon"},{"identifier":"WWDC19.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19","abstract":[{"text":"Xcode 11, Swift 5.1, iOS 13, macOS 10.15 (Catalina), tvOS 13, watchOS 6.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"Combine","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Core Haptics","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Create ML","type":"codeVoice"},{"text":", and more.","type":"text"}],"title":"WWDC19","kind":"article","role":"collectionGroup"},"WWDC19-Icon.png":{"identifier":"WWDC19-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC19-Icon.png"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110360-Use-Xcode-for-serverside-development":{"url":"\/documentation\/wwdcnotes\/wwdc22-110360-use-xcode-for-serverside-development","title":"Use Xcode for server-side development","role":"sampleCode","abstract":[{"text":"Discover how you can create, build, and deploy a Swift server app alongside your pre-existing Xcode projects within the same workspace. Weâ€™ll show you how to create your own local app and test endpoints using Xcode, and explore how you can structure and share code between server and client apps to ease your development process","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-408-Adopting-Swift-Packages-in-Xcode":{"url":"\/documentation\/wwdcnotes\/wwdc19-408-adopting-swift-packages-in-xcode","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-408-Adopting-Swift-Packages-in-Xcode","type":"topic","title":"Adopting Swift Packages in Xcode","abstract":[{"text":"Swift packages are a great way to organize and share code, and are now supported while building apps for all Apple platforms in Xcode 11. Find out how to use community-developed packages in your project, how Swift packages are structured, and how package versioning and dependencies work.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-411-Getting-to-Know-Swift-Package-Manager":{"abstract":[{"text":"The Swift Package Manager makes it possible to easily develop and distribute source code in the Swift ecosystem. Learn about its goals, design, unique features, and the opportunities it has for continued evolution.","type":"text"}],"role":"sampleCode","title":"Getting to Know Swift Package Manager","url":"\/documentation\/wwdcnotes\/wwdc18-411-getting-to-know-swift-package-manager","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-411-Getting-to-Know-Swift-Package-Manager"},"WWDC19.jpeg":{"identifier":"WWDC19.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC19.jpeg"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10197-Discover-and-curate-Swift-Packages-using-Collections":{"url":"\/documentation\/wwdcnotes\/wwdc21-10197-discover-and-curate-swift-packages-using-collections","title":"Discover and curate Swift Packages using Collections","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10197-Discover-and-curate-Swift-Packages-using-Collections","kind":"article","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Whether youâ€™re curating packages for your team, for education purposes, or to share with other developers, Swift Package Collections can help you discover, explore and import new packages into your project. Discover improvements in the Swift Package workflow using Collections, and learn how you can curate, create, sign, and share your own Swift Package Collections."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10147-Distribute-binary-frameworks-as-Swift-packages":{"url":"\/documentation\/wwdcnotes\/wwdc20-10147-distribute-binary-frameworks-as-swift-packages","kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10147-Distribute-binary-frameworks-as-Swift-packages","type":"topic","title":"Distribute binary frameworks as Swift packages","abstract":[{"text":"Discover how you can add third-party frameworks to your app and keep them up to date using Swift packages in Xcode. Weâ€™ll show you how to author packages that reference frameworks, explain binary targets and how to specify them in your package manifest file, and demonstrate how to compute checksums so that your clients always get the exact binary you expect.","type":"text"}]},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-416-Binary-Frameworks-in-Swift":{"title":"Binary Frameworks in Swift","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-416-Binary-Frameworks-in-Swift","role":"sampleCode","kind":"article","abstract":[{"text":"Xcode 11 now fully supports using and creating binary frameworks in Swift. Find out how to simultaneously support devices and Simulator with the new XCFramework bundle type, how Swift module interfaces work, and how to manage changes to your framework over time.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc19-416-binary-frameworks-in-swift"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10169-Swift-packages-Resources-and-localization":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10169-Swift-packages-Resources-and-localization","abstract":[{"type":"text","text":"Bring your resources along for the ride when you organize and share code using Swift packages. Discover how to include assets like images and storyboards in a package and how to access them from code. And learn how to add localized strings to make your code accessible to people around the world."}],"url":"\/documentation\/wwdcnotes\/wwdc20-10169-swift-packages-resources-and-localization","kind":"article","title":"Swift packages: Resources and localization","type":"topic","role":"sampleCode"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"type":"image","alt":null},"zntfdr":{"identifier":"zntfdr","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","alt":"Profile image of Federico Zanetello"},"WWDC19-410-os":{"identifier":"WWDC19-410-os","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC19-410-os.png"}],"type":"image","alt":null},"https://zntfdr.dev":{"titleInlineContent":[{"text":"Blog","type":"text"}],"identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev","type":"link","title":"Blog"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!"},"https://github.com/zntfdr":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr","type":"link","title":"GitHub"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"title":"Federico Zanetello (332 notes)","kind":"article","role":"sampleCode"},"https://developer.apple.com/wwdc19/410":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc19\/410","url":"https:\/\/developer.apple.com\/wwdc19\/410","type":"download"}}}