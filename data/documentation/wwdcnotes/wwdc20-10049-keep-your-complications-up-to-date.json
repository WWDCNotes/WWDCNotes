{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10049-Keep-your-complications-up-to-date","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC20","title":"Keep your complications up to date","role":"sampleCode"},"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","overridingTitle":"Watch Video (21 min)","identifier":"https:\/\/developer.apple.com\/wwdc20\/10049"}},"kind":"article","variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc20-10049-keep-your-complications-up-to-date"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"abstract":[{"type":"text","text":"Time is of the essence: Discover how your Apple Watch complications can provide relevant information throughout the day and help people get the information they need, when they need it. Learn best practices for capitalizing on your app’s runtime opportunities, incorporating APIs like background app refresh and URLSession, and implementing well-timed push notifications."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Demo app "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/creating_and_updating_complications"},{"type":"text","text":"."}]},{"type":"heading","text":"Foreground opportunities","level":2,"anchor":"Foreground-opportunities"},{"type":"paragraph","inlineContent":[{"text":"When the app is in the foreground, we can tell the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationserver","type":"reference","isActive":true},{"text":" that we would like to reload our complications timelines:","type":"text"}]},{"type":"codeListing","code":["let complicationServer = CLKComplicationServer.sharedInstance()","","if let activeComplications = complicationServer.activeComplications {","  for complication in activeComplications {","      \/\/ Be selective on what you actually need to reload","    complicationServer.reloadTimeline(for: complication)","  }","} "],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This tells the server when we would like to refresh our complication(s).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Later on our ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationdatasource","isActive":true,"type":"reference"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"getCurrentTimelineEntry(for:withHandler:)"},{"text":" will be called:","type":"text"}]},{"type":"codeListing","code":["func getCurrentTimelineEntry(","  for complication: CLKComplication, ","  withHandler handler: @escaping (CLKComplicationTimelineEntry?) -> Void","  ) {","  \/\/ ..","  handler(entry)","}"],"syntax":"swift"},{"type":"heading","text":"Background App Refresh","level":2,"anchor":"Background-App-Refresh"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Background refresh allows us to schedule periodic updates to keep that complication up-to-date even when the app isn’t in use."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Up to four times per hour (regardless of how many complications are present in the current watch face)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Make a "},{"identifier":"https:\/\/developer.apple.com\/documentation\/watchkit\/wkextension\/1650848-schedulebackgroundrefresh","type":"reference","isActive":true},{"type":"text","text":" request on "},{"type":"codeVoice","code":"WKExtension"}]},{"type":"codeListing","code":["private func scheduleBAR(_ first: Bool) {","  let now = Date()","  let scheduledDate = now.addingTimeInterval(first ? 60 : 15*60)","","  \/\/ use the info dictionary to supply your own data to the refresh","  let info: NSDictionary = [“submissionDate”: now]","","  let wkExt = WKExtension.shared()","  wkExt.scheduleBackgroundRefresh(","      withPreferredDate: scheduledDate, ","      userInfo:info","  ) { (error: Error?) in","    if (error != nil) {","      print(\"background refresh could not be scheduled \\(error.debugDescription)\")","    } ","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Later on the "},{"type":"codeVoice","code":"WKExtension"},{"type":"text","text":" will trigger the refresh in our "},{"type":"codeVoice","code":"WKExtensionDelegate"},{"type":"text","text":" via the "},{"type":"codeVoice","code":"handle(:)"},{"type":"text","text":" method."}]},{"type":"codeListing","code":["class ExtensionDelegate: NSObject, WKExtensionDelegate {","  func handle(_ backgroundTasks: Set<WKRefreshBackgroundTask>) {","    for task in backgroundTasks {","","      switch task {","        case let backgroundTask as WKApplicationRefreshBackgroundTask:","","          if let userInfo: NSDictionary = backgroundTask.userInfo as? NSDictionary {","             if let then:Date = userInfo[\"submissionDate\"] as! Date {","                let interval = Date.init().timeIntervalSince(then)","                print(\"interval since request was made \\(interval)\")","             }","          }","","          \/\/ once we're done updating the data, we ask the complication server to reload our active complications","          self.updateActiveComplications()","","          \/\/ we then schedule the next background refresh","          self.scheduleBAR(first: false)","","          \/\/ then we complete the current task, we pass `false` to indicate that no snapshot is needed.","          \/\/ Each complication update results in a snapshot request, so we don't have to request one separately.","          backgroundTask.setTaskCompletedWithSnapshot(false)","         case ...","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Guidelines:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Only one request is outstanding at a time: if you need periodic updates, schedule the next update before marking the current one complete"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"No networking: URLSession will fail with an error"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Background updates are limited to a maximum of four seconds of "},{"type":"strong","inlineContent":[{"type":"text","text":"active"}]},{"type":"text","text":" CPU time"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Background updates have a maximum of 15 seconds of total time to complete the task"}]}]}]},{"type":"heading","text":"Background URLSession","level":2,"anchor":"Background-URLSession"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow your app to schedule and receive data even when the app isn’t running"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Can be used in addition to background app refresh"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Up to four times per hour","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple outstanding tasks are allowed","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Creating a request is composed by multiple steps:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"define a "},{"code":"backgroundURLSession","type":"codeVoice"},{"type":"text","text":":"}]}]}]},{"type":"codeListing","code":["class WeatherDataProvider: NSObject, URLSessionDownloadDelegate {","","  private lazy var backgroundURLSession: URLSession = {","    let config = URLSessionConfiguration.background(withIdentifier: “BackgroundWeather\")","    config.isDiscretionary = false","    config.sessionSendsLaunchEvents = true","","    return URLSession(configuration: config, delegate: self, delegateQueue: nil)","  }()","}"],"syntax":"swift"},{"type":"orderedList","start":2,"items":[{"content":[{"inlineContent":[{"text":"create and resume a background task:","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["func schedule(_ first: Bool) {","  if let url = self.currentWeatherURLForLocation(delegate.currentLocationCoordinate) {","    let bgTask = backgroundURLSession.downloadTask(with: url)","  ","    bgTask.earliestBeginDate = Date().addingTimeInterval(first ? 60 : 15*60)","    bgTask.countOfBytesClientExpectsToSend = 200","    bgTask.countOfBytesClientExpectsToReceive = 1024","    bgTask.resume()","    backgroundTask = bgTask","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When the download is complete, our ","type":"text"},{"code":"WKExtensionDelegate","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"handle(:)","type":"codeVoice"},{"text":" method will be called.","type":"text"}]},{"type":"codeListing","code":["class ExtensionDelegate: NSObject, WKExtensionDelegate {","   var weatherDataProvider:WeatherDataProvider","","  func handle(_ backgroundTasks: Set<WKRefreshBackgroundTask>) {","    for task in backgroundTasks {","       switch task {","         case let urlSessionTask as WKURLSessionRefreshBackgroundTask:","           weatherDataProvider.refresh() { (update: Bool) -> Void in","           \t \/\/ schedule the next retrieval (if needed)","             weatherDataProvider.schedule(first: false)","           ","             \/\/ update complications if needed","             if update {","               self.updateActiveComplications()","             }","","             \/\/ call task completion","             urlSessionTask.setTaskCompletedWithSnapshot(false)","           }","       }","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our "},{"type":"codeVoice","code":"URLSessionDownloadDelegate"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"urlSession(:downloadTask:didFinishDownloadingTo:)"},{"type":"text","text":" will be called with information on the downloaded data:"}]},{"type":"codeListing","code":["class WeatherDataProvider : NSObject, URLSessionDownloadDelegate {","  func urlSession(","  \t_ session: URLSession, downloadTask: URLSessionDownloadTask,","    didFinishDownloadingTo location: URL","    ) {","      if location.isFileURL {","        do {","          let jsonData = try Data(contentsOf: location)","          if let kiteFlyingWeather = KiteFlyingWeather(jsonData) {","          \/\/ Process weather data here.","        }","      } catch let error as NSError {","        print(\"could not read data from \\(location)\")","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"After we process the data ","type":"text"},{"type":"codeVoice","code":"URLSessionDownloadDelegate"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"urlSession(:task:didCompleteWithError:)"},{"text":" will be called: call the completion handler on the main queue so we dispatch to the main queue and call the completion handler.","type":"text"}]},{"type":"codeListing","code":["func urlSession(","  _ session: URLSession, task: URLSessionTask, ","  didCompleteWithError error: Error?","  ) {","  \tprint(\"session didCompleteWithError \\(error.debugDescription)”)","  \tDispatchQueue.main.async {","  \t  self.completionHandler?(error == nil)","  \t  \/\/ set the completion handler to nil to make sure it's not called more than once.","  \t  self.completionHandler = nil","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Guidelines:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Background updates are limited to a maximum of four seconds of ","type":"text"},{"inlineContent":[{"type":"text","text":"active"}],"type":"strong"},{"text":" CPU time","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Background updates have a maximum of 15 seconds of total time to complete the task","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Complication Pushes","level":2,"anchor":"Complication-Pushes"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Servers can send up to fifty complication pushes per day to each individual watch (no limitations on how frequent they are, aka they can be 50 pushes in one hour)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The server needs to have a valid push certificate:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"crate a new app (complication) identifier with id "},{"type":"codeVoice","code":"{{bundle ID}}.watchkitapp.complication"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"create a push notification certificate with this new app identifier","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"your app needs to enable ","type":"text"},{"type":"codeVoice","code":"Remote Notifications"},{"text":" Background modes (in the app project)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"your watchkit extension need the push notifications capabilities enabled"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"type":"heading","text":"Register the complication for push notifications","level":3,"anchor":"Register-the-complication-for-push-notifications"},{"type":"codeListing","code":["class PushNotificationProvider : NSObject, PKPushRegistryDelegate {","","  func startPushKit() -> Void {","    let pushRegistry = PKPushRegistry(queue: .main)","    pushRegistry.delegate = self","    pushRegistry.desiredPushTypes = [.complication]","  }","","  func pushRegistry(","  \t_ registry: PKPushRegistry, ","    didUpdate pushCredentials: PKPushCredentials, for type: PKPushType","  ) {","    \/\/ Send credentials to server ","  }","}"],"syntax":"swift"},{"type":"heading","text":"Receiving Push notifications","level":3,"anchor":"Receiving-Push-notifications"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The app will resumed or launched when receiving a push notification"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our "},{"code":"PKPushRegistryDelegate","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"pushRegistry(_:didReceiveIncomingPushWith:for:completion:)","type":"codeVoice"},{"type":"text","text":" will be called"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is called in the queue we specified when registering with PushKit"}]}]},{"content":[{"inlineContent":[{"text":"Remember to call the completion after processing the notification","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","code":["class PushNotificationProvider : NSObject, PKPushRegistryDelegate {","  ...","  ","  func pushRegistry(","  \t_ registry: PKPushRegistry, ","    didReceiveIncomingPushWith payload: PKPushPayload, ","    for type: PKPushType, ","    completion: @escaping () -> Void","  ) {","    \/\/ Process payload","    delegate.updateActiveComplications()","    completion()","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Guidelines:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Background updates are limited to a maximum of four seconds of "},{"type":"strong","inlineContent":[{"type":"text","text":"active"}]},{"type":"text","text":" CPU time"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Background updates have a maximum of 15 seconds of total time to complete the task","type":"text"}]}]}]},{"type":"heading","text":"Recap","level":2,"anchor":"Recap"},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10049-recap","type":"image"}]},{"type":"heading","text":"Written By","level":2,"anchor":"Written-By"},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"inlineContent":[{"identifier":"zntfdr","type":"image"}],"type":"paragraph"}]},{"size":4,"content":[{"text":"Federico Zanetello","type":"heading","level":3,"anchor":"Federico-Zanetello"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}]}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"type":"heading","text":"Related Sessions","level":2,"anchor":"Related-Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10003-There-and-back-again-Data-transfer-on-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10046-Create-complications-for-Apple-Watch","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10048-Build-complications-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10100-Meet-Watch-Face-Sharing"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"references":{"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","type":"link","title":"GitHub"},"https://zntfdr.dev":{"title":"Blog","type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev"},"https://developer.apple.com/documentation/clockkit/clkcomplicationdatasource":{"title":"CLKComplicationDataSource","identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationdatasource","titleInlineContent":[{"code":"CLKComplicationDataSource","type":"codeVoice"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationdatasource"},"zntfdr.jpeg":{"alt":null,"identifier":"zntfdr.jpeg","type":"image","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10100-Meet-Watch-Face-Sharing":{"url":"\/documentation\/wwdcnotes\/wwdc20-10100-meet-watch-face-sharing","title":"Meet Watch Face Sharing","role":"sampleCode","abstract":[{"text":"Show off your watchOS app’s complications and create a watch face worth sharing. Learn how to share watch faces inside your watchOS and iOS apps or host them on the web for anyone to find and download. We’ll also explore best practices for using watch face preview images, and show you how to create a smooth installation experience.","type":"text"}],"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10100-Meet-Watch-Face-Sharing"},"https://developer.apple.com/wwdc20/10049":{"type":"download","url":"https:\/\/developer.apple.com\/wwdc20\/10049","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10049"},"WWDC20-10049-recap":{"identifier":"WWDC20-10049-recap","type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10049-recap.png","traits":["1x","light"]}]},"WWDC20-Icon.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-Icon.png","traits":["1x","light"]}],"identifier":"WWDC20-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","url":"\/documentation\/wwdcnotes\/wwdc20","kind":"article","role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC20-Icon.png"},{"type":"card","identifier":"WWDC20.jpeg"}],"title":"WWDC20","abstract":[{"text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"WidgetKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit Testing","type":"codeVoice"},{"type":"text","text":", and more."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10046-Create-complications-for-Apple-Watch":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10046-Create-complications-for-Apple-Watch","abstract":[{"text":"When you add complications to a Watch app, people can access glanceable and up to date information directly from their watch face. We’ll show you how to create and build complications from the ground up and introduce you to Multiple Complications. Learn how to construct timelines, use families and templates, and discover best practices on crafting a thorough complication experience.","type":"text"}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10046-create-complications-for-apple-watch","title":"Create complications for Apple Watch","type":"topic"},"https://developer.apple.com/documentation/clockkit/creating_and_updating_complications":{"titleInlineContent":[{"type":"text","text":"here"}],"url":"https:\/\/developer.apple.com\/documentation\/clockkit\/creating_and_updating_complications","identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/creating_and_updating_complications","type":"link","title":"here"},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"type":"topic","title":"WWDC Notes"},"https://developer.apple.com/documentation/clockkit/clkcomplicationserver":{"title":"CLKComplicationServer","identifier":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationserver","titleInlineContent":[{"type":"codeVoice","code":"CLKComplicationServer"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/clockkit\/clkcomplicationserver"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10048-Build-complications-in-SwiftUI":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10048-Build-complications-in-SwiftUI","abstract":[{"text":"Spice up your graphic complications on Apple Watch using SwiftUI. We’ll teach you how to use custom SwiftUI views in complications on watch faces like Meridian and Infograph, look at some best practices when creating your complications, and show you how to preview your work in Xcode 12.","type":"text"}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10048-build-complications-in-swiftui","title":"Build complications in SwiftUI","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10003-There-and-back-again-Data-transfer-on-Apple-Watch":{"type":"topic","title":"There and back again: Data transfer on Apple Watch","url":"\/documentation\/wwdcnotes\/wwdc21-10003-there-and-back-again-data-transfer-on-apple-watch","abstract":[{"text":"Advances in Apple Watch give you more ways to communicate to and from your app, and new audiences to consider. Learn what strategies are available for data communication and how to choose the right tool for the job. Compare and contrast the benefits of using technologies such as iCloud Keychain, Watch Connectivity, Core Data, and more.","type":"text"}],"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10003-There-and-back-again-Data-transfer-on-Apple-Watch"},"WWDCNotes.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"role":"sampleCode","title":"Federico Zanetello (332 notes)","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},"zntfdr":{"identifier":"zntfdr","type":"image","alt":"Profile image of Federico Zanetello","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"https://developer.apple.com/documentation/watchkit/wkextension/1650848-schedulebackgroundrefresh":{"title":"scheduleBackgroundRefresh(withPreferredDate:userInfo:scheduledCompletion:)","type":"link","titleInlineContent":[{"code":"scheduleBackgroundRefresh(withPreferredDate:userInfo:scheduledCompletion:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/watchkit\/wkextension\/1650848-schedulebackgroundrefresh","identifier":"https:\/\/developer.apple.com\/documentation\/watchkit\/wkextension\/1650848-schedulebackgroundrefresh"},"WWDC20.jpeg":{"alt":null,"identifier":"WWDC20.jpeg","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20.jpeg"}]}}}