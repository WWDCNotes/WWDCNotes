{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"overridingTitle":"Watch Video (27 min)","type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc21\/10134"}},"kind":"article","abstract":[{"text":"When you have code that needs to run at the same time as other code, it‚Äôs important to choose the right tool for the job. We‚Äôll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We‚Äôll also provide guidance on when you may want to use unstructured tasks.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift"]}],"metadata":{"title":"Explore structured concurrency in Swift","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC21","role":"sampleCode"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Tasks","text":"Tasks","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create additional tasks to add concurrency to a program"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A task provides a fresh execution context to run asynchronous code"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Each task runs concurrently with respect to other execution contexts","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Calling an ","type":"text"},{"code":"async","type":"codeVoice"},{"text":" function does not create a new task","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Async-let-tasks","text":"Async-let tasks","level":2,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When the process encounter an "},{"code":"async let","type":"codeVoice"},{"type":"text","text":" statement, a child task is created, while the main\/parent task continues running"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The parent task will suspend (if needed) only when it needs to get the result from the ","type":"text"},{"code":"async let","type":"codeVoice"},{"text":" child task, and it does so by using the (","type":"text"},{"code":"try","type":"codeVoice"},{"text":") ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" keyword. In other words, the parent task might suspend when it start using the variables that are concurrently bound","type":"text"}]}]}],"type":"unorderedList"},{"code":["func fetchOneThumbnail(withID id: String) async throws -> UIImage {","  let imageReq = imageRequest(for: id), metadataReq = metadataRequest(for: id)","  async let (data, _) = URLSession.shared.data(for: imageReq) \/\/ üëàüèª async","  async let (metadata, _) = URLSession.shared.data(for: metadataReq) \/\/ üëàüèª async","  guard let size = parseSize(from: try await metadata), \/\/ üëàüèª await","        let image = try await UIImage(data: data)?.byPreparingThumbnail(ofSize: size) \/\/ üëàüèª await","  else {","    throw ThumbnailFailedError()","  }","  return image","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Task-Tree","text":"Task Tree","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"keeps track of tasks and their children"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"influences the attributes of your tasks like cancellation, priority, and task-local variables","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a child\/sub task inherits all attributes of the parent task"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"whenever you make a call from one async function to another, the same task is used to execute the call","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks are not the child of a specific function, but their lifetime may be scoped to it"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A task parent-child link enforces a rule that says a parent task can only finish its work if all of its child tasks have finished"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"let‚Äôs say that we have two child tasks and one of them errors out, causing the parent, which was "},{"type":"codeVoice","code":"try await"},{"type":"text","text":"ing on it, to throw an error: the tree is responsible to cancel other child tasks and then await for them to finish before the parent task function can exit\/throw"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Marking a task as canceled does not stop the task. It simply informs the task that its results are no longer needed"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When a task is canceled, all subtasks that are decedents of that task will be automatically canceled, too"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"anchor":"Task-cancellation-is-cooperative","text":"Task cancellation is cooperative","level":4,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Tasks are not stopped immediately when cancelled"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Cancellation can be checked from anywhere (async or not)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Design your code with cancellation in mind","type":"text"}]}]}],"type":"unorderedList"},{"code":["func fetchThumbnails(for ids: [String]) async throws -> [String: UIImage] {","  var thumbnails: [String: UIImage] = [:]","  for id in ids {","    try Task.checkCancellation() \/\/ üëàüèª cancellation check, this call throws an error if the current task has been canceled","    thumbnails[id] = try await fetchOneThumbnail(withID: id)","  }","  return thumbnails","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"You can also check for cancellation without throwing:","type":"text"}],"type":"paragraph"},{"code":["func fetchThumbnails(for ids: [String]) async throws -> [String: UIImage] {","  var thumbnails: [String: UIImage] = [:]","  for id in ids {","    if Task.isCancelled { break } \/\/ üëàüèª cancellation check","    thumbnails[id] = try await fetchOneThumbnail(withID: id)","  }","  return thumbnails \/\/ üëàüèª In case of cancellation, we return a partial result","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Group-tasks","text":"Group tasks","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A task group is a form of structured concurrency that is designed to provide a dynamic amount of concurrency","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"You can introduce a task group by calling the ","type":"text"},{"code":"withThrowingTaskGroup","type":"codeVoice"},{"text":" function","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This function gives you a scoped group object to create child tasks that are allowed to throw errors"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Tasks added to a group cannot outlive the scope of the block in which the group is defined"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You create child tasks in a group by invoking its "},{"code":"async(_:)","type":"codeVoice"},{"type":"text","text":" method"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Child tasks added this way will begin executing immediately and in any order","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When the group object goes out of scope, the completion of all tasks within it will be implicitly awaited"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["func fetchThumbnails(for ids: [String]) async throws -> [String: UIImage] {","  var thumbnails: [String: UIImage] = [:]","  try await withThrowingTaskGroup(of: Void.self) { group in \/\/ üëàüèª","    for id in ids {","      group.async {","        \/\/ Error: Mutation of captured var 'thumbnails' in concurrently executing code","        thumbnails[id] = try await fetchOneThumbnail(withID: id)","      }","    }","  }","  return thumbnails","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the sample code above we have a data race issue:"},{"type":"text","text":"\n"},{"type":"text","text":"the "},{"type":"codeVoice","code":"thumbnails"},{"type":"text","text":" dictionary cannot handle more than one access at a time, and if two child tasks tried to insert thumbnails simultaneously, that could cause a crash or data corruption."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you create a new task, the work that the task performs is within a new closure type called a "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closure."}]}]},{"content":[{"inlineContent":[{"text":"The body of a ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closure is restricted from capturing mutable variables in its lexical context, because those variables could be modified after the task is launched.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that the values you capture in a task must be safe to share. E.g., value types, or objects designed to be accessed from multiple threads, like actors, and classes that implement their own synchronization."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"A way to solve this in our example, is to have each child task return a value:"},{"type":"text","text":"\n"},{"type":"text","text":"this design gives the parent task the sole responsibility of processing the results."}],"type":"paragraph"},{"code":["func fetchThumbnails(for ids: [String]) async throws -> [String: UIImage] {","  var thumbnails: [String: UIImage] = [:]","  try await withThrowingTaskGroup(of: (String, UIImage).self) { group in","    for id in ids {","      group.async {","        return (id, try await fetchOneThumbnail(withID: id)) \/\/ üëàüèª return only","      }","    }","    \/\/ Obtain results from the child tasks, sequentially, in order of completion.","    for try await (id, thumbnail) in group {","      thumbnails[id] = thumbnail \/\/ üëàüèª assign to the dictionary from the parent task","    }","  }","  return thumbnails","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Task tree differences from async let tasks:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"when your group goes out of scope through a normal exit from the block. Then, cancellation for child tasks is not implicit","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This behavior makes it easier for you to express the fork-join pattern using a task group, because the jobs will only be awaited, not canceled"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also manually cancel all tasks before exiting the block using the group‚Äôs "},{"type":"codeVoice","code":"cancelAll"},{"type":"text","text":" method"}]}]}],"type":"unorderedList"},{"anchor":"Unstructured-Tasks","text":"Unstructured Tasks","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"give you a lot more flexibility at the expense of needing a lot more manual management"}]}]},{"content":[{"inlineContent":[{"text":"Useful when:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"some tasks need to launch from non-async contexts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"some tasks live beyond the confines of a single scope"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Characteristics:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Inherit actor isolation and priority of the origin context","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Lifetime is not confined to any scope"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Can be launched anywhere, even non-async functions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Must be manually cancelled or awaited","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["@MainActor","class MyDelegate: UICollectionViewDelegate {","  var thumbnailTasks: [IndexPath: Task<Void, Never>] = [:]","  ","  func collectionView(_ view: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt item: IndexPath) {","    let ids = getThumbnailIDs(for: item)","    thumbnailTasks[item] = Task { \/\/ üëàüèª create and store unstructured tasks","      defer { thumbnailTasks[item] = nil } \/\/ üëàüèª we remove the task when it's finished, so we don't cancel it when it's finished already","      let thumbnails = await fetchThumbnails(for: ids)","      display(thumbnails, in: cell)","    }","  }","  ","  func collectionView(_ view: UICollectionView, didEndDisplay cell: UICollectionViewCell, forItemAt item: IndexPath) {","    thumbnailTasks[item]?.cancel() \/\/ üëàüèª we cancel said task when that cell is no longer displayed","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note here that we can access the same dictionary inside and outside of that async task without getting a data race flagged by the compiler. Our delegate class is bound to the main actor, and the new task inherits that, so they‚Äôll never run together in parallel."}],"type":"paragraph"},{"anchor":"Detached-Tasks","text":"Detached Tasks","level":2,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Unstructured tasks inherit traits from that task‚Äôs originating context, detached tasks don‚Äôt."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"maximum flexibility"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unscoped lifetime, manually cancelled and awaited"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Do not inherit anything from their originating context - e.g., they‚Äôre not constrained to the same actor and don‚Äôt have to run at the same priority as where they were launched","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Detached tasks run independently with generic defaults for things like priority, but they can also be launched with optional parameters to control how and where the new task gets executed","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Task-Cheat-sheet","text":"Task Cheat sheet","level":2,"type":"heading"},{"rows":[[[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[{"text":"Launched by","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Launchable from","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lifetime"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cancellation"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inherits from origin"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"async-let tasks","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"asvnc let x","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"async"},{"type":"text","text":" functions"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"scoped to statement"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"automatic"}]}],[{"type":"paragraph","inlineContent":[{"text":"priority, task-local values","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Group tasks"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"group.async"}]}],[{"type":"paragraph","inlineContent":[{"code":"withTaskGroup","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"scoped to task group","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"automatic"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"priority, task-local values"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Unstructured tasks","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Task"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"anywhere"}]}],[{"type":"paragraph","inlineContent":[{"text":"unscoped","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"via "},{"code":"Task","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"priority, task-local values, actor","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Detached tasks"}]}],[{"type":"paragraph","inlineContent":[{"code":"Task.detached","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"anywhere","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"unscoped"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"via "},{"type":"codeVoice","code":"Task"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"nothing"}]}]]],"header":"row","type":"table"},{"anchor":"Written-By","text":"Written By","level":2,"type":"heading"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}]},{"size":4,"content":[{"anchor":"Federico-Zanetello","type":"heading","text":"Federico Zanetello","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"isActive":true,"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}]}]}],"numberOfColumns":5,"type":"row"},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}],"type":"paragraph"},{"anchor":"Related-Sessions","text":"Related Sessions","level":2,"type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"],"style":"list","type":"links"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright ¬© 2012 ‚Äì 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10192-Whats-new-in-Swift":{"abstract":[{"type":"text","text":"Join us for an update on Swift. Discover the latest language advancements that make your code easier to read and write. Explore the growing number of APIs available as Swift packages. And we‚Äôll introduce you to Swift‚Äôs async\/await syntax, structured concurrency, and actors."}],"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","title":"What‚Äòs new in Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10192-whats-new-in-swift","type":"topic"},"WWDC21.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21.jpeg"}],"identifier":"WWDC21.jpeg","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"type":"topic","abstract":[{"text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We‚Äôll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps.","type":"text"}],"kind":"article","title":"Swift concurrency: Behind the scenes","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"},"https://developer.apple.com/wwdc21/10134":{"checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc21\/10134","identifier":"https:\/\/developer.apple.com\/wwdc21\/10134"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"role":"sampleCode","abstract":[{"text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We‚Äôll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency","title":"Visualize and optimize Swift concurrency","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10019-Discover-concurrency-in-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc21-10019-discover-concurrency-in-swiftui","role":"sampleCode","abstract":[{"type":"text","text":"Discover how you can use Swift‚Äôs concurrency features to build even better SwiftUI apps. We‚Äôll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we‚Äôll take you through the process of enabling additional asynchronous flows in your custom views."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","type":"topic","title":"Discover concurrency in SwiftUI"},"https://zntfdr.dev":{"url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev","title":"Blog","type":"link","titleInlineContent":[{"text":"Blog","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","url":"\/documentation\/wwdcnotes\/wwdc21","kind":"article","type":"topic","title":"WWDC21","abstract":[{"text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"MusicKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"DocC","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit 2","type":"codeVoice"},{"text":", and more.","type":"text"}],"role":"collectionGroup","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10058-Meet-AsyncSequence":{"abstract":[{"type":"text","text":"Iterating over a sequence of values over time is now as easy as writing a ‚Äúfor‚Äù loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We‚Äôll also show you how to adapt existing code to provide asynchronous sequences of your own."}],"role":"sampleCode","type":"topic","kind":"article","title":"Meet AsyncSequence","url":"\/documentation\/wwdcnotes\/wwdc21-10058-meet-asyncsequence","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10194-Swift-concurrency-Update-a-sample-app":{"url":"\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app","role":"sampleCode","abstract":[{"text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We‚Äôll also explore techniques for migrating existing code to Swift concurrency over time.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","type":"topic","title":"Swift concurrency: Update a sample app"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"abstract":[{"text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We‚Äôll take you through Swift‚Äôs approach to eliminating data races and its effect on app architecture. We‚Äôll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system.","type":"text"}],"type":"topic","kind":"article","title":"Eliminate data races using Swift Concurrency","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10170-Beyond-the-basics-of-structured-concurrency":{"title":"Beyond the basics of structured concurrency","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency","abstract":[{"text":"It‚Äôs all about the task tree: Find out how structured concurrency can help your apps manage automatic task cancellation, task priority propagation, and useful task-local value patterns. Learn how to manage resources in your app with useful patterns and the latest task group APIs. We‚Äôll show you how you can leverage the power of the task tree and task-local values to gain insight into distributed systems.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10170-beyond-the-basics-of-structured-concurrency","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"role":"sampleCode","abstract":[{"text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug.","type":"text"}],"type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","title":"Protect mutable state with Swift actors","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"type":"image","alt":null,"identifier":"WWDCNotes.png"},"zntfdr":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"identifier":"zntfdr","alt":"Profile image of Federico Zanetello","type":"image"},"https://github.com/zntfdr":{"url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","title":"GitHub","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","role":"collection","title":"WWDC Notes","type":"topic","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"url":"\/documentation\/wwdcnotes"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","type":"link","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"url":"\/documentation\/wwdcnotes\/zntfdr","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","role":"sampleCode","kind":"article","title":"Federico Zanetello (332 notes)"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"abstract":[{"type":"text","text":"Swift now supports asynchronous functions ‚Äî a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions."}],"type":"topic","kind":"article","title":"Meet async\/await in Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift"},"WWDC21-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21-Icon.png"}],"identifier":"WWDC21-Icon.png","alt":null,"type":"image"},"zntfdr.jpeg":{"alt":null,"identifier":"zntfdr.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"type":"image"}}}