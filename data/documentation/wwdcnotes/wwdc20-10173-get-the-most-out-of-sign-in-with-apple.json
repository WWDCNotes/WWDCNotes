{"kind":"article","sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"roleHeading":"WWDC20","role":"sampleCode","modules":[{"name":"WWDC Notes"}],"title":"Get the most out of Sign in with Apple"},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10173-Get-the-most-out-of-Sign-in-with-Apple","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"style":"note","name":"Related ","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/HARlBO\/WWDC\/blob\/master\/WWDC2019\/Introducing-Sign-In-with-Apple.md","type":"reference"}]}]},{"level":2,"type":"heading","text":" Creating a secure request","anchor":"%EF%A3%BF-Creating-a-secure-request"},{"syntax":"swift","type":"codeListing","code":["\/\/ Configure request, setup delegates and perform authorization request","@objc func handleAuthorizationButtonPress(){ ","\tlet request = ASAuthorizationAppleIDProvider().createRequest() ","\trequest.requestedScopes = [.fullName, .email]","","\trequest.nonce = myNonceString()","\trequest.state = myStateString() ","","  let controller = ASAuthorizationController(authorizationRequests: [request]) ","","  controller.delegate = self ","  controller.presentationContextProvider = self ","","  controller.performRequests() ","}"]},{"inlineContent":[{"text":"These ","type":"text"},{"code":"nonce","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"state","type":"codeVoice"},{"text":" properties will allow you to verify that the authorization and credential you get after executing a request are the ones you were expecting.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Securing your request","anchor":"Securing-your-request"},{"level":4,"type":"heading","text":"Nonce","anchor":"Nonce"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-1"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The nonce is an opaque blob of data sent as a string in the request."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It is important to generate one unique nonce every time you create a new request as later on you will be able to verify this value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This will allow you to verify this value in your server, helping prevent replay attacks."}],"type":"paragraph"},{"level":4,"type":"heading","text":"State","anchor":"State"},{"inlineContent":[{"text":"The state value is also an opaque blob of data sent with the request.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Once key difference he has with the nonce value is that the state will be returned in the credential allowing you to locally match a credential to a request and verify this was generated from your application"}],"type":"strong"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Private email relay","anchor":"Private-email-relay"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-2"}],"type":"paragraph"},{"inlineContent":[{"text":"Example on how to get a credential from an authorization","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ ASAuthorizationControllerDelegate ","","func authorizationController(","\tcontroller: ASAuthorizationController,","\tdidCompleteWithAuthorization authorization: ASAuthorization",") { ","\tif let credential = authorization.credential as? ASAuthorizationAppleIDCredential {","\t\tlet userIdentifier = credential.user","\t\tlet fullName = credential.fullName","\t\tlet email = credential.email ","\t\tlet realUserStatus = credential.realUserStatus ","\t\t","\t\tlet state = credential.state","\t\tlet identityToken = credential.identityToken","\t\tlet authorizationCode = credential.authorizationCode ","","    \/\/ Securely store the userIdentifier locally ","    self.saveUserIdentifier(userIdentifier) ","","    \/\/ Create a session with your server and verify the information","    self.createSession(","    \tidentityToken: identityToken, ","    \tauthorizationCode: authorizationCode","    ) ","\t}","}"]},{"inlineContent":[{"type":"text","text":"Inside of credential you will find properties containing the user information that you requested like name and email. You will also find important properties that will allow you to securely verify the request and create a session with your servers."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Verifying Credentials","anchor":"Verifying-Credentials"},{"level":4,"type":"heading","text":"Response","anchor":"Response"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Cache the objects locally"},{"type":"text","text":" "},{"type":"text","text":"It is important to cache the objects you need in case of the failure communicating with your server due to poor connectivity."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Verify the state value","type":"text"},{"text":" ","type":"text"},{"text":"Make sure you verify the state value of the credential to be the same state value you previously generated.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate the information with Apple"},{"type":"text","text":" "},{"type":"text","text":"The response contains an authorization code an identity token. Send these values to your server where they can be decoded. Once decoded, verify the received information as well as session with Apple servers."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"How will the entry token will look when decoded by your server"}]}],"type":"paragraph"},{"syntax":"json","type":"codeListing","code":["{","  \"iss\": \"https:\/\/appleid.apple.com\",","  \"aud\": \"<Bundle Identifier>\",","  \"exp\": 1591157663,","\t\"iat\": 1591157063, ","\t\"sub\": \"001888.df37b9a8a63a423a8d80a5fc2069e308.1756\",","\t\"nonce\": \"a3315daf11b\",","\t\"c_hash\": \"glOEj05pyJV9JdNzc2nhqQ\",","\t\"email\": \"4r8ihiunz7@privaterelay.appleid.com\", ","\t\"email_verified\": true, ","\t\"is_private_email\": true, ","\t\"auth_time\": 1591157063, ","\t\"nonce_supported\": true, ","\t\"real_user_status\": 1","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"subject"},{"type":"text","text":" : A user identified that was returned to you on the authorization and will allow to create a session in your servers."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"nonce"},{"type":"text","text":" : Verify these to be the same nonce you generated previously in the request. This will allow you to verify the authenticity of the authorization and help mitigate replay attacks."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"real_user_status"},{"text":" : ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" - unsupported, ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" - unknown, ","type":"text"},{"type":"codeVoice","code":"2"},{"text":" - likely real","type":"text"}]}]}]},{"level":4,"type":"heading","text":"Identity token and authorization code","anchor":"Identity-token-and-authorization-code"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-5"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can exchange the authorization code with the Apple ID servers. And when this is successful you will receive a refreshed token and an access token for future calls as well as a new identity token that should be identical to the one you already have."}],"type":"paragraph"},{"inlineContent":[{"text":"You may verify a refresh token once a day to confirm that the user’s Apple ID on that device is still in good standing.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":" Credential state changes","anchor":"%EF%A3%BF-Credential-state-changes"},{"syntax":"swift","type":"codeListing","code":["","\/\/ Getting a credential state ","let provider = ASAuthorizationAppleIDProvider()","","provider.getCredentialState(","\tforUserID: getstoredUserIdentifier()",") { credentialState, error in ","\tswitch credentialState {","\t\tcase .authorized: ","      \/\/ Sign in with Apple credential Valid ","    case .revoked: ","      \/\/ Sign in with Apple credential Revoked, Sign out ","    case .notFound: ","      \/\/ Credential was not found, fallback to login screen ","    case .transferred: ","      \/\/ Application was recently transferred, refresh User Identifier ","    @unknown default: ","      break ","  }","}"]},{"inlineContent":[{"type":"codeVoice","code":"getCredentialState"},{"text":" API allows you to verify the current state of a credential by sending the currently stored user identifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It is important that this method is called every time your application is launched or changes to the foreground. That way you will be able to react on time to any changes in status and present the appropriate scheme in your application to your user."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":".authorized","type":"codeVoice"},{"text":" : You can fast track the user directly to your application and skip the login UI.","type":"text"}]}]},{"content":[{"inlineContent":[{"code":".revoked","type":"codeVoice"},{"text":" : The user decided to sign out of your application. In this scenario you should sign the user out of your application. Close your session and present the login screen","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".notFound","type":"codeVoice"},{"text":" :  This will be returned when there was no credential matching the user identifier. Present a login screen so that the user can authenticate your application.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"🆕 "},{"type":"codeVoice","code":".transferred"}]}]}]},{"level":3,"type":"heading","text":"🆕 Transferred State","anchor":"%F0%9F%86%95-Transferred-State"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Ownership changed","type":"text"},{"text":" ","type":"text"},{"text":"This will only be received by application that recently were transferred from one development team to another. (ex. after a company’s acquired)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"User migration needed"},{"type":"text","text":" "},{"type":"text","text":"User identifiers are unique to a team. So when transferring ownership of an application, the existing user will need to be migrated to a new user identifier to match the new team."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Silent migration"},{"type":"text","text":" "},{"type":"text","text":"This migration is handled silently. This is without any user interaction and can be triggered calling the same API used to create a new account or logging the user."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Migrating a user identifier ","let request = ASAuthorizationAppleIDProvider().createRequest()","request.requestedScopes= [.fullName, .email]","","request.user = getStoredUserIdentifier() ","","request.nonce = myNonceString() ","request.state = myStateString() ","","let controller = ASAuthorizationController(authorizationRequests: [request])","","controller.delegate = self ","controller.presentationContextProvider = self ","","controller.performRequests() "]},{"inlineContent":[{"type":"text","text":"We can validate the transfer state of the user and generate the new user identifier that will match the new team."}],"type":"paragraph"},{"level":2,"type":"heading","text":" Server notifications","anchor":"%EF%A3%BF-Server-notifications"},{"level":3,"type":"heading","text":"🆕 Server to server developer notifications","anchor":"%F0%9F%86%95-Server-to-server-developer-notifications"},{"inlineContent":[{"type":"text","text":"Listening to these notifications will allow you to monitor things like credential state changes right from your server as well as receive other types of events."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Register","type":"text"},{"text":" ","type":"text"},{"text":"You have to register your server endpoint on the Apple developer’s website.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"JWT Event"},{"type":"text","text":" "},{"type":"text","text":"Events will be sent as JSON web tokens signed by Apple."}]}]}]},{"syntax":"json","type":"codeListing","code":["{","  \"iss\": \"https:\/\/appleid.apple.com\/\", ","  \"aud\": \"<Bundle Identifier>\",","  \"iat\": 1508184845,","  \"jti\": \"<unique events stream id>\", ","  \"events\": [ ","  \t{","  \t  \"type\": \"email-enabled\", ","  \t  \"sub\": \"<user_id>\", ","  \t  \"email\": \"<email@privaterelay.appleid.com>\",","  \t  \"is_private_email\": true,","  \t  \"event_time\": 1508184845 ","  \t}","  ]","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"email-disabled","type":"codeVoice"},{"type":"text","text":" event which you can get if a user has decided to stop receiving emails on their email relay. The email enabled event means that the user opted back into receiving email messages."}],"type":"paragraph"},{"inlineContent":[{"text":"It is important to note that this event as well as the email disabled will only be sent when the user previously decided to use a private email relay for their account.","type":"text"}],"type":"paragraph"},{"syntax":"json","type":"codeListing","code":["{","  \"iss\": \"https:\/\/appleid.apple.com\/\", ","  \"aud\": \"<Bundle Identifier>\",","  \"iat\": 1508184845,","  \"jti\": \"<unique events stream id>\", ","  \"events\": [ ","  \t{","  \t  \"type\": \"email-enabled\", ","  \t  \"sub\": \"<user_id>\", ","  \t  \"event_time\": 1508184845 ","  \t}","  ]","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"consent-revoked"},{"type":"text","text":" event will be sent to you when a user decided to stop using their AppleID with your application and should be treated as a sign out by the user."}],"type":"paragraph"},{"level":2,"type":"heading","text":" Sign in with Apple Button","anchor":"%EF%A3%BF-Sign-in-with-Apple-Button"},{"level":3,"type":"heading","text":"🆕 SwiftUI support","anchor":"%F0%9F%86%95-SwiftUI-support"},{"inlineContent":[{"identifier":"WWDC20-10173-10","type":"image"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ SwiftUI example: ","","SignInWithAppleButton(.signIn) { ","\tonRequest: { request in ","    request.requestedScopes = [.fullName, .email]","    request.nonce = myNonceString()","    request.state = myStateString() ","  } ","  onCompletion: { result in ","  \tswitch result { ","      case .success(let authorization): ","        \/\/ Handle Authorization ","      case .failure(let error): ","        \/\/ Handle Failure ","    }","  }","}.signInWithAppleButtonStyle(.black) "]},{"inlineContent":[{"type":"codeVoice","code":"onRequest"},{"type":"text","text":" : This is the right place to add the requested scopes like name and email and the nonce state values."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"onCompletion"},{"type":"text","text":" : We will get the result of the request and handle the success or failure cases just as you would on the delegate methods for the authorization controller."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":".signInWithAppleButtonStyle"},{"type":"text","text":" : We can also select the Button style."}],"type":"paragraph"},{"level":4,"type":"heading","text":"Styles","anchor":"Styles"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Black"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"White","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"White outline"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"If you need to personalize the Sign in with Apple Button more to match the specific design of your website or application → a new online portal"}],"type":"paragraph"},{"level":3,"type":"heading","text":"🆕 Online Button editor","anchor":"%F0%9F%86%95-Online-Button-editor"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-12"}],"type":"paragraph"},{"inlineContent":[{"type":"reference","identifier":"https:\/\/appleid.apple.com\/signinwithapple\/button","isActive":true}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-13"}],"type":"paragraph"},{"level":2,"type":"heading","text":" 🆕 Upgrading  to Sign in with Apple","anchor":"%EF%A3%BF-%F0%9F%86%95-Upgrading-to-Sign-in-with-Apple"},{"inlineContent":[{"type":"text","text":"What about users that are already using a traditional username and password based account and don’t want to fork their current account?"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Secure","type":"text"},{"text":" ","type":"text"},{"text":"It’s secure for both you and your users. Upgrading to Sign in with Apple is the easiest way to convert your accounts to two factor authentication.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Reduce complexity"},{"type":"text","text":" "},{"type":"text","text":"Account recovery is also a lot less complicated with Sign in with Apple."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Prevent duplicate accounts"},{"type":"text","text":" "},{"type":"text","text":"Utilizing this API will prevent the duplication of accounts."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"→ Users that are already using a traditional username and password based account won’t abandon their current account, they can just upgrade.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"identifier":"WWDC20-10173-14","type":"image"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"One Tap Account Security Upgrades - WWDC20","type":"text"}]}]},{"level":3,"type":"heading","text":"Three flow for upgrades","anchor":"Three-flow-for-upgrades"},{"extendedData":{"0_2":{"colspan":0,"rowspan":1},"0_0":{"colspan":0,"rowspan":1},"0_1":{"colspan":0,"rowspan":1}},"header":"row","type":"table","rows":[[[{"inlineContent":[],"type":"paragraph"}],[{"inlineContent":[],"type":"paragraph"}],[{"inlineContent":[],"type":"paragraph"}]],[[{"inlineContent":[{"identifier":"WWDC20-10173-15","type":"image"}],"type":"paragraph"}],[{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-16"}],"type":"paragraph"}],[{"inlineContent":[{"identifier":"WWDC20-10173-17","type":"image"}],"type":"paragraph"}]]]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"When security recommendations identifies a weak credential in the new password manager and settings."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When a user is interacting with your app utilizes password autofill and the selected credential is a weak credential."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When you invoke the new authentication services API via a user interaction that you specify within your app"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"ASAccountAuthenticationModificationViewController","anchor":"ASAccountAuthenticationModificationViewController"},{"inlineContent":[{"type":"text","text":"Components:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"View controller","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Non user interactive"}]}]},{"content":[{"inlineContent":[{"text":"Step up security UI","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Extension context","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["import AuthenticationServices ","","class AccountModificationViewController: ASAccountAuthenticationModificationViewController { ","","  \/\/\/ Convert without UI.","  \/\/\/","  \/\/\/ Called initially by the extension hosting process in an attempt ","  \/\/\/ to upgrade the credential without user interaction.","  override func convertAccountToSignInWithAppleWithoutUserInteraction(","    for serviceIdentifier: ASCredentialServiceIdentifier, ","    existingCredential: ASPasswordCredential","  ) { ... } ","","  \/\/\/ This can be used to set up an intermediary user interface for ","  \/\/\/ the security step of flow if necessary. Providing intermediary UI","  \/\/\/ to indicate progress might help provide the best user experience.","  override func viewDidLoad() { ... } ","","  \/\/\/ convert with UI ","  \/\/\/","  \/\/\/ This is called just prior to your view appearing. It gets past ","  \/\/\/ the same ASPasswordCredential provided is a non user interaction ","  \/\/\/ flow.","  override func prepareInterfaceToConvertAccountToSignInWithApple(","    for serviceIdentifier: ASCredentialServiceIdentifier, ","    existingCredential: ASPasswordCredential","  ) { ... } ","}"]},{"level":3,"type":"heading","text":"Extension context","anchor":"Extension-context"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"ASAccountAuthenticationModificationViewController"},{"type":"text","text":" "},{"type":"text","text":"Used to control the flow of the upgrade."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Authorization"},{"type":"text","text":" "},{"type":"text","text":"It has function to request Sign in with Apple authorization."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Request UI"},{"type":"text","text":" "},{"type":"text","text":"If you’re evaluating the credential or currently signed in account and determined that additional UI is needed to verify the account the extension context is used to request that the step up security UI is displayed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Complete"},{"type":"text","text":" "},{"type":"text","text":"This removes the existing credential."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cancel"},{"type":"text","text":" "},{"type":"text","text":"The extension context is also used in cases which you need to cancel the flow entirely."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ASAccountAuthenticationModificationExtensionContext ","open class ASAccountAuthenticationModificationExtensionContext: NSExtensionContext{ ","","  \/\/\/ Displays the Sign in with Apple UI with your apps information ","  \/\/\/ asking the user to authorize the upgrade. Request in upgrade ","  \/\/\/ flows `nonce` and `state` is passed as a parameter to this call.","  open func getSignInWithAppleAuthorizationWithState(","    state: NSString?, ","    completionHandler: @escaping (ASAuthorizationAppleIDCredential?, nonce: NSString?, Error?) -> Void","  ) ","","  \/\/\/ This lets the extension hosting process know that authorization ","  \/\/\/ completed successfully resulting in the removal of the password ","  \/\/\/ credential.","  open func completeUpgradeToSignInWithApple(userInfo:[AnyHashable: Any ]? = nil) ","","  open func cancelRequest (withError error: Error) ","}","","\/\/ ASExtensionErrors.h","public struct ASExtensionError { ","  \/\/\/ If your extension determines that additional UI needs to be ","  \/\/\/ shown to the user.","  public static var userInteractionRequired: ASExtensionError.Code { get } ","","  \/\/\/ If your canceled while within your UI flow utilize that ","  \/\/\/ user canceled ever.","  public static var userCanceled: ASExtensionError.Code { get }","","  \/\/\/ All other failures can use the failed error.","  public static var failed: ASExtensionError.Code { get } ","}"]},{"level":3,"type":"heading","text":"Account authentication modification extension","anchor":"Account-authentication-modification-extension"},{"level":4,"type":"heading","text":"Prepare to convert without UI","anchor":"Prepare-to-convert-without-UI"},{"inlineContent":[{"identifier":"WWDC20-10173-21","type":"image"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"We begin the flow in the OS when toe user interacts with a weak credential and wants to upgrade that credential to Sign in with Apple.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Your account modification extension is initialized by the password managing process.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And the convert without UI function is called providing the password credential intended to be upgraded to Sign in with Apple."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The extension’s job is to evaluate the past credential to make sure it is valid prior to upgrading to Sign n with Apple","type":"text"},{"text":" ","type":"text"},{"text":"(At this point checking too see if the username matches the currently signed in user is a good first course of action.)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The extension determined that the state of the signed in user and the pass credential requires a call to the server to verify the account."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The server verifies the credential and the authentication is a success."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The server then replies back to the extension confirming that the account is ready to be upgraded to Sign in with Apple."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The account is confirmed as authenticated and eligible for upgrade the extension context would be used to request the Apple ID credential."}]}]}]},{"syntax":"swift","type":"codeListing","code":["enum VerificationResult: Int { ","  case success","  case failure","  case twoFactorAuthRequired","}","","override func convertAccountToSignInWithAppleWithoutUserInteraction(","  for serviceIdentifier: ASCredentialServiceIdentifier,","  existingCredential: ASPasswordCredential",") { ","  \/\/\/ When the existing credential is verified one of these three ","  \/\/\/ values would get returned.","  verifyCredential(existingCredential) { (result: VerificationResult) in ","    switch result { ","      \/\/\/ Result for cases such as when the server attempts to validate ","      \/\/\/ the credential but the account or service date is not ","      \/\/\/ appropriate for converting the account at that time.","      case .failure: ","        self.extensionContext.cancelRequest(withError: ASExtensionError(.failed))","","      \/\/\/ This indicates that the account is ready to be converted ","      \/\/\/ right away.","      case .success: ","        self.extensionContext.getSignInwithAppleAuthorizationWithState(","          state: myStateString(), ","          nonce: myNonceString(), ","          completion: {...}","        ) ","","      \/\/\/ This means that we need to show some UI to the user. The ","      \/\/\/ credential alone is not enough to upgrade.","      case .twoFactorAuthRequired: ","        self.extensionContext.cancelRequest(","          withError: ASExtensionError(.userInteractionRequired)","        )","    }","  }","} "]},{"level":3,"type":"heading","text":"Request UI only if needed","anchor":"Request-UI-only-if-needed"},{"inlineContent":[{"type":"text","text":"To avoid users having to do extra work in most cases where a user is already authenticated in your app."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Converting with UI","anchor":"Converting-with-UI"},{"inlineContent":[{"text":"There could be circumstances where UI flows might be warranted.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"WWDC20-10173-24"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"After the extension contacts cancelled with the user interaction required error, the password managing process initializes a new instance of the account modification view controller","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And calls it prepared to convert with your function. Passing the ASPasswordCredential."},{"type":"text","text":" "},{"type":"text","text":"(At this point, the extension’s ViewController is presented providing Intermediary UI such as a spinning gear.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Utilizing the same credentials as earlier with perhaps a slight change of context a request is made to the back end."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The server attempts to verify the account. Requires two F.A and sends a rely back to the extension.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The extension updates the view asking the user for two factor authentication."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The user provides the verification code which the extension would then verify."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the user could not be verified at this point, the extension context would be used to cancel the flow with the failed error.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the user provide a valid code and verification is a success, the extension is now ready to request the AppleID credential."}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"Upgrading account","anchor":"Upgrading-account"},{"inlineContent":[{"identifier":"WWDC20-10173-25","type":"image"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"It is important to secure your request, to do so your extension would generate a state and nonce and pass them as parameters for the getAppleIDCredential call.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"This results in an upgrade to Sign in with Apple UI being displayed to the user.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user then authorizes using Face ID."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The AppleIDCredential is provided to the extension in the completion block of the getAppleIDCredential call.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The extension would then verify the credentials stay properly as being the same generated earlier.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The extension would them request an upgrade of the account providing the necessary account information and the AppleIDCredential to the server back end, so the account can be converted."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The back end would then exchange the authorization code with Apple servers verifying the value of the nonce in the identity token."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"And if successful perform a conversion of the account.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"After converting,  it sends a reply back with a success value. It is important to note again that if the servers operation failed the extension contact should be used to call cancel with error with the failed error.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This time the server is indicating success. So the extension will perform any required bookkeeping and then call a complete upgrade to Sign in with Apple on the extension context.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This result in the password manager removing the existing credential and with that the flow is completed.","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Utilizing this API"}]},{"type":"text","text":" →"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improving user security"}]}]},{"content":[{"inlineContent":[{"text":"Avoid confusion","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Convenient","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"ᵗʱᵃᵑᵏઽ ⠒̫⃝♡"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Written By","anchor":"Written-By"},{"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"HARlBO","type":"image"}]}]},{"size":4,"content":[{"type":"heading","level":3,"text":"Jinha","anchor":"Jinha"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/HARlBO","overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/HARlBO"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.linkedin.com\/in\/Jinha2"}],"type":"paragraph"}]}],"numberOfColumns":5,"type":"row"},{"type":"thematicBreak"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10053-Discover-Sign-in-with-Apple-at-Work-and-School","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10122-Enhance-your-Sign-in-with-Apple-experience","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10110-Safeguard-your-accounts-promotions-and-content","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10115-AutoFill-everywhere","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10666-Onetap-account-security-upgrades","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-706-Introducing-Sign-In-with-Apple"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc20-10173-get-the-most-out-of-sign-in-with-apple"]}],"abstract":[{"type":"text","text":"Sign in with Apple makes it easy for people to sign in to your apps and websites with the Apple ID they already have. Fully integrate Sign in with Apple into your app using secure requests, and by handling state changes and server notifications. We’ll also introduce new APIs that allow you to let existing users switch to Sign in with Apple quickly and easily."}],"sampleCodeDownload":{"action":{"overridingTitle":"Watch Video (30 min)","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10173","type":"reference"},"kind":"sampleDownload"},"references":{"WWDC20-10173-1":{"type":"image","identifier":"WWDC20-10173-1","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-1.png","traits":["1x","light"]}],"alt":"WWDC20-10173-1"},"WWDC20-Icon.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-Icon.png"}],"type":"image","identifier":"WWDC20-Icon.png"},"HARlBO":{"alt":"Profile image of Jinha","variants":[{"url":"\/images\/WWDCNotes\/HARlBO.jpeg","traits":["1x","light"]}],"type":"image","identifier":"HARlBO"},"WWDC20.jpeg":{"type":"image","identifier":"WWDC20.jpeg","variants":[{"url":"\/images\/WWDCNotes\/WWDC20.jpeg","traits":["1x","light"]}],"alt":null},"WWDC20-10173-17":{"alt":"WWDC20-10173-17","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10173-17.png"}],"type":"image","identifier":"WWDC20-10173-17"},"WWDC20-10173-15":{"alt":"WWDC20-10173-15","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-15.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-15"},"WWDC20-10173-10":{"type":"image","identifier":"WWDC20-10173-10","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-10.png","traits":["1x","light"]}],"alt":"WWDC20-10173-10"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"title":"WWDC20","images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"identifier":"WWDC20.jpeg","type":"card"}],"role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WidgetKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit Testing"},{"type":"text","text":", and more."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc20"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://github.com/HARlBO/WWDC/blob/master/WWDC2019/Introducing-Sign-In-with-Apple.md":{"titleInlineContent":[{"type":"text","text":"Introducing Sign In with Apple - WWDC19"}],"title":"Introducing Sign In with Apple - WWDC19","url":"https:\/\/github.com\/HARlBO\/WWDC\/blob\/master\/WWDC2019\/Introducing-Sign-In-with-Apple.md","type":"link","identifier":"https:\/\/github.com\/HARlBO\/WWDC\/blob\/master\/WWDC2019\/Introducing-Sign-In-with-Apple.md"},"WWDC20-10173-13":{"type":"image","identifier":"WWDC20-10173-13","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-13.png","traits":["1x","light"]}],"alt":"WWDC20-10173-13"},"https://github.com/HARlBO":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","type":"link","identifier":"https:\/\/github.com\/HARlBO","url":"https:\/\/github.com\/HARlBO"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10053-Discover-Sign-in-with-Apple-at-Work-and-School":{"abstract":[{"type":"text","text":"Learn how you can support Sign In with Apple for Managed Apple IDs in organizational settings. We’ll introduce you to Sign In with Apple at Work & School and explore how education apps can harness the power of this REST API to streamline the import process for student and class information. We’ll also share how to configure Access Management controls for these features within Apple Business Manager and Apple School Manager."}],"title":"Discover Sign in with Apple at Work & School","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10053-Discover-Sign-in-with-Apple-at-Work-and-School","url":"\/documentation\/wwdcnotes\/wwdc22-10053-discover-sign-in-with-apple-at-work-and-school","type":"topic","kind":"article"},"WWDC20-10173-25":{"alt":"WWDC20-10173-25","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-25.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-25"},"WWDC20-10173-16":{"type":"image","identifier":"WWDC20-10173-16","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-16.png","traits":["1x","light"]}],"alt":"WWDC20-10173-16"},"https://developer.apple.com/wwdc20/10173":{"checksum":null,"url":"https:\/\/developer.apple.com\/wwdc20\/10173","type":"download","identifier":"https:\/\/developer.apple.com\/wwdc20\/10173"},"WWDC20-10173-14":{"alt":"WWDC20-10173-14","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-14.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-14"},"WWDC20-10173-12":{"alt":"WWDC20-10173-12","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-12.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-12"},"WWDC20-10173-5":{"type":"image","identifier":"WWDC20-10173-5","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10173-5.png"}],"alt":"WWDC20-10173-5"},"WWDC20-10173-21":{"alt":"WWDC20-10173-21","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-21.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-21"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10110-Safeguard-your-accounts-promotions-and-content":{"url":"\/documentation\/wwdcnotes\/wwdc21-10110-safeguard-your-accounts-promotions-and-content","abstract":[{"text":"Discover how to keep your accounts, apps, and content protected. We’ll explore the tools Apple has built to help developers keep their apps and systems safe and secure, and show you how to safeguard against attackers, bad actors and nefarious activity to help protect your ecosystem.","type":"text"}],"title":"Safeguard your accounts, promotions, and content","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10110-Safeguard-your-accounts-promotions-and-content","role":"sampleCode","kind":"article","type":"topic"},"HARlBO.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/HARlBO.jpeg","traits":["1x","light"]}],"type":"image","identifier":"HARlBO.jpeg"},"https://appleid.apple.com/signinwithapple/button":{"type":"link","identifier":"https:\/\/appleid.apple.com\/signinwithapple\/button","titleInlineContent":[{"text":"https:\/\/appleid.apple.com\/signinwithapple\/button","type":"text"}],"title":"https:\/\/appleid.apple.com\/signinwithapple\/button","url":"https:\/\/appleid.apple.com\/signinwithapple\/button"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10122-Enhance-your-Sign-in-with-Apple-experience":{"type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10122-enhance-your-sign-in-with-apple-experience","title":"Enhance your Sign in with Apple experience","abstract":[{"type":"text","text":"Learn how you can provide safe and fast authentication in your app using Sign in with Apple. We’ll show you how you can upgrade password-based accounts into secure, single-tap login credentials, and explore how you can seamlessly handle changes to user sessions in your app. We’ll also help you take advantage of Sign In with Apple across the web and on other platforms."}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10122-Enhance-your-Sign-in-with-Apple-experience"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10666-Onetap-account-security-upgrades":{"role":"sampleCode","abstract":[{"type":"text","text":"When you adopt the Account Authentication Modification Extension, you can provide people with fast, easy account security upgrades to use Sign in with Apple and strong passwords in the iCloud Keychain Password Manager. We’ll show you how to add these upgrade flows to your app with the Account Authentication Modification Extension, the AuthenticationServices Framework API, and best practices required for a smooth password transition."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10666-Onetap-account-security-upgrades","kind":"article","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc20-10666-onetap-account-security-upgrades","title":"One-tap account security upgrades"},"WWDC20-10173-2":{"alt":"WWDC20-10173-2","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-2.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-2"},"doc://WWDCNotes/documentation/WWDCNotes/HARlBO":{"url":"\/documentation\/wwdcnotes\/harlbo","title":"Jinha (1 note)","abstract":[{"text":"𝗶𝗢𝗦 𝗗𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿📱","type":"text"}],"images":[{"identifier":"HARlBO.jpeg","type":"card"},{"identifier":"HARlBO.jpeg","type":"icon"}],"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/HARlBO","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","role":"collection","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes","kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}]},"https://www.linkedin.com/in/Jinha2":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","type":"link","identifier":"https:\/\/www.linkedin.com\/in\/Jinha2","url":"https:\/\/www.linkedin.com\/in\/Jinha2"},"WWDCNotes.png":{"type":"image","identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-706-Introducing-Sign-In-with-Apple":{"title":"Introducing Sign In with Apple","type":"topic","abstract":[{"type":"text","text":"Sign In with Apple is the fast, easy way for people to sign in to apps using the Apple IDs they already have. Learn how easy it is to add a Sign In with Apple button to your app or website to acquire new customers and benefit from the built-in security, antifraud, and privacy that Sign In with Apple provides."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-706-Introducing-Sign-In-with-Apple","url":"\/documentation\/wwdcnotes\/wwdc19-706-introducing-sign-in-with-apple","role":"sampleCode"},"WWDC20-10173-24":{"alt":"WWDC20-10173-24","variants":[{"url":"\/images\/WWDCNotes\/WWDC20-10173-24.png","traits":["1x","light"]}],"type":"image","identifier":"WWDC20-10173-24"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10115-AutoFill-everywhere":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10115-AutoFill-everywhere","kind":"article","abstract":[{"text":"Discover how to implement AutoFill in your app and help people enter their information into fields easily, privately, and securely. Learn how to help the system to give better suggestions that tailor to your app’s functionality: offer smart location suggestions within a navigation app, for example, or provide a private way to input contact information into fields from the QuickType bar.","type":"text"}],"type":"topic","title":"AutoFill everywhere","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10115-autofill-everywhere"}}}