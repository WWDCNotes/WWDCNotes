{"abstract":[{"type":"text","text":"Learn new ways to optimize speed and memory performance when you convert and run machine learning and AI models through Core ML. Weâ€™ll cover new options for model representations, performance insights, execution, and model stitching which can be used together to create compelling and private on-device experiences."}],"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10161","overridingTitle":"Watch Video"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10161-Deploy-machine-learning-and-AI-models-ondevice-with-Core-ML"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10161-deploy-machine-learning-and-ai-models-ondevice-with-core-ml"]}],"metadata":{"modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Deploy machine learning and AI models on-device with Core ML","roleHeading":"WWDC24"},"primaryContentSections":[{"content":[{"type":"heading","text":"Key takeaways","anchor":"Key-takeaways","level":2},{"type":"paragraph","inlineContent":[{"text":"ðŸ¦¾ Core ML enhances the deployment and execution of ML and AI models.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸ§® Integration with MLTensor for common math and transformation operations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸ“ˆ Improve inference efficiency by leveraging stateful models."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸš€ Deploy models with multiple functionalities."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ðŸ”§ Utilize new profiling and debugging information to optimize your models"}]},{"level":2,"type":"heading","text":"Presenter","anchor":"Presenter"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Joshua Newnham, Core ML Engineer"}]}]}],"type":"unorderedList"},{"level":1,"type":"heading","text":"Integeration","anchor":"Integeration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The machine learning workflow consists of three main phases:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Model Training"}],"type":"strong"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Preparation"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Integration"}],"type":"strong"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Model Integration"}]},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begins with an ML package created during the preparation phase."}]}]},{"content":[{"inlineContent":[{"code":"Core ML","type":"codeVoice"},{"text":" simplifies integration and usage in your app, offering a unified API for on-device inference across various model types.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Utilizes Apple siliconâ€™s CPU, GPU, and Neural Engine via MPS Graph and BNNS Graph for high performance, especially with Metal integration or real-time CPU inference."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performance Improvements"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"code":"Core ML","type":"codeVoice"},{"text":" now delivers better performance with significant inference stack improvements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"iOS 18 is faster than iOS 17 for many models, with no need for recompiling or code changes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Speed improvements vary by model and hardware."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Model Integration Steps","type":"text"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Simple integration: pass input, read output."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Advanced use cases (e.g., generative AI): may require multiple models and iterative processes.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Additional computation outside the model may involve implementing operations from scratch or using low-level APIs, leading to complex code.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":1,"type":"heading","text":"MLTensor","anchor":"MLTensor"},{"level":3,"type":"heading","text":"Introducing MLTensor","anchor":"Introducing-MLTensor"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Overview","type":"text"}],"type":"strong"},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"code":"MLTensor","type":"codeVoice"},{"text":" is a new type in Core ML for efficient computation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Supports common math and transformation operations typical of machine learning frameworks.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Executes using Apple siliconâ€™s powerful compute capabilities for high performance.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Similar to popular Python numerical libraries, making it intuitive for those familiar with machine learning.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Simplifying Large Language Models","type":"text"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"MLTensor simplifies decoding outputs from language models."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Example model: An autoregressive language model predicts the next word based on preceding words.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Generates sentences by predicting words until an end-of-sequence token or set length is reached.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Outputs scores for all words in a vocabulary, representing confidence for the next word.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A decoder selects the next word using various strategies (e.g., highest score, random sampling)."}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["\/\/ Introduction to MLTensor","","\/\/Creating","let xArray = MLSHapedArray<Float>(repeating: 0.0, shape: [3])","let x = MLTensor(xArray)","let y = MLTensor([[0.5, 0.1, 0.2], [0.4, 2.0, 0.4], [0.2, 0.6, -0.1]])","","print(\"\\(x.shape), \\(x.scalarType)\") \/\/ [3], Float","print(\"\\(y.shape), \\(y.scalarType)\") \/\/ [3, 3], Float","","\/\/ Math","var result = x + y ","result += 2","let mean = result.mean()","","\/\/ Comparison","let mask = result .>= mean","let filtered = result * mask","","\/\/Indexing and shape transformation","let sliced = filtered[0, ...] \/\/ Shape [2, 3] -> [3]","let reshaped = sliced.reshaped(to: [1, 3]) \/\/ Shape [3] -> [1, 3] ","","\/\/ Materialize to a MLShapedArray","let reshapedArray = await reshaped.shapedArray(of: Float.self) ",""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Benefits","type":"text"}],"type":"strong"},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"MLTensor requires less code to achieve the same functionality compared to low-level APIs.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"While low-level APIs are still necessary for some tasks, MLTensor provides a concise alternative for common tasks.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Focus more on creating great experiences, less on low-level details."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Summary","type":"text"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MLTensor offers a convenient, efficient, and high-performance way to handle common machine learning computations in Core ML."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ideal for simplifying and improving tasks like decoding language model outputs.","type":"text"}]}]}],"type":"unorderedList"},{"level":1,"type":"heading","text":"Models with state","anchor":"Models-with-state"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Stateless vs. Stateful Models","type":"text"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Stateless Models"}],"type":"strong"},{"text":": Process each input independently without retaining history (e.g., image classifiers using Convolutional Neural Networks).","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Stateful Models","type":"text"}],"type":"strong"},{"text":": Retain history from previous inputs (e.g., Recurrent Neural Networks for sequence data).","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Manual State Management","type":"text"}],"type":"strong"},{"text":":","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Traditionally, state management involves passing the state as an input and retrieving it from the output, incurring overhead especially with larger states."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Core ML Enhancements","type":"text"}]},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Core ML now supports automatic state management, reducing overhead and improving efficiency."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example: Language Models and KV Cache"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Language models use "},{"type":"codeVoice","code":"key-value (KV)"},{"type":"text","text":" vectors for each word to enhance contextual predictions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Previously, handling the KV cache manually added overhead."}]}]},{"content":[{"inlineContent":[{"text":"Core ML can now manage the KV cache using states, leading to faster prediction times.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Implementation"}],"type":"strong"},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"States must be explicitly added during the preparation phase of the model.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Verify state support in Xcode, where states appear above model inputs in the predictions tab.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Update code to use Core ML states:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Core ML preallocates buffers for the key and value vectors."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pass the state handle instead of the cache."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"In-place updates eliminate the need to manually update the cache."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Performance Improvement","type":"text"}]},{"text":":","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Example comparison using the Mistral 7 billion model on a MacBook Pro with M3 Max:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Without state: ~8 seconds"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"With state: ~5 seconds (1.6x speedup)","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Performance gains vary by model and hardware but demonstrate significant efficiency improvements with state support."}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":1,"type":"heading","text":"Multifunction Models in Core ML","anchor":"Multifunction-Models-in-Core-ML"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Flexible Deployment","type":"text"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Core ML now supports models with multiple functionalities, represented as functions."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Traditionally, neural networks in Core ML consist of a single function block, but now multiple functions are supported."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example: Adapters"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Adapters are small modules trained with a networkâ€™s knowledge for another task, extending a modelâ€™s functionality without adjusting its weights.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple adapters can now be merged into a single model, each exposed as a separate function."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Efficiently deploy models with multiple adapters without needing multiple specialized models or passing adapter weights as inputs.","type":"text"}]}]}]}]}],"type":"unorderedList"},{"level":1,"type":"heading","text":"Enhanced Performance Tools","anchor":"Enhanced-Performance-Tools"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Core ML Performance Report"}],"type":"strong"},{"text":":","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Generate performance reports for any connected device without writing code.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Steps: Open model in Xcode â†’ Select performance tab â†’ Create new report â†’ Select device and compute unit â†’ Run test.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Reports include load and prediction times, compute unit usage, and estimated time for each operation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Sort operations by estimated time to identify bottlenecks."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Hover over unsupported operations for hints on compatibility issues.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Debugging and Profiling"}]},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Performance reports can now be exported and compared across runs to assess the impact of model changes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The new MLComputePlan API offers debugging and profiling information similar to the performance report.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"MLComputePlan API provides model structure, runtime information, supported\/preferred compute devices, operation support status, and estimated relative cost for each operation.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Written By","anchor":"Written-By"},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"RamitSharma991"}]}]},{"size":4,"content":[{"text":"Ramit Sharma","anchor":"Ramit-Sharma","level":3,"type":"heading"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/RamitSharma991","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/iosDev_ramit","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression"],"type":"links","style":"list"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright Â© 2012 â€“ 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"references":{"RamitSharma991":{"identifier":"RamitSharma991","variants":[{"url":"\/images\/RamitSharma991.jpeg","traits":["1x","light"]}],"type":"image","alt":"Profile image of Ramit Sharma"},"doc://WWDCNotes/documentation/WWDCNotes":{"title":"WWDC Notes","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}]},"https://x.com/iosDev_ramit":{"url":"https:\/\/x.com\/iosDev_ramit","title":"X\/Twitter","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"identifier":"https:\/\/x.com\/iosDev_ramit","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/RamitSharma991":{"type":"topic","title":"Ramit Sharma (15 notes)","url":"\/documentation\/wwdcnotes\/ramitsharma991","images":[{"identifier":"RamitSharma991.jpeg","type":"card"},{"type":"icon","identifier":"RamitSharma991.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","abstract":[{"text":"Indie iOS Dev. Swift, SwiftUI, Obj-C, UX and related.","type":"text"}],"kind":"article","role":"sampleCode"},"https://":{"url":"https:\/\/","title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression":{"type":"topic","title":"Use Core ML Tools for machine learning model compression","abstract":[{"text":"Discover how to reduce the footprint of machine learning models in your app with Core ML Tools. Learn how to use techniques like palettization, pruning, and quantization to dramatically reduce model size while still achieving great accuracy. Explore comparisons between compression during the training stages and on fully trained models, and learn how compressed models can run even faster when your app takes full advantage of the Apple Neural Engine.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10047-Use-Core-ML-Tools-for-machine-learning-model-compression","url":"\/documentation\/wwdcnotes\/wwdc23-10047-use-core-ml-tools-for-machine-learning-model-compression","role":"sampleCode"},"RamitSharma991.jpeg":{"identifier":"RamitSharma991.jpeg","variants":[{"url":"\/images\/RamitSharma991.jpeg","traits":["1x","light"]}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"kind":"article","title":"WWDC24","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","role":"collectionGroup","type":"topic","images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"url":"\/documentation\/wwdcnotes\/wwdc24","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"text":"New APIs: Swift Testing, ","type":"text"},{"code":"FinanceKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"TabletopKit","type":"codeVoice"},{"text":", and more.","type":"text"}]},"WWDC24-Icon.png":{"identifier":"WWDC24-Icon.png","variants":[{"url":"\/images\/WWDC24-Icon.png","traits":["1x","light"]}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction":{"url":"\/documentation\/wwdcnotes\/wwdc23-10049-improve-core-ml-integration-with-async-prediction","kind":"article","title":"Improve Core ML integration with async prediction","abstract":[{"type":"text","text":"Learn how to speed up machine learning features in your app with the latest Core ML execution engine improvements and find out how aggressive asset caching can help with inference and faster model loads. Weâ€™ll show you some of the latest options for async prediction and discuss considerations for balancing performance with overall memory usage to help you create a highly responsive app. Discover APIs to help you understand and maximize hardware utilization for your models."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10049-Improve-Core-ML-integration-with-async-prediction","role":"sampleCode","type":"topic"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"type":"image","alt":null},"https://developer.apple.com/wwdc24/10161":{"url":"https:\/\/developer.apple.com\/wwdc24\/10161","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc24\/10161","type":"download"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"https://github.com/RamitSharma991":{"url":"https:\/\/github.com\/RamitSharma991","title":"GitHub","titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/RamitSharma991","type":"link"},"WWDC24.jpeg":{"identifier":"WWDC24.jpeg","variants":[{"url":"\/images\/WWDC24.jpeg","traits":["1x","light"]}],"type":"image","alt":null}}}