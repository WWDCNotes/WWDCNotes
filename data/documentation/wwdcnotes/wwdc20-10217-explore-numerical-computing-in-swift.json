{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"abstract":[{"text":"Meet Swift Numerics: a new Swift package for computational mathematics. Take a tour of the protocols and types available in the package and find out how you can use them to write generic code. We’ll also show you how and when to use the new Float16 type to improve performance and reduce memory usage.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Explore numerical computing in Swift","roleHeading":"WWDC20"},"sampleCodeDownload":{"action":{"overridingTitle":"Watch Video (15 min)","type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10217"},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc20-10217-explore-numerical-computing-in-swift"]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10217-Explore-numerical-computing-in-Swift","interfaceLanguage":"swift"},"sections":[],"kind":"article","primaryContentSections":[{"content":[{"type":"heading","anchor":"Swift-Numerics-Package-Overview","level":2,"text":"Swift Numerics Package Overview"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provides building blocks for generic numerical computing in Swift."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Includes a protocol called ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/RealModule\/Real.swift#L30","type":"reference","isActive":true},{"text":" and a ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/ComplexModule\/Complex.swift#L48","type":"reference","isActive":true},{"text":" number type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"High-performance "},{"code":"Float16","type":"codeVoice"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The package is open-source at ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-numerics","isActive":true,"type":"reference"}]}]}]},{"type":"heading","text":"Example: The Logit function","level":2,"anchor":"Example-The-Logit-function"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This example uses the ","type":"text"},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Logit","type":"reference","isActive":true},{"text":" function from statistics.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Essentially, given a probability "},{"code":"p","type":"codeVoice"},{"type":"text","text":" in the range 0…1, returns the log of the odds, "},{"type":"codeVoice","code":"log(p \/ (1 - p))"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You would implement the function like this:"}]},{"type":"codeListing","code":["import Darwin","","func logit(_ p: Double) -> Double {","  log(p) - log1p(-p)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s a small problem: this only supports "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"s. What about "},{"type":"codeVoice","code":"Float"},{"type":"text","text":"s or any other floating-point type? Our function should try to be generic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A reasonable first attempt might look like:"}]},{"type":"codeListing","code":["import Darwin","","func logit<T>(_ p: T) -> T {","  log(p) - log1p(-p)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But this won’t compile because the "},{"type":"codeVoice","code":"log"},{"type":"text","text":" and "},{"type":"codeVoice","code":"log1p"},{"type":"text","text":" functions only make sense for a handful of floating-point types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We need a constraint for our generic type. The Numerics module provides a "},{"code":"Real","type":"codeVoice"},{"type":"text","text":" protocol, which allows our code to work for any standard floating-point type, current or future. This code calls generic versions of the "},{"code":"log","type":"codeVoice"},{"type":"text","text":" and "},{"code":"log1p","type":"codeVoice"},{"type":"text","text":" functions."}]},{"type":"codeListing","code":["import Numerics","","func logit<NumberType: Real>(_ p: NumberType) -> NumberType {","  log(p) - log1p(-p)","}"],"syntax":"swift"},{"type":"heading","text":"The `Real` protocol","level":2,"anchor":"The-Real-protocol"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Part of Swift Numerics package"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides generic access to all standard floating-point capabilities.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The definition is:"}]},{"type":"codeListing","code":["public protocol Real: FloatingPoint, AlgebraicField, RealFunctions { ... }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/AlgebraicField.swift#L48","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/RealFunctions.swift#L12","type":"reference"},{"text":" are also new protocols defined in the Numerics package. However, ","type":"text"},{"overridingTitle":"Real","overridingTitleInlineContent":[{"code":"Real","type":"codeVoice"}],"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/RealModule\/Real.swift#L30","type":"reference"},{"text":" is the one you should usually use.","type":"text"}]},{"type":"heading","text":"Numeric Protocols in the Swift standard library","level":3,"anchor":"Numeric-Protocols-in-the-Swift-standard-library"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These are the protocols already defined in the Swift standard library:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-protocols_in_standard_lib"}]},{"type":"paragraph","inlineContent":[{"text":"This topic focuses on ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/additivearithmetic"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/signednumeric"},{"text":", and ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/floatingpoint"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"AdditiveArithmetic","type":"codeVoice"},{"text":" applies to types that support addition and subtraction.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"SignedNumeric"},{"type":"text","text":" introduces multiplication."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"FloatingPoint","type":"codeVoice"},{"type":"text","text":" adds many other operations for floating-point computation. This includes comparison functions, a way to decompose numbers into an exponent and significand, and useful constants like infinity or pi."}],"type":"paragraph"}]}]},{"type":"heading","text":"Protocols in the Numerics package","level":3,"anchor":"Protocols-in-the-Numerics-package"},{"type":"paragraph","inlineContent":[{"text":"The Numerics package builds on protocols already in the Swift standard library.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"overridingTitleInlineContent":[{"code":"AlgebraicField","type":"codeVoice"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/AlgebraicField.swift#L48","isActive":true,"overridingTitle":"AlgebraicField","type":"reference"},{"text":" augments ","type":"text"},{"code":"SignedNumeric","type":"codeVoice"},{"text":" by introducing division and reciprocation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/ElementaryFunctions.swift#L52","isActive":true},{"type":"text","text":" augments "},{"type":"codeVoice","code":"AdditiveArithmetic"},{"type":"text","text":" by adding a large collection of common floating-point functions, such as logarithms and trigonometric functions."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/RealFunctions.swift#L12","overridingTitle":"RealFunctions","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"RealFunctions"}]},{"text":" extends ","type":"text"},{"type":"codeVoice","code":"ElementaryFunctions"},{"text":" even further with some lesser-used functions, such as gamma and error functions.","type":"text"}]}]}],"type":"unorderedList"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Real"},{"type":"text","text":" protocol combines all of these protocols into a single, unified concept:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-protocols_in_numerics"}]},{"type":"heading","text":"Implications of the `Real` protocol","level":3,"anchor":"Implications-of-the-Real-protocol"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Generics constrained to ","type":"text"},{"type":"codeVoice","code":"Real"},{"text":" support all standard floating-point types.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Reduces code duplication."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Simplifies maintenance.","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Makes defining new numerical types easier.","type":"text"}]}]}]},{"type":"heading","text":"The `Complex` type","level":2,"anchor":"The-Complex-type"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Part of the Swift Numerics package"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Generic over any "},{"code":"Real","type":"codeVoice"},{"type":"text","text":" type, so it works for any floating-point type."}]}]}]},{"type":"codeListing","code":["import Numerics","","let z = Complex(1.0, 2.0)  \/\/ z = 1 + 2i"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Complex"},{"type":"text","text":" defaults to "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", so the full type-annotated version of the code is:"}]},{"type":"codeListing","code":["import Numerics","","let z: Complex<Double> = Complex(1.0, 2.0)  \/\/ z = 1 + 2i"],"syntax":"swift"},{"type":"heading","text":"Generic Numerical Programming","level":3,"anchor":"Generic-Numerical-Programming"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"Complex"},{"type":"text","text":" is a type by itself, it also enables generic numerical programming."}]},{"type":"codeListing","code":["public struct Complex<NumberType> where NumberType: Real {","\t\/\/\/ The real component","\tpublic var real: NumberType ","","\t\/\/\/ The imaginary component","\tpublic var imaginary: NumberType ","","  \/\/\/ Construct a complex number with specified real and imaginary parts","  public init (_ real: NumberType, imaginary: NumberType) { ","  \tself.real = real ","  \tself.imaginary = imaginary ","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-generic_numerical_programming"}]},{"type":"paragraph","inlineContent":[{"text":"To make complex numbers fully functional, we need to extend them with the ","type":"text"},{"code":"SignedNumeric","type":"codeVoice"},{"text":" protocol:","type":"text"}]},{"type":"codeListing","code":["extension Complex: SignedNumeric {","\t\/\/\/ The sum of 'z' and 'w' ","  public static func +(z: Complex, w: Complex) -> Complex {","  \tComplex(z.real + w.real, z.imaginary + w.imaginary) ","  }","","  \/\/\/ The difference of 'z' and ' w' ","  public static func -(z: Complex, w: Complex) -> Complex {","  \tComplex (z.real - w.real, z.imaginary - w.imaginary) ","  }","","  \/\/\/ The product of 'z' and ","  public static func *(z: Complex, w: Complex) -> Complex { ","  \tComplex(","  \t\tz.real * w.real - z.imaginary * w.imaginary,","  \t\tz.real * w.imaginary + z.imaginary * w.real","  \t)","\t}","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-signednumeric_protocol_extension"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Complex numbers are often expressed in polar coordinates (length + phase angle):"}]},{"type":"codeListing","code":["extension Complex { ","  \/\/\/ The Euclidean norm (a.k.a. 2-norm) of the number.","  public var length: NumberType { ","    .hypot(real, imaginary)","  } ","","  \/\/\/ The phase (angle, or \"argument\"). ","  \/\/\/","  \/\/\/ Returns the angle (measured above the real axis) in radians. ","  public var phase: NumberType { ","  \t.atan2(y: imaginary, x: real)","  }","","  \/\/\/ A complex value with specified polar coordinates.","  public init(length: Number Type, phase: Number Type) { ","  \tself = Complex (.cos(phase), .sin(phase)).multiplied(by: length) ","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-polar_complex"}]},{"type":"heading","text":"Compatibility with C and C++","level":3,"anchor":"Compatibility-with-C-and-C++"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Complex"},{"type":"text","text":" is a plain struct with 2 floating-point values, so its memory layout "},{"type":"strong","inlineContent":[{"type":"text","text":"precisely"}]},{"type":"text","text":" matches the complex number types of C and C++. The following are all the same in memory:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Complex<Double>","type":"codeVoice"},{"text":" (Swift)","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"_Complex double","type":"codeVoice"},{"text":" (C)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"std::complex<double>"},{"type":"text","text":" (C++)"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"As a result, Swift code can exchange buffers of complex numbers with C\/C++ APIs. You can just pass a pointer to a Swift ","type":"text"},{"type":"codeVoice","code":"Complex"},{"text":" struct to a C\/C++ library that also expects a complex type.","type":"text"}]},{"type":"heading","text":"Example: Using Accelerate’s BLAS functions","level":4,"anchor":"Example-Using-Accelerates-BLAS-functions"},{"type":"paragraph","inlineContent":[{"text":"BLAS = Basic Linear Algebra Subroutines. Apple’s implementation is written in C. Notice how the function accepts a pointer to the array of ","type":"text"},{"code":"Complex<Double>","type":"codeVoice"},{"text":" numbers using the ampersand (","type":"text"},{"code":"&","type":"codeVoice"},{"text":") operator.","type":"text"}]},{"type":"codeListing","code":["import Numerics","import Accelerate","","\/\/ Array of 100 random `Complex<Double>` numbers.","let z = (0 ..< 100).map {","  Complex(length: 1.0, phase: Double.random(in: -.pi ... .pi))","}","","\/\/ Compute the Euclidean norm of `z`.","let norm = cblas_dznrm2(z.count, &z, 1)"],"syntax":"swift"},{"type":"heading","text":"One Caveat","level":4,"anchor":"One-Caveat"},{"type":"paragraph","inlineContent":[{"text":"The Numerics package treats complex infinity and NaN differently than in C or C++. This can affect code ported from C or C++.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, Swift’s treatment of these values is simpler and significantly more performant for multiplication and division. Below is a benchmark comparing Swift to C:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-complex_benchmark"}]},{"type":"heading","text":"Numerics is a work in progress","level":2,"anchor":"Numerics-is-a-work-in-progress"},{"type":"paragraph","inlineContent":[{"text":"Recent additions:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Specialized handling for integer powers."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Approximate equality."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Numerics is developed as a community on GitHub. Some of the projects being discussed include:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Arbitrary-precision integers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shaped arrays."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Decimal floating point.","type":"text"}]}]}]},{"type":"heading","text":"`Float16`","level":2,"anchor":"Float16"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Is a new floating-point type in the Swift standard library."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"IEEE 754 standard format."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Already available on iOS, iPadOS, tvOS, watchOS (ARM-based platforms).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Calling convention for x86 is not yet finalized (working with Intel to fix this).","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Is a normal floating-point type."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Conforms to ","type":"text"},{"code":"BinaryFloatingPoint","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SIMDScalar","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Conforms to "},{"type":"codeVoice","code":"Real"},{"type":"text","text":" from Swift Numerics."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Supports all of the standard floating-point functions."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement the "},{"code":"Real","type":"codeVoice"},{"type":"text","text":" protocol in your code, you will automatically get support for "},{"code":"Float16","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","text":"Trade-offs","level":3,"anchor":"Trade-offs"},{"type":"paragraph","inlineContent":[{"text":"Pros:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Significant performance gains because you can fit more of them into a SIMD register or a page of memory."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Interoperates with C\/Objective-C ","type":"text"},{"code":"__fp16","type":"codeVoice"},{"text":" type.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Cons:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Low precision, small range."}]}]}]},{"type":"heading","text":"Size and Constraints","level":3,"anchor":"Size-and-Constraints"},{"type":"paragraph","inlineContent":[{"text":"Be mindful of these constraints when porting code that was originally written with ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" in mind:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-float16_size_constraints"}]},{"type":"heading","text":"Hardware Support","level":3,"anchor":"Hardware-Support"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Supported (and preferred) by Apple’s GPUs.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Supported by Apple’s CPUs starting with A11 Bionic.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Scalar performance identical to ","type":"text"},{"type":"codeVoice","code":"Float"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"SIMD performance is 2x that of ","type":"text"},{"type":"codeVoice","code":"Float"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Float16","type":"codeVoice"},{"text":" is simulated using ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" operations on older hardware. The results are exactly the same, but without the speedup gains.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Here’s a benchmark of ","type":"text"},{"code":"Float16","type":"codeVoice"},{"text":" against ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10217-float16_benchmark"}]},{"type":"heading","text":"Getting involved with Swift Numerics","level":2,"anchor":"Getting-involved-with-Swift-Numerics"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Visit the GitHub page at ","type":"text"},{"overridingTitle":"github.com\/apple\/swift-numerics","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"github.com\/apple\/swift-numerics"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Participate in "},{"type":"reference","identifier":"https:\/\/forums.swift.org","isActive":true},{"type":"text","text":" under the category “Related Projects”"}],"type":"paragraph"}]}]},{"type":"heading","text":"Written By","level":2,"anchor":"Written-By"},{"numberOfColumns":5,"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"skhillon","type":"image"}]}],"size":1},{"content":[{"level":3,"text":"Sarthak Khillon","type":"heading","anchor":"Sarthak-Khillon"},{"inlineContent":[{"type":"reference","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/skhillon","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/x.com\/SarthakKhillon","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"paragraph","inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}]},{"type":"heading","text":"Related Sessions","level":2,"anchor":"Related-Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10256-Meet-the-Swift-Algorithms-and-Collections-packages","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10170-Whats-new-in-Swift"]},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"references":{"https://x.com/SarthakKhillon":{"type":"link","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"identifier":"https:\/\/x.com\/SarthakKhillon","title":"X\/Twitter","url":"https:\/\/x.com\/SarthakKhillon"},"skhillon":{"type":"image","alt":"Profile image of Sarthak Khillon","identifier":"skhillon","variants":[{"url":"\/images\/skhillon.jpeg","traits":["1x","light"]}]},"WWDC20-10217-polar_complex":{"type":"image","alt":null,"identifier":"WWDC20-10217-polar_complex","variants":[{"url":"\/images\/WWDC20-10217-polar_complex.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/skhillon":{"abstract":[{"text":"No Bio on GitHub","type":"text"}],"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/skhillon","images":[{"type":"card","identifier":"skhillon.jpeg"},{"type":"icon","identifier":"skhillon.jpeg"}],"kind":"article","type":"topic","title":"Sarthak Khillon (19 notes)","url":"\/documentation\/wwdcnotes\/skhillon"},"https://developer.apple.com/documentation/swift/floatingpoint":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"FloatingPoint"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/floatingpoint","title":"FloatingPoint","url":"https:\/\/developer.apple.com\/documentation\/swift\/floatingpoint"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10192-Whats-new-in-Swift":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10192-whats-new-in-swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","abstract":[{"type":"text","text":"Join us for an update on Swift. Discover the latest language advancements that make your code easier to read and write. Explore the growing number of APIs available as Swift packages. And we’ll introduce you to Swift’s async\/await syntax, structured concurrency, and actors."}],"title":"What‘s new in Swift","role":"sampleCode","type":"topic"},"WWDC20-10217-complex_benchmark":{"type":"image","alt":null,"identifier":"WWDC20-10217-complex_benchmark","variants":[{"url":"\/images\/WWDC20-10217-complex_benchmark.png","traits":["1x","light"]}]},"WWDC20.jpeg":{"type":"image","alt":null,"identifier":"WWDC20.jpeg","variants":[{"url":"\/images\/WWDC20.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10170-Whats-new-in-Swift":{"abstract":[{"type":"text","text":"Join us for an update on Swift. Discover the latest advancements in runtime performance, along with improvements to the developer experience that make your code faster to read, edit, and debug. Find out how to take advantage of new language features like multiple trailing closures. Learn about new libraries available in the SDK, and explore the growing number of APIs available as Swift Packages."}],"kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10170-whats-new-in-swift","type":"topic","title":"What’s new in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10170-Whats-new-in-Swift"},"WWDCNotes.png":{"type":"image","alt":null,"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}]},"https://developer.apple.com/documentation/swift/signednumeric":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"SignedNumeric"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/signednumeric","title":"SignedNumeric","url":"https:\/\/developer.apple.com\/documentation\/swift\/signednumeric"},"https://github.com/apple/swift-numerics":{"type":"link","titleInlineContent":[{"type":"text","text":"github.com\/apple\/swift-numerics"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics","title":"github.com\/apple\/swift-numerics","url":"https:\/\/github.com\/apple\/swift-numerics"},"skhillon.jpeg":{"type":"image","alt":null,"identifier":"skhillon.jpeg","variants":[{"url":"\/images\/skhillon.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10256-Meet-the-Swift-Algorithms-and-Collections-packages":{"url":"\/documentation\/wwdcnotes\/wwdc21-10256-meet-the-swift-algorithms-and-collections-packages","title":"Meet the Swift Algorithms and Collections packages","abstract":[{"text":"Discover two of the latest additions to the list of open-source Swift packages from Apple: Swift Algorithms and Swift Collections. Not only can you use these packages immediately, they also incubate new algorithms and data structures for eventual inclusion in the Swift Standard Library. We’ll show you how you can integrate these packages into your projects and select the right algorithms and data structures to make your code clearer and faster.","type":"text"}],"role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10256-Meet-the-Swift-Algorithms-and-Collections-packages","kind":"article"},"WWDC20-10217-float16_benchmark":{"type":"image","alt":null,"identifier":"WWDC20-10217-float16_benchmark","variants":[{"url":"\/images\/WWDC20-10217-float16_benchmark.png","traits":["1x","light"]}]},"WWDC20-10217-generic_numerical_programming":{"type":"image","alt":null,"identifier":"WWDC20-10217-generic_numerical_programming","variants":[{"url":"\/images\/WWDC20-10217-generic_numerical_programming.png","traits":["1x","light"]}]},"https://developer.apple.com/wwdc20/10217":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc20\/10217","url":"https:\/\/developer.apple.com\/wwdc20\/10217","checksum":null},"https://github.com/apple/swift-numerics/blob/5dfc460876510988560170cee3702ab01b89587a/Sources/RealModule/AlgebraicField.swift#L48":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"AlgebraicField"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/AlgebraicField.swift#L48","title":"AlgebraicField","url":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/AlgebraicField.swift#L48"},"https://github.com/skhillon":{"type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/skhillon","title":"GitHub","url":"https:\/\/github.com\/skhillon"},"https://github.com/apple/swift-numerics/blob/5dfc460876510988560170cee3702ab01b89587a/Sources/RealModule/RealFunctions.swift#L12":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"RealFunctions"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/RealFunctions.swift#L12","title":"RealFunctions","url":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/RealFunctions.swift#L12"},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","url":"\/documentation\/wwdcnotes","title":"WWDC Notes","role":"collection"},"https://www.linkedin.com/in/sarthakkhillon/":{"type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/","title":"Blog","url":"https:\/\/www.linkedin.com\/in\/sarthakkhillon\/"},"https://github.com/apple/swift-numerics/blob/c634b5ddcea8445244b7cde1e5deddb8adf58e37/Sources/ComplexModule/Complex.swift#L48":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"Complex"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/ComplexModule\/Complex.swift#L48","title":"Complex","url":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/ComplexModule\/Complex.swift#L48"},"https://github.com/apple/swift-numerics/blob/5dfc460876510988560170cee3702ab01b89587a/Sources/RealModule/ElementaryFunctions.swift#L52":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"ElementaryFunctions"}],"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/ElementaryFunctions.swift#L52","title":"ElementaryFunctions","url":"https:\/\/github.com\/apple\/swift-numerics\/blob\/5dfc460876510988560170cee3702ab01b89587a\/Sources\/RealModule\/ElementaryFunctions.swift#L52"},"WWDC20-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-Icon.png"}],"identifier":"WWDC20-Icon.png","type":"image","alt":null},"https://forums.swift.org":{"identifier":"https:\/\/forums.swift.org","titleInlineContent":[{"type":"text","text":"Swift forums"}],"type":"link","title":"Swift forums","url":"https:\/\/forums.swift.org"},"https://en.wikipedia.org/wiki/Logit":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Logit","titleInlineContent":[{"type":"text","text":"logit"}],"type":"link","title":"logit","url":"https:\/\/en.wikipedia.org\/wiki\/Logit"},"WWDC20-10217-float16_size_constraints":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10217-float16_size_constraints.png"}],"identifier":"WWDC20-10217-float16_size_constraints","type":"image","alt":null},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://developer.apple.com/documentation/swift/additivearithmetic":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/additivearithmetic","titleInlineContent":[{"type":"codeVoice","code":"AdditiveArithmetic"}],"type":"link","title":"AdditiveArithmetic","url":"https:\/\/developer.apple.com\/documentation\/swift\/additivearithmetic"},"WWDC20-10217-protocols_in_standard_lib":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10217-protocols_in_standard_lib.png"}],"identifier":"WWDC20-10217-protocols_in_standard_lib","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","role":"collectionGroup","kind":"article","images":[{"type":"icon","identifier":"WWDC20-Icon.png"},{"type":"card","identifier":"WWDC20.jpeg"}],"abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"WidgetKit","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit Testing"},{"type":"text","text":", and more."}],"type":"topic","title":"WWDC20","url":"\/documentation\/wwdcnotes\/wwdc20"},"WWDC20-10217-protocols_in_numerics":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10217-protocols_in_numerics.png"}],"identifier":"WWDC20-10217-protocols_in_numerics","type":"image","alt":null},"https://github.com/apple/swift-numerics/blob/c634b5ddcea8445244b7cde1e5deddb8adf58e37/Sources/RealModule/Real.swift#L30":{"identifier":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/RealModule\/Real.swift#L30","titleInlineContent":[{"type":"codeVoice","code":"Real"}],"type":"link","title":"Real","url":"https:\/\/github.com\/apple\/swift-numerics\/blob\/c634b5ddcea8445244b7cde1e5deddb8adf58e37\/Sources\/RealModule\/Real.swift#L30"},"WWDC20-10217-signednumeric_protocol_extension":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10217-signednumeric_protocol_extension.png"}],"identifier":"WWDC20-10217-signednumeric_protocol_extension","type":"image","alt":null}}}