{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Create a small amount of queues. ","type":"text"},{"inlineContent":[{"text":"One queue per subsystem is recommended.","type":"text"}],"type":"strong"},{"text":" For example, database queue, network queue.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Do not create a large number of queues, use target_queue to set up queue hierarchy instead.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Do not change priority, target_queue nor qos","type":"text"}],"type":"strong"},{"text":", after queue is created. It changes queue behavior, which then turn off all optimizations.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Too many work submitted to a concurrent queue, can cause "},{"type":"strong","inlineContent":[{"type":"text","text":"thread explosion"}]},{"type":"text","text":". Solve this by using a serial queue instead."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Taking advantages of parallelization, divide work into multiple chunks. Too small chunk, more context switching overhead. Too large chunk, less CPU utilization (more cpu idle time). Size your work appropriately.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Choose good granularity of concurrency"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Written-By","level":2,"text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}],"size":1},{"content":[{"type":"heading","anchor":"Federico-Zanetello","level":3,"text":"Federico Zanetello"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/zntfdr.dev"}]}],"size":4}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"type":"heading","anchor":"Related-Sessions","level":2,"text":"Related Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10258-Understand-and-eliminate-hangs-from-your-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-221-Introducing-PencilKit"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Modernizing Grand Central Dispatch Usage","roleHeading":"WWDC17","role":"sampleCode"},"kind":"article","identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-706-Modernizing-Grand-Central-Dispatch-Usage","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc17-706-modernizing-grand-central-dispatch-usage"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video (54 min)","identifier":"https:\/\/developer.apple.com\/wwdc17\/706","type":"reference","isActive":true}},"abstract":[{"type":"text","text":"macOS 10.13 and iOS 11 have reinvented how Grand Central Dispatch and the Darwin kernel collaborate, enabling your applications to run concurrent workloads more efficiently. Learn how to modernize your code to take advantage of these improvements and make optimal use of hardware resources."}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-221-Introducing-PencilKit":{"title":"Introducing PencilKit","abstract":[{"text":"Meet PencilKit, Apple’s feature-rich drawing and annotation framework. With just a few lines of code, you can add a full drawing experience to your app — with access to a canvas, responsive inks, rich tool palette and drawing model. Hear the technical details that make a great Apple Pencil experience. Learn about the new screenshot editor and how you can adopt just a few small APIs to enable your full content to be captured beyond the size of the screen, with or without your app’s user interface.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc19-221-introducing-pencilkit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-221-Introducing-PencilKit","role":"sampleCode","kind":"article","type":"topic"},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","type":"image","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"alt":null},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes":{"title":"WWDC Notes","kind":"symbol","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"type":"topic","role":"collection","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","role":"sampleCode","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"kind":"article","type":"topic","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"url":"\/documentation\/wwdcnotes\/zntfdr","title":"Federico Zanetello (332 notes)"},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/zntfdr","type":"link","title":"GitHub","url":"https:\/\/github.com\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC17":{"images":[{"identifier":"WWDC17-Icon.png","type":"icon"},{"identifier":"WWDC17.jpeg","type":"card"}],"title":"WWDC17","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17","url":"\/documentation\/wwdcnotes\/wwdc17","type":"topic","abstract":[{"text":"Xcode 9, Swift 4.0, iOS 11, macOS 10.13 (High Sierra), tvOS 11, watchOS 4.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"Core NFC"},{"text":" and more.","type":"text"}],"role":"collectionGroup"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps."}],"title":"Swift concurrency: Behind the scenes","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","role":"sampleCode"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","type":"image","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"alt":null},"zntfdr":{"identifier":"zntfdr","type":"image","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"alt":"Profile image of Federico Zanetello"},"WWDC17.jpeg":{"identifier":"WWDC17.jpeg","type":"image","variants":[{"url":"\/images\/WWDC17.jpeg","traits":["1x","light"]}],"alt":null},"WWDC17-Icon.png":{"identifier":"WWDC17-Icon.png","type":"image","variants":[{"url":"\/images\/WWDC17-Icon.png","traits":["1x","light"]}],"alt":null},"https://developer.apple.com/wwdc17/706":{"identifier":"https:\/\/developer.apple.com\/wwdc17\/706","checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc17\/706"},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/zntfdr.dev","type":"link","title":"Blog","url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10258-Understand-and-eliminate-hangs-from-your-app":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10258-Understand-and-eliminate-hangs-from-your-app","url":"\/documentation\/wwdcnotes\/wwdc21-10258-understand-and-eliminate-hangs-from-your-app","role":"sampleCode","title":"Understand and eliminate hangs from your app","abstract":[{"text":"Discover how you can track down hangs and delays in your app. We’ll show you tools and methods to discover hangs and their causes, learn about anti-patterns that can lead to hangs, explore best practices for eliminating hangs like GCD, and provide guidance on when you should consider asynchronous code to improve your app performance.","type":"text"}],"kind":"article"}}}