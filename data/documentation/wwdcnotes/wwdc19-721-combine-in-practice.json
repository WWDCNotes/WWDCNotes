{"kind":"article","metadata":{"roleHeading":"WWDC19","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Combine in Practice"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19"]]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"In this session more Combine operators are introduced:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"map","type":"codeVoice"},{"text":", ","type":"text"},{"code":"tryMap","type":"codeVoice"},{"text":", ","type":"text"},{"code":"decode","type":"codeVoice"},{"text":", ","type":"text"},{"code":"assertNoFailure","type":"codeVoice"},{"text":", ","type":"text"},{"code":"retry","type":"codeVoice"},{"text":", ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":", ","type":"text"},{"code":"mapError","type":"codeVoice"},{"text":", ","type":"text"},{"code":"setFailureType","type":"codeVoice"},{"text":" …","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Just"},{"type":"text","text":": special "},{"type":"codeVoice","code":"Publisher"},{"type":"text","text":" for when you already have a value that you want to publish. It’s called "},{"type":"codeVoice","code":"Just"},{"type":"text","text":", as in just publish this value."}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Scheduled Operators","anchor":"Scheduled-Operators"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Describes when and where a particular event is delivered","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Supported by ","type":"text"},{"code":"RunLoop","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"DispatchQueue","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Delay: defers the delivery of an event until some future time.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throttle: guarantees that events are delivered no faster than a specified rate."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Receive(on:)"},{"type":"text","text":": guarantees that downstream received events will be delivered on a particular thread or queue."}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Subscriber","anchor":"Subscriber"},{"inlineContent":[{"text":"Subscribers have three functions:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"receive(subscription:)","type":"codeVoice"},{"type":"text","text":" when subscribing the publisher will call this function exactly once"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"receive(_:)"},{"type":"text","text":" the publisher will provide 0 or more values via this method"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"receive(completion:)"},{"type":"text","text":" the publisher can eventually provide a completion only once, meaning that it has completed or a failure has risen"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Once ","type":"text"},{"code":"receive(completion:)","type":"codeVoice"},{"text":" is called, no further value will be forwarded.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Special Subscriptions","anchor":"Special-Subscriptions"},{"level":3,"type":"heading","text":"`Sink`","anchor":"Sink"},{"inlineContent":[{"text":"Just provide a closure and now for every value received, the closure is going to get called with the value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This "},{"code":"Sink","type":"codeVoice"},{"type":"text","text":" will return a "},{"code":"canceller","type":"codeVoice"},{"type":"text","text":", which is like a token where we can call cancel when we no longer want to get new values."}],"type":"paragraph"},{"level":3,"type":"heading","text":"`Subjects`","anchor":"Subjects"},{"inlineContent":[{"text":"Behaves like Publisher and Subscriber.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Supporting multi casting a single value (broadcast to multiple subscribers)"}],"type":"paragraph"},{"inlineContent":[{"text":"Two kinds of subjects:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"Passthrough","type":"codeVoice"},{"text":": doesn’t store any value, therefore we’ll get a value only once a new one will be sentWe can inject a passthrough subjects in a stream by calling ","type":"text"},{"code":"onePublisher.share()","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"CurrentValue"},{"type":"text","text":": like "},{"type":"codeVoice","code":"Passthrough"},{"type":"text","text":", however it stores the last value, so new subscribers have an opportunity to catch up"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"SwiftUI","anchor":"SwiftUI"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"SwiftUI owns the subscriber"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"We only need to provide a publisher","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"`@BindableObject`","anchor":"BindableObject"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@BindableObject"},{"type":"text","text":"s in SwiftUI have a single associated type."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It’s a Publisher that is constrained to never fail."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class WizardModel: BindableObject { ","\tvar trick: WizardTrick { didSet { didChange.send() }","\tvar wand: Wand? { didSet { didChange.send() } ","","\tlet didChange PassthroughSubject<Void, Never>()","}","","struct TrickView: View { ","  @ObjectBinding var model: WizardModel ","","  var body: some View { ","  \tText(model.trick.name)","  }","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@ObjectBinding"},{"type":"text","text":" allows SwiftUI to automatically discover and subscribe to our Publisher."}]}]},{"content":[{"inlineContent":[{"text":"SwiftUI will automatically generate a new body whenever we signal that the model has changed.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Note how the “combine upstream” value is ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":", we do not use as the ","type":"text"},{"code":"View","type":"codeVoice"},{"text":" owns the model anyway, so we can access it from there instead.","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"`@Published`","anchor":"Published"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Adds a publisher to a property","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Access the the published via wrapped value (in the example below, "},{"type":"codeVoice","code":"$password"},{"type":"text","text":" is the publisher aka wrapped value)"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["@Published var password: String ","","self.password = \"1234\"","","let currentPassword: String = self.password","","let printerSubscription = $password.sink {","\tprint(\"The published value is '\\($0)'\")","} ","","self. password = \"password\" "]},{"level":3,"type":"heading","text":"`eraseToAnyPublisher`","anchor":"eraseToAnyPublisher"},{"inlineContent":[{"text":"Advertise the exact contract we want for our API boundary and hide all the implementation details along the way.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Published var username: String = \"\" ","","var validatedUsername: AnyPublisher<String, Never> {","\treturn $username ","    .debounce(for: 0.5, scheduler: RunLoop.main)","    .removeDuplicates()","    .eraseToAnyPublisher() ","}"]},{"inlineContent":[{"text":"Further example with Future:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Published var username: String = \"\"","","var validatedUsername: AnyPublisher<String?, Never> { ","\treturn $username ","    .debounce (for: 0.5, scheduler: RunLoop.main) ","    .removeDuplicates()","    .flatMap { username in ","    \treturn Future { promise in ","        self.usernameAvailable(username) { available in","        \tpromise (.success(available ? username : nil))","        }","      }","    } ","    .eraseToAnyPublisher() ","}"]},{"level":3,"type":"heading","text":"`AnyCancellable`","anchor":"AnyCancellable"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"What is returned after creating a subscriber"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"This class automatically calls "},{"type":"codeVoice","code":"cancel()"},{"type":"text","text":" on "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Written By","anchor":"Written-By"},{"numberOfColumns":5,"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"level":3,"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"type":"reference","overridingTitle":"Contributed Notes"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}],"type":"paragraph"}],"size":4}]},{"type":"thematicBreak"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-210-Whats-New-in-AppKit-for-macOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-212-Introducing-Multiple-Windows-on-iPad","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-712-Advances-in-Networking-Part-1","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-722-Introducing-Combine"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc19\/721","isActive":true,"overridingTitle":"Watch Video (34 min)","type":"reference"},"kind":"sampleDownload"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-721-Combine-in-Practice","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Expand your knowledge of Combine, Apple’s new unified, declarative framework for processing values over time. Learn about how to correctly handle errors, schedule work and integrate Combine into your app today."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc19-721-combine-in-practice"]}],"references":{"zntfdr":{"type":"image","alt":"Profile image of Federico Zanetello","identifier":"zntfdr","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/zntfdr.dev","title":"Blog","url":"https:\/\/zntfdr.dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC Notes","type":"topic","kind":"symbol"},"https://github.com/zntfdr":{"type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","title":"GitHub","identifier":"https:\/\/github.com\/zntfdr"},"zntfdr.jpeg":{"type":"image","alt":null,"identifier":"zntfdr.jpeg","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"WWDC19.jpeg":{"identifier":"WWDC19.jpeg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC19.jpeg"}],"type":"image"},"WWDCNotes.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-212-Introducing-Multiple-Windows-on-iPad":{"title":"Introducing Multiple Windows on iPad","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-212-Introducing-Multiple-Windows-on-iPad","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-212-introducing-multiple-windows-on-ipad","abstract":[{"type":"text","text":"Multitasking is an exciting way to add power to your iPad app. It is easy to enable your app to run two instances of your interface side-by-side, and your customers will love it. Learn how to take your existing features like drag and drop and use them to easily create a second window. Find out how supporting multiple windows changes the app lifecycle and what that means for all applications. Hear about some common mistakes and how to solve them, setting you and your customers up for a fantastic experience."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19","abstract":[{"text":"Xcode 11, Swift 5.1, iOS 13, macOS 10.15 (Catalina), tvOS 13, watchOS 6.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"Combine"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Core Haptics"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Create ML"},{"text":", and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc19","images":[{"identifier":"WWDC19-Icon.png","type":"icon"},{"identifier":"WWDC19.jpeg","type":"card"}],"title":"WWDC19","kind":"article","role":"collectionGroup"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-210-Whats-New-in-AppKit-for-macOS":{"title":"What’s New in AppKit for macOS","abstract":[{"type":"text","text":"Learn about the latest APIs in AppKit and associated frameworks. Get an overview of the enhancements coming in macOS Catalina to help you save time, take advantage of the latest hardware, and add polish to your application."}],"type":"topic","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-210-Whats-New-in-AppKit-for-macOS","url":"\/documentation\/wwdcnotes\/wwdc19-210-whats-new-in-appkit-for-macos"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"title":"Federico Zanetello (332 notes)","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-415-Modern-Swift-API-Design":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design","abstract":[{"text":"Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API design, with examples from new APIs like SwiftUI, Combine, and RealityKit. Whether you’re developing an app as part of a team, or you’re publishing a library for others to use, find out how to use new features of Swift to ensure clarity and correct use of your APIs.","type":"text"}],"title":"Modern Swift API Design","type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc19-415-modern-swift-api-design"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-712-Advances-in-Networking-Part-1":{"role":"sampleCode","abstract":[{"type":"text","text":"Keep up with new and evolving networking protocols and standards by leveraging the modern networking frameworks on all Apple platforms and following best practices for efficiency and performance. In this session, learn about Low Data Mode, Combine in URLSession, WebSocket, and improvements to network mobility."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-712-Advances-in-Networking-Part-1","title":"Advances in Networking, Part 1","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc19-712-advances-in-networking-part-1","kind":"article"},"https://developer.apple.com/wwdc19/721":{"identifier":"https:\/\/developer.apple.com\/wwdc19\/721","url":"https:\/\/developer.apple.com\/wwdc19\/721","checksum":null,"type":"download"},"WWDC19-Icon.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC19-Icon.png","traits":["1x","light"]}],"identifier":"WWDC19-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-226-Data-Flow-Through-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc19-226-data-flow-through-swiftui","type":"topic","abstract":[{"type":"text","text":"SwiftUI was built from the ground up to let you write beautiful and correct user interfaces free of inconsistencies. Learn how to connect your data as dependencies while keeping the UI fully predictable and error free. Familiarize yourself with SwiftUI’s powerful data flow tools and understand what the best tool is for each situation."}],"role":"sampleCode","title":"Data Flow Through SwiftUI","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-722-Introducing-Combine":{"url":"\/documentation\/wwdcnotes\/wwdc19-722-introducing-combine","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-722-Introducing-Combine","title":"Introducing Combine","abstract":[{"type":"text","text":"Combine is a unified declarative framework for processing values over time. Learn how it can simplify asynchronous code like networking, key value observing, notifications and callbacks."}],"kind":"article","role":"sampleCode","type":"topic"}}}