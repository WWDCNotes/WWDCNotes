{"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc15"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-608-Introducing-GameplayKit"],"title":"New Tools & Frameworks"},{"identifiers":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-413-Advanced-Debugging-and-the-Address-Sanitizer","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-226-Advanced-NSOperations","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-233-Advanced-Touch-Input-on-iOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-414-Building-Better-Apps-with-Value-Types-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-715-CloudKit-Tips-and-Tricks","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-231-Cocoa-Touch-Best-Practices","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-230-Performance-on-iOS-and-watchOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-408-ProtocolOriented-Programming-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-411-Swift-in-Practice","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-406-UI-Testing-in-Xcode"],"title":"Deep Dives into Topics"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15"},"abstract":[{"text":"Xcode 7, Swift 2.0, iOS 9, macOS 10.11 (El Capitan), watchOS 2.","type":"text"}],"metadata":{"images":[{"identifier":"WWDC15-Icon.png","type":"icon"},{"identifier":"WWDC15.jpeg","type":"card"}],"role":"collectionGroup","modules":[{"name":"WWDC Notes"}],"roleHeading":"Overview","title":"WWDC15"},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes"]]},"kind":"article","references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-226-Advanced-NSOperations":{"type":"topic","title":"Advanced NSOperations","abstract":[{"text":"Operations are a flexible way to model your app’s business logic, but they can do so much more. See how NSOperation forms the heart of the WWDC app, and how using features like dependencies, readiness, and composition allow you to quickly and easily build dynamic and complex apps.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-226-Advanced-NSOperations","url":"\/documentation\/wwdcnotes\/wwdc15-226-advanced-nsoperations","role":"sampleCode","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-406-UI-Testing-in-Xcode":{"url":"\/documentation\/wwdcnotes\/wwdc15-406-ui-testing-in-xcode","kind":"article","role":"sampleCode","title":"UI Testing in Xcode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-406-UI-Testing-in-Xcode","abstract":[{"text":"Xcode 7 introduces new UI testing features fully integrated into the IDE. Learn about the new APIs and how UI testing fits in with existing testing features in Xcode. See how to get started by recording your app, and how to efficiently craft and maintain UI tests.","type":"text"}],"type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-231-Cocoa-Touch-Best-Practices":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-231-Cocoa-Touch-Best-Practices","abstract":[{"type":"text","text":"Small improvements can make a big impact on your iOS app’s performance and launch time. Learn best practices to optimize your UIKit-based applications. See how to future-proof your app for what may be next, and walk through numerous real world examples for more responsive and dynamic collection and table views."}],"role":"sampleCode","title":"Cocoa Touch Best Practices","url":"\/documentation\/wwdcnotes\/wwdc15-231-cocoa-touch-best-practices","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes":{"kind":"symbol","type":"topic","title":"WWDC Notes","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes"},"WWDC15-Icon.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC15-Icon.png"}],"identifier":"WWDC15-Icon.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-413-Advanced-Debugging-and-the-Address-Sanitizer":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-413-Advanced-Debugging-and-the-Address-Sanitizer","abstract":[{"type":"text","text":"Discover UI debugging and how to use advanced breakpoint actions to quickly explore and fix your app. Learn how the new Address Sanitizer feature finds buffer overflows, use-after-free errors, and other memory corruption bugs at run time."}],"role":"sampleCode","title":"Advanced Debugging and the Address Sanitizer","url":"\/documentation\/wwdcnotes\/wwdc15-413-advanced-debugging-and-the-address-sanitizer","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-715-CloudKit-Tips-and-Tricks":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc15-715-cloudkit-tips-and-tricks","abstract":[{"text":"CloudKit makes it easy to store and retrieve any kind of data from iCloud. Dive into the API with the CloudKit framework team as they explore some of its lesser-known features, explore best practices around subscriptions and queries, and reveal its hidden gems.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-715-CloudKit-Tips-and-Tricks","title":"CloudKit Tips and Tricks"},"WWDC15.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC15.jpeg"}],"identifier":"WWDC15.jpeg","alt":null},"WWDCNotes.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-414-Building-Better-Apps-with-Value-Types-in-Swift":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-414-Building-Better-Apps-with-Value-Types-in-Swift","abstract":[{"type":"text","text":"Swift supports rich first-class value types in the form of powerful structs, which provide new ways to architect your apps. Learn about the differences between reference and value types, how value types help you elegantly solve common problems around mutability and thread safety, and discover how Swift’s unique capabilities might change the way you think about abstraction."}],"role":"sampleCode","title":"Building Better Apps with Value Types in Swift","url":"\/documentation\/wwdcnotes\/wwdc15-414-building-better-apps-with-value-types-in-swift","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-408-ProtocolOriented-Programming-in-Swift":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-408-ProtocolOriented-Programming-in-Swift","abstract":[{"type":"text","text":"At the heart of Swift’s design are two incredibly powerful ideas: protocol-oriented programming and first class value semantics. Each of these concepts benefit predictability, performance, and productivity, but together they can change the way we think about programming. Find out how you can apply these ideas to improve the code you write."}],"role":"sampleCode","title":"Protocol-Oriented Programming in Swift","url":"\/documentation\/wwdcnotes\/wwdc15-408-protocoloriented-programming-in-swift","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-230-Performance-on-iOS-and-watchOS":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-230-Performance-on-iOS-and-watchOS","abstract":[{"type":"text","text":"Great performance is a prerequisite for delivering a compelling and immersive app experience that keeps users engaged. Learn best practices and strategies for characterizing and improving the performance of your code for iPhone, iPad, and Apple Watch."}],"role":"sampleCode","title":"Performance on iOS and watchOS","url":"\/documentation\/wwdcnotes\/wwdc15-230-performance-on-ios-and-watchos","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-608-Introducing-GameplayKit":{"type":"topic","kind":"article","title":"Introducing GameplayKit","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc15-608-introducing-gameplaykit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-608-Introducing-GameplayKit","abstract":[{"text":"GameplayKit provides a collection of essential tools and techniques used to implement gameplay logic. Get introduced to the GameplayKit framework and see how to put its capabilities to work in your own titles. Learn about managing state machines, controlling game entities, and implementing rule systems. Dive into its built-in tools for randomization, pathfinding, and advanced simulation.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-411-Swift-in-Practice":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-411-Swift-in-Practice","abstract":[{"type":"text","text":"Learn how Swift can help you define away some common pitfalls in app development, allowing your apps to benefit from safer runtime behavior while enjoying strong guarantees provided by Swift at compile-time. Hear about how API availability checking in Swift allows you to easily take advantage of new APIs while guaranteeing safe deployment to earlier OS releases. See how enumerations and protocols can help not only maintain compile-time invariants between your app’s code and assets but also reduce boilerplate."}],"role":"sampleCode","title":"Swift in Practice","url":"\/documentation\/wwdcnotes\/wwdc15-411-swift-in-practice","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC15-233-Advanced-Touch-Input-on-iOS":{"type":"topic","kind":"article","title":"Advanced Touch Input on iOS","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc15-233-advanced-touch-input-on-ios","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC15-233-Advanced-Touch-Input-on-iOS","abstract":[{"text":"Learn about the touch input and drawing pipelines. Gain specific insights in how best to design your app to minimize latency in receiving touches and maximizing the performance of drawing content on the screen. Explore new API in UIKit and learn best practices for faster and smoother input.","type":"text"}]}}}