{"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Data races occur when:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Two (or more) threads concurrently access the same data","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"One of them is a write","type":"text"}]}]}]},{"inlineContent":[{"text":"Shared mutable state in concurrent programs:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Shared mutable state requires synchronization - this synchronization ensures that concurrent use of our shared mutable state won’t cause data races","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"various primitives exist: atomics, locks, serial dispatch queues"}]}]}]},{"level":2,"type":"heading","text":"Actors","anchor":"Actors"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Actors provide synchronization for shared mutable state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Actors isolate their state from the rest of the program","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the only way to access that state is by going through the actor","type":"text"}]}]}],"type":"unorderedList"}]}]},{"code":["actor Counter { \/\/ 👈🏻","  var value = 0","","  \/\/\/ When this method is called, it is guaranteed by the actor that it will ","  \/\/\/ run to completion without any other code executing on the actor.","  func increment() -> Int {","    value = value + 1","    return value","  }","}","","let counter = Counter()","","Task.detached {","  \/\/     👇🏻 Whenever you interact with an actor from the outside, you do so asynchronously","  print(await counter.increment())","}","","Task.detached {","  \/\/     👇🏻 Whenever you interact with an actor from the outside, you do so asynchronously","  print(await counter.increment())","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"Two calls to ","type":"text"},{"code":"counter.increment()","type":"codeVoice"},{"text":" will always bring to the same result, it is guaranteed that we will never encounter an ","type":"text"},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Readers–writers_problem","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Actors provide the same capabilities as all of the named types in Swift:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"They can have properties, methods, initializers, subscripts, and so on","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"They can conform to protocols and be augmented with extensions"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They are reference types; because the purpose of actors is to express shared mutable state"}]}]}]},{"inlineContent":[{"type":"text","text":"The primary distinguishing characteristic of actor types is that they isolate their instance data from the rest of the program and ensure synchronized access to that data. Actor eliminates the potential for data races on the actor’s state."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Calls within an actor are synchronous","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Synchronous code always runs uninterrupted","type":"text"}]}]}]},{"code":["extension Counter {","  func resetSlowly(to newValue: Int) {","    value = 0","    for _ in 0..<newValue {","      increment() \/\/ no need await, as we're already running code within the actor","    }","    assert(value == newValue)","  }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Actor reentrancy","anchor":"Actor-reentrancy"},{"inlineContent":[{"type":"text","text":"We are building an image downloader actor:"}],"type":"paragraph"},{"code":["actor ImageDownloader {","  private var cache: [URL: Image] = [:]","","  func image(from url: URL) async throws -> Image? {","    if let cached = cache[url] { return cached }","","    let image = try await downloadImage(from: url)","    cache[url] = image \/\/ 👈🏻 Potential bug: `cache` may have changed","    return image","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Despite running on an actor, we have a bug:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"imagine triggering "},{"type":"codeVoice","code":"image(from:)"},{"type":"text","text":", missing cache and await on "},{"type":"codeVoice","code":"downloadImage(from:)"},{"type":"text","text":", at that point the execution suspends"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"while waiting we trigger "},{"type":"codeVoice","code":"image(from:)"},{"type":"text","text":" again, with the same url"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"because the first run is suspended, the second will run until it awaits as well on "},{"type":"codeVoice","code":"downloadImage(from:)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"at some point in the future both calls will return and will write to the same ","type":"text"},{"code":"cache[url]","type":"codeVoice"},{"text":" place","type":"text"}],"type":"paragraph"}]}]},{"name":"Remember","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"actor guarantees that only one flow can run within the actor at any given time, but when an execution suspends, others can run on the same actor."}],"type":"paragraph"}]},{"inlineContent":[{"text":"The potential bug is on the fact that the backend might have changed image data between the two ","type":"text"},{"type":"codeVoice","code":"downloadImage(from:)"},{"text":" calls, making our app return different images between the different calls.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In this case, the fix is to replace the image cache only if it is still missing from the cache after the ","type":"text"},{"code":"downloadImage(from:)","type":"codeVoice"},{"text":" call:","type":"text"}],"type":"paragraph"},{"code":["actor ImageDownloader {","  private var cache: [URL: Image] = [:]","","  func image(from url: URL) async throws -> Image? {","    if let cached = cache[url] {","      return cached","    }","","    let image = try await downloadImage(from: url)","","    cache[url] = cache[url, default: image] \/\/ 👈🏻","    return cache[url]","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A better solution would be to avoid downloading the same image multiple times:","type":"text"}],"type":"paragraph"},{"code":["actor ImageDownloader {","","  private enum CacheEntry {","    case inProgress(Task<Image, Error>)","    case ready(Image)","  }","","  private var cache: [URL: CacheEntry] = [:]","","  func image(from url: URL) async throws -> Image? {","    if let cached = cache[url] {","      switch cached {","        case .ready(let image):","          return image","        case .inProgress(let task):","          return try await task.value","      }","    }","","    let task = Task {","      try await downloadImage(from: url)","    }","","    cache[url] = .inProgress(task)","","    do {","      let image = try await task.value","      cache[url] = .ready(image)","      return image","    } catch {","      cache[url] = nil","      throw error","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Actor reentrancy prevents deadlocks and guarantees forward progress, but it requires you to check your assumptions across each await.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Reentrancy tips:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perform mutation of actor state within synchronous code. Ideally, do it within a synchronous function so all state changes are well-encapsulated"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"State changes can involve temporarily putting our actor into an inconsistent state - make sure to restore consistency before an ","type":"text"},{"code":"await","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Expect that the actor state could change during suspension - all "},{"type":"codeVoice","code":"await"},{"type":"text","text":"s are potential suspension points"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Check your assumptions after resuming (after an ","type":"text"},{"code":"await","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"Actor isolation","anchor":"Actor-isolation"},{"level":3,"type":"heading","text":"Extensions","anchor":"Extensions"},{"inlineContent":[{"text":"Consider the following actor definition and extension:","type":"text"}],"type":"paragraph"},{"code":["actor LibraryAccount {","  let idNumber: Int","  var booksOnLoan: [Book] =[]","}","","extension LibraryAccount: Equatable {","  static func ==(lhs: LibraryAccount, rhs: LibraryAccount) -> Bool {","    lhs.idNumber == rhs.idNumber","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The static equality method compares two library accounts based on their ID numbers. Because the method is static, there is no "},{"code":"self","type":"codeVoice"},{"type":"text","text":" instance and so it is not isolated to the actor. Instead, we have two parameters of actor type, and this static method is outside of both of them. That’s OK because the implementation is only accessing immutable state ("},{"code":"let idNumber","type":"codeVoice"},{"type":"text","text":") on the actors."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Consider the following extension:"}],"type":"paragraph"},{"code":["extension LibraryAccount: Hashable {","  func hash(into hasher: inout Hasher) {","    hasher.combine(idNumber)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This time it is not ok: conforming to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" this way means that ","type":"text"},{"code":"hash(into:)","type":"codeVoice"},{"text":" could be called from outside the actor, and this method is not ","type":"text"},{"code":"async","type":"codeVoice"},{"text":", so there is no way to maintain actor isolation. To fix this, we can make this method ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["extension LibraryAccount: Hashable {","  \/\/ 👇🏻","  nonisolated func hash(into hasher: inout Hasher) {","    hasher.combine(idNumber)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"nonisolated","type":"codeVoice"},{"text":" means that this method is treated as being outside the actor, even though it is, syntactically, described on the actor","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This means that it can satisfy the synchronous requirement from the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" protocol","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" methods are treated as being outside the actor, they cannot reference mutable state on the actor"}]}]}]},{"level":3,"type":"heading","text":"Closures","anchor":"Closures"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Like functions, a closure might be actor-isolated or it might be nonisolated"}]}]}]},{"code":["extension LibraryAccount {","  func readSome(_ book: Book) -> Int { ... }","  ","  func read() -> Int {","    booksOnLoan.reduce(0) { book in","      readSome(book)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Sendable types","anchor":"Sendable-types"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sendable types are types whose values can be safely shared across different actors:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"value types - because each copy is independent"}]}]},{"content":[{"inlineContent":[{"text":"Actor types - because they synchronize access to their mutable state","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Immutable classes - as they’re read-only","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Internally-synchronized classes - for example with a lock"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"@Sendable","type":"codeVoice"},{"text":" function types","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"all of your concurrent code should primarily communicate in terms of "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" types"}]}]},{"content":[{"inlineContent":[{"code":"Sendable","type":"codeVoice"},{"text":" types protect code from data races","type":"text"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"Conforming to `Sendable`","anchor":"Conforming-to-Sendable"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift will then check to make sure your type makes sense as a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" type","type":"text"}]}]}]},{"code":["struct Book: Sendable {","  var title: String","  var authors: [Author] \/\/ Author is a struct type","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This struct can be ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":", as all of its stored properties are of ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" type","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"Author"},{"type":"text","text":" was a non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" class, then this code would not compile"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"For generic types, we can use conditional conformance to propagate "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" when it’s appropriate:"}],"type":"paragraph"},{"code":["struct Pair<T, U> {","  var first: T","  var second: U","}","","extension Pair: Sendable where T: Sendable, U: Sendable {}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"@Sendable"},{"text":" functions:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" function types conform to the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" protocol"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" places restrictions on closures:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"No mutable captures - otherwise it’d allow data races on the local variable"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Captures must be of "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" type - this makes sure that the closure cannot be used to move non-Sendable types across actor boundaries"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Cannot be both synchronous and actor-isolated - otherwise it’d allow code to be run on the actor from the outside"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Task.detached(operation:)"},{"type":"text","text":" accepts a "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closure:"}],"type":"paragraph"}]}]},{"code":["static func detached(operation: @Sendable () async -> Success) -> Task<Success, Never>"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Main actor","anchor":"Main-actor"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"special actor that represents the main thread","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"differs from a normal actor in two ways:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"the main actor performs all of its synchronization through the main dispatch queue - from a runtime perspective, the main actor is interchangeable with using DispatchQueue.main","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"the code and data that needs to be on the main thread is scattered everywhere","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"}]}]},{"code":["@MainActor func checkedOut(_ booksOnLoan: [Book]) {","  booksView.checkedOutBooks = booksOnLoan","}","","\/\/ Swift ensures that this code is always run on the main thread.","await checkedOut(booksOnLoan)"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"By marking code that must run on the main thread as being on the main actor, there is no more guesswork about when to use ","type":"text"},{"code":"DispatchQueue.main","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift ensures that this code is always executed on the main thread"}]}]}]},{"inlineContent":[{"text":"Types can be placed on the main actor:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implies that all methods and properties of the type are "},{"type":"codeVoice","code":"MainActor"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Opt out individual members with ","type":"text"},{"code":"nonisolated","type":"codeVoice"}]}]}]},{"code":["@MainActor class MyViewController: UIViewController {","  func onPress(...) { ... } \/\/ implicitly @MainActor","","  nonisolated func fetchLatestAndDisplay() async { ... } ","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Written By","anchor":"Written-By"},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}]},{"size":4,"content":[{"anchor":"Federico-Zanetello","text":"Federico Zanetello","level":3,"type":"heading"},{"inlineContent":[{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Related Sessions","anchor":"Related-Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110356-Meet-distributed-actors-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10054-Whats-new-in-AppKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"],"style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"abstract":[{"text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug.","type":"text"}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","interfaceLanguage":"swift"},"sampleCodeDownload":{"action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc21\/10133","overridingTitle":"Watch Video (28 min)"},"kind":"sampleDownload"},"metadata":{"role":"sampleCode","roleHeading":"WWDC21","modules":[{"name":"WWDC Notes"}],"title":"Protect mutable state with Swift actors"},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","type":"topic","title":"Explore structured concurrency in Swift"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10194-Swift-concurrency-Update-a-sample-app":{"type":"topic","kind":"article","abstract":[{"text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We’ll also explore techniques for migrating existing code to Swift concurrency over time.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","title":"Swift concurrency: Update a sample app"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10192-Whats-new-in-Swift":{"title":"What‘s new in Swift","abstract":[{"type":"text","text":"Join us for an update on Swift. Discover the latest language advancements that make your code easier to read and write. Explore the growing number of APIs available as Swift packages. And we’ll introduce you to Swift’s async\/await syntax, structured concurrency, and actors."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10192-Whats-new-in-Swift","kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10192-whats-new-in-swift","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"type":"topic","title":"Swift concurrency: Behind the scenes","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","kind":"article","role":"sampleCode","abstract":[{"text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110356-Meet-distributed-actors-in-Swift":{"abstract":[{"type":"text","text":"Discover distributed actors — an extension of Swift’s actor model that simplifies development of distributed systems. We’ll explore how distributed actor isolation and location transparency can help you avoid the accidental complexity of networking, serialization, and other transport concerns when working with distributed apps and systems."}],"title":"Meet distributed actors in Swift","url":"\/documentation\/wwdcnotes\/wwdc22-110356-meet-distributed-actors-in-swift","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110356-Meet-distributed-actors-in-Swift","role":"sampleCode","type":"topic"},"WWDC21.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC21.jpeg"}],"identifier":"WWDC21.jpeg","type":"image","alt":null},"https://developer.apple.com/documentation/swift/sendable":{"titleInlineContent":[{"code":"Sendable","type":"codeVoice"},{"text":" is a protocol","type":"text"}],"title":"Sendable is a protocol","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},"zntfdr.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"identifier":"zntfdr.jpeg","type":"image","alt":null},"https://developer.apple.com/wwdc21/10133":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10133","type":"download","url":"https:\/\/developer.apple.com\/wwdc21\/10133"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","type":"image","alt":null},"WWDC21-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC21-Icon.png"}],"identifier":"WWDC21-Icon.png","type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110360-Use-Xcode-for-serverside-development":{"kind":"article","role":"sampleCode","title":"Use Xcode for server-side development","url":"\/documentation\/wwdcnotes\/wwdc22-110360-use-xcode-for-serverside-development","abstract":[{"text":"Discover how you can create, build, and deploy a Swift server app alongside your pre-existing Xcode projects within the same workspace. We’ll show you how to create your own local app and test endpoints using Xcode, and explore how you can structure and share code between server and client apps to ease your development process","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110360-Use-Xcode-for-serverside-development","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","url":"\/documentation\/wwdcnotes\/zntfdr","title":"Federico Zanetello (332 notes)","kind":"article","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"role":"sampleCode"},"zntfdr":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"identifier":"zntfdr","type":"image","alt":"Profile image of Federico Zanetello"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"DocC"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit 2"},{"text":", and more.","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","url":"\/documentation\/wwdcnotes\/wwdc21","title":"WWDC21","kind":"article","images":[{"identifier":"WWDC21-Icon.png","type":"icon"},{"identifier":"WWDC21.jpeg","type":"card"}],"role":"collectionGroup"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"abstract":[{"type":"text","text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system."}],"title":"Eliminate data races using Swift Concurrency","role":"sampleCode","kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"title":"Meet async\/await in Swift","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","abstract":[{"text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions.","type":"text"}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10054-Whats-new-in-AppKit":{"title":"What’s new in AppKit","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10054-Whats-new-in-AppKit","url":"\/documentation\/wwdcnotes\/wwdc21-10054-whats-new-in-appkit","abstract":[{"type":"text","text":"Explore the latest advancements in Mac app development with AppKit. We’ll show how you can enhance your app’s design with new control features and SF Symbols 3, build powerful text experiences using TextKit 2, and harness the latest Swift features in your app."}],"type":"topic"},"https://zntfdr.dev":{"titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","identifier":"https:\/\/zntfdr.dev","type":"link","url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","abstract":[{"text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app.","type":"text"}],"role":"sampleCode","title":"Visualize and optimize Swift concurrency"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"kind":"symbol","title":"WWDC Notes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}]},"https://github.com/zntfdr":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","identifier":"https:\/\/github.com\/zntfdr","type":"link","url":"https:\/\/github.com\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10019-Discover-concurrency-in-SwiftUI":{"kind":"article","role":"sampleCode","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","abstract":[{"text":"Discover how you can use Swift’s concurrency features to build even better SwiftUI apps. We’ll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we’ll take you through the process of enabling additional asynchronous flows in your custom views.","type":"text"}],"title":"Discover concurrency in SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc21-10019-discover-concurrency-in-swiftui"},"https://en.wikipedia.org/wiki/Readers–writers_problem":{"titleInlineContent":[{"text":"Readers–writers problem","type":"text"}],"title":"Readers–writers problem","identifier":"https:\/\/en.wikipedia.org\/wiki\/Readers–writers_problem","type":"link","url":"https:\/\/en.wikipedia.org\/wiki\/Readers–writers_problem"}}}