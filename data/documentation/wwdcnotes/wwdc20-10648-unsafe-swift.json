{"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc20\/10648","type":"reference","isActive":true,"overridingTitle":"Watch Video (22 min)"},"kind":"sampleDownload"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","abstract":[{"text":"What exactly makes code “unsafe”? Join the Swift team as we take a look at the programming language’s safety precautions — and when you might need to reach for unsafe operations. We’ll take a look at APIs that can cause unexpected states if not used correctly, and how you can write code more specifically to avoid undefined behavior. Learn how to work with C APIs that use pointers and the steps to take when you want to use Swift’s unsafe pointer APIs.","type":"text"}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc20-10648-unsafe-swift"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Unsafe Swift","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC20"},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"To get the most out of this session, you should have some familiarity with Swift and the C programming language."}],"type":"paragraph"},{"inlineContent":[{"text":"The following notes will assume you understand pointers in C.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"anchor":"Unsafe-and-Safe","text":"`Unsafe` and `Safe`","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The distinction between safe and unsafe constructs is the way their implementations deal with invalid input.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Most operations in the standard library fully validate their input before executing.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Safe"}],"type":"strong"},{"text":" operations have ","type":"text"},{"inlineContent":[{"type":"text","text":"well-defined"}],"type":"strong"},{"text":" behavior on ","type":"text"},{"inlineContent":[{"type":"text","text":"all"}],"type":"strong"},{"text":" input.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Unsafe"}],"type":"strong"},{"type":"text","text":" operations have "},{"inlineContent":[{"type":"text","text":"undefined"}],"type":"strong"},{"type":"text","text":" behavior on "},{"inlineContent":[{"text":"some","type":"text"}],"type":"strong"},{"type":"text","text":" input."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Force unwrap operator is "},{"type":"strong","inlineContent":[{"type":"text","text":"safe"}]},{"type":"text","text":" because we can fully describe its behavior for all possible inputs."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Optional provides an ","type":"text"},{"inlineContent":[{"type":"text","text":"unsafe"}],"type":"strong"},{"text":" force-unwrapping operation through its ","type":"text"},{"code":"unsafelyUnwrapped","type":"codeVoice"},{"text":" property. This property does ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"text":" verify the underlying value to be non-nil.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By using "},{"type":"codeVoice","code":"unsafe"},{"type":"text","text":" properties, you assume full responsibility to fulfill its requirements."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Optional's force unwrapping operator","","let value: Int? = nil","","print(value!) \/\/ Fatal error: Unexpectedly found nil while unwrapping an Optional value"]},{"syntax":"swift","type":"codeListing","code":["\/\/ Unsafe force-unwrapping","","let value: String? = \"Hello\"","","print(value.unsafelyUnwrapped) \/\/ Hello"]},{"syntax":"swift","type":"codeListing","code":["\/\/ Invalid use of unsafe force-unwrapping","","let value: String? = nil","","print(value.unsafelyUnwrapped) \/\/ Guaranteed fatal error only in debug builds"]},{"anchor":"Benefits-of-unsafe-interfaces","text":"Benefits of `unsafe` interfaces","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Interoperability with code written in C or Objective-C."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Control over runtime performance.","type":"text"}]}]}]},{"anchor":"Safe-code-%E2%89%A0-no-crashes","text":"Safe code ≠ no crashes","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Safe APIs guarantee to stop execution by raising a fatal runtime error."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift is a safe programming language means its language and library-level features fully validate their input."}],"type":"paragraph"}]}]},{"anchor":"Unsafe-Pointers","text":"Unsafe Pointers","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Unsafe pointer types are roughly on the same level of abstraction as pointers in the C programming language."}],"type":"paragraph"}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Treat it as a C pointer. Think about "},{"code":"malloc()","type":"codeVoice"},{"type":"text","text":", "},{"code":"calloc()","type":"codeVoice"},{"type":"text","text":", "},{"code":"free()","type":"codeVoice"},{"type":"text","text":", how C treats an array and array arithmetic in C."}]}],"name":"Note"},{"anchor":"Memory","text":"Memory","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10648-memory"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This picture shows memory from lower memory address (top) to higher memory address (bottom)."}]}],"name":"Note"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift has a flat memory model.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A linear address space of individually addressable 8-bit bytes (64-bit)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Memory address is a hexadecimal integer value.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"As app executes, the state of its memory keeps evolving.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Manual-memory-management-example","text":"Manual memory management example","type":"heading","level":3},{"syntax":"swift","type":"codeListing","code":["let ptr = UnsafeMutablePointer<Int>.allocate(capacity: 1)","ptr.initialize(to: 42)","print(ptr.pointee) \/\/ 42","ptr.deallocate()","ptr.pointee = 23 \/\/ UNDEFINED BEHAVIOR"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Allocating an ","type":"text"},{"type":"codeVoice","code":"UnsafeMutablePointer<Int>"},{"text":" creates a storage location and gives back a pointer to it.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pointer gets invalidated as the underlying memory is deinitialized and deallocated.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"ptr.pointee"},{"type":"text","text":" is dereferencing pointer "},{"type":"codeVoice","code":"ptr"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Dereferencing a "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" pointer is a serious programming error."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Xcode provides Address Sanitizer to help you catch memory corruption errors.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For more, refer to "},{"type":"reference","identifier":"..\/10167\/","isActive":true},{"type":"text","text":" session."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10648-address_sanitizer"}]},{"anchor":"Mapping-C-pointers-to-Swift","text":"Mapping C pointers to Swift","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"A big reason to use pointers in Swift is interoperability with unsafe languages like C or Objective-C.","type":"text"},{"text":" ","type":"text"},{"identifier":"WWDC20-10648-c_pointers_mapping","type":"image"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ C:","void process_integers(const int *start, size_t count);","","\/\/ Swift:","func process_integers(_ start: UnsafePointer<CInt>!, _ count: Int)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"C function processes a buffer of integer values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"const int *start"},{"type":"text","text":" gets translated into an implicitly unwrapped Optional unsafe pointer type in Swift."}]}]}]},{"anchor":"Use-a-pointer","text":"Use a pointer","type":"heading","level":2},{"syntax":"swift","type":"codeListing","code":["let start = UnsafeMutablePointer<CInt>.allocate(capacity: 4)","","start.initialize(to: 0)","(start + 1).initialize(to: 2)","(start + 2).initialize(to: 4)","(start + 3).initialize(to: 6)","","process_integers(start, 4)","","start.deinitialize(count: 4)","start.deallocate()"]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/unsafemutablepointer","type":"reference","isActive":true},{"type":"text","text":" to allocate a dynamic buffer suitable for holding integer values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use pointer arithmetic and dedicated initialization methods to set up the buffer’s elements to particular values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Call the C function, passing it the pointer to the initialized buffer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Deinitialize and deallocate the buffer.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"🚨 Every step is fundamentally "},{"type":"strong","inlineContent":[{"text":"unsafe","type":"text"}]},{"type":"text","text":":"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The lifetime of the allocated buffer is not managed by the return pointer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remember to manually deallocate it at the appropriate time, or it will cause a memory leak."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Initialization cannot automatically verify that the addressed location is allocated.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Deinitialization only makes sense if the underlying memory has been previously initialized with values the correct type."}],"type":"paragraph"}]}]},{"anchor":"Buffer-Pointers","text":"Buffer Pointers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift Standard Library provides four unsafe buffer pointer types:"},{"type":"text","text":" "},{"code":"UnsafeBufferPointer<Element>","type":"codeVoice"},{"type":"text","text":" "},{"code":"UnsafeMutableBufferPointer<Element>","type":"codeVoice"},{"type":"text","text":" "},{"code":"UnsafeRawBufferPointer<Element>","type":"codeVoice"},{"type":"text","text":" "},{"code":"UnsafeMutableRawBufferPointer <Element>","type":"codeVoice"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Buffer pointers check against out-of-bounds access through their subscript operation, which adds a little safety to it.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Accessing-contiguous-collection-storage","text":"Accessing contiguous collection storage","type":"heading","level":2},{"syntax":"swift","type":"codeListing","code":["Sequence.withContiguousStorageIfAvailable(_:)","MutableCollection.withContiguousMutableStorageIfAvailable(_:)","","String.withCString(_:)","String.withUTF8(_:)","","Array.withUnsafeBytes(_:)","Array.withUnsafeBufferPointer(_:)","Array.withUnsafeMutableBytes(_:)","Array.withUnsafeMutableBufferPointer(_:)"]},{"anchor":"Temporary-pointers","text":"Temporary pointers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Get a temporary pointer to an individual Swift value, then pass to C functions.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["withUnsafePointer(to:_:)","withUnsafeMutablePointer(to:_:)","withUnsafeBytes(of:_:)","withUnsafeMutableBytes(of:_:)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Generated pointers is only valid for the duration of the closure’s execution. (Before it get deallocated from stack.)","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ C:","void process_integers(const int *start, size_t count);","","\/\/ Swift:","let values: [CInt] = [0, 2, 4, 6]","","values.withUnsafeBufferPointer { buffer in","  print_integers(buffer.baseAddress!, buffer.count)","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Store input data in an Array value."}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"withUnsafeBufferPointer","type":"codeVoice"},{"text":" method to temporarily get direct access to the array’s underlying storage.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Extract the start address and count values, pass them directly to the C function."}],"type":"paragraph"}]}]},{"anchor":"Special-syntax","text":"Special syntax:","type":"heading","level":3},{"syntax":"swift","type":"codeListing","code":["let values: [CInt] = [0, 2, 4, 6]","","print_integers(values, values.count)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Simply pass an array value to a function expecting an unsafe pointer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The compiler will automatically generate the equivalent ","type":"text"},{"code":"withUnsafeBufferPointer","type":"codeVoice"},{"text":" for us.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Implicit-value-to-pointer-conversions","text":"Implicit value-to-pointer conversions:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10648-value_to_pointer","type":"image"}]},{"anchor":"Example","text":"Example","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Here is a C function provided by the Darwin module that we can use to query or update low-level information about the running system.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ C:","int sysctl(int *name, u_int namelen,","\t\t\t\t void *oldp, size_t *oldlenp,","\t\t\t\t void *newp, size_t *newlen);","","\/\/ Swift:","func sysctl(","  _ name: UnsafeMutablePointer<CInt>!,","  _ namelen: CUnsignedInt,","  _ oldp: UnsafeMutableRawPointer!,","  _ oldlenp: UnsafeMutablePointer<Int>!,","  _ newp: UnsafeMutableRawPointer!,","  _ newlen: Int",") -> CInt"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a function that retrieves the size of a cache line for the processor architecture we are running on."}]},{"syntax":"swift","type":"codeListing","code":["import Darwin","","func cachelineSize() -> Int {","\t\/\/ The information is available under the identifier 'CACHELINE' in the hardware section.","    var query = [CTL_HW, HW_CACHELINE]","    \/\/ The information we want to retrieve is a C integer value.","    var result: CInt = 0","    \/\/ The size of integer type buffer.","    var resultSize = MemoryLayout<CInt>.size","    ","    let r = sysctl(&query, CUnsignedInt(query.count), &result, &resultSize, nil, 0)","    ","    \/\/ Sysctl is documented to return zero value on success.","    precondition(r == 0, \"Cannot query cache line size\")","    \/\/ Expect the call to set as many bytes as there are in a C integer value.","    precondition(resultSize == MemoryLayout<CInt>.size)","    ","    return Int(result)","}","","print(cachelineSize()) \/\/ 64"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The function will set "},{"type":"codeVoice","code":"resultSize"},{"type":"text","text":" to the number of bytes it copied into "},{"type":"codeVoice","code":"result"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Because we only want to retrieve the current value, not set it, we supply nil value for the ","type":"text"},{"type":"codeVoice","code":"new value"},{"text":" buffer, and set its size to zero.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Expand the code above into explicit closure based calls:"}]},{"syntax":"swift","type":"codeListing","code":["import Darwin","","func cachelineSize() -> Int {","    var query = [CTL_HW, HW_CACHELINE]","    return query.withUnsafeMutableBufferPointer { buffer in","        var result: CInt = 0","        withUnsafeMutablePointer(to: &result) { resultptr in","            var resultSize = MemoryLayout<CInt>.size","            let r = withUnsafeMutablePointer(to: &resultSize) { sizeptr in","                sysctl(buffer.baseAddress, CUnsignedInt(buffer.count),","                       resultptr, sizeptr,","                       nil, 0)","            }","            precondition(r == 0, \"Cannot query cache line size\")","            precondition(resultSize == MemoryLayout<CInt>.size)","        }","        return Int(result)","    }","}","","print(cachelineSize()) \/\/ 64"]},{"type":"paragraph","inlineContent":[{"text":"This code is functionally equivalent to the code above.","type":"text"}]},{"anchor":"Clousure-based-vs-implicit-pointers","text":"Clousure-based vs. implicit pointers","type":"heading","level":2},{"syntax":"swift","type":"codeListing","code":["var value = 42","withUnsafeMutablePointer(to: &value) { p in","  p.pointee += 1","}","print(value)  \/\/ 43"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Closure-based design makes the actual lifetime of the resulting pointer far more explicit.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Helping us avoid lifetime issues.","type":"text"}]}]}]},{"syntax":"swift","type":"codeListing","code":["var value2 = 42","let p = UnsafeMutablePointer(&value2) \/\/ BROKEN -- dangling pointer!","p.pointee += 1","print(value2)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Passing a temporary pointer to the mutable pointer initializer escapes its value out of the initializer call."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Accessing the resulting dangling pointer value is undefined behavior.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Prefer to use closure-based APIs in pure Swift code.","type":"text"}]}]},{"anchor":"Initializing-contiguous-collection-storage","text":"Initializing contiguous collection storage","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"New initializers that allow us to create an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value by directly copying data into their underlying uninitalized storage."}]},{"syntax":"swift","type":"codeListing","code":["Array.init(unsafeUninitializedCapacity:initializingWith:)","String.init(unsafeUninitializedCapacity:initializingUTF8With:)"]},{"anchor":"Example","text":"Example","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find out the kernel version of the operating system we’re running on."}]},{"syntax":"swift","type":"codeListing","code":["import Darwin","","func kernelVersion() -> String {","\t\/\/ Identified by VERSION entry in the kernel section.","    var query = [CTL_KERN, KERN_VERSION]","    var length = 0","    let r = sysctl(&query, 2, nil, &length, nil, 0)","    precondition(r == 0, \"Error retrieving kern.version\")","    ","    \/\/ The initializer gives us a buffer point that we can pass through the sysctl function.","    return String(unsafeUninitializedCapacity: length) { buffer in","        var length = buffer.count","        \/\/ The function will copy the version string directly into this buffer.","        let r = sysctl(&query, 2, buffer.baseAddress, &length, nil, 0)","        precondition(r == 0, \"Error retrieving kern.version\")","        precondition(length > 0 && length <= buffer.count)","        \/\/ Check the last byte is zero, corresponding to the NUL character terminating a C string.","        precondition(buffer[length - 1] == 0)","        \/\/ Discard the NUL character.","        return length - 1","    }","}","","print(kernelVersion())","\/\/ Darwin Kernel Version 19.5.0: Thu Apr 30 18:25:59 PDT 2020; root:xnu-6153.121.1~7\/RELEASE_X86_64"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We don’t know the size of the version string in advance, so we need to cause this control twice.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On the first "},{"type":"codeVoice","code":"sysctl"},{"type":"text","text":" return, the "},{"type":"codeVoice","code":"length"},{"type":"text","text":" variable will get set to the number of bytes required to store the string."}]}]},{"content":[{"inlineContent":[{"text":"Don’t need for manual memory management, by using this new String initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Get direct access to a buffer that will eventually become storage for a regular Swift string instance.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Don’t need to manually allocate or deallocate memory."}]}]}]},{"anchor":"Summary","text":"Summary","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Follow the requirements of each unsafe interface."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Keep unsafe API usage to the minimum."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"text":" for memory buffers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Test with the sanitizers.","type":"text"}]}]}]},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"identifier":"dasautoooo","type":"image"}]}]},{"size":4,"content":[{"type":"heading","level":3,"text":"Leonard Chen","anchor":"Leonard-Chen"},{"type":"paragraph","inlineContent":[{"isActive":true,"overridingTitle":"Contributed Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/dasautoooo","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/github.com\/dasautoooo","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/wut.im","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/x.com\/DasAutoooo","type":"reference"}]}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}]},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10163-Advancements-in-the-ObjectiveC-runtime","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10167-Safely-manage-pointers-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-416-Understanding-Swift-Performance"]},{"type":"small","inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10648-Unsafe-Swift"},"references":{"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","title":"WWDC Notes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","kind":"symbol","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10167-Safely-manage-pointers-in-Swift":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10167-Safely-manage-pointers-in-Swift","type":"topic","abstract":[{"type":"text","text":"Come with us as we delve into unsafe pointer types in Swift. Discover the requirements for each type and how to use it correctly. We’ll discuss typed pointers, drop down to raw pointers, and finally circumvent pointer type safety entirely by binding memory."}],"title":"Safely manage pointers in Swift","url":"\/documentation\/wwdcnotes\/wwdc20-10167-safely-manage-pointers-in-swift"},"WWDCNotes.png":{"alt":null,"identifier":"WWDCNotes.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}]},"https://github.com/dasautoooo":{"title":"GitHub","titleInlineContent":[{"text":"GitHub","type":"text"}],"identifier":"https:\/\/github.com\/dasautoooo","url":"https:\/\/github.com\/dasautoooo","type":"link"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"WWDC20-10648-value_to_pointer":{"alt":null,"identifier":"WWDC20-10648-value_to_pointer","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10648-value_to_pointer.png"}]},"WWDC20.jpeg":{"alt":null,"identifier":"WWDC20.jpeg","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20.jpeg"}]},"WWDC20-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-Icon.png"}],"type":"image","alt":null,"identifier":"WWDC20-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10163-Advancements-in-the-ObjectiveC-runtime":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10163-Advancements-in-the-ObjectiveC-runtime","type":"topic","abstract":[{"type":"text","text":"Dive into the microscopic world of low-level bits and bytes that underlie every Objective-C and Swift class. Find out how recent changes to internal data structures, method lists, and tagged pointers provide better performance and lower memory usage. We’ll demonstrate how to recognize and fix crashes in code that depend on internal details, and show you how to keep your code unaffected by changes to the runtime."}],"title":"Advancements in the Objective-C runtime","url":"\/documentation\/wwdcnotes\/wwdc20-10163-advancements-in-the-objectivec-runtime"},"https://developer.apple.com/documentation/swift/unsafemutablepointer":{"titleInlineContent":[{"code":"UnsafeMutablePointer","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/unsafemutablepointer","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/unsafemutablepointer","title":"UnsafeMutablePointer"},"WWDC20-10648-memory":{"alt":null,"identifier":"WWDC20-10648-memory","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10648-memory.png"}]},"dasautoooo.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/dasautoooo.jpeg"}],"type":"image","alt":null,"identifier":"dasautoooo.jpeg"},"dasautoooo":{"alt":"Profile image of Leonard Chen","identifier":"dasautoooo","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/dasautoooo.jpeg"}]},"../10167/":{"title":"Safely manage pointers in Swift","titleInlineContent":[{"text":"Safely manage pointers in Swift","type":"text"}],"identifier":"..\/10167\/","url":"..\/10167\/","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC16-416-Understanding-Swift-Performance":{"kind":"article","title":"Understanding Swift Performance","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC16-416-Understanding-Swift-Performance","role":"sampleCode","abstract":[{"text":"In this advanced session, find out how structs, classes, protocols, and generics are implemented in Swift. Learn about their relative costs in different dimensions of performance. See how to apply this information to speed up your code.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc16-416-understanding-swift-performance","type":"topic"},"WWDC20-10648-address_sanitizer":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10648-address_sanitizer.png"}],"type":"image","alt":null,"identifier":"WWDC20-10648-address_sanitizer"},"https://x.com/DasAutoooo":{"titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"identifier":"https:\/\/x.com\/DasAutoooo","type":"link","url":"https:\/\/x.com\/DasAutoooo","title":"X\/Twitter"},"doc://WWDCNotes/documentation/WWDCNotes/dasautoooo":{"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/dasautoooo","images":[{"identifier":"dasautoooo.jpeg","type":"card"},{"identifier":"dasautoooo.jpeg","type":"icon"}],"type":"topic","abstract":[{"text":"💻 Programmer | 🕹 Lifetime Gamer","type":"text"}],"title":"Leonard Chen (6 notes)","url":"\/documentation\/wwdcnotes\/dasautoooo"},"WWDC20-10648-c_pointers_mapping":{"alt":null,"identifier":"WWDC20-10648-c_pointers_mapping","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC20-10648-c_pointers_mapping.png"}]},"https://wut.im":{"title":"Blog","url":"https:\/\/wut.im","type":"link","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/wut.im"},"https://developer.apple.com/wwdc20/10648":{"identifier":"https:\/\/developer.apple.com\/wwdc20\/10648","type":"download","url":"https:\/\/developer.apple.com\/wwdc20\/10648","checksum":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"role":"collectionGroup","images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"identifier":"WWDC20.jpeg","type":"card"}],"abstract":[{"type":"text","text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"WidgetKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit Testing","type":"codeVoice"},{"type":"text","text":", and more."}],"kind":"article","title":"WWDC20","url":"\/documentation\/wwdcnotes\/wwdc20","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","type":"topic"}}}