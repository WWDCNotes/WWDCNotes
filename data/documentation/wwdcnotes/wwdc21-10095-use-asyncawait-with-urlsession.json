{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Fetching data","anchor":"Fetching-data"},{"inlineContent":[{"type":"text","text":"Two main methods:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func data(from url: URL) async throws -> (Data, URLResponse)","func data(for request: URLRequest) async throws -> (Data, URLResponse)"]},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Fetch photo with async\/await","","func fetchPhoto(url: URL) async throws -> UIImage {","  let (data, response) = try await URLSession.shared.data(from: url)","","  guard let httpResponse = response as? HTTPURLResponse,","        httpResponse.statusCode == 200 else {","    throw MyNetworkingError.invalidServerResponse","  }","","  guard let image = UIImage(data: data) else {","    throw MyNetworkingError.unsupportedImage","  }","","  return image","}"]},{"type":"heading","level":2,"text":"Upload data","anchor":"Upload-data"},{"inlineContent":[{"type":"text","text":"Two main methods:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func upload(for request: URLRequest, from data: Data) async throws -> (Data, URLResponse)","func upload(for request: URLRequest, fromFile url: URL) async throws -> (Data, URLResponse)"]},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var request = URLRequest(url: url)","request.httpMethod = \"POST\"","","let (data, response) = try await URLSession.shared.upload(for: request, fromFile: fileURL)","guard let httpResponse = response as? HTTPURLResponse,","      httpResponse.statusCode == 201 \/* Created *\/ else {","  throw MyNetworkingError.invalidServerResponse","}"]},{"type":"heading","level":2,"text":"Download data","anchor":"Download-data"},{"inlineContent":[{"text":"Methods:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func download(from url: URL) async throws -> (URL, URLResponse)","func download(for request: URLRequest) async throws -> (URL, URLResponse)","func download(resumeFrom resumeData: Data) async throws -> (URL, URLResponse)"]},{"inlineContent":[{"type":"text","text":"Unlike download task convenience methods, these new methods do not automatically delete the file: don’t forget to do so yourself."}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let (location, response) = try await URLSession.shared.download(from: url)","guard let httpResponse = response as? HTTPURLResponse,","      httpResponse.statusCode == 200 \/* OK *\/ else {","  throw MyNetworkingError.invalidServerResponse","}","","try FileManager.default.moveItem(at: location, to: newLocation)"]},{"type":"heading","level":2,"text":"Cancellation","anchor":"Cancellation"},{"inlineContent":[{"type":"text","text":"Swift concurrency’s cancellation works with URLSession async methods: calling "},{"type":"codeVoice","code":"cancel()"},{"type":"text","text":" on a task that contains running network operations will cancel such operations."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let task = Task {","  let (data1, response1) = try await URLSession.shared.data(from: url1)","  let (data2, response2) = try await URLSession.shared.data(from: url2)","}","","task.cancel()"]},{"type":"heading","level":2,"text":"Increment download `URLSession.bytes`","anchor":"Increment-download-URLSessionbytes"},{"inlineContent":[{"type":"text","text":"URLSession.bytes methods return when the response headers have been received and deliver the response body as an AsyncSequence of bytes."}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let (bytes, response) = try await URLSession.shared.bytes(from: Self.eventStreamURL)","","guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {","  throw WoofError.invalidServerResponse","}","","for try await line in bytes.lines {","  let photoMetadata = try JSONDecoder().decode(PhotoMetadata.self, from: Data(line.utf8))","  await updateFavoriteCount(with: photoMetadata) \/\/ 👈🏻 need to execute in the main actor","}"]},{"type":"heading","level":2,"text":"URLSessionTask-specific delegate","anchor":"URLSessionTask-specific-delegate"},{"inlineContent":[{"code":"URLSession","type":"codeVoice"},{"type":"text","text":" is designed around a delegate model which provides callbacks for events such as authentication challenges, metrics, and more."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The new async methods no longer expose the underlying "},{"code":"URLSession.task","type":"codeVoice"},{"type":"text","text":", instead, we specify a delegate via an optional argument, a task-specific delegate, allowing you to provide an object to handle delegate messages specific to this data upload, download, or bytes operation."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func data(from url: URL, delegate: URLSessionTaskDelegate?)","func data(for request: URLRequest, delegate: URLSessionTaskDelegate?)","func upload(for request: URLRequest, fromFile url: URL, delegate: URLSessionTaskDelegate?)","func upload(for request: URLRequest, from data: Data, delegate: URLSessionTaskDelegate?)","func download(from url: URL, delegate: URLSessionTaskDelegate?)","func download(for request: URLRequest, delegate: URLSessionTaskDelegate?)","func download(resumeFrom resumeData: Data, delegate: URLSessionTaskDelegate?)","func bytes(from url: URL, delegate: URLSessionTaskDelegate?)","func bytes(for request: URLRequest, delegate: URLSessionTaskDelegate?)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the same task is supported in Objective-C","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the task is strongly held by a task until it completes or fails"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"task-specific delegate is not supported by background URLSession","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a method is implemented on both session delegate and task delegate, the one on task delegate will be called"}]}]}]},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class AuthenticationDelegate: NSObject, URLSessionTaskDelegate {","  private let signInController: SignInController","  ","  init(signInController: SignInController) {","    self.signInController = signInController","  }","  ","  func urlSession(","  \t_ session: URLSession,","    task: URLSessionTask,","    didReceive challenge: URLAuthenticationChallenge","  ) async -> (URLSession.AuthChallengeDisposition, URLCredential?) {","    if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodHTTPBasic {","      do {","        let (username, password) = try await signInController.promptForCredential()","        return (.useCredential, URLCredential(user: username, password: password, persistence: .forSession))","      } catch {","        return (.cancelAuthenticationChallenge, nil)","      }","    } else {","      return (.performDefaultHandling, nil)","    }","  }","}","","...","","let (bytes, response) = try await URLSession.shared.bytes(","\tfrom: Self.eventStreamURL, ","\tdelegate: AuthenticationDelegate()",")"]},{"type":"heading","level":2,"text":"Written By","anchor":"Written-By"},{"columns":[{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"donnywals"}],"type":"paragraph"}]},{"size":4,"content":[{"type":"heading","text":"Donny Wals","level":3,"anchor":"Donny-Wals"},{"inlineContent":[{"overridingTitle":"Contributed Notes","type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/donnywals","isActive":true,"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/donnywals","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.donnywals.com","isActive":true}],"type":"paragraph"}]}],"type":"row","numberOfColumns":5},{"columns":[{"size":1,"content":[{"inlineContent":[{"type":"image","identifier":"zntfdr"}],"type":"paragraph"}]},{"size":4,"content":[{"text":"Federico Zanetello","type":"heading","level":3,"anchor":"Federico-Zanetello"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}]}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Related Sessions","anchor":"Related-Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10094-Accelerate-networking-with-HTTP3-and-QUIC","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"sections":[],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc21\/10095","overridingTitle":"Watch Video (13 min)"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc21-10095-use-asyncawait-with-urlsession"]}],"abstract":[{"type":"text","text":"Discover how you can adopt Swift concurrency in URLSession using async\/await and AsyncSequence, and how you can apply Swift concurrency concepts to improve your networking code."}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"metadata":{"roleHeading":"WWDC21","modules":[{"name":"WWDC Notes"}],"role":"sampleCode","title":"Use async\/await with URLSession"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","references":{"zntfdr.jpeg":{"alt":null,"identifier":"zntfdr.jpeg","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"type":"image"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/donnywals":{"role":"sampleCode","type":"topic","abstract":[{"text":"No Bio on GitHub","type":"text"}],"title":"Donny Wals (3 notes)","images":[{"type":"card","identifier":"donnywals.jpeg"},{"type":"icon","identifier":"donnywals.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/donnywals","url":"\/documentation\/wwdcnotes\/donnywals","kind":"article"},"https://www.donnywals.com":{"identifier":"https:\/\/www.donnywals.com","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","type":"link","url":"https:\/\/www.donnywals.com"},"WWDC21-Icon.png":{"alt":null,"identifier":"WWDC21-Icon.png","variants":[{"url":"\/images\/WWDCNotes\/WWDC21-Icon.png","traits":["1x","light"]}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"abstract":[{"text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system.","type":"text"}],"title":"Eliminate data races using Swift Concurrency","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","kind":"article","role":"sampleCode","title":"Federico Zanetello (332 notes)","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"type":"icon","identifier":"WWDCNotes.png"}],"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","url":"\/documentation\/wwdcnotes"},"https://github.com/donnywals":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/donnywals","identifier":"https:\/\/github.com\/donnywals","title":"GitHub","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10094-Accelerate-networking-with-HTTP3-and-QUIC":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10094-Accelerate-networking-with-HTTP3-and-QUIC","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10094-accelerate-networking-with-http3-and-quic","title":"Accelerate networking with HTTP\/3 and QUIC","abstract":[{"type":"text","text":"The web is changing, and the next major version of HTTP is here. Learn how HTTP\/3 reduces latency and improves reliability for your app and discover how its underlying transport, QUIC, unlocks new innovations in your own custom protocols using new transport functionality and multi-streaming connection groups."}],"type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10058-Meet-AsyncSequence":{"kind":"article","title":"Meet AsyncSequence","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10058-meet-asyncsequence","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","abstract":[{"type":"text","text":"Iterating over a sequence of values over time is now as easy as writing a “for” loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We’ll also show you how to adapt existing code to provide asynchronous sequences of your own."}]},"donnywals":{"identifier":"donnywals","alt":"Profile image of Donny Wals","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/donnywals.jpeg"}]},"WWDC21.jpeg":{"alt":null,"identifier":"WWDC21.jpeg","variants":[{"url":"\/images\/WWDCNotes\/WWDC21.jpeg","traits":["1x","light"]}],"type":"image"},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev","title":"Blog","type":"link"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","type":"link","url":"https:\/\/github.com\/zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","kind":"article","role":"collectionGroup","title":"WWDC21","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"MusicKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"DocC","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit 2","type":"codeVoice"},{"type":"text","text":", and more."}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21"},"donnywals.jpeg":{"alt":null,"identifier":"donnywals.jpeg","variants":[{"url":"\/images\/WWDCNotes\/donnywals.jpeg","traits":["1x","light"]}],"type":"image"},"zntfdr":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"identifier":"zntfdr","alt":"Profile image of Federico Zanetello","type":"image"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://developer.apple.com/wwdc21/10095":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10095","url":"https:\/\/developer.apple.com\/wwdc21\/10095","type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","role":"sampleCode","title":"Meet async\/await in Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","type":"topic","abstract":[{"type":"text","text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions."}],"kind":"article"}}}