{"abstract":[{"type":"text","text":"Your porting questions, answered: Learn how to recompile your macOS app for Apple silicon Macs and build universal apps that launch faster, have better performance, and support the future of the platform. We’ll show you how Xcode makes it simple to build a universal macOS binary and go through running, debugging, and testing your app. Learn what changes to low-level code you might need to make, find out how to handle in-process and out-of-process plug-ins, and discover some useful tips for working with universal apps."}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10214-Port-your-Mac-app-to-Apple-silicon","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"For an in-depth overview of everything Apple Silicon, check the official ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/apple_silicon","type":"reference"},{"text":".","type":"text"}]},{"type":"heading","anchor":"What-the-transition-to-Apple-Silicon-means","level":2,"text":"What the transition to Apple Silicon means"},{"type":"paragraph","inlineContent":[{"text":"|  | Apple Silicon Mac | Intel-based Mac |","type":"text"},{"text":" ","type":"text"},{"text":"| Native architecture | arm 64 | x86_64 |","type":"text"},{"text":" ","type":"text"},{"text":"| Supported architectures | arm64 (native), x86_64 (translated via Rosetta) | x86_64 |","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In macOS 11, when running on Apple silicon, the CPU tab of the Activity Monitor.app has a new "},{"code":"Kind","type":"codeVoice"},{"type":"text","text":" column showing which architecture each process runs on (”"},{"code":"Apple","type":"codeVoice"},{"type":"text","text":"”  means it’s running natively in Apple Silicon, "},{"code":"Intel","type":"codeVoice"},{"type":"text","text":" when the process is being translated via Rosetta):"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC20-10214-activityMonitor","type":"image"}]},{"level":3,"type":"heading","anchor":"Universal-Mach-O-binaries","text":"Universal Mach-O binaries"},{"type":"paragraph","inlineContent":[{"text":"Your apps and most executable code in macOS, are stored in a file format called ","type":"text"},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Mach-O","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"These files can either be targeting a single CPU architecture or they can be universal (a.k.a. support multiple CPU architectures).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To examine a file on disk, you can use the "},{"type":"codeVoice","code":"lipo"},{"type":"text","text":" command."}]},{"level":3,"type":"heading","anchor":"Rosetta-translation","text":"Rosetta translation"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the entire process is either native or translated (cannot mix).","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Kernel extensions, AVX vector instructions, and virtualization are not supported.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"Building-Universal-Binaries","text":"Building Universal Binaries"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"endianness of arm64 is the same as x86","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"if your (macOS) app shares code with an iOS app, that code is guarantee to work in Apple Silicon"}]}]},{"content":[{"inlineContent":[{"text":"Xcode 12 supports building Universal Binaries on all mac architectures (both on Intel and Apple Silicon macs)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"Determining-CPU-page-size","text":"Determining CPU page size"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Native page size on Intel is ","type":"text"},{"code":"4 kB","type":"codeVoice"},{"text":", on Apple Silicon it’s ","type":"text"},{"code":"16 kB","type":"codeVoice"},{"text":": therefore the ","type":"text"},{"code":"PAGE_SIZE","type":"codeVoice"},{"text":" macro is no longer a constant. Use:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"PAGE_MAX_SIZE","type":"codeVoice"},{"text":" for a compile-time upper bound","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"vm_page_size","type":"codeVoice"},{"text":" to read the actual value at runtime","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"text":"Rosetta provides 4 KB pages when translating Intel processes","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"if-for-platforms-and-CPU-architectures","text":"#if for platforms and CPU architectures"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"macOS: "},{"code":"#if os(macOS)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"intel: ","type":"text"},{"type":"codeVoice","code":"#if arch(x86_64)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ARM64: ","type":"text"},{"code":"#if arch(arm64)","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Simulator: "},{"code":"#if targetEnvironment(simulator)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS device: "},{"type":"codeVoice","code":"#if os(iOS) && !targetEnvironment(simulator)"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","anchor":"Precompiled-binaries","text":"Precompiled binaries"},{"type":"paragraph","inlineContent":[{"text":"When building for Apple Silicon you might encounter linker warnings (that later translate in some cryptic errors) similar to: ","type":"text"},{"code":"ignoring file when building for macOS-arm64, but attempting to link with file built for macOS-x86_64.","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This happens when we have a binary dependency that hasn’t been built as universal yet, the only way to fix this is to:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"remove such dependency (even just temporarily)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"wait for the dependency to provide an universal binary","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What you can do now: search for precompiled binaries in your project ("},{"code":".a","type":"codeVoice"},{"type":"text","text":", "},{"code":".dylib","type":"codeVoice"},{"type":"text","text":", "},{"code":".framework","type":"codeVoice"},{"type":"text","text":", "},{"code":".xcframework","type":"codeVoice"},{"type":"text","text":") and reach out their vendors if the binary is not universal (use "},{"code":"lipo --info path\/to\/binary","type":"codeVoice"},{"type":"text","text":" to inspect them)"}]},{"level":3,"type":"heading","anchor":"Building-Universal-Binaries-steps","text":"Building Universal Binaries steps"},{"items":[{"content":[{"inlineContent":[{"text":"Build your app as an Intel app in Xcode 12 first (make sure it builds fine with no warnings)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build your app natively for Apple Silicon"}]}]}],"type":"orderedList"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"fix non-portable code issues (see #if chapter above)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fix link-time issues (see "},{"type":"codeVoice","code":"Precompiled binaries"},{"type":"text","text":" chapter above)"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"Running-Testing-Debugging","text":"Running, Testing, Debugging"},{"items":[{"content":[{"inlineContent":[{"text":"When running tests, they will run only in the selected architecture","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default architecture is the one the mac machine is running on"}]}]},{"content":[{"inlineContent":[{"text":"Always run your tests on both architectures","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"Asymmetric-CPU-cores-on-Apple-Silicon","text":"Asymmetric CPU cores on Apple Silicon"},{"items":[{"content":[{"inlineContent":[{"text":"Apple Silicon Macs have two types of cores:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"High-performance (P Cores)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Energy-efficient (E Cores)"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"All can be active at the same time for highly-parallel workloads","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"In Instruments you can see which core is which by the associated label:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC20-10214-instruments"}]},{"level":2,"type":"heading","anchor":"Plug-ins","text":"Plug-ins"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Plug-ins are a way to dynamically load and execute code."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both native and translated plug-ins are supported."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If your app is a plug-in host, and if it’s using a custom plug-in loading mechanism, you will need to consider how plug-ins work on Apple Silicon Macs.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your app supports plug-ins, it will typically discover them at runtime and then load them when needed."}]},{"type":"paragraph","inlineContent":[{"text":"That’s called an ","type":"text"},{"type":"strong","inlineContent":[{"text":"in-process plug-in model","type":"text"}]},{"text":", and typically the app uses a call to ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/archive\/documentation\/System\/Conceptual\/ManPages_iPhoneOS\/man3\/dlopen.3.html","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle\/1415927-load","type":"reference"},{"text":" for this.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Alternatively, the plug-ins can be spawned as new processes, and we call those ","type":"text"},{"inlineContent":[{"text":"out-of-process plug-ins","type":"text"}],"type":"strong"},{"text":". The app and the plug-in process then use some interprocess communication mechanism like XPC. Loading another plug-in typically spawns another process.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"|  | 1st party (build from source code shipped inside your app) | 3rd party (precompiled binaries, shipped inside the app or separately) |","type":"text"},{"text":" ","type":"text"},{"text":"| Out-of-process | Supported | Supported, even when the binary is intel only (Rosetta will take care of that process) |","type":"text"},{"text":" ","type":"text"},{"text":"| In-process | Supported only if the running architecture matches the one in the precompiled binary) | not supported |","type":"text"}]},{"level":2,"type":"heading","anchor":"Written-By","text":"Written By"},{"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"anchor":"Federico-Zanetello","level":3,"text":"Federico Zanetello","type":"heading"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}],"type":"paragraph"}],"size":4}],"numberOfColumns":5},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"level":2,"type":"heading","anchor":"Related-Sessions","text":"Related Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10114-iPad-and-iPhone-apps-on-Apple-silicon-Macs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10632-Optimize-Metal-Performance-for-Apple-silicon-Macs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10686-Explore-the-new-system-architecture-of-Apple-silicon-Macs","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-703-All-About-Notarization","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC13-702-Efficient-Design-with-XPC"],"type":"links"},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc20-10214-port-your-mac-app-to-apple-silicon"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","metadata":{"roleHeading":"WWDC20","role":"sampleCode","title":"Port your Mac app to Apple silicon","modules":[{"name":"WWDC Notes"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","isActive":true,"overridingTitle":"Watch Video (40 min)","identifier":"https:\/\/developer.apple.com\/wwdc20\/10214"}},"sections":[],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"url":"\/documentation\/wwdcnotes\/wwdc20","images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"identifier":"WWDC20.jpeg","type":"card"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","abstract":[{"text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"WidgetKit"},{"type":"text","text":", "},{"code":"StoreKit Testing","type":"codeVoice"},{"text":", and more.","type":"text"}],"title":"WWDC20","role":"collectionGroup","type":"topic","kind":"article"},"WWDC20-Icon.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-Icon.png"}],"identifier":"WWDC20-Icon.png","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-703-All-About-Notarization":{"abstract":[{"text":"Notarization is all about identifying and blocking malicious Mac software prior to distribution, without requiring App Review or the Mac App Store.  Introduced last year and already widely adopted by Mac app developers, this is your opportunity to take an in depth tour of Notarization workflows and find out what’s new with the Notarization service.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-703-All-About-Notarization","kind":"article","role":"sampleCode","title":"All About Notarization","url":"\/documentation\/wwdcnotes\/wwdc19-703-all-about-notarization","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10632-Optimize-Metal-Performance-for-Apple-silicon-Macs":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10632-Optimize-Metal-Performance-for-Apple-silicon-Macs","type":"topic","kind":"article","title":"Optimize Metal Performance for Apple silicon Macs","url":"\/documentation\/wwdcnotes\/wwdc20-10632-optimize-metal-performance-for-apple-silicon-macs","abstract":[{"type":"text","text":"Apple silicon Macs are a transformative new platform for graphics-intensive apps — and we’re going to show you how to fire up the GPU to create blazingly fast apps and games."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10114-iPad-and-iPhone-apps-on-Apple-silicon-Macs":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10114-iPad-and-iPhone-apps-on-Apple-silicon-Macs","title":"iPad and iPhone apps on Apple silicon Macs","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc20-10114-ipad-and-iphone-apps-on-apple-silicon-macs","abstract":[{"text":"Apple silicon Macs can run many iPad and iPhone apps as-is, and these apps will be made available to users on the Mac through the Mac App Store. Discover how iPad and iPhone apps run on Apple silicon Macs, and the factors that make your apps come across better. Learn how to test your app for the Mac, and hear about your options for distribution of your apps.","type":"text"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"kind":"article","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"identifier":"zntfdr.jpeg","type":"icon"}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/zntfdr","type":"topic","title":"Federico Zanetello (332 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC Notes","type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"kind":"symbol","url":"\/documentation\/wwdcnotes"},"https://en.wikipedia.org/wiki/Mach-O":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Mach-O","titleInlineContent":[{"text":"Mach-O","type":"text"}],"title":"Mach-O","url":"https:\/\/en.wikipedia.org\/wiki\/Mach-O","type":"link"},"WWDC20-10214-activityMonitor":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10214-activityMonitor.png"}],"identifier":"WWDC20-10214-activityMonitor","alt":null,"type":"image"},"zntfdr":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"identifier":"zntfdr","alt":"Profile image of Federico Zanetello","type":"image"},"https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlopen.3.html":{"identifier":"https:\/\/developer.apple.com\/library\/archive\/documentation\/System\/Conceptual\/ManPages_iPhoneOS\/man3\/dlopen.3.html","titleInlineContent":[{"code":"dlopen()","type":"codeVoice"}],"title":"dlopen()","url":"https:\/\/developer.apple.com\/library\/archive\/documentation\/System\/Conceptual\/ManPages_iPhoneOS\/man3\/dlopen.3.html","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC13-702-Efficient-Design-with-XPC":{"abstract":[{"text":"XPC has been enhanced to make it even easier to design for robustness and efficiency. Learn how to save power by opportunistically scheduling long-running tasks, transferring large amounts of data with minimal overhead, and how to best compartmentalize your app.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC13-702-Efficient-Design-with-XPC","kind":"article","role":"sampleCode","title":"Efficient Design with XPC","url":"\/documentation\/wwdcnotes\/wwdc13-702-efficient-design-with-xpc","type":"topic"},"WWDCNotes.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"identifier":"WWDCNotes.png","alt":null,"type":"image"},"WWDC20.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20.jpeg"}],"identifier":"WWDC20.jpeg","alt":null,"type":"image"},"zntfdr.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"identifier":"zntfdr.jpeg","alt":null,"type":"image"},"https://developer.apple.com/documentation/foundation/bundle/1415927-load":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle\/1415927-load","titleInlineContent":[{"code":"Bundle.load()","type":"codeVoice"}],"title":"Bundle.load()","url":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle\/1415927-load","type":"link"},"https://zntfdr.dev":{"identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","url":"https:\/\/zntfdr.dev","type":"link"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","url":"https:\/\/github.com\/zntfdr","type":"link"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"https://developer.apple.com/documentation/apple_silicon":{"identifier":"https:\/\/developer.apple.com\/documentation\/apple_silicon","titleInlineContent":[{"text":"Apple Silicon documentation","type":"text"}],"title":"Apple Silicon documentation","url":"https:\/\/developer.apple.com\/documentation\/apple_silicon","type":"link"},"WWDC20-10214-instruments":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDC20-10214-instruments.png"}],"identifier":"WWDC20-10214-instruments","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10631-Bring-your-Metal-app-to-Apple-silicon-Macs","type":"topic","kind":"article","title":"Bring your Metal app to Apple silicon Macs","url":"\/documentation\/wwdcnotes\/wwdc20-10631-bring-your-metal-app-to-apple-silicon-macs","abstract":[{"type":"text","text":"Meet the Tile Based Deferred Rendering (TBDR) GPU architecture for Apple silicon Macs — the heart of your Metal app or game’s graphics performance. Learn how you can translate or port your graphics-intensive app over to Apple silicon, and how to take advantage of TBDR and Metal when building natively for the platform. We’ll look at how TBDR compares with the Immediate Mode Rendering pipeline of older Macs, go through common issues you may face when bringing an app or game over, and explore how to offer incredible performance when building with the native SDK."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10686-Explore-the-new-system-architecture-of-Apple-silicon-Macs":{"title":"Explore the new system architecture of Apple silicon Macs","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10686-Explore-the-new-system-architecture-of-Apple-silicon-Macs","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc20-10686-explore-the-new-system-architecture-of-apple-silicon-macs","abstract":[{"type":"text","text":"Discover how Macs with Apple silicon will deliver modern advantages using Apple’s System-on-Chip (SoC) architecture. Leveraging a unified memory architecture for CPU and GPU tasks, Mac apps will see amazing performance benefits from Apple silicon tuned frameworks such as Metal and Accelerate.  Learn about new features and changes coming to boot and security, and how these may affect your applications."}],"type":"topic","role":"sampleCode"},"https://developer.apple.com/wwdc20/10214":{"identifier":"https:\/\/developer.apple.com\/wwdc20\/10214","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc20\/10214","type":"download"}}}