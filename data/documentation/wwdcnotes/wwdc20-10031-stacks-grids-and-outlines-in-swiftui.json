{"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc20\/10031","overridingTitle":"Watch Video (19 min)"},"kind":"sampleDownload"},"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC20","title":"Stacks, Grids, and Outlines in SwiftUI","role":"sampleCode"},"primaryContentSections":[{"content":[{"text":"Stacks","type":"heading","level":2,"anchor":"Stacks"},{"inlineContent":[{"type":"text","text":"When working with stacks of many elements embedded in "},{"type":"codeVoice","code":"ScrollView"},{"type":"text","text":"s, instead of loading everything immediately with "},{"type":"codeVoice","code":"HStack"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"VStack"},{"type":"text","text":", we can now use "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhstack"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvstack"},{"type":"text","text":", which load their children lazily."}],"type":"paragraph"},{"inlineContent":[{"text":"Not all stacks should be lazy, for example ","type":"text"},{"code":"overlay","type":"codeVoice"},{"text":"s and ","type":"text"},{"code":"background","type":"codeVoice"},{"text":"s are views that will be drawn only when it’s time to be displayed, therefore using lazy stacks don’t bring any benefit in these cases.","type":"text"}],"type":"paragraph"},{"text":"Grids","type":"heading","level":2,"anchor":"Grids"},{"inlineContent":[{"text":"SwiftUI Grids are the equivalent of css’s ","type":"text"},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/CSS_Flexible_Box_Layout","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvgrid","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhgrid","type":"reference","isActive":true},{"type":"text","text":", similar to stacks, but for multi-column layouts."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When working with grids, we define our columns\/rows layout via an array of "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/griditem"},{"type":"text","text":" instances."},{"type":"text","text":"\n"},{"type":"text","text":"Each item will specify how its relative column width\/row height is computed."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"GridItem"},{"type":"text","text":"s are flexible by default, therefore taking all the space available:"}],"type":"paragraph"},{"code":["\/\/ Creates a three column layout, with equally distributed space between the three columns.","","var columns = [","    GridItem(spacing: 0),","    GridItem(spacing: 0),","    GridItem(spacing: 0)","]","","ScrollView {","    LazyVGrid(columns: columns, spacing: 0) {","        ForEach(...) { ... in","           ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We can also create an adaptive grid layout by declaring","type":"text"}],"type":"paragraph"},{"code":["\/\/ Creates as many columns as possible, each with a minimum width of 300 points.","","var columns = [","    GridItem(.adaptive(minimum: 300), spacing: 0)","]","","ScrollView {","    LazyVGrid(columns: columns, spacing: 0) {","        ForEach(...) { ... in","           ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Progressive Display of Information","type":"heading","level":2,"anchor":"Progressive-Display-of-Information"},{"text":"Disclosure Groups","type":"heading","level":3,"anchor":"Disclosure-Groups"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/DisclosureGroup"},{"text":" is a new SwiftUI element that shows\/hides content to the user based on a boolean ","type":"text"},{"code":"@Binding","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["DisclosureGroup(isExpanded: $showingContent) {","   \/\/ content here","} label: {","   Text(\"Show content\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"It can be seen as a more adaptive version of the following code:","type":"text"}],"type":"paragraph"},{"code":["Button { ","   showingContent.toggle() ","} label: {","   Text(\"Show content\")","}","","if showingContent {","   \/\/ content here","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Passing a binding is optional:","type":"text"},{"text":"\n","type":"text"},{"text":"if we don’t provide one, the view will use an internal binding and start with ","type":"text"},{"code":"isExpanded","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Outlines","type":"heading","level":3,"anchor":"Outlines"},{"inlineContent":[{"type":"text","text":"An "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/outlinegroup","type":"reference"},{"type":"text","text":" is similar to a "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" except that, instead of iterating over a flat collection, "},{"code":"OutlineGroup","type":"codeVoice"},{"type":"text","text":" traverses a tree structure data."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, this view can be used to display and explore a folder structure or a binary tree.","type":"text"}],"type":"paragraph"},{"code":["OutlineGroup(","    array,","    children: \\.children",") { element in","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"OutlineGroup"},{"type":"text","text":" needs to know how to traverse our model, therefore it has a few requirements:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"we must pass a collection of "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" objects"}]}]},{"content":[{"inlineContent":[{"text":"these objects need to have a property, passed via ","type":"text"},{"code":"\\.children","type":"codeVoice"},{"text":" keypath in the example above, that contain an optional collection of the same type","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"By default the user:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"will only see the elements of the top ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"“level”"}]},{"text":" of the structure at first","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"will be able to tap on those elements that contain “sub-collections” to display them.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Behind the scenes "},{"type":"codeVoice","code":"OutlineGroup"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"DisclosureGroup"},{"type":"text","text":" to show\/hide the nested elements."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"OutlineGroup"},{"type":"text","text":" is not eager: it computes its rows on demand, based on what it needs to display."}],"type":"paragraph"},{"text":"Lists","type":"heading","level":3,"anchor":"Lists"},{"inlineContent":[{"type":"codeVoice","code":"List"},{"text":" has also gained the same capabilities of ","type":"text"},{"type":"codeVoice","code":"OutlineGroup"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Written By","type":"heading","level":2,"anchor":"Written-By"},{"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"level":3,"text":"Federico Zanetello","type":"heading","anchor":"Federico-Zanetello"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}],"size":4}],"numberOfColumns":5,"type":"row"},{"type":"thematicBreak"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"text":"Related Sessions","type":"heading","level":2,"anchor":"Related-Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10037-App-essentials-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10040-Data-Essentials-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10041-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials"],"style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"text":"Display detailed data in your SwiftUI apps more quickly and efficiently with improved stacks and new list and outline views. Now available on iOS and iPadOS for the first time, outlines are a new multi-platform tool for expressing hierarchical data that work alongside stacks and lists. Learn how to use new and improved tools in SwiftUI to display more content on screen when using table views, create smooth-scrolling and responsive stacks, and build out list views for content that needs more than a vStack can provide. Take your layout options even further with the new grid view, as well as disclosure groups.","type":"text"}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc20-10031-stacks-grids-and-outlines-in-swiftui"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10031-Stacks-Grids-and-Outlines-in-SwiftUI"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20"]]},"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10056-Compose-custom-layouts-with-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc22-10056-compose-custom-layouts-with-swiftui","kind":"article","role":"sampleCode","title":"Compose custom layouts with SwiftUI","abstract":[{"text":"SwiftUI now offers powerful tools to level up your layouts and arrange views for your app’s interface. We’ll introduce you to the Grid container, which helps you create highly customizable, two-dimensional layouts, and show you how you can use the Layout protocol to build your own containers with completely custom behavior. We’ll also explore how you can create seamless animated transitions between your layout types, and share tips and best practices for creating great interfaces.","type":"text"}],"type":"topic"},"https://developer.apple.com/documentation/swiftui/lazyhgrid":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhgrid","title":"LazyHGrid","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhgrid","titleInlineContent":[{"type":"codeVoice","code":"LazyHGrid"}]},"WWDC20.jpeg":{"identifier":"WWDC20.jpeg","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC20.jpeg","traits":["1x","light"]}]},"https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout":{"url":"https:\/\/en.wikipedia.org\/wiki\/CSS_Flexible_Box_Layout","titleInlineContent":[{"type":"text","text":"Flexbox layout"}],"type":"link","title":"Flexbox layout","identifier":"https:\/\/en.wikipedia.org\/wiki\/CSS_Flexible_Box_Layout"},"WWDCNotes.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"url":"\/documentation\/wwdcnotes\/zntfdr","role":"sampleCode","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"title":"Federico Zanetello (332 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","type":"topic","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10041-Whats-new-in-SwiftUI":{"type":"topic","abstract":[{"text":"SwiftUI can help you build better and more powerful apps for iPhone, iPad, Mac, Apple Watch, and Apple TV.  Learn more about the latest refinements to SwiftUI, including interface improvements like outlines, grids, and toolbars. Take advantage of SwiftUI’s enhanced support across Apple frameworks to enable features like Sign In with Apple. Discover new visual effects, as well as new controls and styles. And find out how the new app and scene APIs enable you to create apps entirely in SwiftUI, as well as custom complications and all new widgets.","type":"text"}],"title":"What’s new in SwiftUI","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10041-Whats-new-in-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc20-10041-whats-new-in-swiftui","role":"sampleCode"},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"WWDC20-Icon.png":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC20-Icon.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"WWDC20-Icon.png"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10248-Analyze-hangs-with-Instruments":{"abstract":[{"text":"User interface elements often mimic real-world interactions, including real-time responses. Apps with a noticeable delay in user interaction — a hang — can break that illusion and create frustration. We’ll show you how to use Instruments to analyze, understand, and fix hangs in your apps on all Apple platforms. Discover how you can efficiently navigate an Instruments trace document, interpret trace data, and record additional profiling data to better understand your specific hang.","type":"text"}],"role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","type":"topic","title":"Analyze hangs with Instruments","url":"\/documentation\/wwdcnotes\/wwdc23-10248-analyze-hangs-with-instruments"},"https://github.com/zntfdr":{"url":"https:\/\/github.com\/zntfdr","title":"GitHub","type":"link","identifier":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10040-Data-Essentials-in-SwiftUI":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10040-Data-Essentials-in-SwiftUI","role":"sampleCode","title":"Data Essentials in SwiftUI","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc20-10040-data-essentials-in-swiftui","type":"topic","abstract":[{"type":"text","text":"Data is a complex part of any app, but SwiftUI makes it easy to ensure a smooth, data-driven experience from prototyping to production. Discover @State and @Binding, two powerful tools that can preserve and seamlessly update your Source of Truth. We’ll also show you how ObservableObject lets you connect your views to your data model. Learn about some tricky challenges and cool new ways to solve them — directly from the experts!"}]},"https://zntfdr.dev":{"identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev","type":"link","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"type":"link","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10037-App-essentials-in-SwiftUI":{"role":"sampleCode","type":"topic","title":"App essentials in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10037-App-essentials-in-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc20-10037-app-essentials-in-swiftui","abstract":[{"type":"text","text":"Thanks to the new App protocol, SwiftUI now supports building entire apps! See how Apps, Scenes, and Views fit together. Learn how easy it is to implement the features people expect from a best-in-class product while saving time and reducing complexity. Easily add expected functionality to your interface using the new commands modifier, and explore the ins and outs of the new WindowGroup API."}],"kind":"article"},"https://developer.apple.com/documentation/swiftui/outlinegroup":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/outlinegroup","title":"OutlineGroup","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/outlinegroup","titleInlineContent":[{"type":"codeVoice","code":"OutlineGroup"}]},"https://developer.apple.com/wwdc20/10031":{"identifier":"https:\/\/developer.apple.com\/wwdc20\/10031","url":"https:\/\/developer.apple.com\/wwdc20\/10031","type":"download","checksum":null},"https://developer.apple.com/documentation/swiftui/DisclosureGroup":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/DisclosureGroup","titleInlineContent":[{"type":"codeVoice","code":"DisclosureGroup"}],"type":"link","title":"DisclosureGroup","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/DisclosureGroup"},"zntfdr":{"identifier":"zntfdr","alt":"Profile image of Federico Zanetello","type":"image","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"https://developer.apple.com/documentation/swiftui/lazyvstack":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvstack","title":"LazyVStack","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvstack","titleInlineContent":[{"type":"codeVoice","code":"LazyVStack"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-216-SwiftUI-Essentials":{"role":"sampleCode","type":"topic","abstract":[{"text":"Take your first deep-dive into building an app with SwiftUI. Learn about Views and how they work. From basic controls to sophisticated containers like lists and navigation stacks, SwiftUI enables the creation of great user interfaces, faster and more easily. See how basic controls like Button are both simple yet versatile. Discover how to compose these pieces into larger, full-featured user interfaces that facilitate building great apps with SwiftUI. Build your SwiftUI skills as you learn the essentials of Apple’s new declarative framework.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials","url":"\/documentation\/wwdcnotes\/wwdc19-216-swiftui-essentials","title":"SwiftUI Essentials","kind":"article"},"https://developer.apple.com/documentation/swiftui/lazyhstack":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhstack","titleInlineContent":[{"type":"codeVoice","code":"LazyHStack"}],"type":"link","title":"LazyHStack","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyhstack"},"https://developer.apple.com/documentation/swiftui/lazyvgrid":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvgrid","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/lazyvgrid","type":"link","title":"LazyVGrid","titleInlineContent":[{"code":"LazyVGrid","type":"codeVoice"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"title":"WWDC Notes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","role":"collection"},"https://developer.apple.com/documentation/swiftui/griditem":{"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/griditem","title":"GridItem","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/griditem","titleInlineContent":[{"type":"codeVoice","code":"GridItem"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20":{"url":"\/documentation\/wwdcnotes\/wwdc20","role":"collectionGroup","images":[{"identifier":"WWDC20-Icon.png","type":"icon"},{"identifier":"WWDC20.jpeg","type":"card"}],"title":"WWDC20","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20","type":"topic","abstract":[{"text":"Xcode 12, Swift 5.3, iOS 14, macOS 11 (Big Sur), tvOS 14, watchOS 7.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"WidgetKit"},{"text":", ","type":"text"},{"type":"codeVoice","code":"StoreKit Testing"},{"text":", and more.","type":"text"}],"kind":"article"}}}