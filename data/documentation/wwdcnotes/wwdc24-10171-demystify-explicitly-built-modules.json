{"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10171-Demystify-explicitly-built-modules","interfaceLanguage":"swift"},"abstract":[{"text":"Explore how builds are changing in Xcode 16 with explicitly built modules. Discover how modules are used to build your code, how explicitly built modules improve transparency in compilation tasks, and how you can optimize your build by sharing modules across targets.","type":"text"}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc24\/10171","isActive":true,"overridingTitle":"Watch Video","type":"reference"},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10171-demystify-explicitly-built-modules"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Modules","anchor":"Modules","level":2,"type":"heading"},{"inlineContent":[{"text":"Modules are units of code distribution that describe the interface of a framework.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Modules in Swift are built by code interfaces that are marked as "},{"code":"public","type":"codeVoice"},{"type":"text","text":" (or "},{"code":"open","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In Objective-C, the modules interface is hand-authored with "},{"type":"codeVoice","code":".h"},{"type":"text","text":" (header) files and a module map."}],"type":"paragraph"},{"text":"Using modules","anchor":"Using-modules","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"There are two high-level kind of modules: "},{"inlineContent":[{"type":"text","text":"Implicitly"}],"type":"strong"},{"type":"text","text":" built modules and "},{"inlineContent":[{"type":"text","text":"Explicitly"}],"type":"strong"},{"type":"text","text":" built modules."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This animation shows the difference between the structure of tasks during building between implicitly (start) and explicitly (end) built modules:"}],"type":"paragraph"},{"identifier":"WWDC24-10171-Implicit-to-Explicit","type":"video"},{"inlineContent":[{"text":"Implicit means that compilers coordinate among themselves to decide which modules to build – without Xcode being aware. Swift and Clang work that way.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Explicit means that Xcode scans the source graph, builds the required modules it detected, and then builds the source."}],"type":"paragraph"},{"inlineContent":[{"identifier":"WWDC24-10171-Steps-for-Explicit-Builds","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This makes builds faster overall thanks to more efficient use of available execution lanes:"}],"type":"paragraph"},{"tabs":[{"title":"Implicit Timing","content":[{"inlineContent":[{"type":"image","identifier":"WWDC24-10171-Implicit-Timing"}],"type":"paragraph"}]},{"title":"Explicit Timing","content":[{"type":"paragraph","inlineContent":[{"identifier":"WWDC24-10171-Explicit-Timing","type":"image"}]}]}],"type":"tabNavigator"},{"inlineContent":[{"type":"text","text":"Explicitly built modules also ensure that builds are more reliable thanks to precise dependencies and determinstic build graphs. No implicit state maintained elsewhere, which improves reproducability of build issues."}],"type":"paragraph"},{"inlineContent":[{"text":"This also means that clean builds also rebuild modules. And, the debugger no longer has a separate build graph, so it can reuse the already built modules. This improves debugging performance, such as when using ","type":"text"},{"code":"p","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"po","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Module build log","anchor":"Module-build-log","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"In Xcode 16 explicitly built modules are used fo all C and Objective-C code. It can be enabled as a preview for Swift. Just set the build setting “Explicitly Built Modules” to “Yes”."}],"type":"paragraph"},{"inlineContent":[{"text":"Some modules like ","type":"text"},{"code":"UIKit","type":"codeVoice"},{"text":" may need to be built multiple times when different combinations of build settings are needed. This happened with implicitly built modules as well, but was more difficult to notice.","type":"text"}],"type":"paragraph"},{"text":"Optimize your build","anchor":"Optimize-your-build","level":2,"type":"heading"},{"inlineContent":[{"text":"To detect multiple variants built for your modules, clean your project and choose “Build with Timing Summary” in the “Product -> Perform Action” menu. Then your build logs will show entries like “Generate Clang modules report” which list how many variants of each module was built.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Common reasons for multiple variants of a module needing to be built are:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Pre-processore macros","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Language modes or versions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Disabling of Automatic Reference Counting (ARC)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This means, you can improve your build times by making sure all your targets have the same settings for these, such as for pre-processor macros. For example, move settings from a specific target to the entire project (or even workspace) level instead like so:","type":"text"}],"type":"paragraph"},{"identifier":"WWDC24-10171-Project-wide-Settings","type":"video"},{"text":"Written By","anchor":"Written-By","level":2,"type":"heading"},{"numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Jeehut"}]}]},{"size":4,"content":[{"level":3,"text":"Cihat Gündüz","anchor":"Cihat-G%C3%BCnd%C3%BCz","type":"heading"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","isActive":true,"overridingTitle":"Contributed Notes"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/Jeehut","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/fline.dev","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/x.com\/Jeehut","isActive":true}],"type":"paragraph"}]}],"type":"row"},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}],"type":"paragraph"},{"text":"Related Sessions","anchor":"Related-Sessions","level":2,"type":"heading"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110364-Demystify-parallelization-in-Xcode-builds"],"style":"list","type":"links"},{"inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"metadata":{"roleHeading":"WWDC24","role":"sampleCode","title":"Demystify explicitly built modules","modules":[{"name":"WWDC Notes"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"references":{"Jeehut":{"type":"image","identifier":"Jeehut","variants":[{"url":"\/images\/WWDCNotes\/Jeehut.jpeg","traits":["1x","light"]}],"alt":"Profile image of Cihat Gündüz"},"WWDC24-10171-Explicit-Timing":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC24-10171-Explicit-Timing.jpeg","traits":["1x","light"]}],"identifier":"WWDC24-10171-Explicit-Timing","type":"image"},"WWDC24-10171-Steps-for-Explicit-Builds":{"identifier":"WWDC24-10171-Steps-for-Explicit-Builds","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC24-10171-Steps-for-Explicit-Builds.jpeg"}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110364-Demystify-parallelization-in-Xcode-builds":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110364-Demystify-parallelization-in-Xcode-builds","abstract":[{"text":"Learn how the Xcode build system extracts maximum parallelism from your builds. We’ll explore how you can structure your project to improve build efficiency, take you through the process for resolving relationships between targets’ build phases in Xcode, and share how you can take full advantage of available hardware resources when compiling in Swift. We’ll also introduce you to Build Timeline — a powerful tool to help you monitor your build efficiency and performance.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-110364-demystify-parallelization-in-xcode-builds","type":"topic","kind":"article","role":"sampleCode","title":"Demystify parallelization in Xcode builds"},"doc://WWDCNotes/documentation/WWDCNotes/Jeehut":{"abstract":[{"text":"Spatial-first Indie Developer for  Platforms. Actively contributing to Open Source since 2011!","type":"text"}],"images":[{"type":"card","identifier":"Jeehut.jpeg"},{"type":"icon","identifier":"Jeehut.jpeg"}],"type":"topic","kind":"article","title":"Cihat Gündüz (69 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Jeehut","role":"sampleCode","url":"\/documentation\/wwdcnotes\/jeehut"},"https://github.com/Jeehut":{"type":"link","identifier":"https:\/\/github.com\/Jeehut","titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/Jeehut","title":"GitHub"},"WWDC24.jpeg":{"alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC24.jpeg","traits":["1x","light"]}],"identifier":"WWDC24.jpeg","type":"image"},"Jeehut.jpeg":{"identifier":"Jeehut.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/Jeehut.jpeg"}],"alt":null,"type":"image"},"WWDC24-10171-Project-wide-Settings":{"type":"video","identifier":"WWDC24-10171-Project-wide-Settings","variants":[{"url":"\/videos\/WWDCNotes\/WWDC24-10171-Project-wide-Settings.mp4","traits":["1x","light"]}],"poster":null,"alt":null},"https://x.com/Jeehut":{"title":"X\/Twitter","url":"https:\/\/x.com\/Jeehut","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"identifier":"https:\/\/x.com\/Jeehut","type":"link"},"https://developer.apple.com/wwdc24/10171":{"url":"https:\/\/developer.apple.com\/wwdc24\/10171","identifier":"https:\/\/developer.apple.com\/wwdc24\/10171","checksum":null,"type":"download"},"WWDC24-Icon.png":{"type":"image","identifier":"WWDC24-Icon.png","variants":[{"url":"\/images\/WWDCNotes\/WWDC24-Icon.png","traits":["1x","light"]}],"alt":null},"https://fline.dev":{"identifier":"https:\/\/fline.dev","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/fline.dev","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"type":"codeVoice","code":"FinanceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"TabletopKit"},{"type":"text","text":", and more."}],"images":[{"identifier":"WWDC24-Icon.png","type":"icon"},{"identifier":"WWDC24.jpeg","type":"card"}],"url":"\/documentation\/wwdcnotes\/wwdc24","kind":"article","role":"collectionGroup","title":"WWDC24"},"WWDC24-10171-Implicit-to-Explicit":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/WWDCNotes\/WWDC24-10171-Implicit-to-Explicit.mp4"}],"poster":null,"identifier":"WWDC24-10171-Implicit-to-Explicit","type":"video"},"doc://WWDCNotes/documentation/WWDCNotes":{"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"kind":"symbol","title":"WWDC Notes"},"WWDC24-10171-Implicit-Timing":{"type":"image","identifier":"WWDC24-10171-Implicit-Timing","variants":[{"url":"\/images\/WWDCNotes\/WWDC24-10171-Implicit-Timing.jpeg","traits":["1x","light"]}],"alt":null},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"}}}