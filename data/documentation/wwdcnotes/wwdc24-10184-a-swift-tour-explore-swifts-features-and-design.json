{"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc24-10184-a-swift-tour-explore-swifts-features-and-design"]}],"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24-10184-A-Swift-Tour-Explore-Swifts-features-and-design","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Learn the essential features and design philosophy of the Swift programming language. We‚Äôll explore how to model data, handle errors, use protocols, write concurrent code, and more while building up a Swift package that has a library, an HTTP server, and a command line client. Whether you‚Äôre just beginning your Swift journey or have been with us from the start, this talk will help you get the most out of the language."}],"metadata":{"title":"A Swift Tour: Explore Swift‚Äôs features and design","role":"sampleCode","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC24"},"kind":"article","sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc24\/10184","isActive":true,"overridingTitle":"Watch Video"}},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"üò± ‚ÄúNo Overview Available!‚Äù","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Be the hero to change that by watching the video and providing notes! It‚Äôs super easy:","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"text":"Related Sessions","type":"heading","level":2,"anchor":"Related-Sessions"},{"type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110353-Design-protocol-interfaces-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110357-Meet-Swift-Regex"],"style":"list"}]}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24"]]},"references":{"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Learn More‚Ä¶","type":"link","titleInlineContent":[{"type":"text","text":"Learn More‚Ä¶"}]},"https://developer.apple.com/wwdc24/10184":{"url":"https:\/\/developer.apple.com\/wwdc24\/10184","identifier":"https:\/\/developer.apple.com\/wwdc24\/10184","type":"download","checksum":null},"WWDC24.jpeg":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC24.jpeg"}],"identifier":"WWDC24.jpeg","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110357-Meet-Swift-Regex":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110357-Meet-Swift-Regex","title":"Meet Swift Regex","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-110357-meet-swift-regex","abstract":[{"type":"text","text":"Learn how you can process strings more effectively when you take advantage of Swift Regex. Come for concise literals but stay for Regex builders ‚Äî a new, declarative approach to string processing. We‚Äôll also explore the Unicode models in String and share how Swift Regex can make Unicode-correct processing easy."}],"role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110352-Embrace-Swift-generics":{"kind":"article","abstract":[{"text":"Generics are a fundamental tool for writing abstract code in Swift. Learn how you can identify opportunities for abstraction as your code evolves, evaluate strategies for writing one piece of code with many behaviors, and discover language features in Swift 5.7 that can help you make generic code easier to write and understand.","type":"text"}],"type":"topic","role":"sampleCode","title":"Embrace Swift generics","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110352-Embrace-Swift-generics","url":"\/documentation\/wwdcnotes\/wwdc22-110352-embrace-swift-generics"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","type":"topic","kind":"symbol"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10167-Expand-on-Swift-macros":{"url":"\/documentation\/wwdcnotes\/wwdc23-10167-expand-on-swift-macros","abstract":[{"text":"Discover how Swift macros can help you reduce boilerplate in your codebase and adopt complex features more easily. Learn how macros can analyze code, emit rich compiler errors to guide developers towards correct usage, and generate new code that is automatically incorporated back into your project. We‚Äôll also take you through important concepts like macro roles, compiler plugins, and syntax trees.","type":"text"}],"role":"sampleCode","title":"Expand on Swift macros","type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10167-Expand-on-Swift-macros"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110353-Design-protocol-interfaces-in-Swift":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110353-Design-protocol-interfaces-in-Swift","role":"sampleCode","abstract":[{"type":"text","text":"Learn how you can use Swift 5.7 to design advanced abstractions using protocols. We‚Äôll show you how to use existential types, explore how you can separate implementation from interface with opaque result types, and share the same-type requirements that can help you identify and guarantee relationships between concrete types."}],"title":"Design protocol interfaces in Swift","url":"\/documentation\/wwdcnotes\/wwdc22-110353-design-protocol-interfaces-in-swift","kind":"article","type":"topic"},"WWDC24-Icon.png":{"identifier":"WWDC24-Icon.png","type":"image","alt":null,"variants":[{"url":"\/images\/WWDC24-Icon.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC24":{"kind":"article","images":[{"type":"icon","identifier":"WWDC24-Icon.png"},{"type":"card","identifier":"WWDC24.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC24","abstract":[{"type":"text","text":"Xcode 16, Swift 6, iOS 18, macOS 15 (Sequoia), tvOS 18, visionOS 2, watchOS 11."},{"type":"text","text":" "},{"type":"text","text":"New APIs: Swift Testing, "},{"code":"FinanceKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"TabletopKit","type":"codeVoice"},{"type":"text","text":", and more."}],"type":"topic","role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc24","title":"WWDC24"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","role":"sampleCode","kind":"article","title":"Explore structured concurrency in Swift","type":"topic","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it‚Äôs important to choose the right tool for the job. We‚Äôll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We‚Äôll also provide guidance on when you may want to use unstructured tasks."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10253-Write-a-DSL-in-Swift-using-result-builders","title":"Write a DSL in Swift using result builders","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10253-write-a-dsl-in-swift-using-result-builders","abstract":[{"type":"text","text":"Some problems are easier to solve by creating a customized programming language, or ‚Äúdomain-specific language.‚Äù While creating a DSL traditionally requires writing your own compiler, you can instead use result builders with Swift 5.4 to make your code both easier to read and maintain. We‚Äôll take you through best practices for designing a custom language for Swift: Learn about result builders and trailing closure arguments, explore modifier-style methods and why they work well, and discover how you can extend Swift‚Äôs normal language rules to turn Swift into a DSL."}],"role":"sampleCode","type":"topic"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]}}}