{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17-230-Advanced-Animations-with-UIKit"},"sections":[],"metadata":{"modules":[{"name":"WWDC Notes"}],"role":"sampleCode","roleHeading":"WWDC17","title":"Advanced Animations with UIKit"},"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17"]]},"abstract":[{"type":"text","text":"So much power has been added to animations on iOS since their inception that it’s time to think about animations in a whole new way! Learn to combine and coordinate between multiple animations, resulting in interactive transitions and learn some tips and tricks along the way."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/cgoldsby\/WWDC-2017-Session-230-Advance-Animations-with-UIKit","type":"reference"}],"type":"paragraph"}]},{"type":"heading","text":"Interactive animations","level":2,"anchor":"Interactive-animations"},{"inlineContent":[{"type":"text","text":"An interactive animation is one in which the user’s actions interactively drive the progress of your animation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["\/\/ Safe the instance of the animator","var animator: UIViewPropertyAnimator!","","func handlePan(recognizer: UIPanGestureRecognizer) {","  switch recognizer.state {","    case .began:","      \/\/ create the animator on touch began","      animator = UIViewPropertyAnimator(","        duration: 1,","        curve: .easeOut,","        animations: {","          circle.frame = circle.frame.offsetBy(dx: 100, dy: 0)","        }","      )","      \/\/ pausing the animator here will produce that animation implicitly (but not trigger it),","      \/\/ we're essentially setting the speed to zero.","      animator.pauseAnimation()","      \/\/ note that while paused, the timing curve is automatically and temporaly converted to linear,","      \/\/ this makes it easy to use the animator for scrubbing","    case .changed:","      let translation = recognizer.translation(in: circle)","      \/\/ here we're scrubbing the animation","      animator.fractionComplete = translation.x \/ 100","    case .ended:","      animator.continueAnimation(withTimingParameters: nil, durationFactor: 0)","      \/\/ The duration factor set to zero means that the animation will pick up the original timing ","      \/\/ curve, that might be different than linear, and continue using the remaining time needed ","      \/\/ for the animation to complete based on its original duration.","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"New Property Animator Properties","level":2,"anchor":"New-Property-Animator-Properties"},{"inlineContent":[{"text":"New in iOS 11, ","type":"text"},{"type":"codeVoice","code":"UIViewPropertyAnimator"},{"text":" has two new properties:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2873966-scrubslinearly","isActive":true,"type":"reference"},{"text":" \/\/ tells whether, when paused, the animator falls back to a linear timing curve or not (defaults to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2909004-pausesoncompletion","isActive":true,"type":"reference"},{"text":" \/\/ tells whether a completed animation remains in the active state (defaults to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The latter is important, because when an animator’s animations finish it will automatically transition into the "},{"type":"codeVoice","code":".inactive"},{"type":"text","text":" "},{"type":"codeVoice","code":"state"},{"type":"text","text":". And when it does that, it releases any animations that it was previously tracking which means you cannot manipulate or even reverse them after they’ve finished. Thanks to this property, when set to "},{"type":"codeVoice","code":"true"},{"type":"text","text":", the animator will pause at 100% "},{"type":"codeVoice","code":"fractionComplete"},{"type":"text","text":", allowing you to, at any point in the future, reverse those animations."}],"type":"paragraph"},{"inlineContent":[{"text":"Note that with ","type":"text"},{"code":"pausesOnCompletion","type":"codeVoice"},{"text":" the completion block will never be called, however you can (KVO) observe the ","type":"text"},{"code":"running","type":"codeVoice"},{"text":" property:","type":"text"}],"type":"paragraph"},{"code":["animator.addObserver(self, forKeyPath: \"running\", options: [.new], context: nil)"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"New Property Animator Behaviors","level":2,"anchor":"New-Property-Animator-Behaviors"},{"inlineContent":[{"text":"New in iOS 11 ","type":"text"},{"code":"UIViewPropertyAnimator","type":"codeVoice"},{"text":" also has a new behavior, which is starting as ","type":"text"},{"code":".paused","type":"codeVoice"},{"text":" when no animations are provided.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This will make any animations added later to run immediately without escaping:"}],"type":"paragraph"},{"code":["let animator = UIViewPropertyAnimator(duration: 1, curve: .easeIn)","animator.startAnimation()","","\/\/ ...","","animator.addAnimations {","  \/\/ will run immediately","  circle.frame = circle.frame.offsetBy(dx: 100, dy: 0)","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Best Practices When Interrupting Springs","level":2,"anchor":"Best-Practices-When-Interrupting-Springs"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when pausing an animation with springs, stop and create a new property animator (don’t forget to set the current presentation value to model value) - for better fluidity in the animation"}]}]},{"content":[{"inlineContent":[{"text":"Use critically damped spring without velocity, as these don’t overshoot or oscillate","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Decompose component velocity with multiple animators, for example one for the x-axis and one for the y-axis","type":"text"}]}]}]},{"type":"heading","text":"View Morphing","level":2,"anchor":"View-Morphing"},{"inlineContent":[{"text":"Scaling, translation, and opacity blending of two views.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Strategy:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":".transform: CGAffineTransform","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Compute "},{"code":"transform.scale","type":"codeVoice"},{"type":"text","text":" and "},{"code":"transform.translation","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Prepare views and animate ","type":"text"},{"type":"codeVoice","code":".transform"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".alpha"}]}]}]},{"inlineContent":[{"text":"Computing scale: this is a dimensional ratio based on the target dimension and your current dimension.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Computing translation: because of the scale, we cannot just use the delta between the two views, instead pre-apply the target view into the original view, and use that as the delta"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Animate: use three animators:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"critically damped spring for the transform"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":".easeIn for the incoming view .alpha, non linear scrubbing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":".easeOut for the outgoing view .alpha, non linear scrubbing"}]}]}]},{"code":["func animateTransitionIfNeeded(forState state: State, duration: TimeInterval) { \/\/ ...","  let transformAnimator = UIViewPropertyAnimator(duration: duration, dampingRatio: 1) { ","    inLabel.transform = CGAffineTransform.identity","    outLabel.transform = inLabelScale.concatenating(inLabelTranslation)","  }","  \/\/ ...","  let inLabelAnimator = UIViewPropertyAnimator(duration: duration, curve: .easeIn) {","    inLabel.alpha = 1","  }","  inLabelAnimator.scrubsLinearly = false","  \/\/ ...","  let outLabelAnimator = UIViewPropertyAnimator(duration: duration, curve: .easeOut) {","    outLabel.alpha = 0","  }","  outLabelAnimator.scrubsLinearly = false","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Tips and Tricks","level":2,"anchor":"Tips-and-Tricks"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"UIView.layer.cornerRadius"},{"text":" is now animatable (iOS 11+):","type":"text"}],"type":"paragraph"}]}]},{"code":["circle.clipsToBounds = true","UIViewPropertyAnimator(duration: 1, curve: .linear) {","  circle.layer.cornerRadius = 12","}.startAnimation()"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"New ","type":"text"},{"code":"CALayer","type":"codeVoice"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/quartzcore\/calayer\/2877488-maskedcorners","type":"reference"},{"text":" property, which allows us to selectively choose which corners we want to apply our corner radius mask to","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"When working with multiple animators, it’s important to have the timing in sync, as it would be hard (for example) to scrub if different animators had different durations or start delays. A way to overcome this is to use UIView key frames:","type":"text"}],"type":"paragraph"}]}]},{"code":["\/\/ in this example buttonAnimator:","\/\/ - starts immediately and ends at 50% the original duration for the collapsed animation","\/\/ - starts at 50% the timing and end at 100% for the expanded animation","func animateTransitionIfNeeded(forState state: State, duration: TimeInterval) { \/\/ ...","  let buttonAnimator = UIViewPropertyAnimator(duration: duration, curve: .linear) { ","    \/\/ setting the duration to zero means that our keyframe animation inherits ","    \/\/ the duration of its outer property animator.","    UIView.animateKeyframes(withDuration: 0.0, delay: 0.0, options: [], animations: {","      switch state { ","        case .Expanded:","          UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0.5) { ","            \/\/ Start with delay and finish with rest of animations ","            detailsButton.alpha = 1","          }","        case .Collapsed:","          UIView.addKeyframe(withRelativeStartTime: 0.0, relativeDuration: 0.5) {","            \/\/ Start immediately and finish in half the time ","            detailsButton.alpha = 0","          }","      }","    }, completion: nil)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Written By","level":2,"anchor":"Written-By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"type":"heading","level":3,"text":"Federico Zanetello","anchor":"Federico-Zanetello"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"type":"reference","overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/zntfdr","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"identifier":"https:\/\/zntfdr.dev","isActive":true,"type":"reference"}],"type":"paragraph"}],"size":4}]},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"type":"heading","text":"Related Sessions","level":2,"anchor":"Related-Sessions"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-233-Adding-Delight-to-your-iOS-App"]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2025 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc17\/230","overridingTitle":"Watch Video (32 min)"}},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc17-230-advanced-animations-with-uikit"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"title":"Federico Zanetello (332 notes)","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-233-Adding-Delight-to-your-iOS-App":{"title":"Adding Delight to your iOS App","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-233-Adding-Delight-to-your-iOS-App","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc18-233-adding-delight-to-your-ios-app","abstract":[{"type":"text","text":"iOS contains powerful technologies you can use to make your app truly delightful. Learn how to take your app to the next level with easy-to-implement features such as Handoff and External Display support. Preserve that feeling of magic in your app with pro-tips that combine animations, gestures and layout, while keeping your scrolling smooth, and your code scalable. Dive into the anatomy of a launch to get your app responsive quickly, and learn some great debugging tricks from the pros!"}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","role":"collection","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC Notes","type":"topic","kind":"symbol"},"https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/2873966-scrubslinearly":{"url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2873966-scrubslinearly","type":"link","title":"scrubsLinearly: Bool","titleInlineContent":[{"type":"codeVoice","code":"scrubsLinearly: Bool"}],"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2873966-scrubslinearly"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","type":"link","titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","title":"GitHub"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","title":"Contributions are welcome!","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://zntfdr.dev":{"url":"https:\/\/zntfdr.dev","type":"link","title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/zntfdr.dev"},"WWDCNotes.png":{"identifier":"WWDCNotes.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC17":{"role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc17","images":[{"identifier":"WWDC17-Icon.png","type":"icon"},{"identifier":"WWDC17.jpeg","type":"card"}],"type":"topic","abstract":[{"text":"Xcode 9, Swift 4.0, iOS 11, macOS 10.13 (High Sierra), tvOS 11, watchOS 4.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"Core NFC","type":"codeVoice"},{"text":" and more.","type":"text"}],"kind":"article","title":"WWDC17","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC17"},"https://developer.apple.com/documentation/quartzcore/calayer/2877488-maskedcorners":{"type":"link","title":"maskedCorners","identifier":"https:\/\/developer.apple.com\/documentation\/quartzcore\/calayer\/2877488-maskedcorners","titleInlineContent":[{"type":"codeVoice","code":"maskedCorners"}],"url":"https:\/\/developer.apple.com\/documentation\/quartzcore\/calayer\/2877488-maskedcorners"},"WWDC17.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC17.jpeg"}],"type":"image","alt":null,"identifier":"WWDC17.jpeg"},"https://developer.apple.com/wwdc17/230":{"identifier":"https:\/\/developer.apple.com\/wwdc17\/230","type":"download","url":"https:\/\/developer.apple.com\/wwdc17\/230","checksum":null},"zntfdr":{"type":"image","alt":"Profile image of Federico Zanetello","identifier":"zntfdr","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}]},"WWDC17-Icon.png":{"identifier":"WWDC17-Icon.png","type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes\/WWDC17-Icon.png","traits":["1x","light"]}]},"zntfdr.jpeg":{"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"type":"image","alt":null,"identifier":"zntfdr.jpeg"},"https://developer.apple.com/documentation/uikit/uiviewpropertyanimator/2909004-pausesoncompletion":{"type":"link","title":"pausesOnCompletion: Bool","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2909004-pausesoncompletion","titleInlineContent":[{"type":"codeVoice","code":"pausesOnCompletion: Bool"}],"url":"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewpropertyanimator\/2909004-pausesoncompletion"},"https://github.com/cgoldsby/WWDC-2017-Session-230-Advance-Animations-with-UIKit":{"identifier":"https:\/\/github.com\/cgoldsby\/WWDC-2017-Session-230-Advance-Animations-with-UIKit","type":"link","titleInlineContent":[{"text":"Sample code","type":"text"}],"url":"https:\/\/github.com\/cgoldsby\/WWDC-2017-Session-230-Advance-Animations-with-UIKit","title":"Sample code"}}}