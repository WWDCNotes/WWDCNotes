{"abstract":[{"type":"text","text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system."}],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","interfaceLanguage":"swift"},"metadata":{"title":"Eliminate data races using Swift Concurrency","modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC22","role":"sampleCode"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Task-isolation","type":"heading","text":"Task isolation","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Task isolation ensures that data across tasks is not shared in a manner that can introduce data races"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Task","type":"heading","text":"Task","level":3},{"items":[{"content":[{"inlineContent":[{"text":"A task performs a specific job sequentially from start to finish","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Tasks are asynchronous, and their work can be suspended any number of times at ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" operations","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A task is self-contained - has its own resources and can operate by itself, independently of any other task","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Communications-between-tasks","type":"heading","text":"Communications between tasks","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"done by passing objects across tasks (a task passes an object by returning a value at the end of its body)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"no problem if the shared\/transferred data is value type","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"can (potentially) cause data races if the data is reference type","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Sendable","type":"heading","text":"Sendable","level":4},{"inlineContent":[{"text":"Swift helps us telling us when it’s safe to share our data across tasks via the ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" protocol:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Sendable","type":"codeVoice"},{"text":" descibes types that can cross an isolation domain (like tasks), without making data races","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"data races checks happen while building by the Swift compiler"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"For tasks, the actual "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" constraint comes from their definition: "},{"type":"codeVoice","code":"Task"},{"type":"text","text":"s return type must conform to "},{"type":"codeVoice","code":"Sendable"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You should use ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" constraints where you have generic parameters whose values will be passed across different isolation domains","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformances can be inferred by the Swift compiler for non-public types (but you can add "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance explicitly)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes (reference types) can conform to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" only under very narrow circumstances"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"e.g., when a "},{"code":"final","type":"codeVoice"},{"type":"text","text":" class only has immutable storage"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"for reference types that do their own internal synchronization (e.g., via locks), you can use "},{"code":"@unchecked Sendable","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["class ConcurrentCache<Key: Hashable & Sendable, Value: Sendable>: @unchecked Sendable {","  var lock: NSLock","  var storage: [Key: Value]","","  \/\/ ...","}"]},{"anchor":"Actor-isolation","type":"heading","text":"Actor isolation","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Actor"},{"text":"s provide a way to isolate state that can be accessed by different tasks, in a coordinated manner that eliminates data races","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"an "},{"code":"Actor","type":"codeVoice"},{"type":"text","text":" is self-contained - has its own resources and can operate by itself, independently of any other Actor"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"in order to execute code (or read values) defined in an actor, you need to use a task","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"only one task can execute on an actor at a time"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"entering into an actor is a potential suspension point, as there might be already another task running on it, and even other tasks waiting to enter into that specific actor"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"the same rules for communications across tasks are true for communication between tasks and actors and between actors","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"said in other words, actors rely on ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":", too","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Actor"},{"type":"text","text":"s are reference types, but isolate all of their properties and code to prevent concurrent access"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"all "},{"type":"codeVoice","code":"Actor"},{"type":"text","text":" types are implicitly "},{"type":"codeVoice","code":"Sendable"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"all Actor instance definitions (properties and functions) are isolated"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a child\/sub task inherits all attributes of the parent task, therefore, if a task is generated directly by an actor function, said task inherits actor isolation from its context (thus will be able to access the actor properties and call other functions without "},{"type":"codeVoice","code":"await"},{"type":"text","text":"ing on them"}]}]},{"content":[{"inlineContent":[{"text":"the same is not true for detached tasks, which do not inherit traits from that task’s originating context","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Actor properties and functions marked as "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" are considered to be outside the actor"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"anchor":"MainActor","type":"heading","text":"@MainActor","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"represents main thread","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"use it when you need to update UI in your app"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"use the "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" attribute to indicate that the code must run on the main actor:"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["@MainActor func updateView() { … }","","Task { @MainActor in","  \/\/ update UI here","}"]},{"items":[{"content":[{"inlineContent":[{"text":"the Swift compiler will guarantee that main-actor-isolated code will only be executed on the main thread","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"@MainActor","type":"codeVoice"},{"text":" can also be applied to types, in which case the instances of those types will be isolated to the main actor","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"properties will be only accessible while on the main actor","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"methods are isolated to the main actor, unless marked ","type":"text"},{"type":"codeVoice","code":"nonisolated"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["@MainActor","class ChickenValley: Sendable {","  var flock: [Chicken]","  var food: [Pineapple]","","  func advanceTime() {","    for chicken in flock {","      chicken.eat(from: &food)","    }","  }","}"]},{"anchor":"Atomicity","type":"heading","text":"Atomicity","level":2},{"items":[{"content":[{"inlineContent":[{"text":"state can change across ","type":"text"},{"code":"awaits","type":"codeVoice"},{"text":" calls","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"if you’re not careful, you can end up with a high-level data race where the program is in an unexpected state, even though the data is not corrupted"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"when writing your actor, think in terms of synchronous, transactional operations that can be interleaved in any way"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"keep async actor operations simple"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Ordering","type":"heading","text":"Ordering","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift Concurrency provides tools for ordering operations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"actors do no guaranteed FIFO processing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"actors execute the highest-priority work first"}]},{"items":[{"content":[{"inlineContent":[{"text":"eliminates priority inversions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"diffent than serial Dispatch queues, which execute in a strictly FIFO order","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Tools for ordering:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Task"},{"text":"s","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"AsyncStream","type":"codeVoice"},{"text":"s deliver elements in order:","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["for await event in eventStream {","  await process(event)","}"]},{"anchor":"Written-By","type":"heading","text":"Written By","level":2},{"numberOfColumns":5,"type":"row","columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}]},{"size":4,"content":[{"level":3,"anchor":"Federico-Zanetello","text":"Federico Zanetello","type":"heading"},{"inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"type":"reference","isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110356-Meet-distributed-actors-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"],"style":"list","type":"links"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc22\/110351","overridingTitle":"Watch Video (28 min)"}},"references":{"WWDC22-Icon.png":{"identifier":"WWDC22-Icon.png","variants":[{"url":"\/images\/WWDC22-Icon.png","traits":["1x","light"]}],"alt":null,"type":"image"},"zntfdr":{"identifier":"zntfdr","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"alt":"Profile image of Federico Zanetello","type":"image"},"https://zntfdr.dev":{"title":"Blog","titleInlineContent":[{"type":"text","text":"Blog"}],"identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev","type":"link"},"https://developer.apple.com/wwdc22/110351":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/110351","url":"https:\/\/developer.apple.com\/wwdc22\/110351","checksum":null,"type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","url":"\/documentation\/wwdcnotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","abstract":[{"text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more.","type":"text"}],"title":"Federico Zanetello (332 notes)","kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10095-Use-asyncawait-with-URLSession":{"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10095-use-asyncawait-with-urlsession","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10095-Use-asyncawait-with-URLSession","kind":"article","abstract":[{"type":"text","text":"Discover how you can adopt Swift concurrency in URLSession using async\/await and AsyncSequence, and how you can apply Swift concurrency concepts to improve your networking code."}],"title":"Use async\/await with URLSession"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"kind":"article","title":"Explore structured concurrency in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}],"type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"kind":"article","title":"Swift concurrency: Behind the scenes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","abstract":[{"type":"text","text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps."}],"type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","title":"WWDC22","url":"\/documentation\/wwdcnotes\/wwdc22","images":[{"type":"icon","identifier":"WWDC22-Icon.png"},{"type":"card","identifier":"WWDC22.jpeg"}],"role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"WeatherKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"ScreenCaptureKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"Swift Regex","type":"codeVoice"},{"type":"text","text":", and more."}]},"https://github.com/zntfdr":{"title":"GitHub","titleInlineContent":[{"type":"text","text":"GitHub"}],"identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr","type":"link"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110354-Whats-new-in-Swift":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","title":"What’s new in Swift","url":"\/documentation\/wwdcnotes\/wwdc22-110354-whats-new-in-swift","role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Join us for an update on Swift. We’ll take you through performance improvements, explore more secure and extensible Swift packages, and share advancements in Swift concurrency. We’ll also introduce you to Swift Regex, better generics, and other tools built into the language to help you write more flexible & expressive code."}]},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"kind":"article","title":"Protect mutable state with Swift actors","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","abstract":[{"type":"text","text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug."}],"type":"topic","role":"sampleCode"},"WWDC22.jpeg":{"identifier":"WWDC22.jpeg","variants":[{"url":"\/images\/WWDC22.jpeg","traits":["1x","light"]}],"alt":null,"type":"image"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","variants":[{"url":"\/images\/zntfdr.jpeg","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10068-Whats-new-in-UIKit":{"title":"What’s new in UIKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","type":"topic","kind":"article","abstract":[{"text":"Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We’ll take you through UI refinements, productivity updates, API enhancements, and more. We’ll also help you explore improvements to performance, security, and privacy.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-10068-whats-new-in-uikit","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10019-Discover-concurrency-in-SwiftUI":{"kind":"article","title":"Discover concurrency in SwiftUI","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10019-Discover-concurrency-in-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc21-10019-discover-concurrency-in-swiftui","abstract":[{"type":"text","text":"Discover how you can use Swift’s concurrency features to build even better SwiftUI apps. We’ll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we’ll take you through the process of enabling additional asynchronous flows in your custom views."}],"type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"title":"Meet async\/await in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","type":"topic","abstract":[{"text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions.","type":"text"}],"kind":"article","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110356-Meet-distributed-actors-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc22-110356-meet-distributed-actors-in-swift","kind":"article","title":"Meet distributed actors in Swift","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110356-Meet-distributed-actors-in-Swift","type":"topic","abstract":[{"type":"text","text":"Discover distributed actors — an extension of Swift’s actor model that simplifies development of distributed systems. We’ll explore how distributed actor isolation and location transparency can help you avoid the accidental complexity of networking, serialization, and other transport concerns when working with distributed apps and systems."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10194-Swift-concurrency-Update-a-sample-app":{"kind":"article","title":"Swift concurrency: Update a sample app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","url":"\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app","abstract":[{"type":"text","text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We’ll also explore techniques for migrating existing code to Swift concurrency over time."}],"type":"topic","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"abstract":[{"text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","type":"topic","kind":"article","title":"Visualize and optimize Swift concurrency","role":"sampleCode"}}}