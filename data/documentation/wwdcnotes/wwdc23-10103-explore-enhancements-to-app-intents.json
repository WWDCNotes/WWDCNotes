{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"Speaker: Roman Efimov, Shortcuts Engineering","type":"text"}],"type":"paragraph"},{"text":"Widgets","level":2,"type":"heading","anchor":"Widgets"},{"inlineContent":[{"text":"New options to connect App Intents with Widgets through interactivity and configuration.","type":"text"}],"type":"paragraph"},{"text":"Widget configuration","level":3,"type":"heading","anchor":"Widget-configuration"},{"inlineContent":[{"text":"The options found on the back of a configurable widget are called Parameters, and they’re added with Intents. Previously Intents had to be declared in an Intent Definition file, but now they can be declared directly in the Widget extension code.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the new ","type":"text"},{"code":"AppIntentConfiguration","type":"codeVoice"},{"text":" WidgetConfiguration type, instead of ","type":"text"},{"code":"IntentConfiguration","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a type that conforms to the "},{"type":"codeVoice","code":"WidgetConfigurationIntent"},{"type":"text","text":" protocol"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" to add widget configurations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["\/\/ App Intents widget configuration","@main","struct UpNextWidget: Widget {","\tlet kind: String = \"UpNext\"","\t\tvar body: some WidgetConfiguration {","\t\t\tAppIntentConfiguration( \/\/ NEW, instead of IntentConfiguration()","\t\t\tkind: kind, intent: UpNextConfiguration.self,","\t\t\tprovider: Provider()","\t\t) { entry in","\t\t\tUpNextWidgetView(entry: entry)","\t\t}","\t}","}","","struct UpNextConfiguration: AppIntent, WidgetConfigurationIntent {","\tstatic var title: LocalizedStringResource = \"Up Next\"","\t","\t@Parameter(title: \"Example\")","\tvar example: Example","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Providing dynamic options can be done right here too, instead of creating a separate Intents extension. Queries and dynamic option providers can be implemented.","type":"text"}],"type":"paragraph"},{"code":["struct ExampleQuery: EntityStringQuery {","\tfunc entities(","\t\tmatching string: String","\t) async throws -> [Example] { ... }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"See more in the session “Dive into App Intents” from WWDC22.","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"text":"Migrating widgets from SiriKit to App Intents","level":3,"type":"heading","anchor":"Migrating-widgets-from-SiriKit-to-App-Intents"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Support latest and previous OS","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Enable continued use of existing widgets","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Remove SiriKit Intent Definition file (do not do this if you plan to support previous OS versions)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Migration is automatic. In the Intent definition file, go to the SiriKit widget configuration Intent, and click “Convert to App Intent…”. Make sure to test.","type":"text"}],"type":"paragraph"},{"text":"Interactive widgets","level":3,"type":"heading","anchor":"Interactive-widgets"},{"inlineContent":[{"text":"Widgets now support button taps and toggles. Swift UI buttons and toggles now support intents.","type":"text"}],"type":"paragraph"},{"code":["struct SetAlarm: AppIntent {","\tstatic var title: LocalizedStringResource = \"Set Alarm\"","\t","\t@Parameter (title: \"Bus Stop\")","\tvar busStop: BusStop","\t","\t\/\/ Other parameters...","\t","\tfunc perform() async throws -> some IntentResult {","\t\tAlarmManager.shared.addAlarm(forTime: arrivalTime)","\t\treturn .result()","\t}","}","","struct NextBusView: View {","\tvar body: some View {","\t\tButton(intent: SetAlarm(arrivalTime: arrivalTime)) {","\t\t\tText(arrivalTime.asString)","\t\t}","\t}","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"AppIntents are also available outside of Widgets, in regular SwiftUI apps. App intents can serve as a configuration, so sharing code can reduce redundancy and ensure consistent behavior. WidgetConfigurationIntents can also serve as Shortcuts actions."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"See more in the session “Bring your widget to life” from WWDC23."}],"type":"emphasis"}],"type":"paragraph"},{"text":"Dynamic options","level":3,"type":"heading","anchor":"Dynamic-options"},{"inlineContent":[{"text":"Conform to ","type":"text"},{"code":"DynamicOptionsProvider","type":"codeVoice"},{"text":" or the ","type":"text"},{"code":"EntityQuery","type":"codeVoice"},{"text":" protocols to provide the available values of a parameter in the App Intent.","type":"text"}],"type":"paragraph"},{"code":["struct BusStopQuery: EntityStringQuery {","\tfunc entities(","\t\tmatching string: String","\t) async throws -> [BusStop] {","\t\tBusStop.allStops.filter {","\t\t\t$0. name .contains(string)","\t\t}","\t}","\t","\tfunc entities(","\t\tfor identifiers: [BusStop.ID]","\t) async throws -> [BusStop] {","\t\tBusStop.allStops.filter {","\t\t\tidentifiers.contains($0.id)","\t\t}","\t}","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Conditionally show options based on other parameter with "},{"code":"@IntentParameterDependency","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct BusRouteQuery: EntityQuery {","\t@IntentParameterDependency<ShowNextBus>(","\t\t\\.$busStop","\t)","\tvar showNextBus","\t","\tfunc suggestedEntities() async throws -> [Route] {","\t\tguard let showNextBus else { return [] }","\t\treturn Route.allRoutes.filter {","\t\t\t$0.busStops.contains(showNextBus.busStop)","\t\t}","\t}","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Limit the size of array parameters for different widget sizes.","type":"text"}],"type":"paragraph"},{"code":["struct ShowFavoriteRoutes: AppIntent, WidgetConfigurationIntent {","\t\/\/ Pass an int for a fixed array size","\t@Parameter(title: \"Favorite Routes\", size: 3)","\tvar routes: [Route]","\t","\t\/\/ Or pass an array for multiple widget sizes","\t@Parameter(title: \"Favorite Routes\", size: [","\t\t.systemSmall: 3, .systemLarge: 5","\t])","\tvar routes: [Route]","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Define which parameters are shown, and when, with "},{"type":"codeVoice","code":"ParameterSummary"},{"type":"text","text":".  Use "},{"type":"codeVoice","code":"When"},{"type":"text","text":" to display conditionally based on widget size."}],"type":"paragraph"},{"code":["struct ShowFavoriteRoutes: AppIntent, WidgetConfigurationIntent {","\t@Parameter(title: \"Favorite routes\", size: 3)","\tvar routes: [Route]","\t","\t@Parameter(title: \"Include weather info\")","\tvar includeWeatherInfo: Bool?","\t","\tstatic var parameterSummary: some ParameterSummary {","\t\tWhen(widgetFamily: .equalTo, .systemLarge) {","\t\t\tSummary(\"Show favorite \\(\\.$routes)\") {","\t\t\t\t\\.$includeWeatherInfo","\t\t\t}","\t\t} otherwise: {","\t\t\tSummary(\"Show favorite \\(\\.$routes)\")","\t\t}","\t}","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this case, array "},{"code":"routes","type":"codeVoice"},{"type":"text","text":"and toggle "},{"code":"includeWeatherInfo","type":"codeVoice"},{"type":"text","text":" are shown, in that order, on a large widget, and only "},{"code":"routes","type":"codeVoice"},{"type":"text","text":" is shown on small widgets."}],"type":"paragraph"},{"text":"Continue user activity","level":3,"type":"heading","anchor":"Continue-user-activity"},{"inlineContent":[{"text":"Show relevant information when the user taps on the widget.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Call the ","type":"text"},{"code":"widgetConfigurationIntent","type":"codeVoice"},{"text":" on the user activity to get the configuration Intent.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use that configuration data to display relevant information in the app."}]}]}],"type":"unorderedList"},{"code":["WindowGroup {","\tContentView()","\t\t.onContinueUserActivity(\"NextBus\") { userActivity in","\t\t\tlet configuration: Configuration? =","\t\t\t\tuserActivity.widgetConfigurationIntent()","\t\t\t","\t\t\t\/\/ Navigate to the corresponding view","\t\t\tnavigate(","\t\t\t\ttoView: .busStopView,","\t\t\t\tbusStop: configuration?.busStop,","\t\t\t\troute: configuration?.route","\t\t\t)","\t\t}","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"RelevantContext"},{"type":"text","text":" APIs to suggest when to display the widget in a Smart Stack. The new "},{"type":"codeVoice","code":"RelevantIntentManager"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RelevantIntent"},{"type":"text","text":" are more Swift-friendly and work seamlessly with App Intents."}],"type":"paragraph"},{"code":["let relevantIntents = gameTimes.map {","\tRelevantIntent(SportsWidgetIntent(), \"SportsWidget\", .date(from: $0.start, to: $0.end))","}","RelevantIntentManager.shared.updateRelevantIntents(relevantIntents)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"See more about Relevance in “Build widgets for the Smart Stack on Apple Watch” from WWDC23."}],"type":"emphasis"}],"type":"paragraph"},{"text":"Developer experience","level":2,"type":"heading","anchor":"Developer-experience"},{"text":"Framework support","level":3,"type":"heading","anchor":"Framework-support"},{"inlineContent":[{"text":"In iOS 17 and Xcode 15, frameworks can now expose App Intents. This reduces code duplication. The ","type":"text"},{"type":"codeVoice","code":"AppIntentsPackage"},{"text":" APIs can recursively import dependencies. By conforming types to the AppIntentsPackage protocol, both your app and frameworks can re-export metadata from other frameworks.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example shown connects different frameworks in various snippets. Please watch from 15:45 to 17:00 for more."}],"type":"paragraph"},{"inlineContent":[{"code":"AppShortcutsProvider","type":"codeVoice"},{"type":"text","text":" and App Shortcuts can now be created in App Intents extensions, previously they could only be defined in the main app bundle. This helps code stay modular, and helps performance since the app doesn’t have to launch in the background every time an App Shortcut runs."}],"type":"paragraph"},{"text":"Static metadata extraction","level":3,"type":"heading","anchor":"Static-metadata-extraction"},{"inlineContent":[{"type":"text","text":"All these features rely on static metadata extraction, which has been significantly improved in Xcode 15. Errors are shown directly during this process, so problems can be fixed faster."}],"type":"paragraph"},{"text":"Continue execution","level":3,"type":"heading","anchor":"Continue-execution"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ForegroundContinuableIntent"},{"type":"text","text":" protocol continues the execution of an Intent even if that Intent was previously running in the background."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"needsToContinueInForegroundError","type":"codeVoice"},{"text":" to stop the Intent execution and require action to continue.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"requestToContinueInForeground","type":"codeVoice"},{"type":"text","text":" to get a result from the person and use it to complete the App Intent’s perform."}]}]}],"type":"unorderedList"},{"text":"Apple Pay","level":3,"type":"heading","anchor":"Apple-Pay"},{"inlineContent":[{"type":"text","text":"Initiate an Apple Pay transaction directly in the perform method with "},{"type":"codeVoice","code":"PKPaymentRequest"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PKPaymentAuthorizationController"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct RequestPayment: AppIntent {","\tstatic var title: LocalizedStringResource = \"Request Payment\"","","\tfunc perform() async throws -> some IntentResult {","\t\tlet paymentRequest = PKPaymentRequest()","\t\t\/\/ Configure your payment request","\t\tlet controller = PKPaymentAuthorizationController(","\t\t\tpaymentRequest: paymentRequest","\t\t)","\t\tguard await controller.present() else {","\t\t\treturn .result(dialog: \"Unable to process payment\")","\t\t}","\t\treturn .result(dialog: \"Payment Processed\")","\t}","}"],"syntax":"swift","type":"codeListing"},{"text":"Shortcuts app integration","level":2,"type":"heading","anchor":"Shortcuts-app-integration"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"App Intents have been used to build Shortcuts actions, for use with Siri and the Shortcuts app; as well as Focus Filters and the Action button on Apple Watch Ultra. In iOS 17, are now integrated with Interactive Live Activities, Widget Configuration and Interactivity, and SwiftUI."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"App Shortcuts now include support for Spotlight Top Hits and Automations.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With all this integration, it’s important to make sure parameter summaries are well written."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If an App Intent is only for use inside an app or widget, set ","type":"text"},{"code":"isDiscoverable","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" to hide it elsewhere.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"For App Intents that run more slowly, make them conform to the ","type":"text"},{"code":"ProgressReportingIntent","type":"codeVoice"},{"text":" protocol. Update the progress by setting ","type":"text"},{"code":"progress.totalUnitCount","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"progress.completedUnitCount","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"EntityPropertyQuery","type":"codeVoice"},{"type":"text","text":" is joined by the new "},{"code":"EnumerableEntityQuery","type":"codeVoice"},{"type":"text","text":" for integrating Find actions in Shortcuts. To use "},{"code":"EnumerableEntityQuery","type":"codeVoice"},{"type":"text","text":", return all possible values for the entity in the "},{"code":"allEntities()","type":"codeVoice"},{"type":"text","text":" method, and Shortcuts and App Intents generates find actions automatically. Prefer "},{"code":"EnumerableEntityQuery","type":"codeVoice"},{"type":"text","text":" when the number of entities is small. When dealing with a large number of entities, use "},{"code":"EntityPropertyQuery","type":"codeVoice"},{"type":"text","text":", and run the search on behalf of the user."}]}]},{"content":[{"inlineContent":[{"code":"IntentDescription","type":"codeVoice"},{"type":"text","text":", which is used to show action information in the Shortcuts UI, now has a property called "},{"code":"resultValueName","type":"codeVoice"},{"type":"text","text":" so we can adda more descriptive name for the output of the action."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"See more in the session “Spotlight your app with App Shortcuts” from WWDC23."}]}],"type":"paragraph"},{"text":"Written By","level":2,"type":"heading","anchor":"Written-By"},{"columns":[{"size":1,"content":[{"inlineContent":[{"identifier":"Cecile-Lebleu","type":"image"}],"type":"paragraph"}]},{"size":4,"content":[{"text":"Cécile Lebleu","level":3,"type":"heading","anchor":"C%C3%A9cile-Lebleu"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Cecile-Lebleu","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"overridingTitle":"Contributed Notes"},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/Cecile-Lebleu","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/cecilelebleu.com","isActive":true}]}]}],"type":"row","numberOfColumns":5},{"type":"thematicBreak"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"text":"Related Sessions","level":2,"type":"heading","anchor":"Related-Sessions"},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10028-Bring-widgets-to-life","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10193-Design-Shortcuts-for-Spotlight"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"sampleCodeDownload":{"action":{"overridingTitle":"Watch Video (29 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10103","type":"reference","isActive":true},"kind":"sampleDownload"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10103-explore-enhancements-to-app-intents"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Explore enhancements to App Intents","roleHeading":"WWDC23","role":"sampleCode","modules":[{"name":"WWDC Notes"}]},"abstract":[{"text":"Bring your widgets to life with App Intents! Explore the latest updates and learn how you can take advantage of dynamic options and user interactivity to build better experiences for your App Shortcuts. We’ll share how you can integrate with Apple Pay, structure your code more efficiently, and take your Shortcuts app integration to the next level.","type":"text"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10103-Explore-enhancements-to-App-Intents"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"references":{"doc://WWDCNotes/documentation/WWDCNotes/Cecile-Lebleu":{"abstract":[{"text":"Designer turned developer.","type":"text"}],"title":"Cécile Lebleu (3 notes)","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/Cecile-Lebleu","url":"\/documentation\/wwdcnotes\/cecile-lebleu","images":[{"type":"card","identifier":"Cecile-Lebleu.jpeg"},{"type":"icon","identifier":"Cecile-Lebleu.jpeg"}],"role":"sampleCode","type":"topic"},"WWDC23-Icon.png":{"identifier":"WWDC23-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23-Icon.png"}],"alt":null,"type":"image"},"Cecile-Lebleu":{"alt":"Profile image of Cécile Lebleu","identifier":"Cecile-Lebleu","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/Cecile-Lebleu.jpeg"}]},"https://developer.apple.com/wwdc23/10103":{"type":"download","checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc23\/10103","url":"https:\/\/developer.apple.com\/wwdc23\/10103"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link"},"WWDC23.jpeg":{"type":"image","alt":null,"identifier":"WWDC23.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC23.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts":{"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10102-Spotlight-your-app-with-App-Shortcuts","abstract":[{"text":"Discover how to use App Shortcuts to surface frequently used features from your app in Spotlight or through Siri. Find out how to configure search results for your app and learn best practices for creating great App Shortcuts. We’ll also show you how to build great visual and voice experiences and extend to other Apple devices like Apple Watch and HomePod.","type":"text"}],"title":"Spotlight your app with App Shortcuts","type":"topic","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10102-spotlight-your-app-with-app-shortcuts"},"https://github.com/Cecile-Lebleu":{"title":"GitHub","url":"https:\/\/github.com\/Cecile-Lebleu","identifier":"https:\/\/github.com\/Cecile-Lebleu","type":"link","titleInlineContent":[{"text":"GitHub","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10028-Bring-widgets-to-life":{"title":"Bring widgets to life","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10028-Bring-widgets-to-life","role":"sampleCode","type":"topic","kind":"article","abstract":[{"text":"Learn how to make animated and interactive widgets for your apps and games. We’ll show you how to tweak animations for entry transitions and add interactivity using SwiftUI Button and Toggle so that you can create powerful moments right from the Home Screen and Lock Screen.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10028-bring-widgets-to-life"},"Cecile-Lebleu.jpeg":{"identifier":"Cecile-Lebleu.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/Cecile-Lebleu.jpeg"}],"alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10193-Design-Shortcuts-for-Spotlight":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10193-Design-Shortcuts-for-Spotlight","title":"Design Shortcuts for Spotlight","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10193-design-shortcuts-for-spotlight","abstract":[{"type":"text","text":"Learn about the latest updates to the visual language of App Shortcuts and find out how to design your shortcut to appear as a top hit in Spotlight. We’ll share how shortcuts can appear on iOS or iPadOS, and show you how to customize the visual appearance of a shortcut, personalize its order, select its correct behavior, and increase discoverability."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23","kind":"article","role":"collectionGroup","images":[{"identifier":"WWDC23-Icon.png","type":"icon"},{"identifier":"WWDC23.jpeg","type":"card"}],"title":"WWDC23","abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"SwiftData"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Observation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"StoreKit"},{"text":" views, and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","url":"\/documentation\/wwdcnotes","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"type":"topic","title":"WWDC Notes"},"WWDCNotes.png":{"type":"image","alt":null,"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}]},"https://cecilelebleu.com":{"title":"Blog","url":"https:\/\/cecilelebleu.com","identifier":"https:\/\/cecilelebleu.com","type":"link","titleInlineContent":[{"text":"Blog","type":"text"}]}}}