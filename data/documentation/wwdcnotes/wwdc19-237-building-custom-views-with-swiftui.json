{"kind":"article","primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"View"},{"type":"text","text":" always has the size of its body"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"rootView","type":"codeVoice"},{"text":" has the dimensions of the device minus the safe area insets.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The top layer of any view with a body is always what we call "},{"inlineContent":[{"type":"text","text":"layout neutral"}],"type":"strong"},{"type":"text","text":". Because its view bounds are defined by the bounds of its body, regardless of what’s "},{"inlineContent":[{"text":"above","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"anchor":"Layout-Process","type":"heading","text":"Layout Process","level":2},{"inlineContent":[{"type":"text","text":"Three steps:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The root view offers our view a proposed size (the safe layout area)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The view answers with the size it would like"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The root view, know with its child view size knowledge, put the child somewhere (by default at the center of its size, both vertically and horizontally)","type":"text"}]}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"In SwiftUI there’s no way to force a size on the view’s child: the parent has to respect that choice."}],"type":"paragraph"},{"inlineContent":[{"text":"In short:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Parent proposes a size for child"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Child chooses its own size"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Parent places child in parent’s coordinate space"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"(Bonus) SwiftUI rounds coordinates to the nearest pixel","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"anchor":"Views-sizes","type":"heading","text":"Views sizes","level":2},{"inlineContent":[{"text":"Since every view controls its own size, when we build a view, we get to decide how and when it resizes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The bounds of a "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" view never stretch beyond the height and width of its displayed lines."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When we need to fight for space, especially in stack views, we can raise the layout priority by setting the view "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278584-layoutpriority"},{"type":"text","text":" ("},{"type":"codeVoice","code":"0"},{"type":"text","text":" by default)."}],"type":"paragraph"},{"anchor":"Custom-Alignment","type":"heading","text":"Custom Alignment","level":2},{"inlineContent":[{"text":"Need of an alignment between views of different stacks?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We can achieve so by creating an extension of ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/verticalalignment","type":"reference"},{"text":" (or any other alignment), and then use that as our ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278504-alignmentguide","type":"reference"},{"text":" in the interested views.","type":"text"}],"type":"paragraph"},{"anchor":"Graphics","type":"heading","text":"Graphics","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"SwiftUI has some built in shapes ("},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/circle","isActive":true,"type":"reference"},{"type":"text","text":" for example) that conform to the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape","isActive":true,"type":"reference"},{"type":"text","text":" protocol and have their own modifiers, since all shapes are effectively rendered as "},{"type":"codeVoice","code":"View"},{"type":"text","text":"s, modifiers of shapes can be applied to views and vice versa."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/styling","type":"reference","isActive":true},{"type":"text","text":" is used to convert shapes into views, available predefined shapes are:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/rectangle"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/roundedrectangle","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"overridingTitle":"Circle","type":"reference","overridingTitleInlineContent":[{"code":"Circle","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/circle","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/capsule"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/ellipse","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/gradient","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can create custom shapes by conforming to the "},{"overridingTitle":"Shape","type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"Shape"}]},{"type":"text","text":" protocol and implementing the function "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape\/3274626-path","isActive":true},{"type":"text","text":" that draws a path representing the desired shape."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"By implementing the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/animatable\/3046497-animatabledata","type":"reference","isActive":true},{"text":" property in our custom shapes, we can tell SwiftUI how this shape can be interpolated for animations.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When a view appears\/disappears, the default transition animation is to fade-in\/fade-out. We can customize these transitions by creating a custom "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/viewmodifier","isActive":true},{"type":"text","text":" and specifying how the view should change between the "},{"type":"emphasis","inlineContent":[{"text":"end states","type":"text"}]},{"type":"text","text":" of the animation, then including that "},{"overridingTitle":"ViewModifier","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"ViewModifier"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/viewmodifier","isActive":true},{"type":"text","text":" in an "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/anytransition\/3076193-asymmetric","isActive":true},{"type":"text","text":" transition."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI "},{"type":"reference","isActive":true,"overridingTitle":"ViewModifier","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/viewmodifier","overridingTitleInlineContent":[{"code":"ViewModifier","type":"codeVoice"}]},{"type":"text","text":"s are "},{"type":"codeVoice","code":"View"},{"type":"text","text":"s defined as a function of some other view. This can be clearly seen when creating a custom "},{"type":"codeVoice","code":"ViewModifier"},{"type":"text","text":" where we will have to implement a "},{"type":"codeVoice","code":"body"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function"}]},{"type":"text","text":", which takes a generic "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" as a parameter (which is constrained to conform to "},{"type":"codeVoice","code":"View"},{"type":"text","text":") and returns "},{"type":"codeVoice","code":"some View"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"By default, SwiftUI renders all views natively as either a "},{"type":"codeVoice","code":"UIView"},{"type":"text","text":" or an "},{"type":"codeVoice","code":"NSView"},{"type":"text","text":" (based on the platform it’s rendering for), and that’s typically what we want for normal controls like "},{"type":"codeVoice","code":"Button"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"TextField"},{"type":"text","text":"s. However, if we need better rendering performance for many views, then we can flatten our views inside a "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278548-drawinggroup","isActive":true},{"type":"text","text":", which is a special way of rendering graphics, where our view hierarchy is flatten into a single "},{"type":"codeVoice","code":"UIView"},{"type":"text","text":" or "},{"type":"codeVoice","code":"NSView"},{"type":"text","text":", which renders all our views using Metal."}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Written-By","type":"heading","text":"Written By","level":2},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"anchor":"Federico-Zanetello","type":"heading","level":3,"text":"Federico Zanetello"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"inlineContent":[{"type":"image","identifier":"ATahhan"}],"type":"paragraph"}],"size":1},{"content":[{"anchor":"Ammar-AlTahhan","level":3,"type":"heading","text":"Ammar AlTahhan"},{"inlineContent":[{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/ATahhan","type":"reference","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/ATahhan","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/","type":"reference","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true,"type":"reference"}],"type":"paragraph"},{"anchor":"Related-Sessions","type":"heading","text":"Related Sessions","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10119-Introduction-to-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10207-SF-Symbols-2","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-204-Introducing-SwiftUI-Building-Your-First-App","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-219-SwiftUI-on-watchOS","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-231-Integrating-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-233-Mastering-Xcode-Previews","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-238-Accessibility-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-240-SwiftUI-On-All-Devices","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design"],"type":"links"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Learn how to build custom views and controls in SwiftUI with advanced composition, layout, graphics, and animation. See a demo of a high performance, animatable control and watch it made step by step in code. Gain a deeper understanding of the layout system of SwiftUI."}],"sections":[],"sampleCodeDownload":{"action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc19\/237","overridingTitle":"Watch Video (40 min)"},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc19-237-building-custom-views-with-swiftui"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-237-Building-Custom-Views-with-SwiftUI"},"metadata":{"role":"sampleCode","roleHeading":"WWDC19","modules":[{"name":"WWDC Notes"}],"title":"Building Custom Views with SwiftUI"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19"]]},"references":{"https://developer.apple.com/documentation/swiftui/roundedrectangle":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/roundedrectangle","title":"RoundedRectangle","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/roundedrectangle","type":"link","titleInlineContent":[{"code":"RoundedRectangle","type":"codeVoice"}]},"zntfdr.jpeg":{"identifier":"zntfdr.jpeg","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-238-Accessibility-in-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc19-238-accessibility-in-swiftui","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Making your app accessible is critical, but just as important is designing a fantastic accessibility experience. Learn what makes a great experience and how to make your app understandable, navigable, and interactable. SwiftUI builds accessibility into your app for you! Discover how much you get with no extra adoption, like accessible images and controls. Identify where you can add supplemental accessibility information with the new SwiftUI Accessibility API, which gives you the tools to add information to elements such as labels, values, and hints."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-238-Accessibility-in-SwiftUI","kind":"article","title":"Accessibility in SwiftUI"},"WWDC19.jpeg":{"identifier":"WWDC19.jpeg","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDC19.jpeg","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/ATahhan":{"role":"sampleCode","images":[{"identifier":"ATahhan.jpeg","type":"card"},{"identifier":"ATahhan.jpeg","type":"icon"}],"url":"\/documentation\/wwdcnotes\/atahhan","title":"Ammar AlTahhan (12 notes)","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/ATahhan","kind":"article","abstract":[{"text":"Software Engineer","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-240-SwiftUI-On-All-Devices":{"url":"\/documentation\/wwdcnotes\/wwdc19-240-swiftui-on-all-devices","type":"topic","role":"sampleCode","abstract":[{"text":"Once you’ve learned the basics of SwiftUI, you’ve learned what you need to know to use SwiftUI anywhere. You can use the same SwiftUI skills for making an iOS app as you would for making an app on watchOS, tvOS or macOS. We’ll cover the basics, and then dig into more detail about how  SwiftUI can help you make changes to your app on every Apple device. Hear about design principles for each platform and learn about how much code you can share across platforms. See how to incorporate device-specific features and how to make changes in SwiftUI by following along with a starter project, available for download.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-240-SwiftUI-On-All-Devices","kind":"article","title":"SwiftUI On All Devices"},"https://developer.apple.com/documentation/swiftui/ellipse":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/ellipse","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/ellipse","titleInlineContent":[{"type":"codeVoice","code":"Ellipse"}],"type":"link","title":"Ellipse"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-226-Data-Flow-Through-SwiftUI":{"type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"SwiftUI was built from the ground up to let you write beautiful and correct user interfaces free of inconsistencies. Learn how to connect your data as dependencies while keeping the UI fully predictable and error free. Familiarize yourself with SwiftUI’s powerful data flow tools and understand what the best tool is for each situation."}],"url":"\/documentation\/wwdcnotes\/wwdc19-226-data-flow-through-swiftui","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-226-Data-Flow-Through-SwiftUI","title":"Data Flow Through SwiftUI","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10207-SF-Symbols-2":{"kind":"article","role":"sampleCode","abstract":[{"text":"SF Symbols make it easy to adopt high-quality, Apple-designed symbols created to look great with San Francisco, the system font for all Apple platforms. Discover how you can use SF Symbols in AppKit, UIKit, and SwiftUI. Learn how to work with SF Symbols in common design tools and how to use them in code. And we’ll walk you through the latest updates, including additions to the repertoire, alignment improvements, changes with right-to-left localization, and multicolor symbols.","type":"text"}],"type":"topic","url":"\/documentation\/wwdcnotes\/wwdc20-10207-sf-symbols-2","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10207-SF-Symbols-2","title":"SF Symbols 2"},"https://developer.apple.com/documentation/swiftui/capsule":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/capsule","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/capsule","titleInlineContent":[{"type":"codeVoice","code":"Capsule"}],"type":"link","title":"Capsule"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10119-Introduction-to-SwiftUI":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10119-introduction-to-swiftui","title":"Introduction to SwiftUI","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10119-Introduction-to-SwiftUI","abstract":[{"text":"Explore the world of declarative-style programming: Discover how to build a fully-functioning SwiftUI app from scratch as we explain the benefits of writing declarative code and how SwiftUI and Xcode can combine forces to help you build great apps, faster.","type":"text"}],"kind":"article"},"ATahhan":{"identifier":"ATahhan","alt":"Profile image of Ammar AlTahhan","type":"image","variants":[{"url":"\/images\/WWDCNotes\/ATahhan.jpeg","traits":["1x","light"]}]},"https://zntfdr.dev":{"type":"link","identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","url":"https:\/\/zntfdr.dev"},"https://github.com/ATahhan":{"identifier":"https:\/\/github.com\/ATahhan","url":"https:\/\/github.com\/ATahhan","titleInlineContent":[{"text":"GitHub","type":"text"}],"type":"link","title":"GitHub"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-219-SwiftUI-on-watchOS":{"type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"SwiftUI allows a whole new world of possibilities when developing watchOS apps and notifications. From custom animations to providing an intuitive feel with Digital Crown haptics, SwiftUI helps you build exciting and immersive experiences for Apple Watch. See how easy it is to create custom elements with animations, embed gesture-driven animations within notifications, and learn about the enhanced debugging support to make watchOS app development faster than ever."}],"url":"\/documentation\/wwdcnotes\/wwdc19-219-swiftui-on-watchos","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-219-SwiftUI-on-watchOS","title":"SwiftUI on watchOS","kind":"article"},"https://developer.apple.com/documentation/swiftui/shape":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape","titleInlineContent":[{"type":"codeVoice","code":"Shape"}],"type":"link","title":"Shape"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"title":"Federico Zanetello (332 notes)","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","url":"\/documentation\/wwdcnotes\/zntfdr","role":"sampleCode","type":"topic","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}]},"https://developer.apple.com/documentation/swiftui/view/3278504-alignmentguide":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278504-alignmentguide","titleInlineContent":[{"code":".alignmentGuide","type":"codeVoice"}],"title":".alignmentGuide","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278504-alignmentguide"},"https://developer.apple.com/wwdc19/237":{"identifier":"https:\/\/developer.apple.com\/wwdc19\/237","checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc19\/237"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-216-SwiftUI-Essentials":{"url":"\/documentation\/wwdcnotes\/wwdc19-216-swiftui-essentials","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Take your first deep-dive into building an app with SwiftUI. Learn about Views and how they work. From basic controls to sophisticated containers like lists and navigation stacks, SwiftUI enables the creation of great user interfaces, faster and more easily. See how basic controls like Button are both simple yet versatile. Discover how to compose these pieces into larger, full-featured user interfaces that facilitate building great apps with SwiftUI. Build your SwiftUI skills as you learn the essentials of Apple’s new declarative framework."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-216-SwiftUI-Essentials","kind":"article","title":"SwiftUI Essentials"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19":{"title":"WWDC19","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19","url":"\/documentation\/wwdcnotes\/wwdc19","role":"collectionGroup","type":"topic","abstract":[{"text":"Xcode 11, Swift 5.1, iOS 13, macOS 10.15 (Catalina), tvOS 13, watchOS 6.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"type":"codeVoice","code":"Combine"},{"text":", ","type":"text"},{"code":"Core Haptics","type":"codeVoice"},{"type":"text","text":", "},{"code":"Create ML","type":"codeVoice"},{"type":"text","text":", and more."}],"images":[{"type":"icon","identifier":"WWDC19-Icon.png"},{"type":"card","identifier":"WWDC19.jpeg"}]},"https://developer.apple.com/documentation/swiftui/gradient":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/gradient","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/gradient","titleInlineContent":[{"code":"Gradient","type":"codeVoice"},{"text":"s","type":"text"}],"type":"link","title":"Gradients"},"https://github.com/zntfdr":{"identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link","title":"GitHub"},"https://developer.apple.com/documentation/swiftui/view/styling":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/styling","title":"Styling","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/styling","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Styling"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-204-Introducing-SwiftUI-Building-Your-First-App":{"type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"See SwiftUI in action! Watch as engineers from the SwiftUI team build a fully-functioning app from scratch. Understand the philosophy driving this new framework and learn about the benefits of declarative-style programming. Take a look under the hood to understand how SwiftUI operates and learn how SwiftUI and Xcode 11 work together to help you to build great apps, faster."}],"url":"\/documentation\/wwdcnotes\/wwdc19-204-introducing-swiftui-building-your-first-app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-204-Introducing-SwiftUI-Building-Your-First-App","title":"Introducing SwiftUI: Building Your First App","kind":"article"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-231-Integrating-SwiftUI":{"url":"\/documentation\/wwdcnotes\/wwdc19-231-integrating-swiftui","type":"topic","role":"sampleCode","abstract":[{"text":"SwiftUI is designed to integrate with your existing code base on any of Apple’s platforms. Learn how to adopt SwiftUI on any Apple platform by adding SwiftUI views into your app’s hierarchy, leveraging your existing data model and more.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-231-Integrating-SwiftUI","kind":"article","title":"Integrating SwiftUI"},"https://developer.apple.com/documentation/swiftui/verticalalignment":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/verticalalignment","titleInlineContent":[{"code":"VerticalAlignment","type":"codeVoice"}],"title":"VerticalAlignment","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/verticalalignment"},"https://developer.apple.com/documentation/swiftui/view/3278548-drawinggroup":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278548-drawinggroup","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278548-drawinggroup","titleInlineContent":[{"type":"codeVoice","code":"drawingGroup"}],"type":"link","title":"drawingGroup"},"https://developer.apple.com/documentation/swiftui/view/3278584-layoutpriority":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278584-layoutpriority","title":"layoutPriority","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/3278584-layoutpriority","type":"link","titleInlineContent":[{"type":"codeVoice","code":"layoutPriority"}]},"WWDC19-Icon.png":{"type":"image","identifier":"WWDC19-Icon.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC19-Icon.png"}]},"WWDCNotes.png":{"identifier":"WWDCNotes.png","alt":null,"type":"image","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10056-Compose-custom-layouts-with-SwiftUI":{"kind":"article","role":"sampleCode","abstract":[{"type":"text","text":"SwiftUI now offers powerful tools to level up your layouts and arrange views for your app’s interface. We’ll introduce you to the Grid container, which helps you create highly customizable, two-dimensional layouts, and show you how you can use the Layout protocol to build your own containers with completely custom behavior. We’ll also explore how you can create seamless animated transitions between your layout types, and share tips and best practices for creating great interfaces."}],"type":"topic","title":"Compose custom layouts with SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10056-Compose-custom-layouts-with-SwiftUI","url":"\/documentation\/wwdcnotes\/wwdc22-10056-compose-custom-layouts-with-swiftui"},"doc://WWDCNotes/documentation/WWDCNotes":{"type":"topic","role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"url":"\/documentation\/wwdcnotes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","kind":"symbol"},"https://developer.apple.com/documentation/swiftui/anytransition/3076193-asymmetric":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/anytransition\/3076193-asymmetric","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/anytransition\/3076193-asymmetric","titleInlineContent":[{"type":"codeVoice","code":"asymmetric"}],"type":"link","title":"asymmetric"},"https://developer.apple.com/documentation/swiftui/rectangle":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/rectangle","title":"Rectangle","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/rectangle","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Rectangle"}]},"https://developer.apple.com/documentation/swiftui/animatable/3046497-animatabledata":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/animatable\/3046497-animatabledata","titleInlineContent":[{"code":"animatableData","type":"codeVoice"}],"title":"animatableData","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/animatable\/3046497-animatabledata"},"https://developer.apple.com/documentation/swiftui/shape/3274626-path":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape\/3274626-path","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/shape\/3274626-path","titleInlineContent":[{"type":"codeVoice","code":"path(in:)"}],"type":"link","title":"path(in:)"},"https://developer.apple.com/documentation/swiftui/viewmodifier":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/viewmodifier","title":"ViewModifier","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/viewmodifier","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ViewModifier"}]},"zntfdr":{"type":"image","identifier":"zntfdr","alt":"Profile image of Federico Zanetello","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"type":"link","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-415-Modern-Swift-API-Design":{"url":"\/documentation\/wwdcnotes\/wwdc19-415-modern-swift-api-design","type":"topic","role":"sampleCode","abstract":[{"text":"Every programming language has a set of conventions that people come to expect. Learn about the patterns that are common to Swift API design, with examples from new APIs like SwiftUI, Combine, and RealityKit. Whether you’re developing an app as part of a team, or you’re publishing a library for others to use, find out how to use new features of Swift to ensure clarity and correct use of your APIs.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-415-Modern-Swift-API-Design","kind":"article","title":"Modern Swift API Design"},"https://developer.apple.com/documentation/swiftui/circle":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/circle","title":"Circle","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/circle","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Circle"}]},"ATahhan.jpeg":{"type":"image","identifier":"ATahhan.jpeg","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/ATahhan.jpeg"}]},"https://":{"identifier":"https:\/\/","url":"https:\/\/","titleInlineContent":[{"type":"text","text":"Blog"}],"type":"link","title":"Blog"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC19-233-Mastering-Xcode-Previews":{"type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Xcode 11 displays previews of your user interface right in the editor, streamlining the edit-debug-run cycle into a seamless workflow. Learn how previews work, how to optimize the structure of your SwiftUI app for previews, and how to add preview support to your existing views and view controllers."}],"url":"\/documentation\/wwdcnotes\/wwdc19-233-mastering-xcode-previews","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC19-233-Mastering-Xcode-Previews","title":"Mastering Xcode Previews","kind":"article"}}}