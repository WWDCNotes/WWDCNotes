{"sections":[],"kind":"article","primaryContentSections":[{"content":[{"level":2,"text":"Swift Concurrency Recap","anchor":"Swift-Concurrency-Recap","type":"heading"},{"level":3,"text":"`Async\/await`","anchor":"Asyncawait","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"basic syntactic building blocks for concurrent code"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"allow you to create and call functions that can suspend their work in the middle of execution, then resume that work later, without blocking an execution thread"}],"type":"paragraph"}]}]},{"level":3,"text":"`Task`s","anchor":"Tasks","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"basic unit of work in concurrent code"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"execute concurrent code and manage its state and associated data","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"contain local variables"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"handle cancellation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"begin\/suspend execution of async code","type":"text"}]}]}]},{"level":3,"text":"Structured concurrency","anchor":"Structured-concurrency","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"makes it easy to spawn child tasks to run in parallel and wait for them to complete"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ensures that tasks are awaited or automatically canceled if not used"}]}]}]},{"level":3,"text":"`Actor`s","anchor":"Actors","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"coordinate multiple tasks that need to access shared data"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"isolate data from the outside"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"allow only one task at a time to manipulate their internal state, avoiding data races from concurrent mutation","type":"text"}],"type":"paragraph"}]}]},{"level":3,"text":"`Continuation`s","anchor":"Continuations","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"bridge between Swift concurrency and other forms of async code (GCD)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a continuation suspends the current task and provides a callback which resumes the task when called"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"can be used with callback-based async APIs","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Continuation callbacks must be called exactly once"}],"type":"paragraph"}]}]},{"level":2,"text":"Concurrency Optimization","anchor":"Concurrency-Optimization","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Even with Swift concurrency is still possible to write code that misuses concurrency constructs, common issues:","type":"text"}]},{"level":3,"text":"Main actor blocking","anchor":"Main-actor-blocking","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"occurs when a long-running task runs on the main Actor"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"can cause your app to hang","type":"text"}]}]}]},{"level":3,"text":"Actor contention","anchor":"Actor-contention","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"occurs when several tasks attempt to use the same ","type":"text"},{"code":"Actor","type":"codeVoice"},{"text":" simultaneously","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"each task must wait for the Actor to become available"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"the ","type":"text"},{"type":"codeVoice","code":"Actor"},{"text":" serializes execution of those tasks","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"hurt performance by reducing parallel execution","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To fix this, we need make sure that tasks only run on the Actor when they really need exclusive access to the Actor’s data. Everything else should run off of the Actor","type":"text"}],"type":"paragraph"}]}]},{"level":3,"text":"Thread pool exhaustion","anchor":"Thread-pool-exhaustion","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"hurt performance by reducing parallel execution","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"can hurt performance or even deadlock an application"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"happens when a task waits for something via a blocking call, such as blocking file or network IO, or acquiring locks, without suspending","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"this breaks the requirement for tasks to make forward progress, because the task continues to occupy the thread where it’s executing, but it isn’t actually using a CPU core","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"in such situations the concurrency runtime is unable to fully use all CPU cores, and can even cause deadlock","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"make blocking calls outside Swift Concurrency (for example by running it on a Dispatch queue, and bridge it to the concurrency world using continuations)"}],"type":"paragraph"}]}]},{"level":3,"text":"Continuation misuse","anchor":"Continuation-misuse","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"occurs when the continuation callback is called multiple times or never"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"the program will crash or misbehave when the continuation callback is called more than once"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"the task will leak (a.k.a. wait forever) if the callback is never called","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The new Swift Concurrency instrument helps catching these problems in your app.","type":"text"}]},{"level":2,"text":"Written By","anchor":"Written-By","type":"heading"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"type":"heading","level":3,"text":"Federico Zanetello","anchor":"Federico-Zanetello"},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}]}],"size":4}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"level":2,"text":"Related Sessions","anchor":"Related-Sessions","type":"heading"},{"type":"links","style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22"]]},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"WWDC22","modules":[{"name":"WWDC Notes"}],"title":"Visualize and optimize Swift concurrency","role":"sampleCode"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency"]}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/developer.apple.com\/wwdc22\/110350","overridingTitle":"Watch Video (24 min)","isActive":true,"type":"reference"},"kind":"sampleDownload"},"abstract":[{"text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app.","type":"text"}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection":{"role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10082-Track-down-hangs-with-Xcode-and-ondevice-detection","abstract":[{"type":"text","text":"Learn how you can increase responsiveness and eliminate hangs in your app and make even better experiences. Hang out with the Performance Tools team as we explore how you can track down these issues — and even stop them from occurring in the first place. We’ll take you through the latest detection mechanisms for iOS to help track hangs during pre-release testing, show you how to identify issues in release builds using the Xcode Organizer, and more."}],"title":"Track down hangs with Xcode and on-device detection","type":"topic","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10082-track-down-hangs-with-xcode-and-ondevice-detection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110354-Whats-new-in-Swift":{"abstract":[{"text":"Join us for an update on Swift. We’ll take you through performance improvements, explore more secure and extensible Swift packages, and share advancements in Swift concurrency. We’ll also introduce you to Swift Regex, better generics, and other tools built into the language to help you write more flexible & expressive code.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc22-110354-whats-new-in-swift","kind":"article","type":"topic","title":"What’s new in Swift","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110354-Whats-new-in-Swift"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10194-Swift-concurrency-Update-a-sample-app":{"url":"\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app","kind":"article","type":"topic","role":"sampleCode","title":"Swift concurrency: Update a sample app","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app","abstract":[{"type":"text","text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We’ll also explore techniques for migrating existing code to Swift concurrency over time."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10248-Analyze-hangs-with-Instruments":{"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc23-10248-analyze-hangs-with-instruments","title":"Analyze hangs with Instruments","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10248-Analyze-hangs-with-Instruments","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"User interface elements often mimic real-world interactions, including real-time responses. Apps with a noticeable delay in user interaction — a hang — can break that illusion and create frustration. We’ll show you how to use Instruments to analyze, understand, and fix hangs in your apps on all Apple platforms. Discover how you can efficiently navigate an Instruments trace document, interpret trace data, and record additional profiling data to better understand your specific hang."}]},"zntfdr":{"alt":"Profile image of Federico Zanetello","type":"image","identifier":"zntfdr","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","type":"link","title":"GitHub"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","role":"sampleCode","abstract":[{"text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system.","type":"text"}],"title":"Eliminate data races using Swift Concurrency","url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency"},"https://developer.apple.com/wwdc22/110350":{"checksum":null,"type":"download","url":"https:\/\/developer.apple.com\/wwdc22\/110350","identifier":"https:\/\/developer.apple.com\/wwdc22\/110350"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"type":"topic","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","url":"\/documentation\/wwdcnotes\/zntfdr","title":"Federico Zanetello (332 notes)","kind":"article","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-10068-Whats-new-in-UIKit":{"title":"What’s new in UIKit","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-10068-Whats-new-in-UIKit","role":"sampleCode","abstract":[{"type":"text","text":"Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We’ll take you through UI refinements, productivity updates, API enhancements, and more. We’ll also help you explore improvements to performance, security, and privacy."}],"kind":"article","url":"\/documentation\/wwdcnotes\/wwdc22-10068-whats-new-in-uikit","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22":{"kind":"article","title":"WWDC22","role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc22","images":[{"identifier":"WWDC22-Icon.png","type":"icon"},{"identifier":"WWDC22.jpeg","type":"card"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22","abstract":[{"text":"Xcode 14, Swift 5.7, iOS 16, macOS 13 (Ventura), tvOS 16, watchOS 9.","type":"text"},{"text":" ","type":"text"},{"text":"New APIs: ","type":"text"},{"code":"WeatherKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ScreenCaptureKit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Swift Regex","type":"codeVoice"},{"text":", and more.","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","kind":"article","type":"topic","role":"sampleCode","title":"Swift concurrency: Behind the scenes","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","abstract":[{"type":"text","text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps."}]},"WWDC22.jpeg":{"identifier":"WWDC22.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC22.jpeg"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift","kind":"article","type":"topic","role":"sampleCode","title":"Explore structured concurrency in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}]},"https://zntfdr.dev":{"type":"link","url":"https:\/\/zntfdr.dev","identifier":"https:\/\/zntfdr.dev","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}]},"WWDCNotes.png":{"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes":{"title":"WWDC Notes","type":"topic","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors","title":"Protect mutable state with Swift actors","type":"topic","abstract":[{"type":"text","text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug."}],"kind":"article","role":"sampleCode"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10170-Beyond-the-basics-of-structured-concurrency":{"type":"topic","title":"Beyond the basics of structured concurrency","url":"\/documentation\/wwdcnotes\/wwdc23-10170-beyond-the-basics-of-structured-concurrency","abstract":[{"text":"It’s all about the task tree: Find out how structured concurrency can help your apps manage automatic task cancellation, task priority propagation, and useful task-local value patterns. Learn how to manage resources in your app with useful patterns and the latest task group APIs. We’ll show you how you can leverage the power of the task tree and task-local values to gain insight into distributed systems.","type":"text"}],"kind":"article","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10170-Beyond-the-basics-of-structured-concurrency"},"zntfdr.jpeg":{"alt":null,"type":"image","identifier":"zntfdr.jpeg","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}]},"WWDC22-Icon.png":{"identifier":"WWDC22-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC22-Icon.png"}],"type":"image","alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","title":"Meet async\/await in Swift","type":"topic","abstract":[{"type":"text","text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions."}],"kind":"article","role":"sampleCode"}}}