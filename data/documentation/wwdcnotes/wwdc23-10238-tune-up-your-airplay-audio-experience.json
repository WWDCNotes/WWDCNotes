{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10238-Tune-up-your-AirPlay-audio-experience"},"sections":[],"abstract":[{"text":"Learn how you can upgrade your app’s AirPlay audio experience to be more robust and responsive. We’ll show you how to adopt enhanced audio buffering with AVQueuePlayer, explore alternatives when building a custom player in your app, and share best practices.","type":"text"}],"metadata":{"roleHeading":"WWDC23","role":"sampleCode","title":"Tune up your AirPlay audio experience","modules":[{"name":"WWDC Notes"}]},"primaryContentSections":[{"content":[{"level":2,"anchor":"Airplay-Overview","type":"heading","text":"Airplay Overview"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"With AirPlay Audio you can stream your favorite music or podcast in perfect sync.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"With AirPlay Video, you can stream your favorite movies and shows.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"With mirroring, you can share photos, personal videos, games, web pages, or spreadsheets.","type":"text"}]}]}]},{"level":2,"anchor":"Airplay-Enhanced-Audio-Buffering","type":"heading","text":"Airplay Enhanced Audio Buffering"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Built with a new and improved protocol keeping Whole home audio in mind."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Audio streams faster than real-time playback speed in order to minimize playback interruptions.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Highly responsive on HomePod or iPhone as a remote control."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supports multi-channel audio formats, like Dolby ATMOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Intelligent use of Lossless playback for iOS."}]}]},{"content":[{"inlineContent":[{"text":"Supports HLS Interstitials.","type":"text"}],"type":"paragraph"}]}]},{"level":2,"anchor":"Add-Support-To-Your-App","type":"heading","text":"Add Support To Your App"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If playing media is central to your app, set your audio session’s category to ","type":"text"},{"code":".playback","type":"codeVoice"},{"text":". This will ensure your app’s media will continue playing when the app is in background.","type":"text"}]}]}]},{"syntax":"swift","code":["let audioSession = AVAudioSession.sharedInstance()","try audioSession.setCategory(. playback ,xmode: . default , policy:.longFormAudio ) "],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"for spoken audio, like podcasts or audiobooks, to set the mode to "},{"code":".spokenAudio","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"set the audio session’s routing policy to ","type":"text"},{"type":"codeVoice","code":".longFormAudio"},{"text":". Longform audio is anything other than system sounds, such as music or podcasts.","type":"text"}]}]}]},{"level":2,"anchor":"Intelligent-Airplay-Support","type":"heading","text":"Intelligent Airplay Support"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Add a new key\/value to "},{"type":"codeVoice","code":"info.plist"},{"type":"text","text":" and set "},{"type":"codeVoice","code":"AVInitialRouteSharingPolicy = LongformAudio"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Supporting-Airplay","type":"heading","text":"Supporting Airplay"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify the audio type: add "},{"type":"codeVoice","code":"AVRoutePickerView"},{"type":"text","text":" to your view hierarchy to include an AirPlay picker in your app."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add an Airplay picker: The picker provides people with a list of potential AirPlay devices that they can use with your app.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a media player: ","type":"text"},{"code":"MPNowPlayingInfoCenter","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"MPRemoteCommandCenter","type":"codeVoice"},{"text":" to receive remote commands, like play, pause, or skip.","type":"text"}]}]}]},{"level":2,"anchor":"Supporting-Airplay-Enhanced-Audio-Buffering","type":"heading","text":"Supporting Airplay Enhanced Audio Buffering"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AVPLayer"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AVQueuePlayer"},{"type":"text","text":" is the simplest way to support enhanced audio buffering for your app where AVQueuePlayer is highly recommended."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Create a queue player "},{"code":"let player = AVQueuePlayer()","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Identify a URL that points to local or cloud content that you want to play."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then create an AVAsset instance with the URL, and create an AVPlayerItem instance with that asset."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Give the AVPlayerItem to the player and start playback."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Automatically gets enhanced audio buffering when it is routed to AirPlay."}],"type":"paragraph"}]}]},{"syntax":"swift","code":["let player = AVQueuePlayer()","","let url = URL(string: \"http:\/\/www.examplecontenturl.com\")","let asset = AVAsset(url: url)","let item = AVPlayItem(asset: asset)","","player.insert(item, after: nil)","player.play()",""],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If your app preprocess on the media data or have a DRM model AVPlayer use","type":"text"},{"code":"AVSampleBufferAudioRenderer and AVSampleBufferRenderSynchronizer","type":"codeVoice"},{"text":" to synchronize multiple queued sample buffers to a single timeline","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"create a serial queue to perform all playback operations on."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the audio renderer and the render synchronizer. The synchronizer is used to establish the media timeline."}]}]}]},{"syntax":"swift","code":["let serializationQueue = DispatchQueue(label: \"sample.buffer.player.serialization.queue\")","let audioRenderer = AVSampleBufferAudioRenderer()","let renderSynchronizer = AVSampleBufferRenderSynchronizer()"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Add the audio renderer to the render synchronizer ","type":"text"},{"code":"renderSynchronizer.addRenderer(audioRenderer)","type":"codeVoice"},{"text":". This will tell the audio renderer to follow the media timeline.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To enqueue audio data, install a callback that will let you know you need more data.","type":"text"}],"type":"paragraph"}]}]},{"syntax":"swift","code":["serializationQueue.async { [weak self] in","    guard let self = self else { return }","    \/\/ Start processing audio data and stop when there's no more data.","    self.audioRenderer.requestMediaDataWhenReady(on: serializationQueue) { [weak self] in","        guard let self = self else { return }","        while self.audioRenderer.isReadyForMoreMediaData {","            let sampleBuffer = self.nextSampleBuffer() \/\/ Returns nil at end of data.","            if let sampleBuffer = sampleBuffer {","                self.audioRenderer.enqueue(sampleBuffer)","            } else {","                \/\/ Tell the renderer to stop requesting audio data.","                audioRenderer.stopRequestingMediaData()","            }","        }","    }","","    \/\/ Start playback at the natural rate of the media.","    self.renderSynchronizer.rate = 1.0","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Both APIs will work for non-AirPlay playback, including local or Bluetooth.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Developers might want different APIs for AirPlay and non-AirPlay playback. In that case, your app can register to the routeChangeNotification and act accordingly depending on the current route."}],"type":"paragraph"}]}]},{"level":2,"anchor":"CarPlay-enhanced-audio-Buffering","type":"heading","text":"CarPlay enhanced audio Buffering"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"car manufacture support."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Wireless, robust and responsive playback.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Same APIs support CarPlay."}],"type":"paragraph"}]}]},{"level":2,"anchor":"Written-By","type":"heading","text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"RamitSharma991"}]}],"size":1},{"content":[{"text":"Ramit Sharma","type":"heading","level":3,"anchor":"Ramit-Sharma"},{"inlineContent":[{"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/RamitSharma991","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/x.com\/iosDev_ramit","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","isActive":true}]},{"level":2,"anchor":"Related-Sessions","type":"heading","text":"Related Sessions"},{"style":"list","type":"links","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10104-Integrate-your-media-app-with-HomePod","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10275-Explore-AirPlay-with-interstitials"]},{"type":"small","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sampleCodeDownload":{"action":{"overridingTitle":"Watch Video (10 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10238","type":"reference","isActive":true},"kind":"sampleDownload"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc23-10238-tune-up-your-airplay-audio-experience"]}],"references":{"WWDCNotes.png":{"identifier":"WWDCNotes.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10104-Integrate-your-media-app-with-HomePod":{"kind":"article","abstract":[{"text":"Learn how people can interact with your media app directly from HomePod. We’ll show you how to add a media intent to your iPhone or iPad app and help people stream your content to a HomePod speaker over AirPlay simply by using their voice. Explore implementation details and get tips and best practices on how to create a great experience for music, audiobooks, podcasts, meditations, or other media types.","type":"text"}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10104-Integrate-your-media-app-with-HomePod","title":"Integrate your media app with HomePod","role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc23-10104-integrate-your-media-app-with-homepod"},"WWDC23-Icon.png":{"identifier":"WWDC23-Icon.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-Icon.png"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10275-Explore-AirPlay-with-interstitials":{"url":"\/documentation\/wwdcnotes\/wwdc23-10275-explore-airplay-with-interstitials","role":"sampleCode","type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how you can use HLS Interstitials with AirPlay to create seamless transitions for your video content between advertisements. We’ll share best practices and tips for creating a great experience when sharing content from Apple devices to popular smart TVs."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10275-Explore-AirPlay-with-interstitials","title":"Explore AirPlay with interstitials"},"https://x.com/iosDev_ramit":{"identifier":"https:\/\/x.com\/iosDev_ramit","url":"https:\/\/x.com\/iosDev_ramit","titleInlineContent":[{"text":"X\/Twitter","type":"text"}],"title":"X\/Twitter","type":"link"},"RamitSharma991":{"identifier":"RamitSharma991","alt":"Profile image of Ramit Sharma","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/RamitSharma991.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"abstract":[{"text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"text":", ","type":"text"},{"code":"Observation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"StoreKit","type":"codeVoice"},{"text":" views, and more.","type":"text"}],"images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}],"role":"collectionGroup","kind":"article","type":"topic","title":"WWDC23","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23"},"RamitSharma991.jpeg":{"identifier":"RamitSharma991.jpeg","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/RamitSharma991.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","title":"WWDC Notes","type":"topic","kind":"symbol"},"https://":{"identifier":"https:\/\/","url":"https:\/\/","titleInlineContent":[{"text":"Blog","type":"text"}],"title":"Blog","type":"link"},"https://developer.apple.com/wwdc23/10238":{"checksum":null,"identifier":"https:\/\/developer.apple.com\/wwdc23\/10238","url":"https:\/\/developer.apple.com\/wwdc23\/10238","type":"download"},"doc://WWDCNotes/documentation/WWDCNotes/RamitSharma991":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/ramitsharma991","type":"topic","images":[{"type":"card","identifier":"RamitSharma991.jpeg"},{"type":"icon","identifier":"RamitSharma991.jpeg"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/RamitSharma991","title":"Ramit Sharma (15 notes)","abstract":[{"type":"text","text":"Indie iOS Dev. Swift, SwiftUI, Obj-C, UX and related."}],"kind":"article"},"https://github.com/RamitSharma991":{"identifier":"https:\/\/github.com\/RamitSharma991","url":"https:\/\/github.com\/RamitSharma991","titleInlineContent":[{"text":"GitHub","type":"text"}],"title":"GitHub","type":"link"},"WWDC23.jpeg":{"identifier":"WWDC23.jpeg","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems":{"type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10150-Optimize-CarPlay-for-vehicle-systems","title":"Optimize CarPlay for vehicle systems","url":"\/documentation\/wwdcnotes\/wwdc23-10150-optimize-carplay-for-vehicle-systems","abstract":[{"text":"Discover how you can integrate CarPlay into modern vehicle systems. We’ll show you how to adjust CarPlay for any high-resolution display — regardless of configuration or size. Learn how you can use CarPlay-supplied metadata and video streams to show information on additional displays, and find out how advances in wireless connectivity, audio, and video encoding can help prepare your vehicle system for the next generation of CarPlay.","type":"text"}],"role":"sampleCode"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"title":"Contributions are welcome!","type":"link"}}}