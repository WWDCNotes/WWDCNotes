{"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18"]]},"identifier":{"url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-406-Swift-Generics-Expanded","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/wwdcnotes\/wwdc18-406-swift-generics-expanded"]}],"sections":[],"kind":"article","metadata":{"roleHeading":"WWDC18","role":"sampleCode","title":"Swift Generics (Expanded)","modules":[{"name":"WWDC Notes"}]},"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Very nice presentation of what Swift Generics are, why they’re better than just defining something as "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" (both from code, memory, and compiler perspective)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"How to create extensions only to some subsets of Generics (see the "},{"type":"codeVoice","code":"where ..."},{"type":"text","text":")"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["extension Buffer where Element: Numeric {","  func sum() -> Element {","    var total: Element = 0","    for i in 0..<self.count {","      total += self[i]","    }","    return total","  }","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to add constraints to Generics "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":":"}]}]}],"type":"unorderedList"},{"code":["typealias CountableRange<Bound: Strideable> = Range<Bound> ","  where Bound.Stride: SignedInteger"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"inlineContent":[{"text":"How to use Generics in protocols (via ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"You can add constraints on the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"text":":","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"code":["protocol Collection {","  associatedtype Element","  associatedtype Index: Equatable","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol Inheritance"}]}]}]}]}],"type":"unorderedList"},{"code":["protocol RandomAccessCollection: BidirectionalCollection {","  func index (_ position: Index, offsetBy n: Int) -> Index","  func distance(from start: Index, to end: Index) -> Int","}","","protocol MutableCollection: Collection {","  subscript (index: Index) -> Element { get set }","  mutating func swapAt (_: Index, _: Index) { } ","}","","extension RandomAccessCollection where Self: MutableCollection { ","  mutating func shuffle() { ","    let n = count ","    guard n > 1 else { return } ","    for (i, pos) in indices.dropLast().enumerated() { ","      let otherPos = index(startIndex, offsetBy: Int.random(in: i..<n))","      swapAt(pos, otherPos) ","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol Conformance"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"..\/401","type":"reference"}]}]}]}]}],"type":"unorderedList"},{"anchor":"Written-By","text":"Written By","type":"heading","level":2},{"numberOfColumns":5,"type":"row","columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"zntfdr","type":"image"}]}],"size":1},{"content":[{"anchor":"Federico-Zanetello","level":3,"type":"heading","text":"Federico Zanetello"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","isActive":true,"overridingTitle":"Contributed Notes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/zntfdr","isActive":true},{"type":"text","text":" "},{"type":"text","text":"|"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/zntfdr.dev","isActive":true}],"type":"paragraph"}],"size":4}]},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}],"type":"paragraph"},{"anchor":"Related-Sessions","text":"Related Sessions","type":"heading","level":2},{"style":"list","items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10165-Embrace-Swift-type-inference","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-229-Using-Collections-Effectively","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-401-Whats-New-in-Swift"],"type":"links"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Legal Notice"}],"type":"strong"}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}],"kind":"content"}],"sampleCodeDownload":{"action":{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/wwdc18\/406","overridingTitle":"Watch Video (56 min)"},"kind":"sampleDownload"},"abstract":[{"text":"Generics are one of the most powerful features of Swift, enabling you to write flexible, reusable components while maintaining static type information. Learn about the design of Swift’s generics, including how to generalize protocols, leverage protocol inheritance to express the varying capabilities of related types, build composable generic components with conditional conformances, and reason about the interaction between class inheritance and generics. This expanded version of the WWDC 2018 session includes a brand-new discussion of recursive constraints.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"WWDC18.jpeg":{"alt":null,"identifier":"WWDC18.jpeg","variants":[{"url":"\/images\/WWDCNotes\/WWDC18.jpeg","traits":["1x","light"]}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10165-Embrace-Swift-type-inference":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc20-10165-embrace-swift-type-inference","title":"Embrace Swift type inference","kind":"article","abstract":[{"text":"Swift uses type inference to help you write clean, concise code without compromising type safety. We’ll show you how the compiler seeks out clues in your code to solve the type inference puzzle. Discover what happens when the compiler can’t come to a solution, and find out how Xcode 12 integrates error tracking to help you understand and fix mistakes at compile time.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10165-Embrace-Swift-type-inference","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes":{"role":"collection","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","title":"WWDC Notes","type":"topic","kind":"symbol","url":"\/documentation\/wwdcnotes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}]},"https://github.com/zntfdr":{"titleInlineContent":[{"text":"GitHub","type":"text"}],"url":"https:\/\/github.com\/zntfdr","identifier":"https:\/\/github.com\/zntfdr","title":"GitHub","type":"link"},"https://developer.apple.com/wwdc18/406":{"checksum":null,"url":"https:\/\/developer.apple.com\/wwdc18\/406","identifier":"https:\/\/developer.apple.com\/wwdc18\/406","type":"download"},"https://zntfdr.dev":{"title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev","type":"link"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","title":"Contributions are welcome!"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-401-Whats-New-in-Swift":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc18-401-whats-new-in-swift","type":"topic","title":"What’s New in Swift","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-401-Whats-New-in-Swift","abstract":[{"type":"text","text":"Hear about the latest advancements in Swift, the safe, fast, and expressive language. Find out about improvements to build times, code size, and runtime performance. Learn how to take advantage of new features in your code that eliminate boilerplate, increase safety and security, and improve your overall development productivity."}]},"../401":{"titleInlineContent":[{"text":"What’s New in Swift","type":"text"}],"url":"..\/401","identifier":"..\/401","title":"What’s New in Swift","type":"link"},"WWDCNotes.png":{"alt":null,"identifier":"WWDCNotes.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDCNotes.png"}],"type":"image"},"zntfdr.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"identifier":"zntfdr.jpeg","alt":null,"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"title":"Federico Zanetello (332 notes)","type":"topic","role":"sampleCode","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","kind":"article","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"url":"\/documentation\/wwdcnotes\/zntfdr"},"WWDC18-Icon.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC18-Icon.png"}],"identifier":"WWDC18-Icon.png","type":"image"},"zntfdr":{"alt":"Profile image of Federico Zanetello","identifier":"zntfdr","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/zntfdr.jpeg"}],"type":"image"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18-229-Using-Collections-Effectively":{"kind":"article","title":"Using Collections Effectively","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18-229-Using-Collections-Effectively","role":"sampleCode","abstract":[{"text":"Every app uses collections! Go beyond the basics with specific tips on how best to use indices, slices, bridging, laziness, and reference types. Gain better understanding of when to use each collection for best performance.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc18-229-using-collections-effectively"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC18":{"url":"\/documentation\/wwdcnotes\/wwdc18","kind":"article","abstract":[{"type":"text","text":"Xcode 10, Swift 4.2, iOS 12, macOS 10.14 (Mojave), tvOS 12, watchOS 5."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC18","role":"collectionGroup","images":[{"identifier":"WWDC18-Icon.png","type":"icon"},{"identifier":"WWDC18.jpeg","type":"card"}],"title":"WWDC18"}}}