{"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10109-whats-new-in-foundation"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Discover how the latest updates to Foundation can help you improve your app’s localization and internationalization support. Find out about the new AttributedString, designed specifically for Swift, and learn how you can use Markdown to apply style to your localized strings. Explore the grammar agreement engine, which automatically fixes up localized strings so they match grammatical gender and pluralization. And we’ll take you through improvements to date and number formatting that simplify complex requirements while also improving performance."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10109-Whats-new-in-Foundation"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"image","identifier":"https:\/\/fbernutz.github.io\/images\/sketchnotes\/wwdc21-whats-new-foundation.jpg"}],"type":"paragraph"},{"text":"AttributedString","level":2,"type":"heading","anchor":"AttributedString"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An attributed string is a combination of:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"characters"}]}]},{"content":[{"inlineContent":[{"text":"a set of ranges","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"a dictionary","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"text":"Attributed strings allow you to associate attributes, which are key-value pairs, to a specific range of a string","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring","isActive":true},{"type":"text","text":" type"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"value type, built from the ground up for Swift"}]}]},{"content":[{"inlineContent":[{"text":"same character-counting behavior as Swift ","type":"text"},{"type":"codeVoice","code":"String"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"localizable"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"built with safety and security in mind"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["var thanks = AttributedString(\"Thank you!\")","thanks.font = .body.bold()","","var website = AttributedString(\"Please visit our website.\")","website.font = .body.italic()","website.link = URL(string: \"http:\/\/www.example.com\")","","\/\/ AttributeContainer - a place you can hold attributes and values on their own without the string","var container = AttributeContainer()","container.foregroundColor = .red","container.underlineColor = .primary","","thanks.mergeAttributes(container)","website.mergeAttributes(container)"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AttributedString"},{"text":" views: give us insight of the attribute string, they’re Swift collections","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"characters"},{"type":"text","text":" - which provides access to the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"runs"},{"type":"text","text":" - which provides access to the attributes"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A run is the starting location, length, and value of a particular attribute","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"we can also filter runs per attribute, e.g. "},{"type":"codeVoice","code":"attributedString.runs[\\.link]"},{"type":"text","text":", this will separate the attribute string considering solely that specific attribute, and returning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when that attribute is not applied on a run"}],"type":"paragraph"}]}]}]}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For example, here’s how to highlight all punctuation of a string:"}],"type":"paragraph"},{"code":["var message = AttributedString(localized: \"...\") ","let characterView = message.characters ","for i in characterView.indices where characterView[i].isPunctuation { ","  message[i..<characterView.index(after: i)].foregroundColor = .orange","} "],"syntax":"swift","type":"codeListing"},{"text":"Localization","level":3,"type":"heading","anchor":"Localization"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"both ","type":"text"},{"type":"codeVoice","code":"AttributedString"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"NSAttributedString"},{"text":" are fully localizable","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"in Swift, we can now use string interpolation, like in SwiftUI","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["String(localized: \"Would you like to save the document “\\(document)”?\")","AttributedString(localized: \"Would you like to save the document “\\(document)”?\")"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Xcode can generate your strings files from these new initializers using the compiler: Turn this on by going to your build settings, look for the localization settings, and turn on "},{"type":"codeVoice","code":"Use Compiler to Extract Swift Strings"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Markdown","level":3,"type":"heading","anchor":"Markdown"},{"inlineContent":[{"type":"codeVoice","code":"AttributedString"},{"type":"text","text":" comes with markdown support, including links and custom attributes:"}],"type":"paragraph"},{"code":["This text contains [a link](http:\/\/www.example.com).","","This text contains ![an image](http:\/\/www.example.com\/my_image.gif).","","This text contains ^[a custom attribute](rainbow: 'extreme')."],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Here’s an example of custom attribute and how to parse it:","type":"text"}],"type":"paragraph"},{"code":["\/\/ Attribute scopes ","extension AttributeScopes ","  struct CaffeAppAttributes: AttributeScope {","    let rainbow: RainbowAttribute ","    let swiftUI: SwiftUIAttributes ","  }","  var caffeApp: CaffeAppAttributes.Type { CaffeAppAttributes.self } ","}","","let header = AttributedString(","  localized: \"^[Fast & Delicious](rainbow: 'extreme') Food\",","  including: \\.caffeApp",")"],"syntax":"swift","type":"codeListing"},{"text":"Formatters","level":2,"type":"heading","anchor":"Formatters"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"brand new API"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"no need to cache formatter anymore"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Date formatter example:","type":"text"}],"type":"paragraph"},{"code":["func formattingDates() {","  \/\/ Note: This will use your current date & time plus current locale. ","  \/\/ Example output is for en_US locale.","  let date = Date.now","","  let formatted = date.formatted() \/\/ equivalent to date.formatted(.dateTime) ","  \/\/ example: \"6\/7\/2021, 9:42 AM\"","  print(formatted)","","  let onlyYearDayMonth = date.formatted(.dateTime.year().day().month())","  \/\/ example: \"Jun 7, 2021\"","  print(onlyYearDayMonth)","","  let onlyYearDayMonthWide = date.formatted(.dateTime.year().day().month(.wide))","  \/\/ example: \"June 7, 2021\"","  print(onlyYearDayMonthWide)","","  let onlyDate = date.formatted(date: .numeric, time: .omitted)","  \/\/ example: \"6\/7\/2021\"","  print(onlyDate)","","  let onlyTime = date.formatted(date: .omitted, time: .shortened)","  \/\/ example: \"9:42 AM\"","  print(onlyTime)","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"all these ","type":"text"},{"type":"codeVoice","code":"formatted(date:)"},{"text":" parameters are called fields","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"fields order do not matter","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"all fields have a default for the shortest versions of the API"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Formatters work great with "},{"type":"codeVoice","code":"AttributedString"},{"type":"text","text":", here’s how to format a date and color just the week day of the string:"}],"type":"paragraph"},{"code":["import SwiftUI","","struct ContentView: View {","  @State var date = Date.now","  @Environment(\\.locale) var locale","","  var dateString : AttributedString {","    var str = date.formatted(","      .dateTime.minute().hour().weekday()","      .locale(locale)","      .attributed","    )","","    let weekday = AttributeContainer","      .dateField(.weekday)","","    let color = AttributeContainer","      .foregroundColor(.orange)","","    str.replaceAttributes(weekday, with: color)","","    return str","  }","","  var body: some View {","    VStack {","      Text(\"Next free coffee\")","      Text(dateString).font(.title2)","    }","    .multilineTextAlignment(.center)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"New way to convert strings to values via strategies:"}],"type":"paragraph"},{"code":["func parsingDates() {","  let date = Date.now","","  let format = Date.FormatStyle().year().day().month()","  let formatted = date.formatted(format)","  \/\/ example: \"Jun 7, 2021\"","  print(formatted)","","  if let date = try? Date(formatted, strategy: format) {","    \/\/ example: 2021-06-07 07:00:00 +0000","    print(date)","  }","}","","\/\/ Work with String interpolation:","func parsingDatesStrategies() {","  let strategy = Date.ParseStrategy(","    format: \"\\(year: .defaultDigits)-\\(month: .twoDigits)-\\(day: .twoDigits)\",","    timeZone: TimeZone.current)","","  if let date = try? Date(\"2021-06-07\", strategy: strategy) {","    \/\/ date is 2021-06-07 07:00:00 +0000","    print(date)","  }","}"],"syntax":"swift","type":"codeListing"},{"text":"Automatic Grammar Agreement","level":2,"type":"heading","anchor":"Automatic-Grammar-Agreement"},{"inlineContent":[{"text":"Makes localization easy when a certain sentence need to change based on the quantity and gender of the objects, we only need to provide the singular word, Foundation will take care of plurals and more.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"code":["func addToOrderEnglish() {","  \/\/ Note: This will use your current locale. Example output is for en_US locale.","  let quantity = 2","  let size = \"large\"","  let food = \"salad\"","","  let message = AttributedString(localized: \"Add ^[\\(quantity) \\(size) \\(food)](inflect: true) to your order\")","  print(message)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"These are all the localization strings needed:","type":"text"}],"type":"paragraph"},{"code":["\/\/ MARK: en.strings","","\"Add ^[%lld %@ %@](inflect: true) to your order\" = \"Add ^[%lld %@ %@](inflect: true) to your order\"; ","","\"Pizza\" = \"Pizza\";","\"Juice\" = \"Juice\";","\"Salad\" = \"Salad\";","","\"Small\" = \"Small\";","\"Large\" = \"Large\";","","\/\/ MARK: es.strings","","\"Add ^[%lld %@ %@](inflect: true) to your order\" = \"Añadir [%1lld %3$@ %2$@](inflect: true) a tu pedido\"; ","","\"Pizza\" = \"Pizza\";","\"Juice\" = \"Jugo\";","\"Salad\" = \"Ensalada\";","","\"Small\" = \"Pequeño\";","\"Large\" = \"Grande\";"],"syntax":"xml","type":"codeListing"},{"text":"Written By","level":2,"type":"heading","anchor":"Written-By"},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}]},{"size":4,"content":[{"type":"heading","anchor":"Federico-Zanetello","text":"Federico Zanetello","level":3},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"overridingTitle":"Contributed Notes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/zntfdr","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/zntfdr.dev","type":"reference"}]}]}]},{"type":"row","numberOfColumns":5,"columns":[{"size":1,"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"fbernutz"}]}]},{"size":4,"content":[{"level":3,"text":"Feli Bernutz","anchor":"Feli-Bernutz","type":"heading"},{"inlineContent":[{"overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/fbernutz","overridingTitle":"Contributed Notes","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/fbernutz","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/fbernutz.github.io","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/x.com\/felibe444","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"type":"thematicBreak"},{"inlineContent":[{"text":"Missing anything? Corrections? ","type":"text"},{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"reference","isActive":true}],"type":"paragraph"},{"text":"Related Sessions","level":2,"type":"heading","anchor":"Related-Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10153-Unlock-the-power-of-grammatical-agreement","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110358-Swift-Regex-Beyond-the-basics","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10220-Localize-your-SwiftUI-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10221-Streamline-your-localized-strings"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Legal Notice"}]}],"type":"small"},{"inlineContent":[{"type":"text","text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved."},{"type":"text","text":" "},{"type":"text","text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries."},{"type":"text","text":" "},{"type":"text","text":"This website is not made by, affiliated with, nor endorsed by Apple."}],"type":"small"}]}],"kind":"article","metadata":{"role":"sampleCode","roleHeading":"WWDC21","title":"What’s new in Foundation","modules":[{"name":"WWDC Notes"}]},"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"Watch Video (37 min)","identifier":"https:\/\/developer.apple.com\/wwdc21\/10109","isActive":true}},"references":{"fbernutz.jpeg":{"type":"image","identifier":"fbernutz.jpeg","variants":[{"url":"\/images\/WWDCNotes\/fbernutz.jpeg","traits":["1x","light"]}],"alt":null},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10220-Localize-your-SwiftUI-app":{"abstract":[{"text":"Learn how to localize your SwiftUI app and make it available to a global audience. Explore how you can localize strings in SwiftUI, including those with styles and formatting. We’ll demonstrate how you can save time by having SwiftUI automatically handle tasks such as layout and keyboard shortcuts, and take you through the localization workflow in Xcode 13.","type":"text"}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10220-Localize-your-SwiftUI-app","role":"sampleCode","title":"Localize your SwiftUI app","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc21-10220-localize-your-swiftui-app"},"https://developer.apple.com/wwdc21/10109":{"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10109","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc21\/10109"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10018-Whats-new-in-SwiftUI":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10018-whats-new-in-swiftui","title":"What’s new in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","role":"sampleCode"},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"title":"Contributions are welcome!","type":"link","identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"},"https://fbernutz.github.io":{"title":"Blog","type":"link","identifier":"https:\/\/fbernutz.github.io","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/fbernutz.github.io"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"title":"Federico Zanetello (332 notes)","kind":"article","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"identifier":"zntfdr.jpeg","type":"card"},{"identifier":"zntfdr.jpeg","type":"icon"}],"role":"sampleCode","url":"\/documentation\/wwdcnotes\/zntfdr"},"zntfdr.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"zntfdr.jpeg"},"fbernutz":{"type":"image","identifier":"fbernutz","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/fbernutz.jpeg"}],"alt":"Profile image of Feli Bernutz"},"https://fbernutz.github.io/images/sketchnotes/wwdc21-whats-new-foundation.jpg":{"type":"image","identifier":"https:\/\/fbernutz.github.io\/images\/sketchnotes\/wwdc21-whats-new-foundation.jpg","variants":[{"url":"https:\/\/fbernutz.github.io\/images\/sketchnotes\/wwdc21-whats-new-foundation.jpg","traits":["1x","light"]}],"alt":"Sketchnote about what’s new in Foundation at WWDC 2021. It shows news about internationalization and localization improvements, in detail Attributed String, Formatters and Automatic Grammar Agreement."},"https://developer.apple.com/documentation/foundation/attributedstring":{"title":"AttributedString","url":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring","titleInlineContent":[{"type":"codeVoice","code":"AttributedString"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/attributedstring"},"doc://WWDCNotes/documentation/WWDCNotes":{"images":[{"identifier":"WWDCNotes.png","type":"icon"}],"title":"WWDC Notes","abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","type":"topic","url":"\/documentation\/wwdcnotes","role":"collection"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10221-Streamline-your-localized-strings":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"When you localize the text within your app, you can help make your app more accessible to a worldwide audience. Discover best practices for building your localization workflow, including how to write and format strings accurately, and learn how to prepare strings for localization in different languages using Xcode."}],"title":"Streamline your localized strings","url":"\/documentation\/wwdcnotes\/wwdc21-10221-streamline-your-localized-strings","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10221-Streamline-your-localized-strings","role":"sampleCode"},"https://x.com/felibe444":{"title":"X\/Twitter","type":"link","identifier":"https:\/\/x.com\/felibe444","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"url":"https:\/\/x.com\/felibe444"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110358-Swift-Regex-Beyond-the-basics":{"abstract":[{"type":"text","text":"Go beyond the basics of string processing with Swift Regex. We’ll share an overview of Regex and how it works, explore Foundation’s rich data parsers and discover how to integrate your own, and delve into captures. We’ll also provide best practices for matching strings and wielding Regex-powered algorithms with ease."}],"kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110358-Swift-Regex-Beyond-the-basics","role":"sampleCode","title":"Swift Regex: Beyond the basics","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc22-110358-swift-regex-beyond-the-basics"},"zntfdr":{"type":"image","identifier":"zntfdr","variants":[{"url":"\/images\/WWDCNotes\/zntfdr.jpeg","traits":["1x","light"]}],"alt":"Profile image of Federico Zanetello"},"doc://WWDCNotes/documentation/WWDCNotes/fbernutz":{"images":[{"type":"card","identifier":"fbernutz.jpeg"},{"type":"icon","identifier":"fbernutz.jpeg"}],"title":"Feli Bernutz (16 notes)","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/fbernutz","type":"topic","url":"\/documentation\/wwdcnotes\/fbernutz","kind":"article","abstract":[{"text":"You can learn anything, but you can’t learn everything","type":"text"}],"role":"sampleCode"},"https://github.com/zntfdr":{"title":"GitHub","url":"https:\/\/github.com\/zntfdr","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link","identifier":"https:\/\/github.com\/zntfdr"},"https://github.com/fbernutz":{"title":"GitHub","type":"link","identifier":"https:\/\/github.com\/fbernutz","titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/fbernutz"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"title":"WWDC21","kind":"article","abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"code":"MusicKit","type":"codeVoice"},{"type":"text","text":", "},{"code":"DocC","type":"codeVoice"},{"type":"text","text":", "},{"code":"StoreKit 2","type":"codeVoice"},{"type":"text","text":", and more."}],"type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","images":[{"type":"icon","identifier":"WWDC21-Icon.png"},{"type":"card","identifier":"WWDC21.jpeg"}],"role":"collectionGroup","url":"\/documentation\/wwdcnotes\/wwdc21"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10153-Unlock-the-power-of-grammatical-agreement":{"abstract":[{"text":"Discover how you can use automatic grammatical agreement in your apps and games to create inclusive and more natural-sounding expressions. We’ll share best practices for working with Foundation, showcase examples in multiple languages, and demonstrate how to use these APIs to enhance the user experience for your apps.","type":"text"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10153-Unlock-the-power-of-grammatical-agreement","title":"Unlock the power of grammatical agreement","kind":"article","role":"sampleCode","type":"topic","url":"\/documentation\/wwdcnotes\/wwdc23-10153-unlock-the-power-of-grammatical-agreement"},"https://zntfdr.dev":{"title":"Blog","type":"link","identifier":"https:\/\/zntfdr.dev","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/zntfdr.dev"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10058-Meet-AsyncSequence":{"role":"sampleCode","title":"Meet AsyncSequence","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10058-Meet-AsyncSequence","kind":"article","url":"\/documentation\/wwdcnotes\/wwdc21-10058-meet-asyncsequence","type":"topic","abstract":[{"type":"text","text":"Iterating over a sequence of values over time is now as easy as writing a “for” loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We’ll also show you how to adapt existing code to provide asynchronous sequences of your own."}]},"WWDC21.jpeg":{"variants":[{"url":"\/images\/WWDCNotes\/WWDC21.jpeg","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"WWDC21.jpeg"},"WWDC21-Icon.png":{"type":"image","identifier":"WWDC21-Icon.png","variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes\/WWDC21-Icon.png"}],"alt":null},"WWDCNotes.png":{"type":"image","identifier":"WWDCNotes.png","variants":[{"url":"\/images\/WWDCNotes\/WWDCNotes.png","traits":["1x","light"]}],"alt":null}}}