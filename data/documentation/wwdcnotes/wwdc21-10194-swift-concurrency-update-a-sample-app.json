{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10194-Swift-concurrency-Update-a-sample-app"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"text":"Adopting new async frameworks APIs:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"use ","type":"text"},{"type":"codeVoice","code":"Task { await insertAwaitFuncHere }"},{"text":" in your synchronous code to spin off a new asynchronous task which will be allowed to call async functions","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Create async APIs:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"while refactoring to async, create an async version of your completion-based APIs"}]},{"items":[{"content":[{"inlineContent":[{"text":"Xcode can do this for you by using the ","type":"text"},{"text":"Create Async Alternative","type":"text"},{"text":" refactoring action on the legacy API","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"text":"Use continuations when you must use a completion-block based API in your async code:","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["private func queryHealthKit() async throws -> ([HKSample]?, [HKDeletedObject]?, HKQueryAnchor?) {","  return try await withCheckedThrowingContinuation { continuation in \/\/ 👈🏻","    \/\/ Create a predicate that only returns samples created within the last 24 hours.","    let endDate = Date()","    let startDate = endDate.addingTimeInterval(-24.0 * 60.0 * 60.0)","    let datePredicate = HKQuery.predicateForSamples(withStart: startDate, end: endDate, options: [.strictStartDate, .strictEndDate])","","    \/\/ Create the query.","    let query = HKAnchoredObjectQuery(","      type: caffeineType,","      predicate: datePredicate,","      anchor: anchor,","      limit: HKObjectQueryNoLimit) { (_, samples, deletedSamples, newAnchor, error) in","","      \/\/ When the query ends, check for errors.","      if let error = error {","        continuation.resume(throwing: error) \/\/ 👈🏻","      } else {","        continuation.resume(returning: (samples, deletedSamples, newAnchor)) \/\/ 👈🏻","      }","    }","    store.execute(query)","  }","}"]},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" to coordinate operations on the main thread, two ways:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"call ","type":"text"},{"code":"await MainActor.run { ... }","type":"codeVoice"},{"text":" - this takes a block of code to run on the main actor","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"annotate functions with "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" - to require that the caller switch to the main actor before this function is run"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Turn your classes into "},{"type":"codeVoice","code":"actors"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@MainActor class"},{"type":"text","text":" to avoid data races"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Unlike the main actor, which is a global actor, other actor type can be instantiated multiple times","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"use the ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":" attribute in actor functions that are not going to touch any part of the actor isolated state - therefore, these functions can be called from anywhere","type":"text"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["@available(*, deprecated, message: \"Prefer async alternative instead\")","nonisolated public func requestAuthorization(completionHandler: @escaping (Bool) -> Void ) {","  \/\/ ...","}","","@available(*, deprecated, message: \"Prefer async alternative instead\")","nonisolated public func loadNewDataFromHealthKit(completionHandler: @escaping (Bool) -> Void = { _ in }) {","  \/\/ ...","}"]},{"anchor":"Written-By","level":2,"type":"heading","text":"Written By"},{"numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"type":"image","identifier":"zntfdr"}]}],"size":1},{"content":[{"level":3,"anchor":"Federico-Zanetello","type":"heading","text":"Federico Zanetello"},{"inlineContent":[{"overridingTitle":"Contributed Notes","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Contributed Notes"}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/zntfdr"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/zntfdr.dev"}],"type":"paragraph"}],"size":4}],"type":"row"},{"inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","isActive":true}],"type":"paragraph"},{"anchor":"Related-Sessions","level":2,"type":"heading","text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110379-Create-a-more-responsive-media-app","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10048-Build-complications-in-SwiftUI"],"type":"links","style":"list"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Legal Notice","type":"text"}]}],"type":"small"},{"inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}],"type":"small"}]}],"kind":"article","abstract":[{"text":"Discover Swift concurrency in action: Follow along as we update an existing sample app. Get real-world experience with async\/await, actors, and continuations. We’ll also explore techniques for migrating existing code to Swift concurrency over time.","type":"text"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"Watch Video (61 min)","isActive":true,"identifier":"https:\/\/developer.apple.com\/wwdc21\/10194","type":"reference"}},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"WWDC Notes"}],"roleHeading":"WWDC21","role":"sampleCode","title":"Swift concurrency: Update a sample app"},"sections":[],"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc21-10194-swift-concurrency-update-a-sample-app"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10254-Swift-concurrency-Behind-the-scenes":{"title":"Swift concurrency: Behind the scenes","abstract":[{"text":"Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10254-swift-concurrency-behind-the-scenes","type":"topic","role":"sampleCode","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10254-Swift-concurrency-Behind-the-scenes"},"https://github.com/zntfdr":{"titleInlineContent":[{"type":"text","text":"GitHub"}],"title":"GitHub","type":"link","identifier":"https:\/\/github.com\/zntfdr","url":"https:\/\/github.com\/zntfdr"},"https://developer.apple.com/wwdc21/10194":{"checksum":null,"type":"download","identifier":"https:\/\/developer.apple.com\/wwdc21\/10194","url":"https:\/\/developer.apple.com\/wwdc21\/10194"},"https://wwdcnotes.github.io/WWDCNotes/documentation/wwdcnotes/contributing":{"titleInlineContent":[{"type":"text","text":"Contributions are welcome!"}],"title":"Contributions are welcome!","type":"link","identifier":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing","url":"https:\/\/wwdcnotes.github.io\/WWDCNotes\/documentation\/wwdcnotes\/contributing"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency":{"role":"sampleCode","kind":"article","title":"Eliminate data races using Swift Concurrency","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110351-Eliminate-data-races-using-Swift-Concurrency","abstract":[{"type":"text","text":"Join us as we explore one of the core concepts in Swift concurrency: isolation of tasks and actors. We’ll take you through Swift’s approach to eliminating data races and its effect on app architecture. We’ll also discuss the importance of atomicity in your code, share the nuances of Sendable checking to maintain isolation, and revisit assumptions about ordering work in a concurrent system."}],"url":"\/documentation\/wwdcnotes\/wwdc22-110351-eliminate-data-races-using-swift-concurrency"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21":{"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"title":"WWDC21","url":"\/documentation\/wwdcnotes\/wwdc21","role":"collectionGroup","abstract":[{"type":"text","text":"Xcode 13, Swift 5.5, iOS 15, macOS 12 (Monterey), tvOS 15, watchOS 8."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"MusicKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"DocC"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit 2"},{"type":"text","text":", and more."}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10018-Whats-new-in-SwiftUI":{"role":"sampleCode","url":"\/documentation\/wwdcnotes\/wwdc21-10018-whats-new-in-swiftui","kind":"article","abstract":[{"text":"There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more.","type":"text"}],"type":"topic","title":"What’s new in SwiftUI","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10018-Whats-new-in-SwiftUI"},"WWDCNotes.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/WWDCNotes.png"}],"type":"image","identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"text":"Session notes shared by the community for the community.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","type":"topic","title":"WWDC Notes","url":"\/documentation\/wwdcnotes","images":[{"identifier":"WWDCNotes.png","type":"icon"}],"role":"collection"},"zntfdr":{"alt":"Profile image of Federico Zanetello","variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","identifier":"zntfdr"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110350-Visualize-and-optimize-Swift-concurrency":{"role":"sampleCode","kind":"article","title":"Visualize and optimize Swift concurrency","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110350-Visualize-and-optimize-Swift-concurrency","abstract":[{"type":"text","text":"Learn how you can optimize your app with the Swift Concurrency template in Instruments. We’ll discuss common performance issues and show you how to use Instruments to find and resolve these problems. Learn how you can keep your UI responsive, maximize parallel performance, and analyze Swift concurrency activity within your app."}],"url":"\/documentation\/wwdcnotes\/wwdc22-110350-visualize-and-optimize-swift-concurrency"},"https://zntfdr.dev":{"titleInlineContent":[{"type":"text","text":"Blog"}],"title":"Blog","type":"link","identifier":"https:\/\/zntfdr.dev","url":"https:\/\/zntfdr.dev"},"zntfdr.jpeg":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/zntfdr.jpeg"}],"type":"image","identifier":"zntfdr.jpeg"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC22-110379-Create-a-more-responsive-media-app":{"role":"sampleCode","kind":"article","title":"Create a more responsive media app","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC22-110379-Create-a-more-responsive-media-app","abstract":[{"type":"text","text":"Discover how you can use AVFoundation to keep people focused on your media app’s content — not your loading spinner. We’ll show you how to support a responsive and fluid interface in your app, all while you create rich audiovisual compositions, load audiovisual assets, and prepare media thumbnails. Find out how you can perform these tasks on your app’s main thread while I\/O processes in parallel, learn how to get top-notch playback performance when loading data from custom storage, and more."}],"url":"\/documentation\/wwdcnotes\/wwdc22-110379-create-a-more-responsive-media-app"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10132-Meet-asyncawait-in-Swift":{"title":"Meet async\/await in Swift","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10132-Meet-asyncawait-in-Swift","abstract":[{"text":"Swift now supports asynchronous functions — a pattern commonly known as async\/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc21-10132-meet-asyncawait-in-swift","kind":"article","role":"sampleCode","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10133-Protect-mutable-state-with-Swift-actors":{"role":"sampleCode","kind":"article","title":"Protect mutable state with Swift actors","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10133-Protect-mutable-state-with-Swift-actors","abstract":[{"type":"text","text":"Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10133-protect-mutable-state-with-swift-actors"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC20-10048-Build-complications-in-SwiftUI":{"role":"sampleCode","title":"Build complications in SwiftUI","abstract":[{"text":"Spice up your graphic complications on Apple Watch using SwiftUI. We’ll teach you how to use custom SwiftUI views in complications on watch faces like Meridian and Infograph, look at some best practices when creating your complications, and show you how to preview your work in Xcode 12.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc20-10048-build-complications-in-swiftui","type":"topic","kind":"article","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC20-10048-Build-complications-in-SwiftUI"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC21-10134-Explore-structured-concurrency-in-Swift":{"role":"sampleCode","kind":"article","title":"Explore structured concurrency in Swift","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC21-10134-Explore-structured-concurrency-in-Swift","abstract":[{"type":"text","text":"When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We’ll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We’ll also provide guidance on when you may want to use unstructured tasks."}],"url":"\/documentation\/wwdcnotes\/wwdc21-10134-explore-structured-concurrency-in-swift"},"doc://WWDCNotes/documentation/WWDCNotes/zntfdr":{"kind":"article","type":"topic","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/zntfdr","images":[{"type":"card","identifier":"zntfdr.jpeg"},{"type":"icon","identifier":"zntfdr.jpeg"}],"title":"Federico Zanetello (332 notes)","url":"\/documentation\/wwdcnotes\/zntfdr","role":"sampleCode","abstract":[{"type":"text","text":"Software engineer with a strong passion for well-written code, thought-out composable architectures, automation, tests, and more."}]}}}