{"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10180-Discover-streamlined-location-updates"},"hierarchy":{"paths":[["doc:\/\/WWDCNotes\/documentation\/WWDCNotes","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Move into the future with Core Location! Meet the CLLocationUpdate class, designed for modern Swift concurrency, and learn how it simplifies getting location updates. We’ll show you how this class works with your apps when they run in the foreground or background and share some best practices.","type":"text"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"Watch Video (15 min)","identifier":"https:\/\/developer.apple.com\/wwdc23\/10180","isActive":true}},"variants":[{"paths":["\/documentation\/wwdcnotes\/wwdc23-10180-discover-streamlined-location-updates"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"WWDC Notes"}],"title":"Discover streamlined location updates","role":"sampleCode","roleHeading":"WWDC23"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Intro","text":"Intro"},{"inlineContent":[{"type":"text","text":"There is a new Swift native API, with out of box support for modern swift concurrency to get location updates:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for try await update in CLLocationUpdate.liveUpdates() {","    print(\"My current location : \\(update.location)\")","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CLLocationUpdate"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Getting updates"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updates in the background","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Automatic pause \/ resume"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Process lifecycle"}]}]}]},{"level":1,"type":"heading","anchor":"CLLocationUpdate","text":"CLLocationUpdate"},{"inlineContent":[{"text":"There is a new class CLLocationUpdate, which has a static function liveUpdates, that returns an AsyncSequence called Updates. Which can directly be iterated using for\/try\/await, to yield an element of type CLLocationUpdate, that contains a location of type CLLocation, and a boolean flag isStationary for managing automatic, pause and resume. liveUpdates also consumes an optional argument of LiveConfiguration enum type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"WWDC23-10180-location1"}],"type":"paragraph"},{"level":1,"type":"heading","anchor":"Getting-updates","text":"Getting updates"},{"inlineContent":[{"text":"The Apple engineer will do some code walkthrough building a basic app that starts location updates from the Foreground.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First we import CoreLocation."}]}]},{"content":[{"inlineContent":[{"text":"Then call the static factory function liveUpdates provided by the CLLocationUpdate class to get the Updates AsyncSequence. Which can directly be iterated using for\/try\/await to get a CLLocationUpdate in the closure.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And then get the location by accessing its location property."}]}]}]},{"inlineContent":[{"type":"text","text":"At this point our updates have started. How to stop it?"},{"type":"text","text":" "},{"type":"text","text":"We break out of the for loop when this isStationary is reported to be true, automatically stopping the updates."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Getting Updates","import CoreLocation","","let updates = CLLocationUpdate.liveUpdates()","","for try await update in updates {","\tprint (\"my location is \\(update.location)\")","\t","\t\/\/ To stop updates break out of the for loop","\tif update.isStationary {","\t\tbreak","\t}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"CLLocationUpdate API is returning a AsyncSequence."}]},{"type":"paragraph","inlineContent":[{"text":"All the powerful things which an AsyncSequence can do like finding, selecting, and excluding elements can also be performed on this updates sequence.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here, under the hood updates are started and the location of each element is checked for speed. As soon as an update whose speed is more than 200 is found, that first element will be returned, completing the operation. Updates will automatically stop once the first match is found.","type":"text"}]},{"type":"codeListing","code":["\/\/ Getting Updates","import CoreLocation","","let updates = CLLocationUpdate.liveUpdates()","","let update = try await updates.first(where: {($0.location?.speed ?? 0) > 200.0})","","print(\"speed is : \\(update?.location?.speed)\")","\/\/ Be careful - execution will get stuck until a match is found"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The speed is too fast in the example? This is 200 meter per second, so roughly around 447 miles per hour.","type":"text"},{"text":" ","type":"text"},{"text":"Need to be careful while using these filters because execution will get stuck until a match is found…","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Back to the sample code from the previous slide. We are getting updates configured automatically with a default config.","type":"text"}]},{"type":"codeListing","code":["\tlet updates = CLLocationUpdate.liveUpdates()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The liveUpdates API can take an explicit configuration. This configuration is a new enum type."}]},{"type":"codeListing","code":["\tlet updates = CLLocationUpdate.liveUpdates(.automotiveNavigation)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The members of this enum type:","type":"text"}]},{"type":"codeListing","code":["\/\/ LiveConfiguration possible values","","public enum LiveConfiguration {","\t","\tcase default","\tcase automotiveNavigation","\tcase otherNavigation","\tcase fitness","\tcase airborne","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If the app is already using a particular CLActivityType with existing location updates API, then we can choose a corresponding LiveConfiguration member to have the same location experience while adopting the new API. But if we don’t have the need for a specific activityType, then we can start the updates either with default configuration or without specifying any configuration at all.","type":"text"},{"text":" ","type":"text"},{"text":"So what does this “updates” AsyncSequence yield?","type":"text"},{"text":" ","type":"text"},{"text":"Iterating on it, it gives an object, which is of type ","type":"text"},{"type":"codeVoice","code":"CLLocationUpdate"},{"text":". It contains an optional location of type CLLocation. If no location is available, we get an update with location marked as nil. It also contains a boolean property isStationary through which we can manage automatic pause \/ resume of location updates.","type":"text"}]},{"type":"codeListing","code":["public struct CLLocationUpdate : Sendable {","\tpublic let location : CLLocation? \/\/ nil if no location is available","\tpublic let isStationary : Bool \/\/ true if device becomes stationary","}"],"syntax":"swift"},{"anchor":"Updates-in-the-background","type":"heading","level":1,"text":"Updates in the background"},{"type":"paragraph","inlineContent":[{"text":"How to get updates when the app is running in the background?","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"LiveActivity is the best way to enable background location updates.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10180-location2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As long as the LiveActivity remains active, the app can receive updates without any other additional setup."}]},{"type":"paragraph","inlineContent":[{"text":"No problem if the app doesn’t have a LiveActivity yet. Instead we use CLBackgroundActivitySession.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10180-location3","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"when an app authorized as ‘While Using’ gets updates in the background we get this blue background location indicator."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10180-location4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"CLBackgroundActivitySession uses the same indicator to provide background location capability to the app."}]},{"type":"paragraph","inlineContent":[{"text":"It does so by maintaining the visibility for user regarding location services being used in the background. And since the visibility is maintained, it keeps the app effectively in-use letting it access locations even from the background. CLBackgroundActivitySession supports the app’s authorization as a whole. So it will enable the app not only to receive updates while in the background, but also to monitor for events using CLMonitor.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"BackgroundActivitySession has no dependency on Updates being started. Just creating the session displays the indicator when the app is in the background, letting it receive updates and events as needed."}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Uses background location indicator"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Maintains app visibility"}]}]},{"content":[{"inlineContent":[{"text":"Keeps app in-use","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Works with:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"CLLocationUpdate","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"CLMonitor","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"CLocationUpdate doesn’t need to be started","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"In order to use CLBackgroundActivitySession, we need to instantiate it and hold it because object deallocation will automatically invalidate the session potentially ending the app’s access to background location. The app still needs to have location in its UIBackgroundModes array, in order for BackgroundActivitySession to work effectively. If we don’t have an outstanding session, then we must start the new session from the foreground, but we can only rejoin an existing one from the the background.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Quick code walk through to see how to use backgroundActivitySession.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before starting the updates, we should instantiate a CLBackgroundActivitySession object to start a new session. Note, we are assigning the session to self.backgroundActivity, which is a property and not to a local variable. This is important because if we used a local variable, then when it goes out of scope, the object it holds would be deallocated, invalidating the session and potentially ending the app’s access to location."}]},{"type":"codeListing","code":["\/\/ CLBackgroundActivitySession in action","import CoreLocation","","self.backgroundActivity = CLBackgroundActivitySession()","","let updates = CLLocationUpdate.liveUpdates()","","for try await update in updates {","\t...","}","\/\/ local variable can go out of scope, invalidating the session","","\/\/ to end the session","self.backgroudActivity.invalidate ()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when we want to end our session, we can do that by sending the invalidate message or by letting the object be destroyed. So that’s how the app can get updates in the background, either through LiveActivity or through CLBackgroundActivitySession."}]},{"anchor":"Automatic-pause--resume","type":"heading","level":1,"text":"Automatic pause \/ resume"},{"type":"paragraph","inlineContent":[{"text":"How this new API is contributing to battery life by automatically pausing and resuming the updates.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Normally the app is receiving updates while the user is moving, multiple times in a day. But if the device is become stationary, for example, when a user leave their device on the desk, in such a situation the app would get the same locations over and over! We can be power efficient here by pausing the updates. This off loads the app as well, by not giving it redundant locations to process. So once the device is in stationary state for a sufficient amount of time, CLLocationUpdate API will recognize this and trigger Automatic Pause. When pause is triggered, an update will be sent with a non-nil location and isStationary flag marked as True."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10180-location5"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Later, when the device becomes non-stationary, updates will automatically resume without any user interaction. With this resuming update, we will send isStationary marked as False, continuing the delivery of updates."}]},{"type":"paragraph","inlineContent":[{"identifier":"WWDC23-10180-location6","type":"image"}]},{"anchor":"Process-lifecycle","type":"heading","level":1,"text":"Process lifecycle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So automatically pausing and resuming the updates while the app is in background does have an impact on its lifecycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app while running in foreground and receiving updates may transition from foreground running to background running and vice versa. But now with this new API, at times the app might transition from the background running state to the suspended state."}]},{"type":"paragraph","inlineContent":[{"text":"This will likely happen when there are no updates to deliver. For example, due to automatic pause, because of a stationary device, or because Location Services is not able to compute a location fix.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"CLLocationUpdate is not going to leave the app in the suspended state. Instead, as soon as updates are available, either because automatic resume kicked in or maybe location is now available, it will unsuspend the app, transitioning it back into the background running state. When the app is resumed from the suspended state, no action is required to continue the updates in background."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10180-location7"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suspended is not the only state. It’s possible that the app can transition all the way into the terminated state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this transition can happen in several ways."}]},{"items":[{"content":[{"inlineContent":[{"text":"First, directly from background running due to app crash, user close or system termination when resources are constrained.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Second, the app can transition into Terminated state even from the suspended state, due to user close or resource constraint."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"WWDC23-10180-location8"}]},{"type":"paragraph","inlineContent":[{"text":"The API can recover the app in most cases, even when it’s terminated and not running at all.","type":"text"},{"text":" ","type":"text"},{"text":"The app will recover as soon as location updates are available and will be relaunched in the background, and this will transition the app from terminated to background running","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But after receiving the launch, there are some steps to perform to make sure the background location session can continue.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Restart the updates by calling "},{"type":"codeVoice","code":"CLLocationUpdate.liveUpdates()"},{"type":"text","text":" and if the app was previously using a background activity session then also need to recreate a "},{"type":"codeVoice","code":"CLBackgroundActivitySession"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is only possible to rejoin an existing CLBackgroundActivitySession from the background, but not start a new one."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The just recreated background activity session object it is not the start of a new session. Just a new session object. Now, since the  app has already started a session before it was terminated, this recreation allowed the app to rejoin that existing session from the background, allowing the app to continue the background location updates."}]},{"type":"paragraph","inlineContent":[{"text":"The app should perform any recreation immediately upon receiving background app launch. Needn to place the recreation of these objects somewhere that will get executed when the app receives a background launch.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For the sample app, Apple placed the recreation in UIApplicationDelegate’s - ","type":"text"},{"code":"didFinishLaunchingWithOptions","type":"codeVoice"},{"text":", which gets called once the app launch has finished.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There also a sample app to download from the Resources section.","type":"text"}]},{"anchor":"Resources","type":"heading","level":2,"text":"Resources"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/adopting_live_updates_in_core_location"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=76&tag2=687030"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/monitoring_location_changes_with_core_location"},{"text":"","type":"text"},{"text":"\n","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10180"}]},{"anchor":"Related-Videos","type":"heading","level":2,"text":"Related Videos"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10146","type":"reference","isActive":true},{"text":"","type":"text"},{"text":"\n","type":"text"},{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10147","type":"reference","isActive":true}]},{"anchor":"Written-By","type":"heading","level":2,"text":"Written By"},{"type":"row","numberOfColumns":5,"columns":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"multitudes","type":"image"}]}],"size":1},{"content":[{"level":3,"type":"heading","text":"laurent b","anchor":"laurent-b"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","overridingTitleInlineContent":[{"text":"Contributed Notes","type":"text"}],"type":"reference","overridingTitle":"Contributed Notes"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/multitudes","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/laurentbrusa.hashnode.dev\/","type":"reference"},{"text":" ","type":"text"},{"text":"|","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/x.com\/wrmultitudes","type":"reference"}]}],"size":4}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Missing anything? Corrections? "},{"type":"reference","isActive":true,"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing"}]},{"anchor":"Related-Sessions","type":"heading","level":2,"text":"Related Sessions"},{"items":["doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor"],"type":"links","style":"list"},{"type":"small","inlineContent":[{"inlineContent":[{"text":"Legal Notice","type":"text"}],"type":"strong"}]},{"type":"small","inlineContent":[{"text":"All content copyright © 2012 – 2024 Apple Inc. All rights reserved.","type":"text"},{"text":" ","type":"text"},{"text":"Swift, the Swift logo, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, FaceID, iPhone, iPad, Safari, Apple Vision, Apple Watch, App Store, iPadOS, watchOS, visionOS, tvOS, Mac, and macOS are trademarks of Apple Inc., registered in the U.S. and other countries.","type":"text"},{"text":" ","type":"text"},{"text":"This website is not made by, affiliated with, nor endorsed by Apple.","type":"text"}]}]}],"references":{"WWDC23-10180-location3":{"type":"image","alt":"location updates","variants":[{"url":"\/images\/WWDC23-10180-location3.jpg","traits":["1x","light"]}],"identifier":"WWDC23-10180-location3"},"multitudes.jpeg":{"type":"image","alt":null,"variants":[{"url":"\/images\/multitudes.jpeg","traits":["1x","light"]}],"identifier":"multitudes.jpeg"},"WWDC23-Icon.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDC23-Icon.png","traits":["1x","light"]}],"identifier":"WWDC23-Icon.png"},"WWDC23-10180-location4":{"type":"image","alt":"location updates","variants":[{"url":"\/images\/WWDC23-10180-location4.jpg","traits":["1x","light"]}],"identifier":"WWDC23-10180-location4"},"https://developer.apple.com/documentation/corelocation/adopting_live_updates_in_core_location":{"type":"link","title":"Adopting live updates in Core Location","titleInlineContent":[{"text":"Adopting live updates in Core Location","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/corelocation\/adopting_live_updates_in_core_location","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/adopting_live_updates_in_core_location"},"https://developer.apple.com/documentation/corelocation":{"type":"link","title":"Core Location","titleInlineContent":[{"type":"text","text":"Core Location"}],"url":"https:\/\/developer.apple.com\/documentation\/corelocation","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation"},"https://laurentbrusa.hashnode.dev/":{"type":"link","title":"Blog","titleInlineContent":[{"text":"Blog","type":"text"}],"url":"https:\/\/laurentbrusa.hashnode.dev\/","identifier":"https:\/\/laurentbrusa.hashnode.dev\/"},"https://x.com/wrmultitudes":{"type":"link","title":"X\/Twitter","titleInlineContent":[{"type":"text","text":"X\/Twitter"}],"url":"https:\/\/x.com\/wrmultitudes","identifier":"https:\/\/x.com\/wrmultitudes"},"WWDC23-10180-location5":{"type":"image","alt":"location updates","variants":[{"url":"\/images\/WWDC23-10180-location5.jpg","traits":["1x","light"]}],"identifier":"WWDC23-10180-location5"},"https://github.com/multitudes":{"type":"link","title":"GitHub","titleInlineContent":[{"type":"text","text":"GitHub"}],"url":"https:\/\/github.com\/multitudes","identifier":"https:\/\/github.com\/multitudes"},"WWDC23-10180-location8":{"type":"image","alt":"location updates","variants":[{"url":"\/images\/WWDC23-10180-location8.jpg","traits":["1x","light"]}],"identifier":"WWDC23-10180-location8"},"WWDCNotes.png":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDCNotes.png","traits":["1x","light"]}],"identifier":"WWDCNotes.png"},"doc://WWDCNotes/documentation/WWDCNotes/multitudes":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/multitudes","role":"sampleCode","kind":"article","type":"topic","title":"laurent b (33 notes)","url":"\/documentation\/wwdcnotes\/multitudes","abstract":[{"type":"text","text":"student at 42Berlin 🐬 | 🍎 Swift(UI) app dev  | speciality coffee ☕️ & cycling 🚴🏻‍♂️"}],"images":[{"type":"card","identifier":"multitudes.jpeg"},{"type":"icon","identifier":"multitudes.jpeg"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10146-Meet-Core-Location-for-spatial-computing":{"kind":"article","abstract":[{"text":"Discover how Core Location helps your app find its place in the world — literally. We’ll share how you can build a spatial computing app that uses a person’s location while respecting their privacy. You’ll also learn how your app can request location access and how Core Location adapts requests from compatible iPad and iPhone apps.","type":"text"}],"url":"\/documentation\/wwdcnotes\/wwdc23-10146-meet-core-location-for-spatial-computing","title":"Meet Core Location for spatial computing","role":"sampleCode","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10146-Meet-Core-Location-for-spatial-computing","type":"topic"},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23-10147-Meet-Core-Location-Monitor":{"role":"sampleCode","type":"topic","kind":"article","title":"Meet Core Location Monitor","url":"\/documentation\/wwdcnotes\/wwdc23-10147-meet-core-location-monitor","identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23-10147-Meet-Core-Location-Monitor","abstract":[{"text":"Discover how Core Location Monitor can help you better understand location and beacon events in your app. Learn how to use Core Location Conditions to describe and track the state of events in your app, and find out how you can better respond to transitions in your apps through Swift semantics and improved reliability.","type":"text"}]},"WWDC23-10180-location2":{"type":"image","alt":"location updates","variants":[{"url":"\/images\/WWDC23-10180-location2.jpg","traits":["1x","light"]}],"identifier":"WWDC23-10180-location2"},"WWDC23.jpeg":{"type":"image","alt":null,"variants":[{"url":"\/images\/WWDC23.jpeg","traits":["1x","light"]}],"identifier":"WWDC23.jpeg"},"https://developer.apple.com/documentation/corelocation/monitoring_location_changes_with_core_location":{"type":"link","title":"Monitoring location changes with Core Location","titleInlineContent":[{"type":"text","text":"Monitoring location changes with Core Location"}],"url":"https:\/\/developer.apple.com\/documentation\/corelocation\/monitoring_location_changes_with_core_location","identifier":"https:\/\/developer.apple.com\/documentation\/corelocation\/monitoring_location_changes_with_core_location"},"https://developer.apple.com/wwdc23/10180":{"type":"download","checksum":null,"url":"https:\/\/developer.apple.com\/wwdc23\/10180","identifier":"https:\/\/developer.apple.com\/wwdc23\/10180"},"multitudes":{"identifier":"multitudes","alt":"Profile image of laurent b","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/multitudes.jpeg"}]},"https://wwdcnotes.com/documentation/wwdcnotes/contributing":{"identifier":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","type":"link","url":"https:\/\/wwdcnotes.com\/documentation\/wwdcnotes\/contributing","title":"Contributions are welcome!","titleInlineContent":[{"text":"Contributions are welcome!","type":"text"}]},"https://developer.apple.com/forums/tags/wwdc2023-10180":{"identifier":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10180","type":"link","url":"https:\/\/developer.apple.com\/forums\/tags\/wwdc2023-10180","title":"Search the forums for tag wwdc2023-10180","titleInlineContent":[{"type":"text","text":"Search the forums for tag wwdc2023-10180"}]},"https://developer.apple.com/forums/create/question?&tag1=76&tag2=687030":{"identifier":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=76&tag2=687030","type":"link","url":"https:\/\/developer.apple.com\/forums\/create\/question?&tag1=76&tag2=687030","title":"Have a question? Ask with tag wwdc2023-10180","titleInlineContent":[{"text":"Have a question? Ask with tag wwdc2023-10180","type":"text"}]},"doc://WWDCNotes/documentation/WWDCNotes/WWDC23":{"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes\/WWDC23","role":"collectionGroup","kind":"article","type":"topic","title":"WWDC23","url":"\/documentation\/wwdcnotes\/wwdc23","abstract":[{"type":"text","text":"Xcode 15, Swift 5.9, iOS 17, macOS 14 (Sonoma), tvOS 17, visionOS 1, watchOS 10."},{"type":"text","text":" "},{"type":"text","text":"New APIs: "},{"type":"codeVoice","code":"SwiftData"},{"type":"text","text":", "},{"type":"codeVoice","code":"Observation"},{"type":"text","text":", "},{"type":"codeVoice","code":"StoreKit"},{"type":"text","text":" views, and more."}],"images":[{"type":"icon","identifier":"WWDC23-Icon.png"},{"type":"card","identifier":"WWDC23.jpeg"}]},"https://developer.apple.com/videos/play/wwdc2023/10146":{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10146","type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10146","title":"Meet Core Location for spatial computing - WWDC23","titleInlineContent":[{"type":"text","text":"Meet Core Location for spatial computing - WWDC23"}]},"doc://WWDCNotes/documentation/WWDCNotes":{"abstract":[{"type":"text","text":"Session notes shared by the community for the community."}],"identifier":"doc:\/\/WWDCNotes\/documentation\/WWDCNotes","kind":"symbol","title":"WWDC Notes","images":[{"type":"icon","identifier":"WWDCNotes.png"}],"url":"\/documentation\/wwdcnotes","type":"topic","role":"collection"},"https://developer.apple.com/videos/play/wwdc2023/10147":{"identifier":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10147","type":"link","url":"https:\/\/developer.apple.com\/videos\/play\/wwdc2023\/10147","title":"Meet Core Location Monitor - WWDC23","titleInlineContent":[{"text":"Meet Core Location Monitor - WWDC23","type":"text"}]},"WWDC23-10180-location1":{"identifier":"WWDC23-10180-location1","alt":"location updates","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10180-location1.jpg"}]},"WWDC23-10180-location6":{"identifier":"WWDC23-10180-location6","alt":"location updates","type":"image","variants":[{"url":"\/images\/WWDC23-10180-location6.jpg","traits":["1x","light"]}]},"WWDC23-10180-location7":{"identifier":"WWDC23-10180-location7","alt":"location updates","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/WWDC23-10180-location7.jpg"}]}}}